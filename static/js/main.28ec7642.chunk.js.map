{"version":3,"sources":["util.js","constants/actionStatuses.js","components/common/spinner.js","constants/actionTypes.js","stores/persistentStorage.js","stores/customerStore.js","config.js","constants/configOptions.js","dispatcher/appDispatcher.js","stores/callStore.js","actions/callActions.js","stores/orderStore.js","actions/salesActions.js","components/common/searchResultsInfo.js","constants/salesEntities.js","initialisationWatcher.js","actions/userActions.js","stores/actionStatusStore.js","stores/productStore.js","constants/auditTypes.js","constants/searchTypes.js","components/common/lazyImage.js","stores/userStore.js","actions/commonActions.js","actions/auditActions.js","stores/auditStore.js","constants/searchFilters.js","stores/auditAnswerStore.js","constants/questionTypes.js","stores/libraryStore.js","components/common/progressBar.js","components/common/progressModal.js","components/common/promptModal.js","components/sales/categorySelection.js","components/common/imagesModal.js","actions/libraryActions.js","constants/orderStatuses.js","constants/submissionEntities.js","components/calls/customerRequestList.js","components/common/signatureModal.js","lib/react-another-signature-pad/point.js","components/library/categoryList.js","components/sales/customerSelectList.js","lib/react-another-signature-pad/index.js","components/login/loginForm.js","components/calls/callList.js","components/calls/customerInfoPanelList.js","components/calls/customerDetailsFormPanel.js","components/calls/customerLocationsFormPanel.js","components/calls/customerContactsFormPanel.js","components/calls/auditList.js","components/calls/adminAuditList.js","constants/questionAnswerActions.js","components/calls/questionGroup.js","components/calls/question.js","constants/questionAnswers.js","lib/react-another-signature-pad/bezier.js","lib/react-another-signature-pad/util.js","components/calls/signatureGroup.js","components/library/fileList.js","components/calls/commentForm.js","components/calls/commentList.js","components/sales/orderList.js","components/sales/orderForm.js","components/sales/orderInfoForm.js","components/sales/productSelectList.js","components/sales/pastOrderList.js","components/sales/pastOrderInfo.js","components/sales/pastOrderItems.js","components/sales/productList.js","components/sales/customerList.js","components/user/userInfoList.js","components/user/appInfoList.js","lib/canvasResize/jquery.exif.js","lib/canvasResize/jquery.canvasResize.js","actions/initialisationActions.js","components/splash.js","components/common/header.js","components/homePage.js","components/notFoundPage.js","components/login/loginPage.js","components/login/passwordResetPage.js","components/calls/callsPage.js","components/calls/customerPage.js","components/calls/customerInfoPage.js","components/calls/customerDetailsEditPage.js","components/calls/customerLocationsEditPage.js","components/calls/customerContactsEditPage.js","components/calls/auditsPage.js","components/calls/adminAuditsPage.js","components/calls/auditPage.js","components/calls/filesPage.js","components/calls/commentsPage.js","components/sales/salesPage.js","components/sales/ordersPage.js","components/sales/orderPage.js","components/sales/pastOrdersPage.js","components/sales/pastOrderPage.js","components/sales/productsPage.js","components/sales/customersPage.js","components/library/libraryPage.js","components/user/userInfoPage.js","components/refreshPage.js","components/app.js","index.js"],"names":["watchID","$","window","Dispatcher","require","Status","EventEmitter","assign","UserStore","toastr","Base64","_keyStr","encode","input","chr1","chr2","chr3","enc1","enc2","enc3","enc4","output","i","_utf8Encode","length","charCodeAt","isNaN","charAt","decode","replace","indexOf","String","fromCharCode","_utf8Decode","string","utftext","n","c","c2","c3","baseUrl","location","origin","pathname","split","appUtil","prototype","addChangeListener","callback","this","on","removeChangeListener","removeListener","emitChange","emit","assetsUrl","apiUrl","customerLibraryCategoryID","globalLibraryCategoryID","saveAppData","appData","localStorage","app","JSON","stringify","getUnixTime","date","Date","Math","floor","getTime","getUnixTimeStartOfDay","setHours","setMinutes","setSeconds","setMilliseconds","getUnixTimeInMs","isBeforeToday","unixTime","base64Encode","getHTTPAuthStringForCredentials","username","password","getHTTPAuthString","getUsername","getPassword","getURLAuthString","initApp","options","timeOut","extendedTimeOut","parse","isLoggedIn","hasUser","getUserID","getID","getCompanyCurrency","isPriceListsCheckNeeded","areCompanyPriceListsEnabled","isProductRulesCheckNeeded","doCompanyProductRulesExist","getB2BCustomerID","refreshBackgroundImage","companyBackgroundBase64","getCompanyBackground","document","getElementById","style","backgroundImage","screenData","title","setScreenTitle","lat","lng","refreshGeolocation","navigator","geolocation","watchPosition","position","clearWatch","coords","latitude","longitude","getLocalStorageUsage","getDistanceBetweenLatLonPointsInKm","lat1","lon1","lat2","lon2","dLat","deg2rad","dLon","a","sin","cos","d","atan2","sqrt","round","deg","PI","uuidv4","r","random","toString","formatInteger","rawValue","blnEditing","blnDefaultEmpty","value","displayValue","parsedValue","parseInt","formatDecimal","parseFloat","formatCurrency","currencyFormattedValue","toFixed","formatCurrencyNumber","restrictNumber","number","displayNumber","min","max","blnMultipleOfMin","remainder","fixNumber","hasPrefix","prefix","substr","isLocalID","id","sanitiseForSecureURL","url","postCompletedActionDispatchCallbacks","setPostCompletedActionDispatchCallback","action","context","args","clearPostCompletedActionDispatchCallback","executePostCompletedActionDispatchCallback","apply","currentQueueAction","setCurrentQueueAction","queueActionType","clearCurrentQueueAction","currentQueuePercentageComplete","setCurrentPercentageComplete","queuePercentageComplete","clearCurrentPercentageComplete","dispatch","actionPayload","queueActionStatus","PENDING","actionStatus","actionType","executeActionQueue","queue","queueAction","returnDeferred","Deferred","sumCompletionWeighting","resetTracking","addArgs","blnAllSuccessful","blnAllUnsuccessful","executeQueueItem","queueItem","map","arg","fail","data","partial","onFail","stopOnFail","done","onDone","results","key","always","completionWeighting","shift","queueStatus","OK","ERROR","PARTIAL","resolve","module","exports","keyMirror","Spinner","isVisible","className","INITIALISE","USER_LOGIN","USER_LOGOUT","USER_DELETE_DATA","USER_PASSWORD_RESET_REQUEST","USER_REFRESH","LIBRARY_REFRESH","CALLS_REFRESH","CUSTOMERS_SEARCH_LOCAL","CUSTOMERS_SEARCH_SERVER","CUSTOMER_REQUEST","CUSTOMER_REFRESH","CUSTOMER_ENTER","CUSTOMER_EXIT","CUSTOMER_VISITS_SUBMIT","CUSTOMER_ADD_COMMENT","CUSTOMER_DETAILS_EDIT_SAVE","CUSTOMER_DETAILS_EDIT_COMPLETE","CUSTOMER_DETAILS_EDIT_CANCEL","CUSTOMER_LOCATIONS_EDIT_ADD","CUSTOMER_LOCATIONS_EDIT_SAVE","CUSTOMER_LOCATIONS_EDIT_COMPLETE","CUSTOMER_LOCATIONS_EDIT_CANCEL","CUSTOMER_CONTACTS_EDIT_ADD","CUSTOMER_CONTACTS_EDIT_SAVE","CUSTOMER_CONTACTS_EDIT_COMPLETE","CUSTOMER_CONTACTS_EDIT_CANCEL","CUSTOMER_EDIT_CANCEL","CUSTOMER_EDITS_SUBMIT","ADMIN_AUDITS_REFRESH","AUDITS_REFRESH","AUDIT_ANSWER_SAVE","CALL_AUDITS_RUN_REPORT","AUDITS_SUBMIT","SALES_REFRESH","ORDER_SAVE","ORDER_CANCEL","ORDERS_SUBMIT","PRODUCTS_SEARCH_LOCAL","PRODUCTS_SEARCH_SERVER","APP_DATA_SUBMIT","ONLINE_SALES_REFRESH","CUSTOMERS_SALES_REFRESH","CALLS_RELATED_REFRESH","PAST_ORDERS_CUSTOMERS_REFRESH","ALL_REFRESH","AUDITS_RELATED_SUBMIT","ORDERS_RELATED_SUBMIT","persistentStorage","init","localforage","config","name","size","storeName","version","get","Array","isArray","Promise","all","itemKey","getItem","then","values","itemValue","set","pair","setItem","INDEXEDDB","WEBSQL","LOCALSTORAGE","ready","driver","defineDriver","setDriver","Actions","SalesEntities","SubmissionEntities","SearchTypes","_","util","_customers","_customersMeta","customers","fields","fieldsRefreshed","locationFields","locationFieldsRefreshed","contactFields","contactFieldsRefreshed","_customerEdits","_customerLastEdit","_customerLastCreated","_customerVisits","_status","_localSearchResults","_localSearchTerm","_localSearchPage","_localSearchPageSize","_localSearchTotal","_localSearchTotalPages","_serverSearchResults","_serverSearchTerm","_serverSearchPage","_serverSearchPageSize","_serverSearchTotal","_serverSearchTotalPages","_requestMade","CustomerStore","getStatus","returnStatus","default","getCustomers","arrCustomers","customerID","push","getCustomer","getEditedCustomer","returnCustomer","getNewID","getCustomerDetailsEdits","locations","getCustomerLocationsEdits","locID","contacts","getCustomerContactsEdits","conID","getActiveCustomersCount","filter","customer","is_active","getCustomerIDs","arrCustomerIDs","getLastRefreshForCustomer","refreshed","getFields","getLastRefreshForFields","getLocationFields","getLastRefreshForLocationFields","getContactFields","getLastRefreshForContactFields","getCustomerLocation","locationID","returnLocation","find","getCustomerEdits","isEmpty","details","blnHaveEditsForThisCustomer","detailsEdits","field","blnNewCustomer","locationsEdits","existingLocationIDs","existingLocation","blnHaveEditsForThisCustomerLocation","j","includes","getCustomerLocationLastEdited","setCustomerLocationLastEdited","getFreshLocationObject","contactsEdits","existingContactIDs","existingContact","blnHaveEditsForThisCustomerContact","contactID","getCustomerContactLastEdited","contact","setCustomerContactLastEdited","getFreshContactObject","getCustomerLastCreated","setCustomerLastCreated","getValidCustomerVisits","arrVisits","visitDate","visit","end_time","isCustomerVisited","strEntryDate","getSearchResults","searchType","SERVER","getSearchTerm","getSearchPage","getSearchPageSize","getSearchTotal","getSearchTotalPages","wasRequestSuccessful","resetRequestSuccessful","purgeDataExceptForIds","arrIDs","undefined","saveCustomer","customerData","saveCustomerFields","customerFieldData","findIndex","label","type","existingFieldIndex","updatedFieldData","order","sortBy","exportData","register","customersMeta","_customersMetaLS","console","log","customerEdits","customerVisits","retainCustomerIDs","keysIn","callsData","blnChangeToEmit","entity","CUSTOMER","batchStatus","batchFieldData","batchCustomers","entityStatus","customerDetailsEditData","freshLocationID","blnEditsToLocations","customerLocationsEditData","locationEdit","actualEdit","blnEditsToLocation","locationOrig","lastEditedLocationID","freshContactID","blnEditsToContacts","customerContactsEditData","contactEdit","blnEditsToContact","contactOrig","lastEditedContactID","CUSTOMER_DETAILS","newCustomerID","CUSTOMER_LOCATIONS","submittedIDs","CUSTOMER_CONTACTS","searchTerm","searchPage","searchPageSize","arrSearchTerms","forEach","term","searchToken","trim","toLowerCase","allSearchResults","uniqueCode","unique_code","searchPageStart","slice","resultsData","total","totalPages","entryDate","entryTimestamp","exitTimestamp","customerVisitData","vDate","vCustomerID","customer_id","blnDateEmpty","Option","appConfig","appVersion","defaultActiveProfile","PROFILE_WEB","activeProfile","profiles","setProfile","profileOption","configOption","PROFILE_DEFAULT","UI_BUTTON_CALL_LIST","UI_BUTTON_LIBRARY","UI_BUTTON_CUSTOMERS","UI_BUTTON_CUSTOMER_FILES","UI_BUTTON_CUSTOMER_COMMENTS","UI_BUTTON_CHANGE_CUSTOMER","FUNC_ONLINE_PRODUCTS","FUNC_ONLINE_CUSTOMERS","FUNC_CUSTOMER_AUTOSELECTION","FUNC_EDIT_ORDER_PRICING","PROFILE_B2B","PROFILE_NATIVE","UI_BUTTON_REQUEST_CUSTOMER","FUNC_ORDER_AUTO_SUBMISSION","AuditTypes","_calls","_callsMeta","_currentCallDate","CallStore","getAllCalls","has","sample","call","completed","submitted","getCallById","getLastRefresh","getCallCustomerIDs","purgeData","purgeDataForIds","l","calls","callsMeta","currentCallDate","callDate","callAuditsCompleted","auditsType","CALL","failedIDs","UserActions","AuditActions","SalesActions","customerSearchAJAXRequest","CallActions","doAfterAccessCheck","checkAccess","refreshCallsAndRelatedData","blnRefreshAdminAudits","refreshQueue","refreshCalls","ajax","headers","success","error","complete","dataType","reject","status","indexBy","stores","arrCallCustomerIDs","callCustomerIDs","searchCustomersOnServer","abort","strCSVSearchTerms","pageSize","page","filters","currentPage","totalCount","records","requestCustomer","info","submitAuditsAndRelatedData","arrCallAudits","arrAdminAudits","arrCustomerVisits","submitQueue","submitAudits","blnCallAudits","blnAdminAudits","blnAdmin","arrAudits","arrNextAudits","ADMIN","arrSubmittedIDs","arrFailedIDs","submitAudit","audit","entry","exit","audit_answers","call_date","audit_id","audit_idx","refreshCustomer","blnRefreshFields","arrAddToOrderIDs","addToOrderIDs","fieldsData","addCustomerComment","comment","saveCustomerDetailsEdit","completeCustomerDetailsEdit","cancelCustomerDetailsEdit","addCustomerLocation","saveCustomerLocationsEdit","lastEditedID","completeCustomerLocationsEdit","cancelCustomerLocationsEdit","addCustomerContact","saveCustomerContactsEdit","completeCustomerContactsEdit","cancelCustomerContactsEdit","cancelCustomerEdit","submitCustomerEdits","blnRefreshCustomer","blnAdd","submitEntity","blnPartial","newRemoteCustomerID","bind","submitCustomerDetailsEdits","submitCustomerLocationsEdits","arrLocationIDs","submitLocationEdit","submitCustomerContactsEdits","arrContactIDs","submitContactEdit","OrderStatuses","_orders","_pastOrders","_pastOrdersMeta","retryIDs","_paymentTerms","_taxClasses","_carriers","_currencies","_tempAllOrderIDs","OrderStore","getFreshOrderObject","providedOrderID","companyCurrency","defPaymentTerm","getDefaultPaymentTerm","defPaymentTermID","defTaxClass","getDefaultTaxClass","defTaxClassID","defCarrier","getDefaultCarrier","defCarrierID","uniqueOrderID","symbol","INCOMPLETE","getOrders","arrOrders","orderID","getOrder","getPastOrders","getPastOrder","getPastOrdersLastRefresh","getPastOrdersRefreshRetryIDs","calculateTotals","orderTaxClass","getTaxClass","tax_class_id","orderTaxPercent","percent","subtotal","tax","items","price","quantity","formattedCurrency","total_display","is_taxable","itemTaxPercent","itemTaxClass","formattedCurrencySubtotal","subtotal_display","adjustment","shipping","formattedCurrencyTax","tax_display","formattedCurrencyTotal","getOrderSubmission","orderSubmission","hash","currency_id","payment_terms_id","carrier_id","po","expected_date","review","adjustment_amount","adjustment_manual_amount","shipping_amount","billing_location_id","shipping_location_id","arrOrderSubmissionItems","orderItem","product_id","price_orig","order_items","getOrderSubmissions","specifiedIDs","arrSubmit","PLACED","getOrderCustomerIDs","blnIncludePastOrderCustomers","getPaymentTerms","arrPT","PTID","getPaymentTerm","paymentTermID","getTaxClasses","arrTC","TCID","taxClassID","getCarriers","arrC","CID","getCarrier","carrierID","getCurrencies","getCurrency","currencyID","getCurrencyOrDefault","orders","pastOrders","pastOrdersMeta","paymentTerms","taxClasses","carriers","currencies","orderData","itemsEdited","blnAddToOrders","objCurrency","addToOrderID","default_currency_id","blnAddCustomerToThisOrder","customer_name","default_lead_time","payment_term","currency_display_name","currency_display_symbol","ORDER","batchOrders","allOrderIDs","newLastRefreshTimestamp","failedOrderIDs","oid","PAYMENT_TERM","arrPaymentTerms","pt","TAX_CLASS","arrTaxClasses","tc","CARRIER","arrCarriers","CURRENCY","arrCurrencies","code","option","productSearchAJAXRequest","SalesUtil","productBatch","productID","product","files","variant_options","vendors","inventory","extensions","saveOrder","cancelOrder","submitOrdersAndRelatedData","arrOrderSubmissions","submitOrders","submitOrder","enterCustomer","exitCustomer","warning","submitCustomerVisits","arrCustomerData","searchCustomers","searchCustomersRemotely","searchCustomersLocally","searchProducts","searchFilters","searchProductsRemotely","searchProductsLocally","blnFeaturedFilter","strRecentFilter","strCatFilter","featured","customerProducts","categories","join","includeDetail","combineCustomers","arrCustomers1","arrCustomers2","customerIDs","union","refreshSalesData","lastProductRefreshTimestamp","retryProductIDs","lastPastOrderRefreshTimestamp","retryPastOrderIDs","refreshSalesDataForOnline","refreshCustomersAndSalesData","refreshPastOrdersAndAssociatedCustomers","refreshProducts","lastRefreshTimestamp","PRODUCT","allProductIDs","uniq","refreshProductIDs","pid","changed","refreshProductsBatched","arrProductIDs","numProducts","failedProductIDs","batchStart","batchEnd","refreshProductBatch","arrProductIDBatch","successes","batchItems","percentageComplete","refreshCategories","CATEGORY","arrCategoryTree","refreshCustomers","numCustomers","refreshPriceLists","PRICE_LIST","refreshPriceListBatch","arrCustomerIDBatch","refreshProductRules","PRODUCT_RULE","refreshProductRuleBatch","refreshPaymentTerms","refreshTaxClasses","refreshCarriers","refreshCurrencies","refreshPastOrders","retryOrderIDs","refreshOrderIDs","refreshPastOrdersSpecified","arrOrderIDs","numOrders","arrPastOrderCustomerIDs","refreshPastOrder","pastOrderCustomerIDs","SearchResultsInfo","firstItem","lastItem","initialisationWatcher","readyPromises","getReady","setReady","promise","resetReady","UserUtil","userData","company","logo","licensing","fullName","first_name","last_name","userInfo","email","is_b2b_user","web_app","permanent","expires","b2b","login","loginInfo","deleteUserData","timeout","jqXHR","loginError","logout","refreshUser","userFieldData","userFieldDataTS","successCallback","successCallbackArgs","successCallbackContext","requestPasswordReset","_actions","_actionsMeta","_percentageComplete","_relativeWeightings","ActionStatusStore","getLastTimestampForAction","modified","getLastTimestampForSuccessfulAction","getPercentageComplete","percentage","getEntityStatuses","entityStatuses","salesEntityBatchPercentage","entityPercentages","SearchFilters","_store","products","productsMeta","categoryTree","priceLists","customerToPriceList","productRules","recentProducts","localSearchResults","localSearchTerm","localSearchPage","localSearchPageSize","localSearchFilters","localSearchTotal","localSearchTotalPages","serverSearchResults","serverSearchTerm","serverSearchPage","serverSearchPageSize","serverSearchFilters","serverSearchTotal","serverSearchTotalPages","_tempStore","ProductStore","getRefreshRetryIDs","getProducts","arrProducts","getProduct","getActiveProductsCount","is_disabled","getCategory","categoryID","getCategoryTree","populateCategoriesFromTree","arrTree","parent_id","children","getSearchFilters","storage","removeItem","catch","err","initWatcher","pl","customer_ids","pr","applicablePriceListProducts","applicableProductExclusions","blnHaveFilters","filterForFeaturedProducts","filterForRecentProducts","filterForCategories","priceListID","RECENT","is_featured","variants","blnCatMatch","sku","SKU","p","calc_price","base_price","LOCAL","LazyImage","props","preloadImage","img","Image","onload","setState","loaded","onerror","src","state","nextProps","visible","placeholderSpinner","placeholderSpinnerStyle","placeholderClassName","placeholderSrc","React","Component","defaultProps","user","userMeta","lastUser","getLoginError","getUser","getName","getFullName","getEmail","getCompanyLogo","app_logo","app_background","default_currency","pricelist_enabled","product_rules_exist","b2b_customer_id","isLastUser","getLastUser","LibraryActions","CommonActions","refreshAll","submitAppData","AuditStore","refreshAdminAudits","arrLimitCustomerIDs","requestDate","adminAuditsCustomersData","limit_to_stores","refreshAudits","arrAuditIDs","arrProcAuditIDs","auditsData","getAudit","auditID","refreshAuditsForCustomers","arrCustomerAuditIDObjs","processedAuditIDs","refreshAuditsForCustomer","objCustomer","auditIDs","difference","isAdmin","prepareCustomerAuditData","cust","store_id","audits","adminAuditIDs","getAdminAuditIDsForCustomer","customerAuditIDObjs","saveAuditAnswer","answer","auditType","auditAnswerData","_audits","_adminAudits","_adminAuditsCustomers","_auditsMeta","_adminAuditsMeta","getAudits","sortByCompulsory","auditsStorage","isAuditValid","meta_data","is_compulsory","getCustomerRestrictionsForAdminAudit","question_groups","questions","purgeMetaDataExceptForIds","auditsMetaStorage","purgeAuditDataExceptForIds","blnCompareIDsAsInts","adminAudits","adminAuditsCustomers","auditsMeta","adminAuditsMeta","newCustomerIDs","newAuditIDSets","custID","newAuditIDs","ALL","Types","_answers","_adminAnswers","_statusAuditType","AuditAnswerStore","getStatusAuditType","getFreshCustomerAuditAnswersObject","call_cycle_row_id","call_cycle_override_id","getAuditAnswersForCustomer","answersStorage","getAuditAnswer","auditIdx","getAuditSubmission","auditAnswer","auditSubmission","questionID","signatures","weight","final_score","score","questionAnswer","answered","questionAnswerSubmission","timestamp","date_of_visit","PRODUCT_FACING","facings","product_facings","product_availability","product_price","YES_NO","yes_no","FREE_TEXT","free_text","MULTIPLE_CHOICE","options_selected","MULTI_SELECT","PHOTO","downloadable_file","image","NUMERIC","numeric","currency","DATE","BARCODE","barcode","SIGNATURE","signature_id","signature_name","signature_comments","signature_file","answers","getAuditSubmissions","allCustomerDataForDateDeleted","allAuditDataForCustomerDeleted","adminAnswers","arrSuccessfulAuditIDs","idPath","_categories","_files","_libraryMeta","LibraryStore","getCategories","getCustomerCategories","getGlobalCategories","getCustomerCategoriesFileCounts","getCategoriesFileCountsForKey","getGlobalCategoriesFileCounts","tree","filterTopCatID","treeCounts","getFileCountsForKey","getFile","fileID","getLastRefreshForKey","sourceTree","destTree","categoriesfileCount","catID","fileCount","assignments","removeFileAssignmentsForKey","index","mergeFileAssignmentsForKey","isObject","libraryCategories","libraryFiles","libraryMeta","metaKey","categoryData","fileData","ProgressBar","colour","animation","height","rest","backgroundColor","width","transition","ProgressModal","display","tabIndex","role","textAlign","isLoading","description","PromptModal","onClick","onYes","onNo","CategorySelection","handleCategoryDeselection","event","preventDefault","onDeselect","currentTarget","dataset","toggleCategorySelection","target","onSelect","renderCategoryTree","cats","cat","blnSelected","selections","data-toggle","href","data-id","data-selected","renderSelectedCategory","isOpen","ImagesModal","updateAvailableImageHeight","availableImageHeight","innerHeight","handleImageChange","dir","prevState","currentImageIndex","images","handleClose","onClose","addEventListener","removeEventListener","data-dismiss","idx","maxHeight","marginTop","marginBottom","image_url","data-dir","aria-hidden","refreshLibrary","customerRefresh","arrRequestCats","parseTree","arrCats","parentID","blnCollectFiles","currCatTreePath","returnTree","localCatTreePath","processed","category_id","treePath","getCategoryFiles","requestCategory","arrAssignedFileIDs","refreshLibraryForCustomers","blnRefreshGlobal","refreshLibraryForCustomer","CustomerRequestList","createClass","getDefaultProps","searchTotal","searchTotalPages","searchResults","componentDidMount","focus","onSearch","handleSearchTermChange","handleSearchPageChange","handleCustomerRequest","onRequest","onFinish","render","placeholder","onChange","autoComplete","SignatureModal","saveSignature","onSave","signature","signatureIsValid","file","handleSignatureChange","isSignatureDataPresent","handleSignatureClear","oldSignaturePresent","clearSignature","handleTextChange","handleCancel","comments","handleFinished","minWidth","maxWidth","mimeType","quality","onEnd","clear","data-field","rows","Point","x","y","time","Object","defineProperty","velocityFrom","start","distanceTo","pow","FileList","CategoryList","filterTopCategoryId","categoryTreeCounts","renderCategoryPanels","catTree","catTreeCounts","panels","assignmentKey","CustomerSelectList","handleCustomerSelection","createCustomerRow","data-name","data-approved","is_approved_for_orders","margin","_createClass","defineProperties","descriptor","enumerable","configurable","writable","Constructor","protoProps","staticProps","_react2","_interopRequireDefault","_point2","_bezier2","_util","obj","__esModule","Signature","_React$Component","instance","TypeError","_classCallCheck","_this","self","ReferenceError","_possibleConstructorReturn","__proto__","getPrototypeOf","msTouchAction","touchAction","clearVal","handleMouseDown","handleMouseMove","handleMouseUp","handleMouseLeave","handleTouchStart","handleTouchMove","handleTouchEnd","strokeBegin","strokeUpdate","strokeEnd","transformData","isDataPresent","createPoint","addPoint","calculateCurveWidths","drawPoint","drawCurve","drawDot","reset","subClass","superClass","create","constructor","setPrototypeOf","_inherits","velocityFilterWeight","throttle","strokeMoveUpdate","dotSize","penColor","blob","canvas","offsetWidth","offsetHeight","ctx","getContext","button","mouseButtonDown","targetTouches","touch","changedTouches","onBegin","clientX","clientY","point","_addPoint","curve","widths","end","canDrawCurve","points","toDataURL","byteString","atob","mimeString","array","Uint8Array","Blob","canvasHasData","rect","getBoundingClientRect","left","top","unshift","calculateCurveControlPoints","c1","startPoint","endPoint","velocity","lastVelocity","newWidth","strokeWidth","lastWidth","moveTo","arc","startWidth","endWidth","widthDelta","drawSteps","beginPath","t","tt","ttt","u","uu","uuu","control1","control2","closePath","fill","fillStyle","clearRect","fillRect","_this2","createElement","ref","onMouseDown","onMouseMove","onMouseUp","onMouseLeave","onTouchStart","onTouchMove","onTouchEnd","LoginForm","differentUserWillBeLoggedIn","autoFocus","disabled","onLogin","onCancel","to","CallList","blnShowDistance","store_name","start_time","marginLeft","was_requested","paddingLeft","CustomerInfoPanelList","customerEditBaseURL","renderField","renderAddress","locationKey","locationTitle","data-parent","address_1","address_2","city","zip","renderContact","contactKey","arrContactTitle","contactTitle","office_phone","cell_phone","fax","renderInfoPanels","customerFields","custProps","keys","CustomerDetailsFormPanel","saveCustomerDetails","createCustomerDetailsField","htmlFor","onComplete","CustomerLocationsFormPanel","_onLocationChange","positionRequestedLocationID","saveCustomerLocations","setCurrentPositionLatLng","requestCurrentPositionLatLng","createCustomerLocationsPanels","locationNumber","createCustomerLocationField","blnExpandPanel","focusItemID","fontSize","CustomerContactsFormPanel","saveCustomerContacts","createCustomerContactsPanels","contactNumber","createCustomerContactField","AuditList","customerId","AdminAuditList","haveAnswers","getNewAnswerIndex","createAuditRow","arr","answerIndex","createAuditsInProgressTable","auditRows","createAuditsTable","DO_NOTHING","HIDE_REMAINING","SHOW_DEPENDENT","SHOW_DEPENDENT_HIDE_REMAINING_GROUP","SHOW_DEPENDENT_HIDE_REMAINING","Question","QuestionGroup","group","question","Ans","DatePicker","moment","getInitialState","isSignatureModalVisible","handleQuestionChange","questionAnswerData","weighting","correct","handleYesNoClick","closest","attr","YES","correct_answer","toUpperCase","NO","handleProductAvailabilityClick","productAvailable","AVAILABLE","productNotAvailable","NOT_AVAILABLE","priceEntered","facingsEntered","handleProductPriceChange","formattedCurrencyAnswer","displayAnswer","productSelection","handleProductFacingsChange","handleFreeTextChange","handleBarcodeChange","handleNumericChange","handleCurrencyChange","handleSelectionChange","optionsSelected","selected","m","correct_answer_array","text","textSelected","result","k","handleDateChange","format","handleFileChange","thisComponent","canvasResize","crop","strBase64EncodedImageData","handleFileRemove","signatureData","isComplete","Boolean","handleSignatureOpen","handleSignatureClose","signatureIsComplete","renderInputs","inputs","radioName","radioID","currencySymbol","facingsInput","step","data-product-availability","OUT_OF_STOCK","product_price_display","onBlur","data-yes-no","multiple","multiple_choice_options","accept","capture","currency_display","placeholderText","blnComplete","Bezier","px","py","cx","cy","xdiff","ydiff","func","wait","_len","arguments","_key","previous","opts","later","leading","now","remaining","clearTimeout","trailing","setTimeout","copy","pixels","getImageData","bound","right","bottom","trimHeight","trimWidth","trimmed","putImageData","blnHasData","s1","s2","s3","dx1","dy1","dx2","dy2","m1","m2","l1","l2","cm","tx","ty","_point","SignatureGroup","getFreshSignatureObject","editSignature","sigData","signatureEditIndex","signatureModalTitle","signatureEditing","savedSignatures","closeSignatureModal","data-idx","CommentForm","isValid","component","transitionName","transitionEnterTimeout","transitionLeaveTimeout","CommentList","unix","whiteSpace","OrderList","countItems","itemCount","createOrderRow","defaultCurrencySymbol","OrderForm","eventType","formattedNumber","quantityMin","quantity_min","quantityMax","quantity_max","quantityMom","quantity_mom","quantity_display","restrictedNumber","inputData","price_display","removeOrderItem","orderItemRemoveIndex","isOrderItemRemoveConfirmationVisible","haveItems","showOrderItemRemoveConfirmationPrompt","hideOrderItemRemoveConfirmationPrompt","createOrderItemRow","item","colSpan","editablePricing","orderItemRemoveConfirmDescription","adjustment_display","shipping_display","fontWeight","onPlace","showProductSelectionList","OrderInfoForm","customerLocations","ProductSelectList","handleCustomerSearchFilterChange","toggleFeaturedSearchFilter","toggleCategorySearchFilterDisplay","isCategorySearchFilterVisible","handleCategorySearchFilterSelection","handleCategorySearchFilterDeselection","pull","handleProductQuantityChange","prevQuantity","selectedProducts","quantityStep","createProductRow","blnHasImage","default_image","openImagesModal","stock_on_hand","data-sku","data-calcprice","data-istaxable","data-taxclassid","data-min","min_order_qty","data-max","max_order_qty","data-mom","multiples_of_min","unselectedProductQuantity","productIndex","isImagesModalVisible","imagesModalTitle","imagesModalImages","closeImagesModal","blnFeaturedProductsFilter","blnCustomerRecentProductsFilter","blnCategoriesFilter","subTitle","customerSearchFiltersActive","data-filter","PastOrderList","formattedTotal","PastOrderInfo","paymentTerm","payment_term_id","taxClass","billingLocation","shippingLocation","PO","PastOrderItems","renderOrderItem","qty","discount_price","renderOrderItems","arrRenderedItems","formattedSubTotal","formattedAdjustment","formattedShipping","formattedTax","onClone","ProductList","onProductQuantityChange","isProductSelectionAvailable","CustomerList","UserInfoList","userFields","AppInfoList","showAppDataSubmissionConfirmationPrompt","isAppDataSubmissionConfirmationVisible","hideAppDataSubmissionConfirmationPrompt","onSubmitAppData","appDataSubmissionConfirmationDescription","BinaryFile","strData","iDataOffset","iDataLength","dataOffset","dataLength","IEBinary_getLength","IEBinary_getByteAt","getRawData","getByteAt","iOffset","getLength","getSByteAt","iByte","getShortAt","bBigEndian","iShort","getSShortAt","iUShort","getLongAt","iByte1","iByte2","iByte3","iByte4","iLong","getSLongAt","iULong","getStringAt","iLength","aStr","getCharAt","toBase64","btoa","fromBase64","strBase64","BinaryAjax","createRequest","oHTTP","ActiveXObject","XMLHttpRequest","sendRequest","strURL","fncCallback","fncError","aRange","bAcceptRanges","iFileSize","iDataLen","binaryResponse","responseText","fileSize","getResponseHeader","onreadystatechange","readyState","responseBody","open","overrideMimeType","setRequestHeader","send","getHead","iStart","iEnd","strAcceptRanges","write","EXIF","imageHasData","oImg","exifdata","findEXIFinJPEG","oFile","iMarker","readEXIFData","readTags","iTIFFStart","iDirStart","oStrings","bBigEnd","iEntries","oTags","iEntryOffset","strTag","readTagValue","iType","iNumValues","iValueOffset","iValOffset","aVals","iStringOffset","iTIFFOffset","TiffTags","ExifIFDPointer","oEXIFTags","Tags","StringValues","Components","GPSInfoIFDPointer","oGPSTags","GPSTags","0","ExposureProgram","1","2","3","4","5","6","7","8","MeteringMode","255","LightSource","9","10","11","12","13","14","15","17","18","19","20","21","22","23","24","Flash","SensingMethod","SceneCaptureType","SceneType","CustomRendered","WhiteBalance","GainControl","Contrast","Saturation","Sharpness","SubjectDistanceRange","FileSource","getData","oEXIF","getDataFromDataURL","getImageDataFromDataURL","getTag","getAllTags","oData","oAllTags","hasOwnProperty","pretty","strPretty","readFromBinaryFile","jQuery","oElement","strEvent","fncHandler","aImages","getElementsByTagName","getAttribute","attachEvent","fn","exifLoad","each","exifLoadFromDataURL","exif","aStrings","exifAll","exifPretty","methods","newsize","w","h","W","H","C","dataURLtoBlob","ab","ArrayBuffer","ia","bb","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","append","getBlob","detectSubsampling","iw","drawImage","rotate","orientation","angle","o","90","180","270","transformCoordinate","translate","scale","detectVerticalSquash","ih","sy","ey","ratio","defaults","Plugin","extend","_defaults","_name","$this","reader","FileReader","onloadend","e","dataURL","save","tmpCanvas","tmpCtx","vertSquashRatio","sh","sx","sw","dx","dw","ceil","dy","dh","restore","newcanvas","cropped","readAsDataURL","InitialisationActions","initialData","Splash","preloadImages","imgSrc","Error","Header","screenTitle","menuVisible","loggedInName","companyLogoBase64","redirectToLoginPage","componentWillMount","_onScreenDataChange","_onChange","is","collapse","componentWillReceiveProps","componentWillUnmount","toggleMenu","aria-expanded","Link","marginRight","Redirect","withRouter","HomePage","refreshStatus","lastPendingAction","refreshEntityStatuses","refreshProgressPercentage","currentRefreshEntity","isRefreshProgressVisible","refreshProgressDescription","progressDescriptions","closeRefreshProgressModal","completionMessages","welcomeName","refreshLocation","from","fromTitle","aria-haspopup","data-wow-delay","NotFoundPage","LoginPage","redirectToReferrer","setLoginInfo","loginFormIsValid","formIsValid","loginUserHasChanged","userHasChanged","cancelDifferentUserLogin","fromLocation","PasswordResetPage","setEmail","CallsPage","customerSearchTerm","customerSearchPage","customerSearchPageSize","customerSearchTotal","customerSearchTotalPages","customerSearchResults","isCustomerSearchLoading","isCustomerRequestLoading","isCustomerRequestVisible","customerWasRequested","auditsToSubmit","_onRefreshChange","_onAuditSubmitChange","_onCustomerSearchChange","refreshAuditSubmissionStatusIndicator","blnCustomerRequestLoading","blnCustomerWasRequested","showCustomerRequestList","hideCustomerRequestList","arrAuditSubmissions","arrAdminAuditSubmissions","CustomerPage","_onOrderChange","savedOrder","orderWithCustomerCreated","_onCustomerRefreshChange","match","params","isCustomerRefreshLoading","customerExited","createOrderWithCustomer","salesCustomer","isCallCustomer","customerCreationRedirection","area","CustomerInfoPage","editsToSubmit","editCancelled","isNewCustomer","blnIsNewCustomer","submitStatus","refreshEditSubmissionStatusIndicator","blnCustomerRefreshNeeded","blnFieldsRefreshNeeded","blnNewCustomerCreated","refreshDetails","submitEdits","editSubmissions","CustomerDetailsEditPage","customerIsLoaded","customerEditsAreValid","editCompleted","CustomerLocationsEditPage","focusLocationID","CustomerContactsEditPage","focusContactID","AuditsPage","callCompleted","completeCall","callIsValid","AdminAuditsPage","QActions","AuditPage","auditCompleted","path","adminAuditIndex","aidx","aid","refreshAnswerVisibilityAndScore","_onAuditChange","_onAnswerChange","saveAnswer","signaturesArePresent","question_id","auditWeight","auditScore","showDependent","showRemaining","showRemainingGroup","is_dependant","correct_answer_action","incorrect_answer_action","saveSignatures","auditIsValid","signaturesAreRequired","len","completeAudit","allow_signatures","blnSignaturesPresent","FilesPage","CommentsPage","newComment","isSubmitting","isFormVisible","isFormValid","_onSubmissionChange","refreshComments","openCommentForm","closeCommentForm","setNewCommentInfo","commentFormIsValid","addComment","SalesPage","salesMessage","refreshSalesMessage","blnHaveCustomers","blnHaveProducts","OrdersPage","blnMultipleSubmissions","refreshOrderSubmissionStatusIndicator","specificOrderIDs","ordersToSubmit","locationState","OrderPage","checkCompulsorySelections","_onCustomerSearchOrSelectChange","searchStatus","selectedRefreshedCustomerID","existingCustomer","hideCustomerSelectionList","isCustomerSelectionLoading","showCustomerSelectionList","isCustomerSelectionVisible","blnCheckCustomerSelected","orderHasCustomer","selectCustomer","loadCustomerOrderDetails","initialiseCustomerLocations","initialiseCustomerEntry","_onProductSearchChange","isProductSearchLoading","productSearchTerm","productSearchPage","productSearchPageSize","productSearchFilters","productSearchTotal","productSearchTotalPages","productSearchResults","isProductSelectionVisible","hideProductSelectionList","selectProducts","blnAtLeastOneProductAdded","addOrderItem","orderIsValid","placeOrder","blnSubmit","blnValid","orderResolved","orderSubmit","placeAndSubmitOrder","showOrderCancelConfirmationPrompt","isOrderCancelConfirmationVisible","hideOrderCancelConfirmationPrompt","orderCancelConfirmDescription","isProductSelectionLoading","blnHaveCustomer","onPlaceAndSubmit","PastOrdersPage","PastOrderPage","cloneOrder","clonedOrder","formattedLineItemPrice","formattedLineItemTotal","orderIsCloned","ProductsPage","selectedCustomer","blnNewProductSearchNeeded","changeProductQuantityForOrder","createNewOrder","selectCustomerForOrder","b2bCustomer","CustomersPage","serverSearchStatus","isCustomerRequestSearchLoading","customerRequestSearchTerm","customerRequestSearchPage","customerRequestSearchPageSize","customerRequestSearchTotal","customerRequestSearchTotalPages","customerRequestSearchResults","_onCustomerRequestStatusChange","requestStatus","customerRequestStatus","customerRequestStatus2","customerRequestStatus3","blnRefreshCustomersOnClose","LibraryPage","InfoPage","isAppDataSubmissionLoading","_onAppDataSubmissionChange","refreshUserInfo","RefreshPage","blnBackButtonAvailable","PrivateRoute","Route","App","basename","Switch","exact","UserInfoPage","InitActions","ReactDOM","classList","remove"],"mappings":";qIAGA,IAkJIA,EAlJEC,EAAIC,OAAOD,EAEbE,EAAaC,EAAQ,IACrBC,EAASD,EAAQ,GAIjBE,EAAeF,EAAQ,IAAUE,aACjCC,EAASH,EAAQ,IAIjBI,EAAYJ,EAAQ,IAEpBK,EAASL,EAAQ,IASjBM,EAAS,CAETC,QAAU,oEAGVC,OAAS,SAAUC,GACf,IACIC,EAAMC,EAAMC,EAAMC,EAAMC,EAAMC,EAAMC,EADpCC,EAAS,GAETC,EAAI,EAGR,IAFAT,EAAQH,EAAOa,YAAYV,GAEpBS,EAAIT,EAAMW,QAKbP,GAJAH,EAAOD,EAAMY,WAAWH,OAIT,EACfJ,GAAgB,EAAPJ,IAAa,GAJtBC,EAAOF,EAAMY,WAAWH,OAIY,EACpCH,GAAgB,GAAPJ,IAAc,GAJvBC,EAAOH,EAAMY,WAAWH,OAIa,EACrCF,EAAc,GAAPJ,EAEHU,MAAMX,GACNI,EAAOC,EAAO,GACPM,MAAMV,KACbI,EAAO,IAGXC,EAASA,EACTX,EAAOC,QAAQgB,OAAOV,GAAQP,EAAOC,QAAQgB,OAAOT,GACpDR,EAAOC,QAAQgB,OAAOR,GAAQT,EAAOC,QAAQgB,OAAOP,GAGxD,OAAOC,GAIXO,OAAS,SAAUf,GACf,IACIC,EAAMC,EAAMC,EACNE,EAAMC,EAAMC,EAFlBC,EAAS,GAGTC,EAAI,EAIR,IAFAT,EAAQA,EAAMgB,QAAQ,sBAAuB,IAEtCP,EAAIT,EAAMW,QAKbV,EAJOJ,EAAOC,QAAQmB,QAAQjB,EAAMc,OAAOL,OAI3B,GAHhBJ,EAAOR,EAAOC,QAAQmB,QAAQjB,EAAMc,OAAOL,QAGb,EAC9BP,GAAgB,GAAPG,IAAc,GAHvBC,EAAOT,EAAOC,QAAQmB,QAAQjB,EAAMc,OAAOL,QAGN,EACrCN,GAAgB,EAAPG,IAAa,GAHtBC,EAAOV,EAAOC,QAAQmB,QAAQjB,EAAMc,OAAOL,OAI3CD,GAAkBU,OAAOC,aAAalB,GAE1B,IAARK,IACAE,GAAkBU,OAAOC,aAAajB,IAE9B,IAARK,IACAC,GAAkBU,OAAOC,aAAahB,IAM9C,OAFAK,EAASX,EAAOuB,YAAYZ,IAMhCE,YAAc,SAAUW,GACpBA,EAASA,EAAOL,QAAQ,QAAS,MAGjC,IAFA,IAAIM,EAAU,GAELC,EAAI,EAAGA,EAAIF,EAAOV,OAAQY,IAAK,CACpC,IAAIC,EAAIH,EAAOT,WAAWW,GACtBC,EAAI,IACJF,GAAWJ,OAAOC,aAAaK,GACxBA,EAAI,KAASA,EAAI,MACxBF,GAAWJ,OAAOC,aAAcK,GAAK,EAAK,KAC1CF,GAAWJ,OAAOC,aAAkB,GAAJK,EAAU,OAE1CF,GAAWJ,OAAOC,aAAcK,GAAK,GAAM,KAC3CF,GAAWJ,OAAOC,aAAeK,GAAK,EAAK,GAAM,KACjDF,GAAWJ,OAAOC,aAAkB,GAAJK,EAAU,MAIlD,OAAOF,GAIXF,YAAc,SAAUE,GAQpB,IAPA,IAAID,EAAS,GACTZ,EAAI,EACJe,EAAI,EAEJC,EAAK,EACLC,EAAK,EAEDjB,EAAIa,EAAQX,SAChBa,EAAIF,EAAQV,WAAWH,IAEf,KACJY,GAAUH,OAAOC,aAAaK,GAC9Bf,KACOe,EAAI,KAASA,EAAI,KACxBC,EAAKH,EAAQV,WAAWH,EAAI,GAC5BY,GAAUH,OAAOC,cAAmB,GAAJK,IAAW,EAAW,GAALC,GACjDhB,GAAK,IAELgB,EAAKH,EAAQV,WAAWH,EAAI,GAC5BiB,EAAKJ,EAAQV,WAAWH,EAAI,GAC5BY,GAAUH,OAAOC,cAAmB,GAAJK,IAAW,IAAa,GAALC,IAAY,EAAW,GAALC,GACrEjB,GAAK,GAIb,OAAOY,IAMXM,EAAUtC,OAAOuC,SAASC,OAASxC,OAAOuC,SAASE,SAASC,MAAM,gBAAgB,GAGlFC,EAAUtC,EAAO,GAAID,EAAawC,UAAW,CAChDC,kBAAmB,SAASC,GAAWC,KAAKC,GA5I1B,SA4I2CF,IAC7DG,qBAAsB,SAASH,GAAWC,KAAKG,eA7I7B,SA6I0DJ,IAC5EK,WAAY,WAAYJ,KAAKK,KA9IX,WAgJlBd,QAASA,EACTe,UAAWf,EAAU,wCACrBgB,OAAShB,EAAU,OACnBiB,0BAA2B,EAC3BC,wBAAyB,EAGzBC,YAAa,WACZ,IAAIC,EAAU,CACbnB,SAAUI,EAAQJ,UAInBoB,aAAaC,IAAMC,KAAKC,UAAUJ,IAsBnCK,YAAa,SAASC,GAIrB,OAHIA,IACHA,EAAO,IAAIC,MAEJC,KAAKC,MAAMH,EAAKI,UAAY,MAErCC,sBAAuB,SAASL,GAW/B,OAVIA,IACHA,EAAO,IAAIC,MAIZD,EAAKM,SAAS,GACdN,EAAKO,WAAW,GAChBP,EAAKQ,WAAW,GAChBR,EAAKS,gBAAgB,GAEd1B,KAAKgB,YAAYC,IAEzBU,gBAAiB,SAASV,GAIzB,OAHIA,IACHA,EAAO,IAAIC,MAEJD,EAAKI,WAIdO,cAAe,SAASC,GACvB,OAASA,GAAaA,EAAW7B,KAAKsB,yBAQvCQ,aAAcrE,EAAOE,OACrBoE,gCAAiC,SAASC,EAAUC,GACnD,MAAO,SAAWxE,EAAOE,OAAOqE,EAAW,IAAMC,IAElDC,kBAAmB,WAClB,OAAOlC,KAAK+B,gCAAgCxE,EAAU4E,cAAe5E,EAAU6E,gBAGhFC,iBAAkB,WACjB,MAAQ,YAAc9E,EAAU4E,cAAgB,aAAe5E,EAAU6E,eAK1EE,QAAS,WAMR,GAJA9E,EAAO+E,QAAQC,QAAU,IACzBhF,EAAO+E,QAAQE,gBAAkB,IAG9B7B,aAAaC,IAAI,CACnB,IAAIF,EAAUG,KAAK4B,MAAM9B,aAAaC,KACtCjB,EAAQJ,SAAWmB,EAAQnB,SAAWmB,EAAQnB,SAAWI,EAAQJ,WAMnEmD,WAAY,WAEX,OAAOpF,EAAUqF,WAGlBC,UAAW,WACV,OAAOtF,EAAUuF,SAGlBC,mBAAoB,WACnB,OAAOxF,EAAUwF,sBAGlBC,wBAAyB,WACxB,OAAOzF,EAAU0F,+BAGlBC,0BAA2B,WAC1B,OAAO3F,EAAU4F,8BAGlBC,iBAAkB,WACjB,OAAO7F,EAAU6F,oBAKlBC,uBAAwB,WACvB,IAAIC,EAA0B/F,EAAUgG,uBAEvCC,SAASC,eAAe,SAASC,MAAMC,gBADV,MAA3BL,GAA8D,IAA3BA,EACoB,8BAAgCA,EAA0B,KAE1D,MAG3DM,WAAY,CACXC,MAtRyB,iBA0R1BC,eAAgB,SAASD,GACxBjE,EAAQgE,WAAWC,MAAkB,MAATA,EAAiBA,EA3RpB,gBA4RzBjE,EAAQQ,cAGTZ,SAAU,CACTuE,IAAK,KACLC,IAAK,KACL/E,OAAQ,IAGTgF,mBAAoB,WAEnBlH,EAAUmH,UAAUC,YAAYC,eAAc,SAASC,GACtDH,UAAUC,YAAYG,WAAWvH,GACjC6C,EAAQJ,SAASuE,IAAMM,EAASE,OAAOC,SACvC5E,EAAQJ,SAASwE,IAAMK,EAASE,OAAOE,UACvC7E,EAAQJ,SAASP,OAASoF,EAASE,OAAOC,SAAW,IAAMH,EAASE,OAAOE,UAK3E7E,EAAQc,cAIRd,EAAQQ,iBAMVsE,qBAAsB,WACrB,OAA+C,EAAtC5D,KAAKC,UAAUH,cAAcrC,OAAc,SAGrDoG,mCAAoC,SAASC,EAAKC,EAAKC,EAAKC,GAC3D,IACIC,EAAOhF,KAAKiF,QAAQH,EAAKF,GACzBM,EAAOlF,KAAKiF,QAAQF,EAAKF,GACzBM,EACHhE,KAAKiE,IAAIJ,EAAK,GAAK7D,KAAKiE,IAAIJ,EAAK,GACjC7D,KAAKkE,IAAIrF,KAAKiF,QAAQL,IAASzD,KAAKkE,IAAIrF,KAAKiF,QAAQH,IACrD3D,KAAKiE,IAAIF,EAAK,GAAK/D,KAAKiE,IAAIF,EAAK,GAG9BI,EATI,MAQA,EAAInE,KAAKoE,MAAMpE,KAAKqE,KAAKL,GAAIhE,KAAKqE,KAAK,EAAEL,KAEjD,OAAOhE,KAAKsE,MAAMH,IAEnBL,QAAS,SAASS,GACjB,OAAOA,GAAOvE,KAAKwE,GAAG,MAGvBC,OAAQ,WACP,MAAO,uCAAuChH,QAAQ,SAAS,SAASQ,GACvE,IAAIyG,EAAoB,GAAhB1E,KAAK2E,SAAgB,EAC7B,OADyC,KAAL1G,EAAWyG,EAAS,EAAJA,EAAU,GACrDE,SAAS,QAUpBC,cAAe,SAASC,EAAUC,EAAYC,GAC7CD,EAA4B,MAAdA,GAAsBA,EAGpC,IAAIE,GAFJD,EAAsC,MAAnBA,GAA2BA,GAEhB,GAAK,EAE/BE,EAAeJ,EAASrH,QAAQ,SAAU,IAG9C,GAAoB,KAAjByH,EAAoB,CAEtB,IAAIC,EAAcC,SAASF,GAO3BA,EAAeH,EAAaG,EAAeC,EAE3CF,EAAQE,EAGT,MAAO,CACN,MAASF,EACT,aAAgBC,IAMlBG,cAAe,SAASP,EAAUC,EAAYC,GAC7CD,EAA4B,MAAdA,GAAsBA,EAGpC,IAAIE,GAFJD,EAAsC,MAAnBA,GAA2BA,GAEhB,GAAK,EAE/BE,EAAeJ,EAASrH,QAAQ,WAAY,IAGhD,GAAoB,KAAjByH,EAAoB,CAEtB,IAAIC,EAAcG,WAAWJ,EAAazH,QAAQ,IAAK,MAOvDyH,EAAeH,EAAaG,EAAeC,EAE3CF,EAAQE,EAGT,MAAO,CACN,MAASF,EACT,aAAgBC,IAMlBK,eAAgB,SAAST,EAAUC,EAAYC,GAC9CD,EAA4B,MAAdA,GAAsBA,EAGpC,IAAIE,GAFJD,EAAsC,MAAnBA,GAA2BA,GAEhB,GAAK,EAE/BE,EAAeJ,EAASrH,QAAQ,WAAY,IAGhD,GAAoB,KAAjByH,EAAoB,CAGtB,IAAIM,EAAyBF,WAAWJ,EAAazH,QAAQ,IAAK,MAAMgI,QAAQ,GAGhFP,EAAeH,EAAaG,EAAeM,EAE3CP,EAAQK,WAAWE,GAGpB,MAAO,CACN,MAASP,EACT,aAAgBC,IAKlBQ,qBAAsB,SAASZ,GAG9B,IAAII,EAAeI,WAAWR,GAAUW,QAAQ,GAIhD,MAAO,CACN,MAHWH,WAAWJ,GAItB,aAAgBA,IAUlBS,eAAgB,SAASC,EAAQC,EAAeC,EAAKC,EAAKC,GAEzD,GAAGJ,EAAS,EACX,GAAU,MAAPE,GAAeA,EAAM,GAAKF,EAASE,EAErCD,GADAD,EAASE,GACclB,gBAClB,GAAU,MAAPmB,GAAeA,EAAM,GAAKH,EAASG,EAE3CF,GADAD,EAASG,GACcnB,gBAClB,GAAuB,MAApBoB,GAA4BA,EAAiB,CACrD,IAAIC,EAAYpH,KAAKqH,UAAUN,EAASE,GAErCG,EAAY,GAKXA,GAAaH,IAEfD,GADAD,EAAS/G,KAAKqH,UAAUN,EAASK,IACVrB,YAM3B,MAAO,CACN,MAASgB,EACT,aAAgBC,IAKlBK,UAAW,SAASN,GACnB,OAAON,WAAWM,EAAOH,QAAQ,KAIlCU,UAnWgD,SAmWtClB,EAAOmB,GAChB,OAAQnB,EAAML,WAAWyB,OAAO,EAAGD,EAAOhJ,SAAWgJ,GAGtDE,UAvWgD,SAuWtCC,GACT,OAAO1H,KAAKsH,UAAUI,EAAI,OAG3BC,qBAAsB,SAASC,GAC9B,OAAOA,EAAIhJ,QAAQ,UAAW,aAG/BiJ,qCAAsC,GAEtCC,uCAAwC,SAASC,EAAQC,EAASjI,EAAUkI,GAC3ErI,EAAQiI,qCAAqCE,GAAU,CACtDC,QAASA,EACTjI,SAAUA,EACVkI,KAAMA,IAGRC,yCAA0C,SAASH,GAClDnI,EAAQiI,qCAAqCE,GAAU,MAGxDI,2CAA4C,SAASJ,GACO,MAAxDnI,EAAQiI,qCAAqCE,KAC/CnI,EAAQiI,qCAAqCE,GAAQC,QAAQpI,EAAQiI,qCAAqCE,GAAQhI,UAChHqI,MAAMxI,EAAQiI,qCAAqCE,GAAQC,QAASpI,EAAQiI,qCAAqCE,GAAQE,MAC3HrI,EAAQsI,yCAAyCH,KAKnDM,mBAAoB,KACpBC,sBAAuB,SAASC,GAC/BvI,KAAKqI,mBAAqBE,GAE3BC,wBAAyB,WACxBxI,KAAKqI,mBAAqB,MAG3BI,+BAAgC,KAChCC,6BAA8B,SAASC,GACtC3I,KAAKyI,+BAAiCE,GAEvCC,+BAAgC,WAC/B5I,KAAKyI,+BAAiC,MAIvCI,SAAU,SAASC,GAEkB,MAAjCA,EAAcP,iBAAsD,MAA3BvI,KAAKqI,qBAChDS,EAAcP,gBAAkBvI,KAAKqI,oBAEA,MAAnCS,EAAcC,mBAAwD,MAA3B/I,KAAKqI,qBAClDS,EAAcC,kBAAoB3L,EAAO4L,SAEE,MAAzCF,EAAcH,yBAA8D,MAA3B3I,KAAKqI,oBAAqE,MAAvCrI,KAAKyI,iCAC3FK,EAAcH,wBAA0B3I,KAAKyI,gCAI9CvL,EAAW2L,SAASC,GAKjBA,EAAcG,cAAgB7L,EAAO4L,SACvChJ,KAAKmI,2CAA2CW,EAAcI,aAMhEC,mBAAoB,SAASC,EAAOC,GACnC,IAAIC,EAAiBtM,EAAEuM,WAEvB,GAAIH,EAAM7K,OAEL,CACJ,IAAIiL,EAAyB,EAC7B5J,EAAQ0I,sBAAsBe,GAC9BzJ,EAAQ8I,6BAA6B,GAGrC9I,EAAQiJ,SAAS,CAChBN,gBAAiBc,EACjBN,kBAAmB3L,EAAO4L,QAC1BL,wBAAyB,EACzBc,eAAe,IAGhB,IAAIC,EAAU,GAEVC,GAAmB,EACnBC,GAAqB,GAEF,SAAnBC,EAA4BC,GAC/BA,EAAU7B,KAAyB,MAAlB6B,EAAU7B,KAAe6B,EAAU7B,KAAK8B,KAAI,SAACC,GAAD,MAC7C,iBAAPA,GAAsC,QAAnBA,EAAIxC,OAAO,EAAE,GAAgBkC,EAAQM,EAAIxC,OAAO,IAAMwC,KAC7E,GAGLF,EAAU9B,QAAQ8B,EAAU/B,QAAQK,MAAM0B,EAAU9B,QAAS8B,EAAU7B,MAAMgC,MAAK,SAASC,GAC1FP,GAAmB,EACR,MAARO,GAAgBA,EAAKC,UACvBP,GAAqB,GAEC,MAApBE,EAAUM,QACZN,EAAUM,OAAOF,GAEfJ,EAAUO,aACZjB,EAAQ,OAEPkB,MAAK,SAASJ,GAQhB,GAPAN,GAAqB,EACV,MAARM,GAAgBA,EAAKC,UACvBR,GAAmB,GAEG,MAApBG,EAAUS,QACZT,EAAUS,OAAOL,GAEP,MAARA,GAAgC,MAAhBA,EAAKM,QAEvB,IAAK,IAAIC,KAAOP,EAAKM,QACpBd,EAAQe,GAAOP,EAAKM,QAAQC,MAG5BC,QAAO,SAASR,GAMlB,GAJAV,GAA0BM,EAAUa,oBACpC/K,EAAQ8I,6BAA6BjC,WAAqC,IAAzB+C,IAG9CJ,EAAM7K,OAAS,EAKjBsL,EAAiBT,EAAMwB,aAGnB,CACJ,IAAIC,EAAelB,EAAmBvM,EAAO0N,GAAMlB,EAAqBxM,EAAO2N,MAAQ3N,EAAO4N,QAG9FpL,EAAQiJ,SAAS,CAEhBN,gBAAiBc,EAEjBN,kBAAmB8B,EAEnBlC,wBAAyB,MAG1B/I,EAAQ4I,0BACR5I,EAAQgJ,iCAERU,EAAe2B,cAMlBpB,CAAiBT,EAAMwB,cAtFvBtB,EAAe2B,UAyFhB,OAAO3B,KAMT4B,EAAOC,QAAUvL,G,8BCnqBjB,IAAIwL,EAAYjO,EAAQ,KAExB+N,EAAOC,QAAUC,EAAU,CAC1BpC,QAAS,KACT+B,MAAO,KACPC,QAAS,KACTF,GAAI,Q,6BCZL,oBAQeO,IAJC,SAAC,GAAD,IAAGC,EAAH,EAAGA,UAAW5H,EAAd,EAAcA,MAAd,OACf,yBAAK6H,UAAWD,EAAY,yBAA2B,SAAU5H,MAAOA,GAAO,yBAAK6H,UAAWD,EAAY,gBAAkB,Q,iCCH9H,IAAIF,EAAYjO,EAAQ,KAExB+N,EAAOC,QAAUC,EAAU,CAC1BI,WAAY,KACZC,WAAY,KACZC,YAAa,KACbC,iBAAkB,KAClBC,4BAA6B,KAC7BC,aAAc,KACdC,gBAAiB,KACjBC,cAAe,KAEfC,uBAAwB,KACxBC,wBAAyB,KACzBC,iBAAkB,KAClBC,iBAAkB,KAElBC,eAAgB,KAChBC,cAAe,KACfC,uBAAwB,KACxBC,qBAAsB,KACtBC,2BAA4B,KAC5BC,+BAAgC,KAChCC,6BAA8B,KAC9BC,4BAA6B,KAC7BC,6BAA8B,KAC9BC,iCAAkC,KAClCC,+BAAgC,KAChCC,2BAA4B,KAC5BC,4BAA6B,KAC7BC,gCAAiC,KACjCC,8BAA+B,KAC/BC,qBAAsB,KACtBC,sBAAuB,KACvBC,qBAAsB,KACtBC,eAAgB,KAChBC,kBAAmB,KAGnBC,uBAAwB,KACxBC,cAAe,KACfC,cAAe,KACfC,WAAY,KACZC,aAAc,KACdC,cAAe,KAEfC,sBAAuB,KACvBC,uBAAwB,KACxBC,gBAAiB,KAIjBC,qBAAsB,KACtBC,wBAAyB,KACzBC,sBAAuB,KACvBC,8BAA+B,KAC/BC,YAAa,KACbC,sBAAuB,KACvBC,sBAAuB,Q,gCC5DxB,qBAcMC,EAAoB,CACzBC,KAAM,WAGLC,IAAYC,OAAO,CAClBC,KAAM,gBACNC,KAAM,SACNC,UAAW,2BACXC,QAAS,KA2BXC,IAAK,SAACvE,GACL,OAAGwE,MAAMC,QAAQzE,GAUT0E,QAAQC,IACd3E,EAAIV,KAAI,SAACsF,GAAD,OAAaX,IAAYY,QAAQD,OACxCE,MAAK,SAACC,GAAD,OAAYA,EAAOzF,KAAK,SAAC0F,EAAWpR,GAAZ,MAAkB,CAACoM,EAAIpM,GAAIoR,SAGnDf,IAAYY,QAAQ7E,IAI7BiF,IAAK,SAACjF,EAAKrE,GACV,OAAG6I,MAAMC,QAAQzE,GAMT0E,QAAQC,IACd3E,EAAIV,KAAI,SAAC4F,GAAD,OAAUjB,IAAYkB,QAAQD,EAAK,GAAIA,EAAK,QACnDJ,MAAK,SAACC,GAAD,OAAY/E,KAGZiE,IAAYkB,QAAQnF,EAAKrE,IAIlCyJ,UAAYnB,IAAYmB,UACxBC,OAAUpB,IAAYoB,OACtBC,aAAcrB,IAAYqB,aAC1BC,MAAO,kBAAMtB,IAAYsB,SACzBC,OAAQ,kBAAMvB,IAAYuB,UAC1BC,aAAc,SAACD,GAAD,OAAYvB,IAAYwB,aAAaD,IACnDE,UAAW,SAACF,GAAD,OAAYvB,IAAYyB,UAAUF,KAI/BzB,O,6BC7Ff,IAAItR,EAAaC,EAAQ,IACrBiT,EAAUjT,EAAQ,IAClBC,EAASD,EAAQ,GACjBkT,EAAgBlT,EAAQ,IACxBmT,EAAqBnT,EAAQ,KAC7BoT,EAAcpT,EAAQ,IACtBE,EAAeF,EAAQ,IAAUE,aACjCC,EAASH,EAAQ,IACjBqT,EAAIrT,EAAQ,IAEZsT,EAAOtT,EAAQ,GAGfuT,EAAa,GAKbC,EAAiB,CACpBC,UAAW,GAEXC,OAAQ,CAEP,CAAC,KAAO,OAAQ,MAAQ,eAAgB,OAAS,IACjD,CAAC,KAAO,cAAe,MAAQ,cAAe,OAAS,GACvD,CAAC,KAAO,iBAAkB,MAAQ,iBAAkB,OAAS,GAC7D,CAAC,KAAO,QAAS,MAAQ,QAAS,OAAS,IAE5CC,gBAAiB,KAEjBC,eAAgB,CAEf,CAAC,KAAO,cAAe,MAAQ,cAAe,OAAS,IACvD,CAAC,KAAO,YAAa,MAAQ,YAAa,OAAS,GACnD,CAAC,KAAO,YAAa,MAAQ,YAAa,OAAS,GACnD,CAAC,KAAO,OAAQ,MAAQ,OAAQ,OAAS,GAEzC,CAAC,KAAO,MAAO,MAAQ,MAAO,OAAS,GAEvC,CAAC,KAAO,WAAY,MAAQ,WAAY,OAAS,GACjD,CAAC,KAAO,YAAa,MAAQ,YAAa,OAAS,IAEpDC,wBAAyB,KAEzBC,cAAe,CAEd,CAAC,KAAO,aAAc,MAAQ,aAAc,OAAS,IACrD,CAAC,KAAO,YAAa,MAAQ,YAAa,OAAS,GACnD,CAAC,KAAO,QAAS,MAAQ,QAAS,OAAS,GAC3C,CAAC,KAAO,eAAgB,MAAQ,eAAgB,OAAS,GACzD,CAAC,KAAO,aAAc,MAAQ,aAAc,OAAS,GACrD,CAAC,KAAO,MAAO,MAAQ,MAAO,OAAS,IAGxCC,uBAAwB,MAIrBC,EAAiB,GAEjBC,EAAoB,GAGpBC,EAAuB,KAGvBC,EAAkB,GAGlBC,EAAU,GAGVC,EAAsB,GAEtBC,EAAmB,GAEnBC,EAAmB,EAEnBC,EAAuB,GAEvBC,EAAoB,KAEpBC,EAAyB,KAGzBC,EAAuB,GAEvBC,EAAoB,GAEpBC,EAAoB,EAEpBC,EAAwB,GAExBC,EAAqB,KAErBC,EAA0B,KAG1BC,GAAe,EAEfC,EAAgB/U,EAAO,GAAID,EAAawC,UAAW,CACtDC,kBAAmB,SAASC,GAAWC,KAAKC,GA5F1B,SA4F2CF,IAC7DG,qBAAsB,SAASH,GAAWC,KAAKG,eA7F7B,SA6F0DJ,IAC5EK,WAAY,WAAYJ,KAAKK,KA9FX,WAgGlBiS,UAAW,SAASpJ,GASnB,IAAIqJ,EAAenV,EAAO0N,GAE1B,OAAO5B,GACN,KAAKkH,EAAQlE,iBACb,KAAKkE,EAAQhD,sBACb,KAAKgD,EAAQpE,uBACb,KAAKoE,EAAQnE,wBACZsG,EAAuC,MAAvBhB,EAAQrI,GAAsBqI,EAAQrI,GAAc9L,EAAO0N,GAC3E,MACD,QACCyH,EAAmC,MAAnBhB,EAAQiB,QAAkBjB,EAAQiB,QAAUpV,EAAO0N,GAGrE,OAAOyH,GAORE,aAAc,WACb,IAAIC,EAAe,GAEnB,IAAK,IAAIC,KAAcjC,EACO,MAA1BA,EAAWiC,IACbD,EAAaE,KAAKlC,EAAWiC,IAM/B,OAAOD,GAGRG,YAAa,SAASnL,GACrB,OAAOgJ,EAAWhJ,IAKnBoL,kBAAmB,SAASpL,GAC3B,IAAIqL,EAAiB,KAKZ,OAANrL,IACFA,EAAK1H,KAAKgT,aAKXD,EAAiB/S,KAAKiT,wBAAwBvL,IAC/BA,GAAKA,EAEpBqL,EAAeG,UAAY,GAC3B,IAAIA,EAAYlT,KAAKmT,0BAA0BzL,GAC/C,IAAK,IAAI0L,KAASF,EACM,MAApBA,EAAUE,IACZL,EAAeG,UAAUN,KAAKM,EAAUE,IAI1CL,EAAeM,SAAW,GAC1B,IAAIA,EAAWrT,KAAKsT,yBAAyB5L,GAC7C,IAAK,IAAI6L,KAASF,EACK,MAAnBA,EAASE,IACXR,EAAeM,SAAST,KAAKS,EAASE,IAIxC,OAAOR,GAERS,wBAAyB,WACxB,OAAOhD,EAAEiD,OAAO/C,GAAY,SAACgD,GAAD,OACd,MAAZA,GAA0C,GAAtBA,EAASC,aAC5BpV,QAGJqV,eAAgB,WACf,IAAIC,EAAiB,GAErB,IAAK,IAAIlB,KAAcjC,EACO,MAA1BA,EAAWiC,IACbkB,EAAejB,KAAKrM,SAASoM,IAI/B,OAAOkB,GAMRC,0BAA2B,SAASnB,GACnC,OAAQhC,EAAeC,UAAU+B,GAAchC,EAAeC,UAAU+B,GAAYoB,UAAY,MAEjGC,UAAW,WACV,OAAOrD,EAAeE,QAGvBoD,wBAAyB,WACxB,OAAOtD,EAAeG,iBAEvBoD,kBAAmB,WAClB,OAAOvD,EAAeI,gBAGvBoD,gCAAiC,WAChC,OAAOxD,EAAeK,yBAEvBoD,iBAAkB,WACjB,OAAOzD,EAAeM,eAGvBoD,+BAAgC,WAC/B,OAAO1D,EAAeO,wBAGvB8B,SAAU,WACT,MAAO,KAAOvC,EAAK7K,UAGpB0O,oBAAqB,SAAS3B,EAAY4B,GACzC,IAAIC,EAAiB,KAQrB,OAN6B,MAA1B9D,EAAWiC,IAC0B,MAApCjC,EAAWiC,GAAYO,WAAqBxC,EAAWiC,GAAYO,UAAU3U,SAC/EiW,EAAiBhE,EAAEiE,KAAK/D,EAAWiC,GAAYO,UAAW,CAACxL,GAAInB,SAASgO,MAInEC,GAGRE,iBAAkB,SAAShN,GAC1B,OACwB,MAAtByJ,EAAezJ,IAAiB8I,EAAEmE,QAAQxD,EAAezJ,GAAIkN,UAAapE,EAAEmE,QAAQxD,EAAezJ,GAAIwL,YAAe1C,EAAEmE,QAAQxD,EAAezJ,GAAI2L,UAAoC,KAArBlC,EAAezJ,IAIpLuL,wBAAyB,SAASvL,GAMjC,IAJA,IAAImN,EAAqD,MAAtB1D,EAAezJ,IAA6C,MAA9ByJ,EAAezJ,GAAIkN,QAEhFE,EAAe,GAEVzW,EAAI,EAAGA,EAAIsS,EAAeE,OAAOtS,OAAQF,IAAK,CACtD,IAAI0W,EAAQpE,EAAeE,OAAOxS,GAClCyW,EAAaC,EAAMnG,MAEjBiG,GAAyE,MAA1C1D,EAAezJ,GAAIkN,QAAQG,EAAMnG,MACjEuC,EAAezJ,GAAIkN,QAAQG,EAAMnG,MACd,MAAlB8B,EAAWhJ,GAAcgJ,EAAWhJ,GAAIqN,EAAMnG,MAAQ,KAIzD,OAAOkG,GAGR3B,0BAA2B,SAASzL,GAEnC,IAAIsN,EAAiBvE,EAAKhJ,UAAUC,GAEhCmN,EAAqD,MAAtB1D,EAAezJ,IAA+C,MAAhCyJ,EAAezJ,GAAIwL,UAEhF+B,EAAiB,GAGrB,GAAGD,GAAoC,MAAlBtE,EAAWhJ,GAAY,CAC3C,IAAIwN,EAAsB,GAG1B,IAAIF,GAA8C,MAA5BtE,EAAWhJ,GAAIwL,UACpC,IAAK,IAAI7U,EAAI,EAAGA,EAAIqS,EAAWhJ,GAAIwL,UAAU3U,OAAQF,IAAK,CACzD,IAAI8W,EAAmBzE,EAAWhJ,GAAIwL,UAAU7U,GAChD6W,EAAoBtC,KAAKlC,EAAWhJ,GAAIwL,UAAU7U,GAAGqJ,IACrD,IAAI0N,EAAuCP,GAAoF,MAArD1D,EAAezJ,GAAIwL,UAAUiC,EAAiBzN,IACxHuN,EAAeE,EAAiBzN,IAAM,GAEtC,IAAK,IAAI2N,EAAI,EAAGA,EAAI1E,EAAeI,eAAexS,OAAQ8W,IAAK,CAC9D,IAAIN,EAAQpE,EAAeI,eAAesE,GAE1CJ,EAAeE,EAAiBzN,IAAIqN,EAAMnG,MAExCwG,GAAwG,MAAjEjE,EAAezJ,GAAIwL,UAAUiC,EAAiBzN,IAAIqN,EAAMnG,MAChGuC,EAAezJ,GAAIwL,UAAUiC,EAAiBzN,IAAIqN,EAAMnG,MACxDuG,EAAiBJ,EAAMnG,OAO3B,GAAGiG,EACF,IAAK,IAAIN,KAAcpD,EAAezJ,GAAIwL,UACrC1C,EAAE8E,SAASJ,EAAqB3O,SAASgO,MAC5CU,EAAeV,GAAcpD,EAAezJ,GAAIwL,UAAUqB,IAM9D,OAAOU,GAERM,8BAA+B,SAAS5C,GACvC,OACmC,MAAjCvB,EAAkBuB,IAAiE,MAA1CvB,EAAkBuB,GAAYnT,SACxE4R,EAAkBuB,GAAYnT,SAAW,MAI3CgW,8BAA+B,SAAS7C,EAAY4B,GACf,MAAjCnD,EAAkBuB,KACpBvB,EAAkBuB,GAAc,IAGjCvB,EAAkBuB,GAAYnT,SAAW+U,GAK1CkB,uBAAwB,WACvB,MAAO,CAEN,YAAe,GACf,UAAa,GACb,UAAa,GACb,KAAQ,GACR,WAAc,GACd,IAAO,GAEP,SAAY,GACZ,UAAa,KAIfnC,yBAA0B,SAAS5L,GAElC,IAAIsN,EAAiBvE,EAAKhJ,UAAUC,GAEhCmN,EAAqD,MAAtB1D,EAAezJ,IAA8C,MAA/ByJ,EAAezJ,GAAI2L,SAEhFqC,EAAgB,GAGpB,GAAGV,GAAoC,MAAlBtE,EAAWhJ,GAAY,CAC3C,IAAIiO,EAAqB,GAGzB,IAAIX,GAA6C,MAA3BtE,EAAWhJ,GAAI2L,SACpC,IAAK,IAAIhV,EAAI,EAAGA,EAAIqS,EAAWhJ,GAAI2L,SAAS9U,OAAQF,IAAK,CACxD,IAAIuX,EAAkBlF,EAAWhJ,GAAI2L,SAAShV,GAC9CsX,EAAmB/C,KAAKlC,EAAWhJ,GAAI2L,SAAShV,GAAGqJ,IACnD,IAAImO,EAAsChB,GAAkF,MAAnD1D,EAAezJ,GAAI2L,SAASuC,EAAgBlO,IACrHgO,EAAcE,EAAgBlO,IAAM,GAEpC,IAAK,IAAI2N,EAAI,EAAGA,EAAI1E,EAAeM,cAAc1S,OAAQ8W,IAAK,CAC7D,IAAIN,EAAQpE,EAAeM,cAAcoE,GAEzCK,EAAcE,EAAgBlO,IAAIqN,EAAMnG,MAEtCiH,GAAqG,MAA/D1E,EAAezJ,GAAI2L,SAASuC,EAAgBlO,IAAIqN,EAAMnG,MAC7FuC,EAAezJ,GAAI2L,SAASuC,EAAgBlO,IAAIqN,EAAMnG,MACtDgH,EAAgBb,EAAMnG,OAO1B,GAAGiG,EACF,IAAK,IAAIiB,KAAa3E,EAAezJ,GAAI2L,SACpC7C,EAAE8E,SAASK,EAAoBpP,SAASuP,MAC3CJ,EAAcI,GAAa3E,EAAezJ,GAAI2L,SAASyC,IAM3D,OAAOJ,GAERK,6BAA8B,SAASpD,GACtC,OACmC,MAAjCvB,EAAkBuB,IAAgE,MAAzCvB,EAAkBuB,GAAYqD,QACxE5E,EAAkBuB,GAAYqD,QAAU,MAI1CC,6BAA8B,SAAStD,EAAYmD,GACd,MAAjC1E,EAAkBuB,KACpBvB,EAAkBuB,GAAc,IAGjCvB,EAAkBuB,GAAYqD,QAAUF,GAKzCI,sBAAuB,WACtB,MAAO,CAEN,WAAc,GACd,UAAa,GACb,MAAS,GACT,aAAgB,GAChB,WAAc,GACd,IAAO,KAKTC,uBAAwB,WACvB,OAAO9E,GAGR+E,uBAAwB,SAASzD,GAChCtB,EAAuBsB,GAIxB0D,uBAAwB,WACvB,IAAIC,EAAY,GAGhB,IAAK,IAAIC,KAAajF,EACrB,GAAiC,MAA9BA,EAAgBiF,GAElB,IAAK,IAAI5D,KAAcrB,EAAgBiF,GACtC,GAA6C,MAA1CjF,EAAgBiF,GAAW5D,GAAoB,CACjD,IAAI6D,EAAQlF,EAAgBiF,GAAW5D,GACtB,MAAd6D,EAAMvV,MAAkC,MAAlBuV,EAAMC,UAC9BH,EAAU1D,KAAK4D,GAOpB,OAAOF,GAGRI,kBAAmB,SAAS/D,GAE3B,IAAIgE,EAAelG,EAAKnP,wBAA0B,GAClD,OAAyC,MAAjCgQ,EAAgBqF,IAAsE,MAA7CrF,EAAgBqF,GAAchE,IAGhFiE,iBAAkB,SAASC,GAC1B,OAAQA,GAActG,EAAYuG,OAAShF,EAAuBN,GAEnEuF,cAAe,SAASF,GACvB,OAAQA,GAActG,EAAYuG,OAAS/E,EAAoBN,GAEhEuF,cAAe,SAASH,GACvB,OAAQA,GAActG,EAAYuG,OAAS9E,EAAoBN,GAEhEuF,kBAAmB,SAASJ,GAC3B,OAAQA,GAActG,EAAYuG,OAAS7E,EAAwBN,GAEpEuF,eAAgB,SAASL,GACxB,OAAQA,GAActG,EAAYuG,OAAS5E,EAAqBN,GAEjEuF,oBAAqB,SAASN,GAC7B,OAAQA,GAActG,EAAYuG,OAAS3E,EAA0BN,GAGtEuF,qBAAsB,WACrB,OAAOhF,GAERiF,uBAAwB,WACvBjF,GAAe,GAIhBkF,sBAAuB,SAASC,GAC/B,IAAK,IAAI5E,KAAcjC,EAClBF,EAAE8E,SAASiC,EAAQ5E,KACtBjC,EAAWiC,QAAc6E,GAG3B,IAAK,IAAI7E,KAAchC,EAAeC,UACjCJ,EAAE8E,SAASiC,EAAQ5E,KACtBhC,EAAeC,UAAU+B,QAAc6E,GAGzC,IAAK,IAAI7E,KAAcxB,EAClBX,EAAE8E,SAASiC,EAAQ5E,KACtBxB,EAAewB,QAAc6E,IAKhCC,aAAc,SAAS9E,EAAY+E,GAE9BhH,EAAWiC,KACdjC,EAAWiC,GAAc,IAE1BjC,EAAWiC,GAAc+E,EAGrB/G,EAAeC,UAAU+B,KAC5BhC,EAAeC,UAAU+B,GAAc,IAExChC,EAAeC,UAAU+B,GAAYoB,UAAYtD,EAAKzP,eAGvD2W,mBAAoB,SAASC,GAE5B,IAAI,IAAIhJ,KAAQgJ,EAEf,GAAW,QAARhJ,EACF+B,EAAeE,OAAOL,EAAEqH,UAAUlH,EAAeE,OAAQ,CAACjC,KAAM,UAAUkJ,MAAQF,EAAkBhJ,GAAMkJ,WAErG,GAAmC,WAAhCF,EAAkBhJ,GAAMmJ,KAAkB,CAClD,IAAIC,EAAqBxH,EAAEqH,UAAUlH,EAAeE,OAAQ,CAACjC,KAAMA,IAC/DqJ,EAAmB,CAAC,KAAOrJ,EAAM,MAAQgJ,EAAkBhJ,GAAMkJ,MAAO,MAAQvR,SAASqR,EAAkBhJ,GAAMsJ,SAC3F,GAAvBF,EACFrH,EAAeE,OAAOmH,GAAsBC,EAE5CtH,EAAeE,OAAO+B,KAAKqF,GAM9BtH,EAAeE,OAASL,EAAE2H,OAAOxH,EAAeE,OAAQ,SAGxDF,EAAeG,gBAAkBL,EAAKzP,eAIvCoX,WAAY,WAEX,MAAO,gBACatX,KAAKC,UAAU2P,GAD5B,oBAEe5P,KAAKC,UAAU4P,GAF9B,oBAGe7P,KAAKC,UAAUoQ,GAH9B,qBAIgBrQ,KAAKC,UAAUuQ,GACtC,OAIFpU,EAAWmb,UAAS,SAAStQ,GAC5B,OAAOA,EAAOmB,YACb,KAAKkH,EAAQ5E,WAKZ,GAHG5K,aAAagQ,YACfF,EAAa5P,KAAK4B,MAAM9B,aAAagQ,YAEnChQ,aAAa0X,cAAc,CAMjC,IAAIC,EAAmBzX,KAAK4B,MAAM9B,aAAa0X,eAEX,MAAjCC,EAAgB,WAA+D,MAAtCA,EAAgB,gBAAmE,MAArCA,EAAgB,eACzG3X,aAAa0X,cAAgBxX,KAAKC,UAAU4P,GAC5C6H,QAAQC,IAAI,uCAEZD,QAAQC,IAAI,iCACZ9H,EAAiB7P,KAAK4B,MAAM9B,aAAa0X,gBAIpC1X,aAAa8X,gBACfvH,EAAiBrQ,KAAK4B,MAAM9B,aAAa8X,gBAEvC9X,aAAa+X,iBACfrH,EAAkBxQ,KAAK4B,MAAM9B,aAAa+X,iBAG3CtG,EAAcjS,aACd,MAED,KAAKgQ,EAAQrE,cACZ,GAAGhE,EAAOkB,cAAgB7L,EAAO0N,GAAG,CAEnC,IAAI8N,EAAoBpI,EAAEqI,OAAO9Q,EAAO+Q,WAKxCzG,EAAciF,sBAAsBsB,GAGpChY,aAAagQ,UAAY9P,KAAKC,UAAU2P,GACxC9P,aAAa0X,cAAgBxX,KAAKC,UAAU4P,GAC5C/P,aAAa8X,cAAgB5X,KAAKC,UAAUoQ,GAI7C,MAGD,KAAKf,EAAQjE,iBACTpE,EAAOkB,cAAgB7L,EAAO0N,IAAM/C,EAAOkB,cAAgB7L,EAAO4N,UAC1C,MAAvBjD,EAAO2P,cACTrF,EAAcoF,aAAa1P,EAAO4K,WAAY5K,EAAO2P,cAGvB,MAA5B3P,EAAO6P,mBACTvF,EAAcsF,mBAAmB5P,EAAO6P,mBAIzChX,aAAagQ,UAAY9P,KAAKC,UAAU2P,GACxC9P,aAAa0X,cAAgBxX,KAAKC,UAAU4P,IAE7CY,EAAQiB,QAAUzK,EAAOkB,aACzBoJ,EAAcjS,aACd,MAED,KAAKgQ,EAAQ1C,cACZ,IAAIqL,GAAkB,EAEtB,GAAGhR,EAAOiR,QAAU3I,EAAc4I,SAAS,CAE1C,GAAGlR,EAAOmR,aAAe9b,EAAO0N,KACH,MAAzB/C,EAAOoR,gBACT9G,EAAcsF,mBAAmB5P,EAAOoR,gBAGb,MAAzBpR,EAAOqR,gBACT,IAAK,IAAI/a,EAAI,EAAGA,EAAI0J,EAAOqR,eAAe7a,OAAQF,IAClB,MAA5B0J,EAAOqR,eAAe/a,IACxBgU,EAAcoF,aAAa1P,EAAOqR,eAAe/a,GAAGqJ,GAAIK,EAAOqR,eAAe/a,IAa/E0J,EAAOsR,cAAgBjc,EAAO4L,UAEhCpI,aAAagQ,UAAY9P,KAAKC,UAAU2P,GACxC9P,aAAa0X,cAAgBxX,KAAKC,UAAU4P,GAG5CoI,GAAkB,GAIjBA,GACF1G,EAAcjS,aAGf,MAGD,KAAKgQ,EAAQ5D,2BACb,KAAK4D,EAAQ3D,+BAKZ,IAHIuI,EAAiBvE,EAAKhJ,UAAUM,EAAO4K,cAGW,MAAjCjC,EAAW3I,EAAO4K,YAAoB,CAClB,MAArCxB,EAAepJ,EAAO4K,cACxBxB,EAAepJ,EAAO4K,YAAc,IAWrCxB,EAAepJ,EAAO4K,YAAYiC,QAAU,GAC5C,IAASvW,EAAI,EAAGA,EAAIsS,EAAeE,OAAOtS,OAAQF,IAAK,CACtD,IAAI0W,EAAQpE,EAAeE,OAAOxS,IAG7B2W,GAAgE,MAA9CjN,EAAOuR,wBAAwBvE,EAAMnG,QACzDoG,GAAkBjN,EAAOuR,wBAAwBvE,EAAMnG,OAAS8B,EAAW3I,EAAO4K,YAAYoC,EAAMnG,SACtGuC,EAAepJ,EAAO4K,YAAYiC,QAAQG,EAAMnG,MAAQ7G,EAAOuR,wBAAwBvE,EAAMnG,OAK/FhO,aAAa8X,cAAgB5X,KAAKC,UAAUoQ,GAE5CkB,EAAcjS,aAEf,MAED,KAAKgQ,EAAQ1D,6BAC4B,MAArCyE,EAAepJ,EAAO4K,aAAoE,MAA7CxB,EAAepJ,EAAO4K,YAAYiC,UACjFzD,EAAepJ,EAAO4K,YAAYiC,aAAU4C,EAG5C5W,aAAa8X,cAAgB5X,KAAKC,UAAUoQ,GAE5CkB,EAAcjS,cAEf,MAED,KAAKgQ,EAAQzD,4BAKZ,IAHIqI,EAAiBvE,EAAKhJ,UAAUM,EAAO4K,cAGW,MAAjCjC,EAAW3I,EAAO4K,YAAoB,CAClB,MAArCxB,EAAepJ,EAAO4K,cACxBxB,EAAepJ,EAAO4K,YAAc,IAEa,MAA/CxB,EAAepJ,EAAO4K,YAAYO,YACpC/B,EAAepJ,EAAO4K,YAAYO,UAAY,IAG/C,IAAIqG,EAAkBlH,EAAcW,WACpC7B,EAAepJ,EAAO4K,YAAYO,UAAUqG,GAAmBlH,EAAcoD,yBAG7EpD,EAAcmD,8BAA8BzN,EAAO4K,WAAY4G,GAG/D3Y,aAAa8X,cAAgB5X,KAAKC,UAAUoQ,GAE5CkB,EAAcjS,aAEf,MAGD,KAAKgQ,EAAQxD,6BACb,KAAKwD,EAAQvD,iCAKZ,IAHImI,EAAiBvE,EAAKhJ,UAAUM,EAAO4K,cAGW,MAAjCjC,EAAW3I,EAAO4K,YAAoB,CAClB,MAArCxB,EAAepJ,EAAO4K,cACxBxB,EAAepJ,EAAO4K,YAAc,IAQrCxB,EAAepJ,EAAO4K,YAAYO,UAAY,GAE9C,IAAIsG,GAAsB,EAE1B,IAAK,IAAIjF,KAAcxM,EAAO0R,0BAA2B,CACxD,IAAIC,EAAe3R,EAAO0R,0BAA0BlF,GAKpD,GAAGS,GAAkBvE,EAAKhJ,UAAU8M,GACnCpD,EAAepJ,EAAO4K,YAAYO,UAAUqB,GAAcmF,EAC1DF,GAAsB,MAGlB,CAOJ,IANA,IAAIG,EAAa,GACbC,GAAqB,EAGrBC,EAAerJ,EAAEiE,KAAK/D,EAAW3I,EAAO4K,YAAYO,UAAW,CAACxL,GAAInB,SAASgO,KAExEc,EAAI,EAAGA,EAAI1E,EAAeI,eAAexS,OAAQ8W,IAAK,CAC9D,IAAIN,EAAQpE,EAAeI,eAAesE,GAEvCqE,EAAa3E,EAAMnG,OAASiL,EAAa9E,EAAMnG,QACjD+K,EAAW5E,EAAMnG,MAAQ8K,EAAa3E,EAAMnG,MAC5CgL,GAAqB,EACrBJ,GAAsB,GAIrBI,IAEFzI,EAAepJ,EAAO4K,YAAYO,UAAUqB,GAAcoF,IAKzDH,IAGHrI,EAAepJ,EAAO4K,YAAYO,UAAY,IAIb,MAA/BnL,EAAO+R,sBACTzH,EAAcmD,8BAA8BzN,EAAO4K,WAAY5K,EAAO+R,sBAIvElZ,aAAa8X,cAAgB5X,KAAKC,UAAUoQ,GAE5CkB,EAAcjS,aAEf,MAED,KAAKgQ,EAAQtD,+BAC4B,MAArCqE,EAAepJ,EAAO4K,aAAsE,MAA/CxB,EAAepJ,EAAO4K,YAAYO,YACjF/B,EAAepJ,EAAO4K,YAAYO,eAAYsE,EAG9CnF,EAAcmD,8BAA8BzN,EAAO4K,WAAY,MAG/D/R,aAAa8X,cAAgB5X,KAAKC,UAAUoQ,GAE5CkB,EAAcjS,cAEf,MAED,KAAKgQ,EAAQrD,2BAKZ,IAHIiI,EAAiBvE,EAAKhJ,UAAUM,EAAO4K,cAGW,MAAjCjC,EAAW3I,EAAO4K,YAAoB,CAClB,MAArCxB,EAAepJ,EAAO4K,cACxBxB,EAAepJ,EAAO4K,YAAc,IAEY,MAA9CxB,EAAepJ,EAAO4K,YAAYU,WACpClC,EAAepJ,EAAO4K,YAAYU,SAAW,IAG9C,IAAI0G,EAAiB1H,EAAcW,WACnC7B,EAAepJ,EAAO4K,YAAYU,SAAS0G,GAAkB1H,EAAc6D,wBAG3E7D,EAAc4D,6BAA6BlO,EAAO4K,WAAYoH,GAG9DnZ,aAAa8X,cAAgB5X,KAAKC,UAAUoQ,GAE5CkB,EAAcjS,aAEf,MAGD,KAAKgQ,EAAQpD,4BACb,KAAKoD,EAAQnD,gCAEZ,IAAI+H,EAGJ,IAHIA,EAAiBvE,EAAKhJ,UAAUM,EAAO4K,cAGW,MAAjCjC,EAAW3I,EAAO4K,YAAoB,CAClB,MAArCxB,EAAepJ,EAAO4K,cACxBxB,EAAepJ,EAAO4K,YAAc,IAQrCxB,EAAepJ,EAAO4K,YAAYU,SAAW,GAE7C,IAAI2G,GAAqB,EAEzB,IAAK,IAAIlE,KAAa/N,EAAOkS,yBAA0B,CACtD,IAAIC,EAAcnS,EAAOkS,yBAAyBnE,GAKlD,GAAGd,GAAkBvE,EAAKhJ,UAAUqO,GACnC3E,EAAepJ,EAAO4K,YAAYU,SAASyC,GAAaoE,EACxDF,GAAqB,MAGjB,CACJ,IAAIL,EAAa,GACbQ,GAAoB,EAGpBC,EAAc5J,EAAEiE,KAAK/D,EAAW3I,EAAO4K,YAAYU,SAAU,CAAC3L,GAAInB,SAASuP,KAE/E,IAAST,EAAI,EAAGA,EAAI1E,EAAeM,cAAc1S,OAAQ8W,IAAK,CAC7D,IAAIN,EAAQpE,EAAeM,cAAcoE,GAEtC6E,EAAYnF,EAAMnG,OAASwL,EAAYrF,EAAMnG,QAC/C+K,EAAW5E,EAAMnG,MAAQsL,EAAYnF,EAAMnG,MAC3CuL,GAAoB,EACpBH,GAAqB,GAIpBG,IAEFhJ,EAAepJ,EAAO4K,YAAYU,SAASyC,GAAa6D,IAKvDK,IAGH7I,EAAepJ,EAAO4K,YAAYU,SAAW,IAIb,MAA9BtL,EAAOsS,qBACThI,EAAc4D,6BAA6BlO,EAAO4K,WAAY5K,EAAOsS,qBAItEzZ,aAAa8X,cAAgB5X,KAAKC,UAAUoQ,GAE5CkB,EAAcjS,aAEf,MAED,KAAKgQ,EAAQlD,8BAC4B,MAArCiE,EAAepJ,EAAO4K,aAAqE,MAA9CxB,EAAepJ,EAAO4K,YAAYU,WACjFlC,EAAepJ,EAAO4K,YAAYU,cAAWmE,EAG7CnF,EAAc4D,6BAA6BlO,EAAO4K,WAAY,MAG9D/R,aAAa8X,cAAgB5X,KAAKC,UAAUoQ,GAE5CkB,EAAcjS,cAEf,MAED,KAAKgQ,EAAQjD,qBAC4B,MAArCgE,EAAepJ,EAAO4K,cACxBxB,EAAepJ,EAAO4K,iBAAc6E,EAGpCnF,EAAcmD,8BAA8BzN,EAAO4K,WAAY,MAC/DN,EAAc4D,6BAA6BlO,EAAO4K,WAAY,MAG9D/R,aAAa8X,cAAgB5X,KAAKC,UAAUoQ,GAE5CkB,EAAcjS,cAEf,MAGD,KAAKgQ,EAAQhD,sBAKZ,GAHAmE,EAAQxJ,EAAOmB,YAAcnB,EAAOkB,aAGhB,MAAjBlB,EAAOiR,SAAmBjR,EAAOsR,cAAgBjc,EAAO0N,IAAM/C,EAAOsR,cAAgBjc,EAAO4N,SAC9F,GAAGjD,EAAOiR,QAAU1I,EAAmBgK,iBACE,MAArCnJ,EAAepJ,EAAO4K,cACxBxB,EAAepJ,EAAO4K,YAAYiC,aAAU4C,GAGlB,MAAxBzP,EAAOwS,eACTlI,EAAc+D,uBAAuBrO,EAAOwS,oBAGxC,GAAGxS,EAAOiR,QAAU1I,EAAmBkK,oBAC5C,GAAwC,MAArCrJ,EAAepJ,EAAO4K,YACxB,GAAG5K,EAAOsR,cAAgBjc,EAAO0N,GAChCqG,EAAepJ,EAAO4K,YAAYO,eAAYsE,OAE9C,IAASnC,EAAI,EAAGA,EAAItN,EAAO0S,aAAalc,OAAQ8W,IAC/ClE,EAAepJ,EAAO4K,YAAYO,UAAUnL,EAAO0S,aAAapF,SAAMmC,OAKpE,GAAGzP,EAAOiR,QAAU1I,EAAmBoK,mBACJ,MAArCvJ,EAAepJ,EAAO4K,YACxB,GAAG5K,EAAOsR,cAAgBjc,EAAO0N,GAChCqG,EAAepJ,EAAO4K,YAAYU,cAAWmE,OAE7C,IAASnC,EAAI,EAAGA,EAAItN,EAAO0S,aAAalc,OAAQ8W,IAC/ClE,EAAepJ,EAAO4K,YAAYU,SAAStL,EAAO0S,aAAapF,SAAMmC,EASvEzP,EAAOkB,cAAgB7L,EAAO4L,UAE7BjB,EAAOkB,cAAgB7L,EAAO0N,IACQ,MAArCqG,EAAepJ,EAAO4K,cACxBxB,EAAepJ,EAAO4K,iBAAc6E,GAItC5W,aAAa8X,cAAgB5X,KAAKC,UAAUoQ,IAG7CkB,EAAcjS,aACd,MAED,KAAKgQ,EAAQpE,uBACZuF,EAAQxJ,EAAOmB,YAAcnB,EAAOkB,aACpCwI,EAAmB1J,EAAO4S,WAC1BjJ,EAAmB3J,EAAO6S,WAC1BjJ,EAAuB5J,EAAO8S,eAAiB9S,EAAO8S,eAAiB,GAEvE,IAAIC,EAAiB,GACrBtK,EAAEuK,QAAQtJ,EAAiB9R,MAAM,MAAM,SAACqb,GACvC,IAAIC,EAAcD,EAAKE,OACL,IAAfD,GACFH,EAAelI,KAAKqI,EAAYE,kBAIlC,IAAIC,EAAmB5K,EAAEiD,OAAO/C,GAAY,SAACgD,GAE5C,GAAe,MAAZA,GAA0C,GAAtBA,EAASC,UAC/B,OAAO,EAQR,IAFA,IAAI/E,EAAyB,MAAjB8E,EAAS9E,KAAgB8E,EAAS9E,KAAKuM,cAAgB,GAC/DE,EAAsC,MAAxB3H,EAAS4H,YAAuB5H,EAAS4H,YAAYH,cAAgB,GAC9E9c,EAAI,EAAGA,EAAIyc,EAAevc,OAAQF,IAE1C,IAAyC,IAArCuQ,EAAK/P,QAAQic,EAAezc,MAA2D,IAA3Cgd,EAAWxc,QAAQic,EAAezc,IACjF,OAAO,EAIT,OAAO,KAGRuT,EAAoBwJ,EAAiB7c,OACrCsT,EAAyB1Q,KAAKC,MAAMwQ,EAAoBD,IAA0BC,EAAoBD,EAAwB,EAAI,EAAI,GAGtI,IAAI4J,IAFJ7J,EAA8C,GAA1BG,GAA+BH,EAAmB,EAAK,EAAKA,EAAmBG,EAAyBA,EAAyBH,GAE3G,GAAKC,EAC/CH,EAAsB4J,EAAiBI,MAAMD,EAAkBA,EAAkB5J,GAEjFU,EAAcjS,aACd,MAED,KAAKgQ,EAAQnE,wBACTlE,EAAOkB,cAAgB7L,EAAO0N,KAEhCgH,EAAuB/J,EAAO0T,YAC9BvJ,EAAqBnK,EAAO2T,MAC5BvJ,EAA0BpK,EAAO4T,YAGlCpK,EAAQxJ,EAAOmB,YAAcnB,EAAOkB,aACpC8I,EAAoBhK,EAAO4S,WAC3B3I,EAAoBjK,EAAO6S,WAC3B3I,EAAwBlK,EAAO8S,eAAiB9S,EAAO8S,eAAiB,GAExExI,EAAcjS,aACd,MAED,KAAKgQ,EAAQlE,iBACZqF,EAAQxJ,EAAOmB,YAAcnB,EAAOkB,aACpCmJ,EAAgBrK,EAAOkB,cAAgB7L,EAAO0N,IAAYsH,EAE1DC,EAAcjS,aACd,MAGD,KAAKgQ,EAAQhE,eAIZ,IAAIwP,GAAY,IAAI1a,KAA6B,IAAxB6G,EAAO8T,gBAChCD,GAAYnL,EAAKnP,sBAAsBsa,IAKnCtK,EAHAqF,GAAeiF,GAAY,MAI9BtK,EAAgBqF,IAAgB,IAE7BrF,EAAgBqF,IAAc5O,EAAO4K,cACxCrB,EAAgBqF,IAAc5O,EAAO4K,YAAc,CAClD,YAAgB5K,EAAO4K,WACvB,KAAUiJ,GACV,WAAc7T,EAAO8T,eAGrB,SAAa9T,EAAO8T,gBAIrBjb,aAAa+X,eAAiB7X,KAAKC,UAAUuQ,IAM9C,MAGD,KAAKlB,EAAQ/D,cAEZ,IAEIsK,GAFAiF,GAAYnL,EAAKnP,wBAKgB,MAAjCgQ,EAHAqF,GAAeiF,GAAY,KAIsB,MAApDtK,EAAgBqF,IAAc5O,EAAO4K,cACrCrB,EAAgBqF,IAAc5O,EAAO4K,YAAY8D,SAAW1O,EAAO+T,cAGnElb,aAAa+X,eAAiB7X,KAAKC,UAAUuQ,IAM9C,MAGD,KAAKlB,EAAQ9D,uBACZ,GAAGvE,EAAOkB,cAAgB7L,EAAO0N,IAAkC,MAA5B/C,EAAOgU,mBAA6BhU,EAAOgU,kBAAkBxd,OAAO,CAG1G,IAAS8W,EAAI,EAAGA,EAAItN,EAAOgU,kBAAkBxd,OAAQ8W,IAAK,CACzD,IAAI2G,GAAQjU,EAAOgU,kBAAkB1G,GAAGpU,KAAO,GAC3Cgb,GAAclU,EAAOgU,kBAAkB1G,GAAG6G,YAEjB,MAA1B5K,EAAgB0K,KAAyD,MAAvC1K,EAAgB0K,IAAOC,MAC3D3K,EAAgB0K,IAAOC,SAAezE,GAKxC,IAAK,IAAIjB,MAAajF,EACrB,GAAiC,MAA9BA,EAAgBiF,IAAmB,CACrC,IAAI4F,IAAe,EACnB,IAAK,IAAIxJ,MAAcrB,EAAgBiF,IACO,MAA1CjF,EAAgBiF,IAAW5D,MAC7BwJ,IAAe,GAGdA,KACF7K,EAAgBiF,SAAaiB,GAMhC5W,aAAa+X,eAAiB7X,KAAKC,UAAUuQ,GAG9C,MAED,KAAKlB,EAAQzE,iBACZ+E,EAAa,GACbC,EAAiB,CAChBC,UAAW,GAEXC,OAAQ,CAEP,CAAC,KAAO,OAAQ,MAAQ,eAAgB,OAAS,IACjD,CAAC,KAAO,cAAe,MAAQ,cAAe,OAAS,GACvD,CAAC,KAAO,iBAAkB,MAAQ,iBAAkB,OAAS,GAC7D,CAAC,KAAO,QAAS,MAAQ,QAAS,OAAS,IAE5CC,gBAAiB,KAEjBC,eAAgB,CAEf,CAAC,KAAO,cAAe,MAAQ,cAAe,OAAS,IACvD,CAAC,KAAO,YAAa,MAAQ,YAAa,OAAS,GACnD,CAAC,KAAO,YAAa,MAAQ,YAAa,OAAS,GACnD,CAAC,KAAO,OAAQ,MAAQ,OAAQ,OAAS,GAEzC,CAAC,KAAO,MAAO,MAAQ,MAAO,OAAS,GAEvC,CAAC,KAAO,WAAY,MAAQ,WAAY,OAAS,GACjD,CAAC,KAAO,YAAa,MAAQ,YAAa,OAAS,IAEpDC,wBAAyB,KAEzBC,cAAe,CAEd,CAAC,KAAO,aAAc,MAAQ,aAAc,OAAS,IACrD,CAAC,KAAO,YAAa,MAAQ,YAAa,OAAS,GACnD,CAAC,KAAO,QAAS,MAAQ,QAAS,OAAS,GAC3C,CAAC,KAAO,eAAgB,MAAQ,eAAgB,OAAS,GACzD,CAAC,KAAO,aAAc,MAAQ,aAAc,OAAS,GACrD,CAAC,KAAO,MAAO,MAAQ,MAAO,OAAS,IAGxCC,uBAAwB,MAEzBC,EAAiB,GACjBC,EAAoB,GACpBC,EAAuB,KACvBC,EAAkB,GAElBE,EAAsB,GACtBC,EAAmB,GACnBC,EAAmB,EACnBC,EAAuB,GACvBC,EAAoB,KACpBC,EAAyB,KAEzBC,EAAuB,GACvBC,EAAoB,GACpBC,EAAoB,EACpBC,EAAwB,GACxBC,EAAqB,KACrBC,EAA0B,KAG1BvR,aAAagQ,UAAY9P,KAAKC,UAAU2P,GACxC9P,aAAa0X,cAAgBxX,KAAKC,UAAU4P,GAC5C/P,aAAa8X,cAAgB5X,KAAKC,UAAUoQ,GAC5CvQ,aAAa+X,eAAiB7X,KAAKC,UAAUuQ,GAG7Ce,EAAcjS,iBASjB8K,EAAOC,QAAUkH,G,gBCtuCjB,IAAI+J,EAASjf,EAAQ,IAGjBkf,EAAY,CAEfC,WAAY,SAGZC,qBAAsBH,EAAOI,YAE7BC,cAAe,GAEfC,SAAU,GAGVC,WAAY,SAASC,GACpBP,EAAUI,cAAgBG,GAK3B5N,IAAK,SAAS6N,GACb,OAC8D,MAA7DR,EAAUK,SAASL,EAAUI,eAAeI,GAC3CR,EAAUK,SAASL,EAAUI,eAAeI,GAC5CR,EAAUK,SAASN,EAAOU,iBAAiBD,KAS/CR,EAAUI,cAAgBJ,EAAUE,qBAKpCF,EAAUK,SAASN,EAAOU,iBAAmB,GAC7CT,EAAUK,SAASN,EAAOU,iBAAiBV,EAAOW,sBAAuB,EACzEV,EAAUK,SAASN,EAAOU,iBAAiBV,EAAOY,oBAAqB,EACvEX,EAAUK,SAASN,EAAOU,iBAAiBV,EAAOa,sBAAuB,EACzEZ,EAAUK,SAASN,EAAOU,iBAAiBV,EAAOc,2BAA4B,EAC9Eb,EAAUK,SAASN,EAAOU,iBAAiBV,EAAOe,8BAA+B,EACjFd,EAAUK,SAASN,EAAOU,iBAAiBV,EAAOgB,4BAA6B,EAC/Ef,EAAUK,SAASN,EAAOU,iBAAiBV,EAAOiB,uBAAwB,EAC1EhB,EAAUK,SAASN,EAAOU,iBAAiBV,EAAOkB,wBAAyB,EAC3EjB,EAAUK,SAASN,EAAOU,iBAAiBV,EAAOmB,8BAA+B,EACjFlB,EAAUK,SAASN,EAAOU,iBAAiBV,EAAOoB,0BAA2B,EAG7EnB,EAAUK,SAASN,EAAOI,aAAe,GACzCH,EAAUK,SAASN,EAAOI,aAAaJ,EAAOiB,uBAAwB,EACtEhB,EAAUK,SAASN,EAAOI,aAAaJ,EAAOkB,wBAAyB,EAEvEjB,EAAUK,SAASN,EAAOqB,aAAe,GACzCpB,EAAUK,SAASN,EAAOqB,aAAarB,EAAOW,sBAAuB,EACrEV,EAAUK,SAASN,EAAOqB,aAAarB,EAAOY,oBAAqB,EACnEX,EAAUK,SAASN,EAAOqB,aAAarB,EAAOa,sBAAuB,EACrEZ,EAAUK,SAASN,EAAOqB,aAAarB,EAAOc,2BAA4B,EAC1Eb,EAAUK,SAASN,EAAOqB,aAAarB,EAAOe,8BAA+B,EAC7Ed,EAAUK,SAASN,EAAOqB,aAAarB,EAAOgB,4BAA6B,EAC3Ef,EAAUK,SAASN,EAAOqB,aAAarB,EAAOiB,uBAAwB,EACtEhB,EAAUK,SAASN,EAAOqB,aAAarB,EAAOkB,wBAAyB,EACvEjB,EAAUK,SAASN,EAAOqB,aAAarB,EAAOmB,8BAA+B,EAC7ElB,EAAUK,SAASN,EAAOqB,aAAarB,EAAOoB,0BAA2B,EAEzEnB,EAAUK,SAASN,EAAOsB,gBAAkB,GAE5CxS,EAAOC,QAAUkR,G,6BCnEjBnR,EAAOC,QAAU,CAEhB2R,gBAAkB,kBAClBN,YAAe,cACfkB,eAAkB,iBAClBD,YAAe,cAGfV,oBAAuB,sBACvBC,kBAAsB,oBACtBC,oBAAuB,sBACvBC,yBAA2B,2BAC3BC,4BAA6B,8BAC7BC,0BAA4B,4BAC5BO,2BAA6B,6BAG7BN,qBAAwB,uBACxBC,sBAAyB,wBACzBC,4BAA6B,8BAC7BC,wBAA0B,0BAC1BI,2BAA6B,+B,gBCX9B,IAAI1gB,EAAaC,EAAQ,KAAQD,WAEjCgO,EAAOC,QAAU,IAAIjO,G,8BCbrB,IAAIA,EAAaC,EAAQ,IACrBiT,EAAUjT,EAAQ,IAClBC,EAASD,EAAQ,GACjB0gB,EAAa1gB,EAAQ,IACrBE,EAAeF,EAAQ,IAAUE,aACjCC,EAASH,EAAQ,IACjBqT,EAAIrT,EAAQ,IAEZsT,EAAOtT,EAAQ,GAIf2gB,EAAS,GAITC,EAAa,CAAEhK,UAAW,MAE1BxC,EAAUnU,EAAO0N,GAKjBkT,EAAmBvN,EAAKnP,wBAA0B,GAElD2c,EAAY3gB,EAAO,GAAID,EAAawC,UAAW,CAClDC,kBAAmB,SAASC,GAAWC,KAAKC,GAnB1B,SAmB2CF,IAC7DG,qBAAsB,SAASH,GAAWC,KAAKG,eApB7B,SAoB0DJ,IAC5EK,WAAY,WAAYJ,KAAKK,KArBX,WAuBlBiS,UAAW,WACV,OAAOf,GAGR2M,YAAa,WAIZ,OAAS1N,EAAE2N,IAAI3N,EAAE4N,OAAON,GAAS,cAChCtN,EAAE2H,OAAO3H,EAAEzG,IAAI+T,GAAQ,SAASO,EAAM3W,GAGrC,OAFA2W,EAAKC,UAA+B,MAAlBP,EAAWrW,IAAeqW,EAAWrW,GAAI4W,UAC3DD,EAAKE,UAA+B,MAAlBR,EAAWrW,IAAeqW,EAAWrW,GAAI6W,UACpDF,KACJ,cAEJ7N,EAAEzG,IAAI+T,GAAQ,SAASO,EAAM3W,GAG5B,OAFA2W,EAAKC,UAA+B,MAAlBP,EAAWrW,IAAeqW,EAAWrW,GAAI4W,UAC3DD,EAAKE,UAA+B,MAAlBR,EAAWrW,IAAeqW,EAAWrW,GAAI6W,UACpDF,MAKVG,YAAa,SAAS9W,GAErB,OAAOoW,EAAOpW,IAUf+W,eAAgB,WACf,OAAOV,EAAWhK,WAInB2K,mBAAoB,WAEnB,OAAOlO,EAAEqI,OAAOiF,GAAQ/T,KAAI,SAACU,GAAD,OAAUlE,SAASkE,OAShDkU,UAAW,WAEVZ,EAAa,CAAEhK,UAAWgK,EAAWhK,YAItC6K,gBAAiB,SAASrH,GACzB,IAAIsH,EAAItH,EAAOhZ,OACf,GAAGsgB,EACF,IAAK,IAAIxgB,EAAI,EAAGA,EAAIwgB,EAAGxgB,IACtB0f,EAAWxG,EAAOlZ,SAAMmZ,GAM3BF,sBAAuB,SAASC,GAC/B,IAAK,IAAI5E,KAAcoL,EACL,aAAdpL,GAA8BnC,EAAE8E,SAASiC,EAAQ5E,KACnDoL,EAAWpL,QAAc6E,IAM5BY,WAAY,WAEX,MAAO,YACWtX,KAAKC,UAAU+c,GAD1B,gBAEchd,KAAKC,UAAUgd,GAF7B,sBAGkBjd,KAAKC,UAAUid,GACxC,OAIF9gB,EAAWmb,UAAS,SAAStQ,GAC5B,OAAOA,EAAOmB,YACb,KAAKkH,EAAQ5E,WAET5K,aAAake,QACfhB,EAAShd,KAAK4B,MAAM9B,aAAake,QAE/Ble,aAAame,YACfhB,EAAajd,KAAK4B,MAAM9B,aAAame,YAGnCne,aAAaoe,kBACfhB,EAAmBld,KAAK4B,MAAM9B,aAAaoe,kBAE5Cf,EAAU7d,aACV,MACD,KAAKgQ,EAAQrE,cACThE,EAAOkB,cAAgB7L,EAAO0N,KAEhCgT,EAAS/V,EAAO+Q,UAChBiF,EAAWhK,UAAYtD,EAAKzP,cAGxB+G,EAAOkX,SAAW,IAAOjB,IAG5BC,EAAUU,YAGVX,EAAmBjW,EAAOkX,SAAW,GAErCre,aAAaoe,gBAAkBle,KAAKC,UAAUid,IAS/Cpd,aAAake,MAAQhe,KAAKC,UAAU+c,GACpCld,aAAame,UAAYje,KAAKC,UAAUgd,IAEzCxM,EAAUxJ,EAAOkB,aACjBgV,EAAU7d,aACV,MACD,KAAKgQ,EAAQ/D,cAGTtE,EAAOmX,sBACLnB,EAAWhW,EAAO4K,cACrBoL,EAAWhW,EAAO4K,YAAc,IAGjCoL,EAAWhW,EAAO4K,YAAY2L,WAAY,EAK1C1d,aAAame,UAAYje,KAAKC,UAAUgd,GAExCxM,EAAUnU,EAAO0N,GACjBmT,EAAU7d,cAEX,MACD,KAAKgQ,EAAQ3C,cAEZ,GAAG1F,EAAOkB,cAAgB7L,EAAO4L,SAE7BjB,EAAOoX,YAActB,EAAWuB,KAAK,CAEvC,GAA4C,MAAzCrX,EAAO0S,aAAauD,GACtB,IAAK,IAAIrL,KAAc5K,EAAO0S,aAAauD,GAIrCjW,EAAOsX,UAAUrB,IAAsBjW,EAAOsX,UAAUrB,GAAkBrL,IAA2C,MAA1BoL,EAAWpL,KAC1GoL,EAAWpL,GAAY4L,WAAY,GAMtC3d,aAAame,UAAYje,KAAKC,UAAUgd,GAG1CxM,EAAUxJ,EAAOkB,aACjBgV,EAAU7d,aACV,MACD,KAAKgQ,EAAQzE,iBACZmS,EAAS,GACTC,EAAa,CAAEhK,UAAW,MAE1BnT,aAAake,MAAQhe,KAAKC,UAAU+c,GACpCld,aAAame,UAAYje,KAAKC,UAAUgd,GAExCE,EAAU7d,iBAQb8K,EAAOC,QAAU8S,G,6BC9NjB,uCAEAhhB,OAAOD,EAAIA,IAEX,IAAIE,EAAaC,EAAQ,IACrBiT,EAAUjT,EAAQ,IAClBmiB,EAAcniB,EAAQ,IACtBoiB,EAAepiB,EAAQ,IACvBqiB,EAAeriB,EAAQ,IACvBC,EAASD,EAAQ,GACjB0gB,EAAa1gB,EAAQ,IACrBmT,EAAqBnT,EAAQ,KAC7BqT,EAAIrT,EAAQ,IACZsT,EAAOtT,EAAQ,GACfK,EAASL,EAAQ,IAEjBsiB,EAA4B,KAG5BC,EAAc,CACjBC,mBAAoB,SAAS5X,EAAQE,GACvB,gBAAVF,GAAsC,8BAAVA,EAE9B7K,EAAW2L,SAAS,CACnBK,WAAYkH,EAAQrE,cACpB9C,aAAc7L,EAAO4L,UAEJ,mBAAVjB,GAER7K,EAAW2L,SAAS,CACnBK,WAAYkH,EAAQjE,iBACpBlD,aAAc7L,EAAO4L,QACrB2J,WAAqB,MAAR1K,EAAeA,EAAK,GAAKA,IAOxCqX,EAAYM,YAAY5f,KAAK+H,GAASE,EAAMjI,OAI7C6f,2BAA4B,SAASC,GAER,MAAzBA,IACFA,GAAwB,GAKzB,IAAIC,EAAe,CAGlB,CAAE/X,QAASsX,EAAavX,OAAQ,cAAeE,KAAM,KAAM0C,oBAAqB,IAAMN,YAAY,GAElG,CAAErC,QAAShI,KAAM+H,OAAQ,eAAgBE,KAAM,KAAM0C,oBAAqB,GAAKN,YAAY,GAE3F,CAAErC,QAASuX,EAAcxX,OAAQ,qBAAsBE,KAAM,CAAC,uBAAwB0C,oBAAqB,IAE3G,CAAE3C,QAASuX,EAAcxX,OAAQ,2BAA4BE,KAAM,CAAC,uBAAwB0C,oBAAqB,GACjH,CAAE3C,QAASuX,EAAcxX,OAAQ,4BAA6BE,KAAM,CAAC,2BAA4B0C,oBAAqB,IAGtH,CAAE3C,QAASwX,EAAczX,OAAQ,mBAAoBE,KAAM,CAAC,uBAAwB0C,oBAAqB,GAAKN,YAAY,GAC1H,CAAErC,QAASwX,EAAczX,OAAQ,oBAAqBE,KAAM,CAAC,uBAAwB0C,oBAAqB,MAC1G,CAAE3C,QAASwX,EAAczX,OAAQ,sBAAuBE,KAAM,CAAC,uBAAwB0C,oBAAqB,OAG7G,OAAO8F,EAAKtH,mBAAmB4W,EAAc3P,EAAQjC,wBAGtD6R,aAAc,WAEbvP,EAAK5H,SAAS,CACbK,WAAYkH,EAAQrE,cACpB9C,aAAc7L,EAAO4L,UAKtB,IAAIM,EAAiBtM,IAAEuM,WAKnB0V,EAAWxO,EAAKnP,wBAuEpB,OArEAtE,IAAEijB,KAAK,CAENrY,IAAK6I,EAAKlQ,OAAS,0BACnBwX,KAAM,MACN7N,KAAM,CAAC,QAAWuG,EAAK5N,YAAa5B,KAAMge,GAM1CiB,QAAS,CAAE,cAAiBzP,EAAKvO,qBACjCie,QAAS,SAASjW,KAClBkW,MAAO,aACPC,SAAU,aACVC,SAAU,SAGNrW,MAAK,WAETwG,EAAK5H,SAAS,CACbK,WAAYkH,EAAQrE,cACpB9C,aAAc7L,EAAO2N,MACrBkU,SAAUA,IAEX3V,EAAeiX,YACbjW,MAAK,SAASJ,GAChB,GAAGA,EAAKsW,OAAO,CACd,IAAI1H,EAAYtI,EAAEiQ,QAAQvW,EAAKM,QAAQkW,OAAQ,YAG/CjQ,EAAK5H,SAAS,CACbK,WAAYkH,EAAQrE,cACpB9C,aAAc7L,EAAO0N,GACrBmU,SAAUA,EACVnG,UAAWA,IAGZ,IAAI6H,EAAqBnQ,EAAEqI,OAAOC,GAElCxP,EAAe2B,QAAQ,CAAET,QAAS,CAAEoW,gBAAiBD,SAMtB,iDAA5BzW,EAAKkW,MAAM5Y,OAAO,EAAG,KAEvBiJ,EAAK5H,SAAS,CACbK,WAAYkH,EAAQrE,cACpB9C,aAAc7L,EAAO0N,GACrBmU,SAAUA,EACVnG,UAAW,KAIZxP,EAAe2B,QAAQ,CAAET,QAAS,CAAEoW,gBAAiB,QAIrDnQ,EAAK5H,SAAS,CACbK,WAAYkH,EAAQrE,cACpB9C,aAAc7L,EAAO2N,MACrBkU,SAAUA,IAEX3V,EAAeiX,aAKXjX,GA+HRuX,wBAAyB,SAASlG,EAAYC,EAAYC,GACzB,MAA7B4E,GACFA,EAA0BqB,QAGV,MAAdnG,IACFA,EAAa,IAEG,MAAdC,IACFA,EAAa,GAEO,MAAlBC,IACFA,EAAiB,GAIlB3d,EAAW2L,SAAS,CACnBK,WAAYkH,EAAQnE,wBACpBhD,aAAc7L,EAAO4L,QACrB2R,WAAYA,EACZC,WAAYA,EACZC,eAAgBA,IAKjB,IAFA,IAAIC,EAAiBH,EAAWhb,MAAM,KAClCohB,EAAoB,GACf1iB,EAAI,EAAGA,EAAIyc,EAAevc,OAAQF,IAAK,CAC/C,IAAI4c,EAAcH,EAAezc,GAAG6c,OAClB,IAAfD,IACF8F,IAAsBA,EAAkBxiB,OAAS,IAAM,IAAM0c,GAI/DwE,EAA4BziB,IAAEijB,KAAK,CAElCrY,IAAK6I,EAAKlQ,OAAS,gBACnBwX,KAAM,MACN7N,KAAM,CAAC8W,SAAUnG,EAAgBoG,KAAMrG,EAAYsG,QAASH,GAC5Db,QAAS,CAAE,cAAiBzP,EAAKvO,qBACjCoe,SAAU,SAGNrW,MAAK,WAET/M,EAAW2L,SAAS,CACnBK,WAAYkH,EAAQnE,wBACpBhD,aAAc7L,EAAO2N,MACrB4P,WAAYA,EACZC,WAAYA,EACZC,eAAgBA,OAEfvQ,MAAK,SAASJ,GACbA,EAAKsW,OAEPtjB,EAAW2L,SAAS,CACnBK,WAAYkH,EAAQnE,wBACpBhD,aAAc7L,EAAO0N,GACrB6P,WAAYA,EACZC,WAAYrU,SAAS2D,EAAKM,QAAQ2W,aAClCtG,eAAgBA,EAChBa,MAAOnV,SAAS2D,EAAKM,QAAQ4W,YAC7BzF,WAAYpV,SAAS2D,EAAKM,QAAQmR,YAClCF,YAAsC,MAAxBvR,EAAKM,QAAQ6W,QAAkBnX,EAAKM,QAAQ6W,QAAU,KAIrEnkB,EAAW2L,SAAS,CACnBK,WAAYkH,EAAQnE,wBACpBhD,aAAc7L,EAAO2N,MACrB4P,WAAYA,EACZC,WAAYA,EACZC,eAAgBA,QAMpByG,gBAAiB,SAAS5N,GAEzBxW,EAAW2L,SAAS,CACnBK,WAAYkH,EAAQlE,iBACpBjD,aAAc7L,EAAO4L,QACrB0K,SAAUA,IAKX,IAAIuL,EAAWxO,EAAKnP,wBAEpBtE,IAAEijB,KAAK,CAENrY,IAAK6I,EAAKlQ,OAAS,qBACnBwX,KAAM,OACN7N,KAAM,CAAC,QAAWuG,EAAK5N,YAAa,SAAY6Q,EAAShM,GAAIzG,KAAMge,GACnEiB,QAAS,CAAE,cAAiBzP,EAAKvO,qBACjCoe,SAAU,SACRrW,MAAK,WAEP/M,EAAW2L,SAAS,CACnBK,WAAYkH,EAAQlE,iBACpBjD,aAAc7L,EAAO2N,MACrB2I,SAAUA,OAETpJ,MAAK,SAASJ,GACbA,EAAKsW,QAEPtjB,EAAW2L,SAAS,CACnBK,WAAYkH,EAAQlE,iBACpBjD,aAAc7L,EAAO0N,GACrB4I,SAAUA,IAEXlW,EAAO2iB,QAAQzM,EAAS9E,KAAO,wBAMb,8EAAd1E,EAAKkW,OACO,2EAAdlW,EAAKkW,OAENljB,EAAW2L,SAAS,CACnBK,WAAYkH,EAAQlE,iBACpBjD,aAAc7L,EAAO0N,GACrB4I,SAAUA,EACV6N,KAAM,+CAEP/jB,EAAO2iB,QAAQzM,EAAS9E,KAAO,kCAG/B1R,EAAW2L,SAAS,CACnBK,WAAYkH,EAAQlE,iBACpBjD,aAAc7L,EAAO2N,MACrB2I,SAAUA,QAQf8N,2BAA4B,SAASC,EAAeC,EAAgBC,GACnE,IAAIC,EAAc,CAEjB,CAAE5Z,QAAShI,KAAM+H,OAAQ,eAAgBE,KAAM,CAACwZ,GAAgB9W,oBAAqB,IACrF,CAAE3C,QAAShI,KAAM+H,OAAQ,eAAgBE,KAAM,CAAC,KAAMyZ,GAAiB/W,oBAAqB,IAC5F,CAAE3C,QAASwX,EAAczX,OAAQ,uBAAwBE,KAAM,CAAC0Z,GAAoBhX,oBAAqB,KAG1G,OAAO8F,EAAKtH,mBAAmByY,EAAaxR,EAAQ9B,wBAKrDuT,aAAc,SAASJ,EAAeC,GACrC,IAAIpY,EAAiBtM,IAAEuM,WAEnBuY,EAAkC,MAAjBL,GAAyBA,EAAcljB,OACxDwjB,EAAoC,MAAlBL,GAA0BA,EAAenjB,OAE/D,IAAIujB,IAAkBC,EAErB,OADAzY,EAAe2B,UACR3B,EAIR,IAAI0Y,GAAW,EACXC,EAAYR,EACZS,EAAgB,KAEjBJ,GAAiBC,EACnBG,EAAgBR,EACPK,IACTC,GAAW,EACXC,EAAYP,GAIbjR,EAAK5H,SAAS,CACbK,WAAYkH,EAAQ3C,cACpBxE,aAAc7L,EAAO4L,QACrBmW,WAAa6C,EAAWnE,EAAWsE,MAAQtE,EAAWuB,OAQvD,IAAIzV,GAAmB,EACnBC,GAAqB,EACrBwY,EAAkB,GAClBC,EAAe,GAwFnB,OAtFA,SAASC,EAAYC,GACpBvlB,IAAEijB,KAAK,CAENrY,IAAK6I,EAAKlQ,QAAUyhB,EAAW,8BAAgC,0BAC/DjK,KAAM,OACN7N,KAAM,CAAC,MAASqY,EAAMC,MAAO,KAAQD,EAAME,KAAM,cAAiB3hB,KAAKC,UAAUwhB,EAAMG,gBACvFxC,QAAS,CAAE,cAAiBzP,EAAKvO,qBACjCoe,SAAU,SACRrW,MAAK,WACPN,GAAmB,EAGf0Y,EAAaE,EAAMI,aACtBN,EAAaE,EAAMI,WAAa,IAE7BN,EAAaE,EAAMI,WAAWJ,EAAMrG,eACvCmG,EAAaE,EAAMI,WAAWJ,EAAMrG,aAAe,IAEpDmG,EAAaE,EAAMI,WAAWJ,EAAMrG,aAAatJ,KAAK2P,EAAMG,cAAcE,UAAYZ,EAAW,IAAMO,EAAMM,UAAY,QACvHvY,MAAK,SAASJ,GACbA,EAAKsW,QACP5W,GAAqB,EAGjBwY,EAAgBG,EAAMI,aACzBP,EAAgBG,EAAMI,WAAa,IAEhCP,EAAgBG,EAAMI,WAAWJ,EAAMrG,eAC1CkG,EAAgBG,EAAMI,WAAWJ,EAAMrG,aAAe,IAEvDkG,EAAgBG,EAAMI,WAAWJ,EAAMrG,aAAatJ,KAAK2P,EAAMG,cAAcE,UAAYZ,EAAW,IAAMO,EAAMM,UAAY,OAE5HlZ,GAAmB,EAGf0Y,EAAaE,EAAMI,aACtBN,EAAaE,EAAMI,WAAa,IAE7BN,EAAaE,EAAMI,WAAWJ,EAAMrG,eACvCmG,EAAaE,EAAMI,WAAWJ,EAAMrG,aAAe,IAEpDmG,EAAaE,EAAMI,WAAWJ,EAAMrG,aAAatJ,KAAK2P,EAAMG,cAAcE,UAAYZ,EAAW,IAAMO,EAAMM,UAAY,SAExHnY,QAAO,WAET,GAAGuX,EAAU1jB,OAAS,EAErB+jB,EAAYL,EAAUrX,aAGlB,CACJ,IAAI3B,EAAgBU,EAAmBvM,EAAO0N,GAAMlB,EAAqBxM,EAAO2N,MAAQ3N,EAAO4N,QAI/FyF,EAAK5H,SAAS,CACbK,WAAYkH,EAAQ3C,cACpBxE,aAAcA,EACdkW,WAAa6C,EAAWnE,EAAWsE,MAAQtE,EAAWuB,KACtD3E,aAAc2H,EACd/C,UAAWgD,IAGTpZ,GAAgB7L,EAAO2N,MACzBzB,EAAeiX,SAEfjX,EAAe2B,QAAQ,CAAEd,QAAUlB,GAAgB7L,EAAO4N,UAQvC,MAAjBkX,GAGFxC,EAAYmC,aAAa,KAAMK,OAOnCI,CAAYL,EAAUrX,SAEftB,GAMRwZ,gBAAiB,SAASnQ,EAAYoQ,EAAkBC,GAEvDvS,EAAK5H,SAAS,CACbK,WAAYkH,EAAQjE,iBACpBlD,aAAc7L,EAAO4L,QACrB2J,WAAYA,EACZsQ,cAAeD,IAGhBhmB,IAAEijB,KAAK,CAENrY,IAAK6I,EAAKlQ,OAAS,kBACnBwX,KAAM,MACN7N,KAAM,CAAC,GAAMyI,GACbuN,QAAS,CAAE,cAAiBzP,EAAKvO,qBACjCoe,SAAU,SACRrW,MAAK,WAGPwG,EAAK5H,SAAS,CACbK,WAAYkH,EAAQjE,iBACpBlD,aAAc7L,EAAO2N,MACrB4H,WAAYA,EACZsQ,cAAeD,OAEd1Y,MAAK,SAASJ,GACbA,EAAKsW,OAEJuC,EACF/lB,IAAEijB,KAAK,CAENrY,IAAK6I,EAAKlQ,OAAS,0BACnBwX,KAAM,MACN7N,KAAM,CAAC,MAAS,YAChBgW,QAAS,CAAE,cAAiBzP,EAAKvO,qBACjCoe,SAAU,SACRrW,MAAK,WAEPwG,EAAK5H,SAAS,CACbK,WAAYkH,EAAQjE,iBACpBlD,aAAc7L,EAAO4N,QACrB2H,WAAYA,EACZ+E,aAAcxN,EAAKM,QACnByY,cAAeD,OAEd1Y,MAAK,SAAS4Y,GACbA,EAAW1C,OAEb/P,EAAK5H,SAAS,CACbK,WAAYkH,EAAQjE,iBACpBlD,aAAc7L,EAAO0N,GACrB6H,WAAYA,EACZ+E,aAAcxN,EAAKM,QACnBoN,kBAAmBsL,EAAW1Y,QAC9ByY,cAAeD,IAKhBvS,EAAK5H,SAAS,CACbK,WAAYkH,EAAQjE,iBACpBlD,aAAc7L,EAAO4N,QACrB2H,WAAYA,EACZ+E,aAAcxN,EAAKM,QACnByY,cAAeD,OAOlBvS,EAAK5H,SAAS,CACbK,WAAYkH,EAAQjE,iBACpBlD,aAAc7L,EAAO0N,GACrB6H,WAAYA,EACZ+E,aAAcxN,EAAKM,QACnByY,cAAeD,IAOjBvS,EAAK5H,SAAS,CACbK,WAAYkH,EAAQjE,iBACpBlD,aAAc7L,EAAO2N,MACrB4H,WAAYA,EACZsQ,cAAeD,QAMnBG,mBAAoB,SAASxQ,EAAYyQ,GAExClmB,EAAW2L,SAAS,CACnBK,WAAYkH,EAAQ7D,qBACpBtD,aAAc7L,EAAO4L,QACrB2J,WAAYA,EACZyQ,QAASA,IAGVpmB,IAAEijB,KAAK,CACNjY,QAAShI,KACT4H,IAAK6I,EAAKlQ,OAAS,sBACnBwX,KAAM,OACN7N,KAAM,CAAC,YAAeyI,EAAY,QAAWyQ,EAAS,KAAQ3S,EAAKzP,eACnEkf,QAAS,CAAE,cAAiBzP,EAAKvO,qBACjCoe,SAAU,SACRrW,MAAK,WAEP/M,EAAW2L,SAAS,CACnBK,WAAYkH,EAAQ7D,qBACpBtD,aAAc7L,EAAO2N,MACrB4H,WAAYA,EACZyQ,QAASA,OAER9Y,MAAK,SAASJ,GACbA,EAAKsW,QAEPtjB,EAAW2L,SAAS,CACnBK,WAAYkH,EAAQ7D,qBACpBtD,aAAc7L,EAAO0N,GACrB6H,WAAYA,EACZyQ,QAASA,IAIVpjB,KAAK8iB,gBAAgBnQ,IAGrBzV,EAAW2L,SAAS,CACnBK,WAAYkH,EAAQ7D,qBACpBtD,aAAc7L,EAAO2N,MACrB4H,WAAYA,EACZyQ,QAASA,QAObC,wBAAyB,SAAS1Q,EAAY+F,GAE7Cxb,EAAW2L,SAAS,CACnBK,WAAYkH,EAAQ5D,2BACpBvD,aAAc7L,EAAO0N,GACrB6H,WAAYA,EACZ2G,wBAAyBZ,KAK3B4K,4BAA6B,SAAS3Q,EAAY+F,GAEjDxb,EAAW2L,SAAS,CACnBK,WAAYkH,EAAQ3D,+BACpBxD,aAAc7L,EAAO0N,GACrB6H,WAAYA,EACZ2G,wBAAyBZ,KAK3B6K,0BAA2B,SAAS5Q,GAEnCzV,EAAW2L,SAAS,CACnBK,WAAYkH,EAAQ1D,6BACpBzD,aAAc7L,EAAO0N,GACrB6H,WAAYA,KAKd6Q,oBAAqB,SAAS7Q,GAE7BzV,EAAW2L,SAAS,CACnBK,WAAYkH,EAAQzD,4BACpB1D,aAAc7L,EAAO0N,GACrB6H,WAAYA,KAKd8Q,0BAA2B,SAAS9Q,EAAY+F,EAAegL,GAE9DxmB,EAAW2L,SAAS,CACnBK,WAAYkH,EAAQxD,6BACpB3D,aAAc7L,EAAO0N,GACrB6H,WAAYA,EACZ8G,0BAA2Bf,EAC3BoB,qBAAuC,MAAhB4J,EAAuBA,EAAe,QAK/DC,8BAA+B,SAAShR,EAAY+F,GAEnDxb,EAAW2L,SAAS,CACnBK,WAAYkH,EAAQvD,iCACpB5D,aAAc7L,EAAO0N,GACrB6H,WAAYA,EACZ8G,0BAA2Bf,KAM7BkL,4BAA6B,SAASjR,GAErCzV,EAAW2L,SAAS,CACnBK,WAAYkH,EAAQtD,+BACpB7D,aAAc7L,EAAO0N,GACrB6H,WAAYA,KAKdkR,mBAAoB,SAASlR,GAE5BzV,EAAW2L,SAAS,CACnBK,WAAYkH,EAAQrD,2BACpB9D,aAAc7L,EAAO0N,GACrB6H,WAAYA,KAKdmR,yBAA0B,SAASnR,EAAY+F,EAAegL,GAE7DxmB,EAAW2L,SAAS,CACnBK,WAAYkH,EAAQpD,4BACpB/D,aAAc7L,EAAO0N,GACrB6H,WAAYA,EACZsH,yBAA0BvB,EAC1B2B,oBAAsC,MAAhBqJ,EAAuBA,EAAe,QAK9DK,6BAA8B,SAASpR,EAAY+F,GAElDxb,EAAW2L,SAAS,CACnBK,WAAYkH,EAAQnD,gCACpBhE,aAAc7L,EAAO0N,GACrB6H,WAAYA,EACZsH,yBAA0BvB,KAM5BsL,2BAA4B,SAASrR,GAEpCzV,EAAW2L,SAAS,CACnBK,WAAYkH,EAAQlD,8BACpBjE,aAAc7L,EAAO0N,GACrB6H,WAAYA,KAMdsR,mBAAoB,SAAStR,GAE5BzV,EAAW2L,SAAS,CACnBK,WAAYkH,EAAQjD,qBACpBlE,aAAc7L,EAAO0N,GACrB6H,WAAYA,KAMduR,oBAAqB,SAASvR,EAAY+F,EAAeyL,GACxD,KAAG3T,EAAEmE,QAAQ+D,IAAmBlI,EAAEmE,QAAQ+D,EAAc9D,UAAYpE,EAAEmE,QAAQ+D,EAAcxF,YAAc1C,EAAEmE,QAAQ+D,EAAcrF,WAAlI,CAKAnW,EAAW2L,SAAS,CACnBK,WAAYkH,EAAQhD,sBACpBnE,aAAc7L,EAAO4L,QACrB2J,WAAYA,IAGY,MAAtBwR,IACFA,GAAqB,GAGtB,IAAIvC,EAAc,GAEdpR,EAAEmE,QAAQ+D,EAAc9D,UAC3BgN,EAAYhP,KAAK,CAAE7K,OAAQ,6BAA8BE,KAAM,CAAC0K,EAAY+F,EAAc9D,WAEvFpE,EAAEmE,QAAQ+D,EAAcxF,YAC3B0O,EAAYhP,KAAK,CAAE7K,OAAQ,+BAAgCE,KAAM,CAAC0K,EAAY+F,EAAcxF,aAEzF1C,EAAEmE,QAAQ+D,EAAcrF,WAC3BuO,EAAYhP,KAAK,CAAE7K,OAAQ,8BAA+BE,KAAM,CAAC0K,EAAY+F,EAAcrF,YAI5F,IAAI+Q,EAAS3T,EAAKhJ,UAAUkL,GACxB4H,EAAgB,KAEhB5Q,GAAmB,EACnBC,GAAqB,EAErBya,EAAe,SAASva,GAExBsa,GAA2B,MAAjB7J,GAAyBA,EAAgB,GACrDzQ,EAAU7B,KAAK2K,KAAK2H,GAGrBva,KAAK8J,EAAU/B,QAAQK,MAAMpI,KAAM8J,EAAU7B,MAAMqC,MAAK,SAASga,EAAYC,GAC5E3a,GAAqB,EAClB0a,IACF3a,GAAmB,GAGG,8BAApBG,EAAU/B,QAA0Cqc,GAAiC,MAAvBG,GAA+BA,EAAsB,IACrHhK,EAAgBgK,MAEfta,MAAK,SAASqa,GAChB3a,GAAmB,EAChB2a,IACF1a,GAAqB,GAGC,8BAApBE,EAAU/B,QAA0Cqc,IACtDxC,EAAc,OAEblX,QAAO,WAET,GAAGkX,EAAYrjB,OAAS,EAEvB8lB,EAAazC,EAAYhX,aAGrB,CACJ,IAAI3B,EAAgBU,EAAmBvM,EAAO0N,GAAMlB,EAAqBxM,EAAO2N,MAAQ3N,EAAO4N,QAG/F9N,EAAW2L,SAAS,CACnBK,WAAYkH,EAAQhD,sBACpBnE,aAAcA,EACd0J,WAAYA,EACZ4H,cAAeA,IAIb4J,GAAsBlb,GAAgB7L,EAAO2N,OAG/C2U,EAAYoD,gBAAiBsB,GAA2B,MAAjB7J,GAAyBA,EAAgB,EAAKA,EAAgB5H,QAIvG6R,KAAKxkB,MAGPqkB,EAAazC,EAAYhX,WAK1B6Z,2BAA4B,SAAS9R,EAAY+F,GAChD,IAAIpP,EAAiBtM,IAAEuM,WAGnB6a,EAAU3T,EAAKhJ,UAAUkL,GAgF7B,OA9EGnC,EAAEmE,QAAQ+D,IAEZxb,EAAW2L,SAAS,CACnBK,WAAYkH,EAAQhD,sBACpBnE,aAAc7L,EAAO4L,QACrB2J,WAAYA,EACZqG,OAAQ1I,EAAmBgK,iBAC3BjB,aAAc+K,EAAShnB,EAAO2N,MAAQ3N,EAAO0N,KAE3CsZ,EACF9a,EAAeiX,SAEfjX,EAAe2B,YAMhB/N,EAAW2L,SAAS,CACnBK,WAAYkH,EAAQhD,sBACpBnE,aAAc7L,EAAO4L,QACrB2J,WAAYA,EACZqG,OAAQ1I,EAAmBgK,iBAC3BjB,aAAcjc,EAAO4L,UAGlBob,IACH1L,EAAchR,GAAKiL,GAGpB3V,IAAEijB,KAAK,CAENrY,IAAK6I,EAAKlQ,QAAU6jB,EAAS,eAAiB,mBAC9CrM,KAAM,OACN7N,KAAMwO,EACNwH,QAAS,CAAE,cAAiBzP,EAAKvO,qBACjCoe,SAAU,SACRrW,MAAK,WAEP/M,EAAW2L,SAAS,CACnBK,WAAYkH,EAAQhD,sBACpBnE,aAAc7L,EAAO4L,QACrB2J,WAAYA,EACZqG,OAAQ1I,EAAmBgK,iBAC3BjB,aAAcjc,EAAO2N,QAEtBzB,EAAeiX,YAEbjW,MAAK,SAASJ,GAChB,GAAGA,EAAKsW,OAAO,CACd,IAAIjG,EAAgB6J,EAASla,EAAKM,QAAQ9C,GAAK,KAG/CxK,EAAW2L,SAAS,CACnBK,WAAYkH,EAAQhD,sBACpBnE,aAAc7L,EAAO4L,QACrB2J,WAAYA,EACZ4H,cAAeA,EACfvB,OAAQ1I,EAAmBgK,iBAC3BjB,aAAcjc,EAAO0N,KAGtBxB,EAAe2B,SAAQ,EAAOsP,QAI9Brd,EAAW2L,SAAS,CACnBK,WAAYkH,EAAQhD,sBACpBnE,aAAc7L,EAAO4L,QACrB2J,WAAYA,EACZqG,OAAQ1I,EAAmBgK,iBAC3BjB,aAAcjc,EAAO2N,QAEtBzB,EAAeiX,aAKXjX,GAMRob,6BAA8B,SAAS/R,EAAY+F,EAAe6B,GACjE,IAAIjR,EAAiBtM,IAAEuM,WAEvB,GAAGiH,EAAEmE,QAAQ+D,GAEZxb,EAAW2L,SAAS,CACnBK,WAAYkH,EAAQhD,sBACpBnE,aAAc7L,EAAO4L,QACrB2J,WAAYA,EACZqG,OAAQ1I,EAAmBkK,mBAC3BnB,aAAcjc,EAAO0N,KAEtBxB,EAAe2B,cAEX,CAGJ/N,EAAW2L,SAAS,CACnBK,WAAYkH,EAAQhD,sBACpBnE,aAAc7L,EAAO4L,QACrB2J,WAAYA,EACZqG,OAAQ1I,EAAmBkK,mBAC3BnB,aAAcjc,EAAO4L,UAGtB,IAAI2b,EAAiBnU,EAAEqI,OAAOH,GAC1B/O,GAAmB,EACnBC,GAAqB,EACrBwY,EAAkB,GAClBC,EAAe,GAEfuC,EAAqB,SAASrQ,GAEjC,IAAI6P,EAAU3T,EAAKhJ,UAAU8M,GAE1B6P,EACF1L,EAAcnE,GAAY2H,YAAgC,MAAjB3B,GAAyBA,EAAgB,EAAKA,EAAgB5H,EAEvG+F,EAAcnE,GAAY7M,GAAK6M,EAGhCvX,IAAEijB,KAAK,CAENrY,IAAK6I,EAAKlQ,QAAU6jB,EAAS,sBAAwB,0BACrDrM,KAAM,OACN7N,KAAMwO,EAAcnE,GACpB2L,QAAS,CAAE,cAAiBzP,EAAKvO,qBACjCoe,SAAU,SACRrW,MAAK,WAWPN,GAAmB,EAEnB0Y,EAAazP,KAAK2B,MAEhBjK,MAAK,SAASJ,GACbA,EAAKsW,QAWP5W,GAAqB,EAErBwY,EAAgBxP,KAAK2B,KAarB5K,GAAmB,EAEnB0Y,EAAazP,KAAK2B,OAEjB7J,QAAO,WAET,GAAGia,EAAepmB,OAAS,EAE1BqmB,EAAmBD,EAAe/Z,aAG9B,CACJ,IAAIyO,EAAgB1P,EAAmBvM,EAAO0N,GAAMlB,EAAqBxM,EAAO2N,MAAQ3N,EAAO4N,QAI/F9N,EAAW2L,SAAS,CACnBK,WAAYkH,EAAQhD,sBACpBnE,aAAc7L,EAAO4L,QACrB2J,WAAYA,EACZqG,OAAQ1I,EAAmBkK,mBAC3BnB,aAAcA,EACdoB,aAAc2H,EACd/C,UAAWgD,IAGThJ,GAAgBjc,EAAO2N,MACzBzB,EAAeiX,SAIfjX,EAAe2B,QAASoO,GAAgBjc,EAAO4N,cAIjDwZ,KAAKxkB,MAGP4kB,EAAmBD,EAAe/Z,SAGnC,OAAOtB,GAMRub,4BAA6B,SAASlS,EAAY+F,EAAe6B,GAChE,IAAIjR,EAAiBtM,IAAEuM,WAEvB,GAAGiH,EAAEmE,QAAQ+D,GAEZxb,EAAW2L,SAAS,CACnBK,WAAYkH,EAAQhD,sBACpBnE,aAAc7L,EAAO4L,QACrB2J,WAAYA,EACZqG,OAAQ1I,EAAmBoK,kBAC3BrB,aAAcjc,EAAO0N,KAEtBxB,EAAe2B,cAEX,CAGJ/N,EAAW2L,SAAS,CACnBK,WAAYkH,EAAQhD,sBACpBnE,aAAc7L,EAAO4L,QACrB2J,WAAYA,EACZqG,OAAQ1I,EAAmBoK,kBAC3BrB,aAAcjc,EAAO4L,UAGtB,IAAI8b,EAAgBtU,EAAEqI,OAAOH,GACzB/O,GAAmB,EACnBC,GAAqB,EACrBwY,EAAkB,GAClBC,EAAe,GAEf0C,EAAoB,SAASjP,GAEhC,IAAIsO,EAAU3T,EAAKhJ,UAAUqO,GAE1BsO,EACF1L,EAAc5C,GAAWoG,YAAgC,MAAjB3B,GAAyBA,EAAgB,EAAKA,EAAgB5H,EAEtG+F,EAAc5C,GAAWpO,GAAKoO,EAG/B9Y,IAAEijB,KAAK,CAENrY,IAAK6I,EAAKlQ,QAAU6jB,EAAS,sBAAwB,0BACrDrM,KAAM,OACN7N,KAAMwO,EAAc5C,GACpBoK,QAAS,CAAE,cAAiBzP,EAAKvO,qBACjCoe,SAAU,SACRrW,MAAK,WAWPN,GAAmB,EAEnB0Y,EAAazP,KAAKkD,MAEhBxL,MAAK,SAASJ,GACbA,EAAKsW,QAWP5W,GAAqB,EAErBwY,EAAgBxP,KAAKkD,KAarBnM,GAAmB,EAEnB0Y,EAAazP,KAAKkD,OAEjBpL,QAAO,WAET,GAAGoa,EAAcvmB,OAAS,EAEzBwmB,EAAkBD,EAAcla,aAG5B,CACJ,IAAIyO,EAAgB1P,EAAmBvM,EAAO0N,GAAMlB,EAAqBxM,EAAO2N,MAAQ3N,EAAO4N,QAI/F9N,EAAW2L,SAAS,CACnBK,WAAYkH,EAAQhD,sBACpBnE,aAAc7L,EAAO4L,QACrB2J,WAAYA,EACZqG,OAAQ1I,EAAmBoK,kBAC3BrB,aAAcA,EACdoB,aAAc2H,EACd/C,UAAWgD,IAGThJ,GAAgBjc,EAAO2N,MACzBzB,EAAeiX,SAIfjX,EAAe2B,QAASoO,GAAgBjc,EAAO4N,cAIjDwZ,KAAKxkB,MAGP+kB,EAAkBD,EAAcla,SAGjC,OAAOtB,IAIT4B,EAAOC,QAAUuU,G,kDClxCjB,gCAEIxiB,EAAaC,EAAQ,IACrBiT,EAAUjT,EAAQ,IAClBC,EAASD,EAAQ,GACjB6nB,EAAgB7nB,EAAQ,KACxBkT,EAAgBlT,EAAQ,IACxBE,EAAeF,EAAQ,IAAUE,aACjCC,EAASH,EAAQ,IACjBqT,EAAIrT,EAAQ,IAEZsT,EAAOtT,EAAQ,GAGf8nB,EAAU,GAEVC,EAAc,GAGdC,EAAkB,CACrBpR,UAAW,KACXqR,SAAU,IAIPC,EAAgB,GAEhBC,EAAc,GAEdC,EAAY,GAEZC,EAAc,GAGdjU,EAAUnU,EAAO0N,GAGjB2a,EAAmB,KAEnBC,EAAapoB,EAAO,GAAID,EAAawC,UAAW,CACnDC,kBAAmB,SAASC,GAAWC,KAAKC,GA9B1B,SA8B2CF,IAC7DG,qBAAsB,SAASH,GAAWC,KAAKG,eA/B7B,SA+B0DJ,IAC5EK,WAAY,WAAYJ,KAAKK,KAhCX,WAkClBiS,UAAW,WACV,OAAOf,GAKRyB,SAAU,WACT,MAAO,KAAOvC,EAAK7K,UAKpB+f,oBAAqB,SAASC,GAG7B,IAAIC,EAAkBpV,EAAK1N,qBAGvB+iB,EAAiB9lB,KAAK+lB,wBACtBC,EAAsC,MAAlBF,EAA0BA,EAAepe,GAAK,KAClEue,EAAcjmB,KAAKkmB,qBACnBC,EAAgC,MAAfF,EAAuBA,EAAYve,GAAK,KACzD0e,EAAapmB,KAAKqmB,oBAClBC,EAA8B,MAAdF,EAAsBA,EAAW1e,GAAK,KAGtD6e,EAAoC,MAAnBX,EAA0BA,EAAkB5lB,KAAKgT,WAEtE,MAAO,CACN,GAAMuT,EACN,KAAQA,EACR,YAAe,KACf,cAAiB,GACjB,YAAeV,EAAgBne,GAC/B,sBAAyBme,EAAgBjX,KACzC,wBAA2BiX,EAAgBW,OAC3C,iBAAoBR,EACpB,WAAcM,EACd,GAAM,GACN,cAAiB,KAEjB,OAAU,GACV,aAAgBH,EAEhB,oBAAuB,EACvB,qBAAwB,EACxB,MAAS,GACT,aAAe,EAkBf,SAAY,EACZ,iBAAoB,OACpB,WAAc,EACd,mBAAsB,OACtB,SAAY,EACZ,iBAAoB,OACpB,IAAO,EACP,YAAe,OACf,MAAS,EACT,cAAiB,OACjB,OAAUnB,EAAcyB,aAI1BC,UAAW,WACV,IAAIC,EAAY,GAEhB,IAAK,IAAIC,KAAW3B,EACI,MAApBA,EAAQ2B,IACVD,EAAU/T,KAAKqS,EAAQ2B,IAMzB,OAAOD,GAGRE,SAAU,SAASD,GAElB,OAAoB,MAAXA,EAAmB3B,EAAQ2B,GAAW5mB,KAAK2lB,uBAGrDmB,cAAe,WACd,IAAIH,EAAY,GAEhB,IAAK,IAAIC,KAAW1B,EACQ,MAAxBA,EAAY0B,IACdD,EAAU/T,KAAKsS,EAAY0B,IAM7B,OAAOD,GAGRI,aAAc,SAASH,GACtB,OAAO1B,EAAY0B,IAIpBI,yBAA0B,WACzB,OAAO7B,EAAgBpR,WAIxBkT,6BAA8B,WAC7B,OAAO9B,EAAgBC,UAKxB8B,gBAAiB,SAASN,GAIzB,IAOIvR,EAPA6C,EAAQ+M,EAAQ2B,GAChBO,EAAgBnnB,KAAKonB,YAAYlP,EAAMmP,cACvCC,EAAmC,MAAjBH,EAAwBA,EAAcI,QAAU,EAMtE,IAJArP,EAAMsP,SAAW,EACjBtP,EAAMuP,IAAM,EAGRpS,EAAI,EAAGA,EAAI6C,EAAMwP,MAAMnpB,OAAQ8W,IAClC,GAAqB,MAAlB6C,EAAMwP,MAAMrS,GAAW,CACzB6C,EAAMwP,MAAMrS,GAAGqG,MAAQxD,EAAMwP,MAAMrS,GAAGsS,MAAQzP,EAAMwP,MAAMrS,GAAGuS,SAE7D,IAAIC,EAAoBpX,EAAK5J,qBAAqBqR,EAAMwP,MAAMrS,GAAGqG,OAMjE,GALAxD,EAAMwP,MAAMrS,GAAGqG,MAAQmM,EAAkBzhB,MACzC8R,EAAMwP,MAAMrS,GAAGyS,cAAgBD,EAAkBxhB,aAEjD6R,EAAMsP,UAAYtP,EAAMwP,MAAMrS,GAAGqG,MAE9BxD,EAAMwP,MAAMrS,GAAG0S,WAAW,CAC5B,IAAIC,EAAiBV,EAErB,GAAG/gB,SAAS2R,EAAMwP,MAAMrS,GAAGgS,cAAgB,EAAE,CAC5C,IAAIY,EAAejoB,KAAKonB,YAAYlP,EAAMwP,MAAMrS,GAAGgS,cAChC,MAAhBY,IACFD,EAAiBC,EAAaV,SAIhCrP,EAAMuP,KAAQvP,EAAMwP,MAAMrS,GAAGqG,OAASsM,EAAiB,MAK1D,IAAIE,EAA4BzX,EAAK5J,qBAAqBqR,EAAMsP,UAChEtP,EAAMsP,SAAWU,EAA0B9hB,MAC3C8R,EAAMiQ,iBAAmBD,EAA0B7hB,aAEnD6R,EAAMuP,KAAQvP,EAAMkQ,YAAcd,EAAkB,KACpDpP,EAAMuP,KAAQvP,EAAMmQ,UAAYf,EAAkB,KAClD,IAAIgB,EAAuB7X,EAAK5J,qBAAqBqR,EAAMuP,KAC3DvP,EAAMuP,IAAMa,EAAqBliB,MACjC8R,EAAMqQ,YAAcD,EAAqBjiB,aAGzC6R,EAAMwD,MAAQxD,EAAMsP,SAAWtP,EAAMkQ,WAAalQ,EAAMmQ,SAAWnQ,EAAMuP,IACzE,IAAIe,EAAyB/X,EAAK5J,qBAAqBqR,EAAMwD,OAC7DxD,EAAMwD,MAAQ8M,EAAuBpiB,MACrC8R,EAAM4P,cAAgBU,EAAuBniB,cAK9CoiB,mBAAoB,SAAS7B,GAC5B,IAAI8B,EAAkB,CACrB,GAAM9B,EAGN,KAAkC,MAAzB3B,EAAQ2B,GAAS+B,KAAe1D,EAAQ2B,GAAS+B,KAAO/B,EAKjE,YAAe3B,EAAQ2B,GAAS1K,YAChC,YAAe+I,EAAQ2B,GAASgC,YAChC,iBAAoB3D,EAAQ2B,GAASiC,iBACrC,WAAc5D,EAAQ2B,GAASkC,WAC/B,aAAgB7D,EAAQ2B,GAASS,cA+BlC,GAxB0B,MAAvBpC,EAAQ2B,GAASmC,IAAqC,IAAvB9D,EAAQ2B,GAASmC,KAClDL,EAAgBK,GAAK9D,EAAQ2B,GAASmC,IAEF,MAAlC9D,EAAQ2B,GAASoC,gBACnBN,EAAgBM,cAAgB/D,EAAQ2B,GAASoC,eAEpB,MAA3B/D,EAAQ2B,GAASqC,QAA6C,IAA3BhE,EAAQ2B,GAASqC,SACtDP,EAAgBO,OAAShE,EAAQ2B,GAASqC,QAET,MAA/BhE,EAAQ2B,GAASwB,YAAsBnD,EAAQ2B,GAASwB,WAAa,IACvEM,EAAgBQ,kBAAoBjE,EAAQ2B,GAASwB,WACrDM,EAAgBS,yBAA2BlE,EAAQ2B,GAASwB,YAE7B,MAA7BnD,EAAQ2B,GAASyB,UAAoBpD,EAAQ2B,GAASyB,SAAW,IACnEK,EAAgBU,gBAAkBnE,EAAQ2B,GAASyB,UAET,MAAxCpD,EAAQ2B,GAASyC,qBAA+BpE,EAAQ2B,GAASyC,oBAAsB,IACzFX,EAAgBW,oBAAsBpE,EAAQ2B,GAASyC,qBAEZ,MAAzCpE,EAAQ2B,GAAS0C,sBAAgCrE,EAAQ2B,GAAS0C,qBAAuB,IAC3FZ,EAAgBY,qBAAuBrE,EAAQ2B,GAAS0C,sBAItDrE,EAAQ2B,GAASc,MAAMnpB,OAAO,CAGhC,IAFA,IAAIgrB,EAA0B,GAEtBlU,EAAI,EAAGA,EAAI4P,EAAQ2B,GAASc,MAAMnpB,OAAQ8W,IACjD,GAAgC,MAA7B4P,EAAQ2B,GAASc,MAAMrS,GAAW,CACpC,IAAImU,EAAY,CACf,WAAcvE,EAAQ2B,GAASc,MAAMrS,GAAGoU,WACxC,IAAOxE,EAAQ2B,GAASc,MAAMrS,GAAGuS,SACjC,aAAgB3C,EAAQ2B,GAASc,MAAMrS,GAAGgS,cAMC,MAAxCpC,EAAQ2B,GAASc,MAAMrS,GAAGqU,YAC5BzE,EAAQ2B,GAASc,MAAMrS,GAAGqU,YAAczE,EAAQ2B,GAASc,MAAMrS,GAAGsS,QACnE6B,EAAS,MAAYvE,EAAQ2B,GAASc,MAAMrS,GAAGsS,OAGhD4B,EAAwB3W,KAAK4W,GAI/Bd,EAAgBiB,YAAc7oB,KAAKC,UAAUwoB,GAG9C,OAAOb,GAIRkB,oBAAqB,WAA4B,IAAnBC,EAAkB,uDAAH,GACxCC,EAAY,GAEhB,GAAGD,EAAatrB,OAAO,CAAC,IAAD,gBACFsrB,GADE,IACtB,2BAAkC,CAAC,IAA1BjD,EAAyB,QACV,MAApB3B,EAAQ2B,IAAoB3B,EAAQ2B,GAASpG,QAAUwE,EAAc+E,QACvED,EAAUlX,KAAK5S,KAAKyoB,mBAAmB7B,KAHnB,oCAQtB,IAAK,IAAIA,KAAW3B,EACI,MAApBA,EAAQ2B,IAAoB3B,EAAQ2B,GAASpG,QAAUwE,EAAc+E,QACvED,EAAUlX,KAAK5S,KAAKyoB,mBAAmB7B,IAK1C,OAAOkD,GAKRE,oBAAqB,SAASC,GAE7BA,EAAgE,MAAhCA,GAAwCA,EAExE,IAAIpW,EAAiB,GAErB,IAAK,IAAI+S,KAAW3B,EACI,MAApBA,EAAQ2B,IAAoD,MAAhC3B,EAAQ2B,GAAS1K,aAC/CrI,EAAejB,KAAKrM,SAAS0e,EAAQ2B,GAAS1K,cAIhD,GAAG+N,EACF,IAAK,IAAIrD,KAAW1B,EACQ,MAAxBA,EAAY0B,IAAwD,MAApC1B,EAAY0B,GAAS1K,aACvDrI,EAAejB,KAAKrM,SAAS2e,EAAY0B,GAAS1K,cAKrD,OAAOrI,GAGRqW,gBAAiB,WAChB,IAAIC,EAAQ,GAEZ,IAAK,IAAIC,KAAQ/E,EACU,MAAvBA,EAAc+E,IAChBD,EAAMvX,KAAKyS,EAAc+E,IAM3B,OAAOD,GAGRE,eAAgB,SAASC,GACxB,OAAOjF,EAAciF,IAKtBvE,sBAAuB,WACtB,IAAK,IAAIqE,KAAQ/E,EAChB,GAA0B,MAAvBA,EAAc+E,GAChB,OAAO/E,EAAc+E,GAGvB,OAAO,MAGRG,cAAe,WACd,IAAIC,EAAQ,GAEZ,IAAK,IAAIC,KAAQnF,EACQ,MAArBA,EAAYmF,IACdD,EAAM5X,KAAK0S,EAAYmF,IAMzB,OAAOD,GAGRpD,YAAa,SAASsD,GACrB,OAAOpF,EAAYoF,IAKpBxE,mBAAoB,WACnB,IAAK,IAAIuE,KAAQnF,EAChB,GAAwB,MAArBA,EAAYmF,GACd,OAAOnF,EAAYmF,GAGrB,OAAO,MAGRE,YAAa,WACZ,IAAIC,EAAO,GAEX,IAAK,IAAIC,KAAOtF,EACM,MAAlBA,EAAUsF,IACZD,EAAKhY,KAAK2S,EAAUsF,IAMtB,OAAOD,GAGRE,WAAY,SAASC,GACpB,OAAOxF,EAAUwF,IAKlB1E,kBAAmB,WAClB,IAAK,IAAIwE,KAAOtF,EACf,GAAqB,MAAlBA,EAAUsF,GACZ,OAAOtF,EAAUsF,GAGnB,OAAO,MAGRG,cAAe,WACd,IAAIJ,EAAO,GAEX,IAAK,IAAIC,KAAOrF,EACQ,MAApBA,EAAYqF,IACdD,EAAKhY,KAAK4S,EAAYqF,IAMxB,OAAOD,GAGRK,YAAa,SAASC,GACrB,OAAO1F,EAAY0F,IAMpBC,qBAAsB,SAASD,GAC9B,OAAsB,MAAdA,GAAiD,MAA3B1F,EAAY0F,GAAuB1F,EAAY0F,GAAcza,EAAK1N,sBAIjGqV,WAAY,WAEX,MAAO,aACUtX,KAAKC,UAAUkkB,GADzB,iBAEankB,KAAKC,UAAUmkB,GAF5B,qBAGgBpkB,KAAKC,UAAUokB,GAH/B,mBAIerkB,KAAKC,UAAUskB,GAJ9B,iBAKavkB,KAAKC,UAAUukB,GAL5B,eAMYxkB,KAAKC,UAAUwkB,GAN3B,iBAOazkB,KAAKC,UAAUykB,GACnC,OAIFtoB,EAAWmb,UAAS,SAAStQ,GAC5B,OAAOA,EAAOmB,YACb,KAAKkH,EAAQ5E,WAET5K,aAAawqB,SACfnG,EAAUnkB,KAAK4B,MAAM9B,aAAawqB,SAEhCxqB,aAAayqB,aACfnG,EAAcpkB,KAAK4B,MAAM9B,aAAayqB,aAEpCzqB,aAAa0qB,iBACfnG,EAAkBrkB,KAAK4B,MAAM9B,aAAa0qB,iBAIxC1qB,aAAa2qB,eACflG,EAAgBvkB,KAAK4B,MAAM9B,aAAa2qB,eAGtC3qB,aAAa4qB,aACflG,EAAcxkB,KAAK4B,MAAM9B,aAAa4qB,aAGpC5qB,aAAa6qB,WACflG,EAAYzkB,KAAK4B,MAAM9B,aAAa6qB,WAGlC7qB,aAAa8qB,aACflG,EAAc1kB,KAAK4B,MAAM9B,aAAa8qB,aAGvChG,EAAWtlB,aACX,MAED,KAAKgQ,EAAQzC,WAEZsX,EAAQld,EAAO4jB,UAAUjkB,IAAMK,EAAO4jB,UACnC1G,EAAQld,EAAO4jB,UAAUjkB,IAAIggB,MAAMnpB,SAErC0mB,EAAQld,EAAO4jB,UAAUjkB,IAAIkkB,aAAc,GAE5ClG,EAAWwB,gBAAgBnf,EAAO4jB,UAAUjkB,IAG5C9G,aAAawqB,OAAStqB,KAAKC,UAAUkkB,GAErCS,EAAWtlB,aACX,MAED,KAAKgQ,EAAQxC,aACZqX,EAAQld,EAAO6e,cAAWpP,EAG1B5W,aAAawqB,OAAStqB,KAAKC,UAAUkkB,GAErCS,EAAWtlB,aACX,MAED,KAAKgQ,EAAQvC,cAIZ,GAAG9F,EAAOkB,cAAgB7L,EAAO0N,IAAM/C,EAAOkB,cAAgB7L,EAAO4N,QAAQ,CAC5E,IAAK,IAAI3M,EAAI,EAAGwgB,EAAI9W,EAAO0S,aAAalc,OAAQF,EAAIwgB,EAAGxgB,IACtD4mB,EAAQld,EAAO0S,aAAapc,SAAMmZ,EAInC5W,aAAawqB,OAAStqB,KAAKC,UAAUkkB,GAGtC1T,EAAUxJ,EAAOkB,aACjByc,EAAWtlB,aACX,MAED,KAAKgQ,EAAQjE,iBAEZ,GAAGpE,EAAOkB,cAAgB7L,EAAO0N,IAAM/C,EAAOkB,cAAgB7L,EAAO4N,QAAQ,CAE5E,IAAI6gB,EAA0C,MAAxB9jB,EAAOkb,eAAyBlb,EAAOkb,cAAc1kB,OACvEutB,EAAc,KAElB,GAAGD,EAAe,CAEjB,IAAIxW,EACJ,IAAIA,EAAI,EAAGA,EAAItN,EAAOkb,cAAc1kB,OAAQ8W,IAAK,CAChD,IAAI0W,EAAehkB,EAAOkb,cAAc5N,GACpC4P,EAAQ8G,KACX9G,EAAQ8G,GAAgBrG,EAAWC,oBAAoBoG,IAMzDD,EAAcpG,EAAWyF,qBAAqBpjB,EAAO2P,aAAasU,qBAGnE,IAAK,IAAIpF,KAAW3B,EAEnB,GAAuB,MAApBA,EAAQ2B,GAAiB,CAC3B,IAAIqF,EAA6BJ,GAAkBrb,EAAE8E,SAASvN,EAAOkb,cAAe2D,IAGhFqF,GACHhH,EAAQ2B,GAAS1K,aAAenU,EAAO4K,cACvCsS,EAAQ2B,GAAS1K,YAAcnU,EAAO2P,aAAahQ,GACnDud,EAAQ2B,GAASsF,cAAgBnkB,EAAO2P,aAAa9I,KAGlDqd,IAEFhH,EAAQ2B,GAASoC,cAA0D,MAAzCjhB,EAAO2P,aAAayU,kBAA8B1b,EAAKnP,wBAAkE,MAAxCyG,EAAO2P,aAAayU,kBAA4B,KAEnKlH,EAAQ2B,GAASiC,iBAAyD,MAArC5D,EAAQ2B,GAASiC,kBAAgE,MAApC9gB,EAAO2P,aAAa0U,aAAwBrkB,EAAO2P,aAAa0U,aAAenH,EAAQ2B,GAASiC,iBAIlL5D,EAAQ2B,GAASgC,YAAckD,EAAYpkB,GAC3Cud,EAAQ2B,GAASyF,sBAAwBP,EAAYld,KACrDqW,EAAQ2B,GAAS0F,wBAA0BR,EAAYtF,OAGvDvB,EAAQ2B,GAASyC,oBAAsB,EACvCpE,EAAQ2B,GAAS0C,qBAAuB,IAO5C1oB,aAAawqB,OAAStqB,KAAKC,UAAUkkB,GAErCS,EAAWtlB,aAEZ,MAED,KAAKgQ,EAAQ1C,cACZ,IAAIqL,GAAkB,EAEtB,GAAGhR,EAAOiR,QAAU3I,EAAckc,MAAM,CAEvC,GAAGxkB,EAAOmR,aAAe9b,EAAO0N,IACN,MAAtB/C,EAAOykB,YACT,IAASnuB,EAAI,EAAGA,EAAI0J,EAAOykB,YAAYjuB,OAAQF,IAClB,MAAzB0J,EAAOykB,YAAYnuB,KAErB6mB,EAAYnd,EAAOykB,YAAYnuB,GAAGqJ,IAAMK,EAAOykB,YAAYnuB,IAa/D,GAAG0J,EAAOsR,cAAgBjc,EAAO4L,SAGhC,GAAyB,MAAtBjB,EAAO0kB,YAAoB,CAC7B,IAAK,IAAI7F,KAAW1B,EAEQ,MAAxBA,EAAY0B,IAAqBpW,EAAE8E,SAASvN,EAAO0kB,YAAa7F,KAClE1B,EAAY0B,QAAWpP,GAIzBiO,EAAmB1d,EAAO0kB,iBAOvB,CAiBJ,GAfA7rB,aAAayqB,WAAavqB,KAAKC,UAAUmkB,GAOtCnd,EAAOsR,cAAgBjc,EAAO2N,QAEhCoa,EAAgBpR,UAA+C,MAAlChM,EAAO2kB,wBAAkC3kB,EAAO2kB,wBAA0Bjc,EAAKnP,wBAC5G6jB,EAAgBC,SAAWrd,EAAO4kB,gBAKZ,MAApBlH,EAAyB,CAE3B,IAAQpnB,EAAI,EAAGA,EAAIonB,EAAiBlnB,OAAQF,IAAI,CAC/C,IAAIuuB,EAAMnH,EAAiBpnB,GACuC,MAApB6mB,EAAY0H,IACxDpc,EAAE8E,SAAS6P,EAAgBC,SAAUwH,IACtCzH,EAAgBC,SAASxS,KAAKga,GAIhCnH,EAAmB,KAIpB7kB,aAAa0qB,eAAiBxqB,KAAKC,UAAUokB,GAG7CpM,GAAkB,QAGd,GAAGhR,EAAOiR,QAAU3I,EAAcwc,cACvC,GAAG9kB,EAAOsR,cAAgBjc,EAAO0N,GAAG,CACnCua,EAAgB,GAChB,IAAQhnB,EAAI,EAAGA,EAAI0J,EAAO+kB,gBAAgBvuB,OAAQF,IAAK,CACtD,IAAI0uB,EAAKhlB,EAAO+kB,gBAAgBzuB,GAChCgnB,EAAc0H,EAAGrlB,IAAM,CACtB,GAAMqlB,EAAGrlB,GACT,KAAQqlB,EAAGne,MAGbmK,GAAkB,EAElBnY,aAAa2qB,aAAezqB,KAAKC,UAAUskB,SAEvC,GAAGtd,EAAOiR,QAAU3I,EAAc2c,WACvC,GAAGjlB,EAAOsR,cAAgBjc,EAAO0N,GAAG,CACnCwa,EAAc,GACd,IAAQjnB,EAAI,EAAGA,EAAI0J,EAAOklB,cAAc1uB,OAAQF,IAAK,CACpD,IAAI6uB,EAAKnlB,EAAOklB,cAAc5uB,GAC9BinB,EAAY4H,EAAGxlB,IAAM,CACpB,GAAMwlB,EAAGxlB,GACT,KAAQwlB,EAAGte,KACX,QAAWnI,WAAWymB,EAAG3F,UAG3BxO,GAAkB,EAElBnY,aAAa4qB,WAAa1qB,KAAKC,UAAUukB,SAErC,GAAGvd,EAAOiR,QAAU3I,EAAc8c,SACvC,GAAGplB,EAAOsR,cAAgBjc,EAAO0N,GAAG,CACnCya,EAAY,GACZ,IAAQlnB,EAAI,EAAGA,EAAI0J,EAAOqlB,YAAY7uB,OAAQF,IAAK,CAClD,IAAIe,EAAI2I,EAAOqlB,YAAY/uB,GAC3BknB,EAAUnmB,EAAEsI,IAAM,CACjB,GAAMtI,EAAEsI,GACR,KAAQtI,EAAEwP,MAGZmK,GAAkB,EAElBnY,aAAa6qB,SAAW3qB,KAAKC,UAAUwkB,SAEnC,GAAGxd,EAAOiR,QAAU3I,EAAcgd,UACpCtlB,EAAOsR,cAAgBjc,EAAO0N,GAAG,CACnC0a,EAAc,GACd,IAAQnnB,EAAI,EAAGA,EAAI0J,EAAOulB,cAAc/uB,OAAQF,IAAK,CACpD,IAAIe,EAAI2I,EAAOulB,cAAcjvB,GAC7BmnB,EAAYpmB,EAAEsI,IAAM,CACnB,GAAMtI,EAAEsI,GACR,KAAQtI,EAAEwP,KACV,OAAUxP,EAAEonB,OACZ,KAAQpnB,EAAEmuB,MAGZxU,GAAkB,EAElBnY,aAAa8qB,WAAa5qB,KAAKC,UAAUykB,GAIxCzM,GACF2M,EAAWtlB,aAGZ,MAED,KAAKgQ,EAAQzE,iBACZsZ,EAAU,GACVC,EAAc,GACdC,EAAkB,CACjBpR,UAAW,KACXqR,SAAU,IAEXC,EAAgB,GAChBC,EAAc,GACdC,EAAY,GACZC,EAAc,GAEd5kB,aAAawqB,OAAStqB,KAAKC,UAAUkkB,GACrCrkB,aAAayqB,WAAavqB,KAAKC,UAAUmkB,GACzCtkB,aAAa0qB,eAAiBxqB,KAAKC,UAAUokB,GAC7CvkB,aAAa2qB,aAAezqB,KAAKC,UAAUskB,GAC3CzkB,aAAa4qB,WAAa1qB,KAAKC,UAAUukB,GACzC1kB,aAAa6qB,SAAW3qB,KAAKC,UAAUwkB,GACvC3kB,aAAa8qB,WAAa5qB,KAAKC,UAAUykB,GAEzCE,EAAWtlB,iBAQd8K,EAAOC,QAAUua,G,oDCjxBjB,uCAEAzoB,OAAOD,EAAIA,IAEX,IAAIE,EAAaC,EAAQ,IACrBiT,EAAUjT,EAAQ,IAClBmiB,EAAcniB,EAAQ,IACtBC,EAASD,EAAQ,GACjBkT,EAAgBlT,EAAQ,IACxBqwB,EAASrwB,EAAQ,IACjBwR,EAASxR,EAAQ,IACjBsT,EAAOtT,EAAQ,GACfqT,EAAIrT,EAAQ,IACZK,EAASL,EAAQ,IAIjBsiB,EAA4B,KAC5BgO,EAA2B,KAG3BC,EAEsB,SAASC,GACjC,IAAI,IAAIC,KAAaD,EACU,MAA3BA,EAAaC,KAMfD,EAAaC,GAAWC,QAAQC,MAAQ,GAGxCH,EAAaC,GAAWG,gBAAkB,GAC1CJ,EAAaC,GAAWI,QAAU,GAClCL,EAAaC,GAAWK,UAAY,GACpCN,EAAaC,GAAWM,WAAa,IAIvC,OAAOP,GAKLnO,EAAe,CAClBG,mBAAoB,SAAS5X,EAAQE,GACvB,gBAAVF,GAEF7K,EAAW2L,SAAS,CACnBK,WAAYkH,EAAQvC,cACpB5E,aAAc7L,EAAO4L,UAcvBsW,EAAYM,YAAY5f,KAAK+H,GAASE,IAGvCkmB,UAAW,SAASjW,GAEnBhb,EAAW2L,SAAS,CACnBK,WAAYkH,EAAQzC,WACpB1E,aAAc7L,EAAO0N,GACrB6gB,UAAWzT,KAIbkW,YAAa,SAASxH,GAErB1pB,EAAW2L,SAAS,CACnBK,WAAYkH,EAAQxC,aACpB3E,aAAc7L,EAAO0N,GACrB8b,QAASA,KAKXyH,2BAA4B,SAASC,EAAqB3M,GACzD,IAAIC,EAAc,CACjB,CAAE5Z,QAAShI,KAAM+H,OAAQ,eAAgBE,KAAM,CAACqmB,GAAsB3jB,oBAAqB,IAC3F,CAAE3C,QAAShI,KAAM+H,OAAQ,uBAAwBE,KAAM,CAAC0Z,GAAoBhX,oBAAqB,KAGlG,OAAO8F,EAAKtH,mBAAmByY,EAAaxR,EAAQ7B,wBAGrDggB,aAAc,SAASD,GACtB,IAAIhlB,EAAiBtM,IAAEuM,WAEvB,GAA0B,MAAvB+kB,IAAgCA,EAAoB/vB,OAEtD,OADA+K,EAAe2B,UACR3B,EAIRmH,EAAK5H,SAAS,CACbK,WAAYkH,EAAQvC,cACpB5E,aAAc7L,EAAO4L,UAGtB,IAAIW,GAAmB,EACnBC,GAAqB,EACrBwY,EAAkB,GAClBC,EAAe,GAEfmM,EAAc,SAAS7C,GAC1B3uB,IAAEijB,KAAK,CAENrY,IAAK6I,EAAKlQ,OAAS,oBACnBwX,KAAM,OACN7N,KAAMyhB,EACNzL,QAAS,CAAE,cAAiBzP,EAAKvO,qBACjCoe,SAAU,SACRrW,MAAK,WACPN,GAAmB,EAEnB0Y,EAAazP,KAAK+Y,EAAUjkB,OAC1B4C,MAAK,SAASJ,GACbA,EAAKsW,QACP5W,GAAqB,EAErBwY,EAAgBxP,KAAK+Y,EAAUjkB,MAI/BiC,GAAmB,EAEnB0Y,EAAazP,KAAK+Y,EAAUjkB,QAE3BgD,QAAO,WAET,GAAG4jB,EAAoB/vB,OAAS,EAE/BiwB,EAAYF,EAAoB1jB,aAG5B,CACJ,IAAI3B,EAAgBU,EAAmBvM,EAAO0N,GAAMlB,EAAqBxM,EAAO2N,MAAQ3N,EAAO4N,QAI/FyF,EAAK5H,SAAS,CACbK,WAAYkH,EAAQvC,cACpB5E,aAAcA,EACdwR,aAAc2H,EACd/C,UAAWgD,IAGTpZ,GAAgB7L,EAAO2N,MACzBzB,EAAeiX,SAEfjX,EAAe2B,QAAQ,CAAEd,QAAUlB,GAAgB7L,EAAO4N,eAI5DwZ,KAAKxkB,MAKP,OAFAwuB,EAAYF,EAAoB1jB,SAEzBtB,GAGRmlB,cAAe,SAAS9b,GAEvBzV,EAAW2L,SAAS,CACnBK,WAAYkH,EAAQhE,eACpBnD,aAAc7L,EAAO0N,GACrB6H,WAAYA,EAEZkJ,eAAgBpL,EAAKzP,iBAIvB0tB,aAAc,SAAS/b,EAAYuM,GAElChiB,EAAW2L,SAAS,CACnBK,WAAYkH,EAAQ/D,cACpBpD,aAAc7L,EAAO0N,GACrB6H,WAAYA,EAEZmJ,cAAerL,EAAKzP,cAEpBke,oBAA6C,MAAvBA,GAA+BA,IAMnDzO,EAAK/L,uBAAyB,IAChClH,EAAOmxB,QAAQ,sFAKjBC,qBAAsB,SAASC,GAC9B,IAAIvlB,EAAiBtM,IAAEuM,WAEvB,OAAsB,MAAnBslB,GAA4BA,EAAgBtwB,QAM/CkS,EAAK5H,SAAS,CACbK,WAAYkH,EAAQ9D,uBACpBrD,aAAc7L,EAAO4L,UAGtBhM,IAAEijB,KAAK,CAENrY,IAAK6I,EAAKlQ,OAAS,2BACnBwX,KAAM,OACN7N,KAAM,CAAC,KAAQpJ,KAAKC,UAAU8tB,IAC9B3O,QAAS,CAAE,cAAiBzP,EAAKvO,qBACjCoe,SAAU,SACRrW,MAAK,WAEPwG,EAAK5H,SAAS,CACbK,WAAYkH,EAAQ9D,uBACpBrD,aAAc7L,EAAO2N,QAEtBzB,EAAeiX,YACbjW,MAAK,SAASJ,GACbA,EAAKsW,QAEP/P,EAAK5H,SAAS,CACbK,WAAYkH,EAAQ9D,uBACpBrD,aAAc7L,EAAO0N,GACrBiR,kBAAmB8S,IAEpBvlB,EAAe2B,YAGfwF,EAAK5H,SAAS,CACbK,WAAYkH,EAAQ9D,uBACpBrD,aAAc7L,EAAO2N,QAEtBzB,EAAeiX,aAIVjX,IA3CNA,EAAe2B,UACR3B,IA+CTwlB,gBAAiB,SAASnU,EAAYC,EAAYC,GAC9ClM,EAAOK,IAAIwe,EAAOlQ,uBACpBtd,KAAK+uB,wBAAwBpU,EAAYC,EAAYC,GAErD7a,KAAKgvB,uBAAuBrU,EAAYC,EAAYC,IAKtDmU,uBAAwB,SAASrU,EAAYC,EAAYC,GACvC,MAAdF,IACFA,EAAa,IAEG,MAAdC,IACFA,EAAa,GAEO,MAAlBC,IACFA,EAAiB,IAIlB3d,EAAW2L,SAAS,CACnBK,WAAYkH,EAAQpE,uBACpB/C,aAAc7L,EAAO0N,GACrB6P,WAAYA,EACZC,WAAYA,EACZC,eAAgBA,KAKlBkU,wBAAyB,SAASpU,EAAYC,EAAYC,GACzB,MAA7B4E,GACFA,EAA0BqB,QAGV,MAAdnG,IACFA,EAAa,IAEG,MAAdC,IACFA,EAAa,GAEO,MAAlBC,IACFA,EAAiB,IAIlB3d,EAAW2L,SAAS,CACnBK,WAAYkH,EAAQnE,wBACpBhD,aAAc7L,EAAO4L,QACrB2R,WAAYA,EACZC,WAAYA,EACZC,eAAgBA,IAKjB,IAFA,IAAIC,EAAiBH,EAAWhb,MAAM,KAClCohB,EAAoB,GACf1iB,EAAI,EAAGA,EAAIyc,EAAevc,OAAQF,IAAK,CAC/C,IAAI4c,EAAcH,EAAezc,GAAG6c,OAClB,IAAfD,IACF8F,IAAsBA,EAAkBxiB,OAAS,IAAM,IAAM0c,GAI/DwE,EAA4BziB,IAAEijB,KAAK,CAElCrY,IAAK6I,EAAKlQ,OAAS,gBACnBwX,KAAM,MACN7N,KAAM,CAAC8W,SAAUnG,EAAgBoG,KAAMrG,EAAYsG,QAASH,GAC5Db,QAAS,CAAE,cAAiBzP,EAAKvO,qBACjCoe,SAAU,SAGNrW,MAAK,WAET/M,EAAW2L,SAAS,CACnBK,WAAYkH,EAAQnE,wBACpBhD,aAAc7L,EAAO2N,MACrB4P,WAAYA,EACZC,WAAYA,EACZC,eAAgBA,OAEfvQ,MAAK,SAASJ,GACbA,EAAKsW,OAEPtjB,EAAW2L,SAAS,CACnBK,WAAYkH,EAAQnE,wBACpBhD,aAAc7L,EAAO0N,GACrB6P,WAAYA,EACZC,WAAYrU,SAAS2D,EAAKM,QAAQ2W,aAClCtG,eAAgBA,EAChBa,MAAOnV,SAAS2D,EAAKM,QAAQ4W,YAC7BzF,WAAYpV,SAAS2D,EAAKM,QAAQmR,YAClCF,YAAsC,MAAxBvR,EAAKM,QAAQ6W,QAAkBnX,EAAKM,QAAQ6W,QAAU,KAIrEnkB,EAAW2L,SAAS,CACnBK,WAAYkH,EAAQnE,wBACpBhD,aAAc7L,EAAO2N,MACrB4P,WAAYA,EACZC,WAAYA,EACZC,eAAgBA,QAQpBoU,eAAgB,SAAStU,EAAYC,EAAYC,EAAgBqU,EAAevc,GAC5EhE,EAAOK,IAAIwe,EAAOnQ,sBACpBrd,KAAKmvB,uBAAuBxU,EAAYC,EAAYC,EAAgBqU,EAAevc,GAEnF3S,KAAKovB,sBAAsBzU,EAAYC,EAAYC,EAAgBqU,EAAevc,IAKpFyc,sBAAuB,SAASzU,EAAYC,EAAYC,EAAgBqU,EAAevc,GACrE,MAAdgI,IACFA,EAAa,IAEG,MAAdC,IACFA,EAAa,GAEO,MAAlBC,IACFA,EAAiB,IAIlB3d,EAAW2L,SAAS,CACnBK,WAAYkH,EAAQtC,sBACpB7E,aAAc7L,EAAO0N,GACrB6P,WAAYA,EACZC,WAAYA,EACZC,eAAgBA,EAChBqU,cAAeA,EACfvc,WAAYA,KAKdwc,uBAAwB,SAASxU,EAAYC,EAAYC,EAAgBqU,EAAevc,GACxD,MAA5B8a,GACFA,EAAyB3M,QAGT,MAAdnG,IACFA,EAAa,IAEG,MAAdC,IACFA,EAAa,GAEO,MAAlBC,IACFA,EAAiB,IAIlB3d,EAAW2L,SAAS,CACnBK,WAAYkH,EAAQrC,uBACpB9E,aAAc7L,EAAO4L,QACrB2R,WAAYA,EACZC,WAAYA,EACZC,eAAgBA,EAChBqU,cAAeA,EACfvc,WAAYA,IAKb,IAFA,IAAImI,EAAiBH,EAAWhb,MAAM,KAClCohB,EAAoB,GACf1iB,EAAI,EAAGA,EAAIyc,EAAevc,OAAQF,IAAK,CAC/C,IAAI4c,EAAcH,EAAezc,GAAG6c,OAClB,IAAfD,IACF8F,IAAsBA,EAAkBxiB,OAAS,IAAM,IAAM0c,GAI/D,IAAIoU,GAAoB,EACpBC,EAAkB,KAClBC,EAAe,KACC,MAAjBL,IACFG,EAA+C,MAA1BH,EAAcM,UAAoBN,EAAcM,SACrEF,EAAqD,MAAlCJ,EAAcO,iBAA2BP,EAAcO,iBAAmB,KAC9D,MAA5BP,EAAcQ,YAAsBR,EAAcQ,WAAWnxB,SAC/DgxB,EAAeL,EAAcQ,WAAWC,SAI1ClC,EAA2BzwB,IAAEijB,KAAK,CAEjCrY,IAAK6I,EAAKlQ,OAAS,eACnBwX,KAAM,MACN7N,KAAM,CACL8W,SAAUnG,EACVoG,KAAMrG,EACNsG,QAASH,EACTyO,SAAUH,EACVI,iBAAkBH,EAClBI,WAAYH,EACZ5c,WAAYA,EACZid,eAAe,GAEhB1P,QAAS,CAAE,cAAiBzP,EAAKvO,qBACjCoe,SAAU,SACRrW,MAAK,WAEP/M,EAAW2L,SAAS,CACnBK,WAAYkH,EAAQrC,uBACpB9E,aAAc7L,EAAO2N,MACrB4P,WAAYA,EACZC,WAAYA,EACZC,eAAgBA,EAChBqU,cAAeA,EACfvc,WAAYA,OAEXrI,MAAK,SAASJ,GACbA,EAAKsW,OAEPtjB,EAAW2L,SAAS,CACnBK,WAAYkH,EAAQrC,uBACpB9E,aAAc7L,EAAO0N,GACrB6P,WAAYA,EACZC,WAAYrU,SAAS2D,EAAKM,QAAQ2W,aAClCtG,eAAgBA,EAChBqU,cAAeA,EACfvc,WAAYA,EACZ+I,MAAOnV,SAAS2D,EAAKM,QAAQ4W,YAC7BzF,WAAYpV,SAAS2D,EAAKM,QAAQmR,YAClCF,YAAsC,MAAxBvR,EAAKM,QAAQ6W,QAAkBnX,EAAKM,QAAQ6W,QAAU,KAIrEnkB,EAAW2L,SAAS,CACnBK,WAAYkH,EAAQrC,uBACpB9E,aAAc7L,EAAO2N,MACrB4P,WAAYA,EACZC,WAAYA,EACZC,eAAgBA,EAChBqU,cAAeA,EACfvc,WAAYA,QAQhBkd,iBAAkB,SAASC,EAAeC,GAIzC,OAFAD,EAAgBA,EAAc/lB,KAAI,SAACrC,GAAD,OAAQnB,SAASmB,MACnDqoB,EAAgBA,EAAchmB,KAAI,SAACrC,GAAD,OAAQnB,SAASmB,MAC5C1K,IAAEuM,WAAW0B,QAAQ,CAAET,QAAS,CAAEwlB,YAAaxf,EAAEyf,MAAMH,EAAeC,OAO9EG,iBAAkB,SAASC,EAA6BC,EAAiBC,EAA+BC,EAAmBzc,GACrG,MAAlBA,IACFA,EAAiB,IAGlB,IAAIkM,EAAe,CAGlB,CAAE/X,QAASsX,EAAavX,OAAQ,cAAeE,KAAM,KAAM0C,oBAAqB,IAAMN,YAAY,GAClG,CAAErC,QAAShI,KAAM+H,OAAQ,sBAAuBE,KAAM,KAAM0C,oBAAqB,KACjF,CAAE3C,QAAShI,KAAM+H,OAAQ,oBAAqBE,KAAM,KAAM0C,oBAAqB,KAC/E,CAAE3C,QAAShI,KAAM+H,OAAQ,kBAAmBE,KAAM,KAAM0C,oBAAqB,KAC7E,CAAE3C,QAAShI,KAAM+H,OAAQ,oBAAqBE,KAAM,KAAM0C,oBAAqB,KAC/E,CAAE3C,QAAShI,KAAM+H,OAAQ,kBAAmBE,KAAM,CAACkoB,EAA6BC,GAAkBzlB,oBAAqB,KACvH,CAAE3C,QAAShI,KAAM+H,OAAQ,oBAAqBE,KAAM,KAAM0C,oBAAqB,KAC/E,CAAE3C,QAAShI,KAAM+H,OAAQ,oBAAqBE,KAAM,CAACooB,EAA+BC,GAAoB3lB,oBAAqB,KAE7H,CAAE3C,QAAShI,KAAM+H,OAAQ,mBAAoBE,KAAM,CAAC4L,EAAgB,4BAA6BlJ,oBAAqB,GACtH,CAAE3C,QAAShI,KAAM+H,OAAQ,mBAAoBE,KAAM,CAAC,mBAAoB0C,oBAAqB,KAC7F,CAAE3C,QAAShI,KAAM+H,OAAQ,oBAAqBE,KAAM,CAAC,mBAAoB0C,oBAAqB,KAC9F,CAAE3C,QAAShI,KAAM+H,OAAQ,sBAAuBE,KAAM,CAAC,mBAAoB0C,oBAAqB,MAGjG,OAAO8F,EAAKtH,mBAAmB4W,EAAc3P,EAAQ1C,gBAMtD6iB,0BAA2B,WAC1B,IAAIxQ,EAAe,CAGlB,CAAE/X,QAASsX,EAAavX,OAAQ,cAAeE,KAAM,KAAM0C,oBAAqB,GAAKN,YAAY,GACjG,CAAErC,QAAShI,KAAM+H,OAAQ,sBAAuBE,KAAM,KAAM0C,oBAAqB,KACjF,CAAE3C,QAAShI,KAAM+H,OAAQ,oBAAqBE,KAAM,KAAM0C,oBAAqB,KAC/E,CAAE3C,QAAShI,KAAM+H,OAAQ,kBAAmBE,KAAM,KAAM0C,oBAAqB,KAC7E,CAAE3C,QAAShI,KAAM+H,OAAQ,oBAAqBE,KAAM,KAAM0C,oBAAqB,KAC/E,CAAE3C,QAAShI,KAAM+H,OAAQ,oBAAqBE,KAAM,KAAM0C,oBAAqB,KAShF,OALGgE,EAAOK,IAAIwe,EAAOjQ,+BACpBwC,EAAa,GAAGpV,oBAAsB,GACtCoV,EAAanN,KAAK,CAAE5K,QAAShI,KAAM+H,OAAQ,mBAAoBE,KAAM,CAAC,CAACwI,EAAKrN,qBAAsBuH,oBAAqB,MAGjH8F,EAAKtH,mBAAmB4W,EAAc3P,EAAQnC,uBA0DtDuiB,6BAA8B,SAAS3c,GACtC,IAAIkM,EAAe,CAGlB,CAAE/X,QAASsX,EAAavX,OAAQ,cAAeE,KAAM,KAAM0C,oBAAqB,GAAKN,YAAY,GAEjG,CAAErC,QAAShI,KAAM+H,OAAQ,mBAAoBE,KAAM,CAAC4L,GAAiBlJ,oBAAqB,GAAKN,YAAY,GAC3G,CAAErC,QAAShI,KAAM+H,OAAQ,oBAAqBE,KAAM,CAAC4L,GAAiBlJ,oBAAqB,KAC3F,CAAE3C,QAAShI,KAAM+H,OAAQ,sBAAuBE,KAAM,CAAC4L,GAAiBlJ,oBAAqB,MAG9F,OAAO8F,EAAKtH,mBAAmB4W,EAAc3P,EAAQlC,0BA+DtDuiB,wCAAyC,SAASJ,EAA+BC,GAChF,IAAIvQ,EAAe,CAGlB,CAAE/X,QAASsX,EAAavX,OAAQ,cAAeE,KAAM,KAAM0C,oBAAqB,GAAKN,YAAY,GAEjG,CAAErC,QAAShI,KAAM+H,OAAQ,oBAAqBE,KAAM,CAACooB,EAA+BC,GAAoB3lB,oBAAqB,GAAKN,YAAY,GAC9I,CAAErC,QAAShI,KAAM+H,OAAQ,mBAAoBE,KAAM,CAAC,4BAA6B0C,oBAAqB,KAcvG,OAVIgE,EAAOK,IAAIwe,EAAOlQ,yBACrByC,EAAa,GAAGpV,oBAAsB,GACtCoV,EAAa,GAAGpV,oBAAsB,GACtCoV,EAAa,GAAGpV,oBAAsB,GACtCoV,EAAa,GAAG1V,YAAa,EAE7B0V,EAAanN,KAAK,CAAE5K,QAAShI,KAAM+H,OAAQ,oBAAqBE,KAAM,CAAC,4BAA6B0C,oBAAqB,MACzHoV,EAAanN,KAAK,CAAE5K,QAAShI,KAAM+H,OAAQ,sBAAuBE,KAAM,CAAC,4BAA6B0C,oBAAqB,OAGrH8F,EAAKtH,mBAAmB4W,EAAc3P,EAAQhC,gCAMtDsiB,gBAAiB,SAASC,EAAsBP,GAE/C3f,EAAK5H,SAAS,CACbK,WAAYkH,EAAQ1C,cACpBzE,aAAc7L,EAAO4L,QACrBgQ,OAAQ3I,EAAcugB,QACtBvX,aAAcjc,EAAO4L,UAIK,MAAxB2nB,IACFA,EAAuB,GAGxB,IAAIjE,EAA0Bjc,EAAKzP,cAEb,MAAnBovB,IACFA,EAAkB,IAInB,IAAI9mB,EAAiBtM,IAAEuM,WAkEvB,OAhEAvM,IAAEijB,KAAK,CACNjY,QAAShI,KACT4H,IAAK6I,EAAKlQ,OAAS,qBACnBwX,KAAM,MACN7N,KAAM,CAAC,KAAQymB,GACfzQ,QAAS,CAAE,cAAiBzP,EAAKvO,qBACjCoe,SAAU,SACRrW,MAAK,WAEPwG,EAAK5H,SAAS,CACbK,WAAYkH,EAAQ1C,cACpBzE,aAAc7L,EAAO4L,QACrBgQ,OAAQ3I,EAAcugB,QACtBvX,aAAcjc,EAAO2N,QAEtBzB,EAAeiX,YACbjW,MAAK,SAASJ,GAChB,GAAGA,EAAKsW,OAAO,CACd,IAAIqQ,EAAgBrgB,EAAEsgB,KAAK5mB,EAAKM,QAAQ4E,KAIxCqB,EAAK5H,SAAS,CACbK,WAAYkH,EAAQ1C,cACpBzE,aAAc7L,EAAO4L,QACrBgQ,OAAQ3I,EAAcugB,QACtBvX,aAAcjc,EAAO4L,QACrB6nB,cAAeA,IAGhB,IAAIE,EAAoB,GAGG,GAAxBJ,EACFI,EAAoBF,GAKjBA,EAActyB,OAAS,GAAK6xB,EAAgB7xB,OAAS,IACvD6xB,EAAkB5f,EAAEiD,OAAO2c,GAAiB,SAACY,GAAD,OAAUxgB,EAAE8E,SAASub,EAAeG,OAGjFD,EAAoBvgB,EAAEyf,MAAM/lB,EAAKM,QAAQymB,QAASb,IAInDpwB,KAAKkxB,uBAAuBH,EAAmBrE,GAAyBziB,MAAK,WAC5EX,EAAeiX,YACbjW,MAAK,SAASJ,GAChBZ,EAAe2B,QAAQf,WAIxBuG,EAAK5H,SAAS,CACbK,WAAYkH,EAAQ1C,cACpBzE,aAAc7L,EAAO4L,QACrBgQ,OAAQ3I,EAAcugB,QACtBvX,aAAcjc,EAAO2N,QAEtBzB,EAAeiX,YAIVjX,GAKR4nB,uBAAwB,SAASC,EAAezE,GAC/C,IAAIpjB,EAAiBtM,IAAEuM,WACnB6nB,EAAcD,EAAc5yB,OAE5B8yB,EAAmB,GAOvB,GAL8B,MAA3B3E,IACFA,EAA0Bjc,EAAKzP,eAI5BowB,EAaC,CAEJ3gB,EAAK5H,SAAS,CACbK,WAAYkH,EAAQ1C,cACpBzE,aAAc7L,EAAO4L,QACrBgQ,OAAQ3I,EAAcugB,QACtBvX,aAAcjc,EAAO4L,UAGtB,IAAIW,GAAmB,EACnBC,GAAqB,EAGrB0nB,EAAa,EACbC,EAAYD,EAFA,GAE0BF,EAAcA,EAAeE,EAFvD,GAIZE,EAAsB,SAASC,GAClCz0B,IAAEijB,KAAK,CAENrY,IAAK6I,EAAKlQ,OAAS,sBACnBwX,KAAM,MACN7N,KAAM,CAAC,IAAOunB,EAAkB9B,QAChCzP,QAAS,CAAE,cAAiBzP,EAAKvO,qBACjCoe,SAAU,SACRrW,MAAK,WACPN,GAAmB,EACnB0nB,EAAmB7gB,EAAEyf,MAAMoB,EAAkBI,MAC3CnnB,MAAK,SAASJ,GAChB,GAAGA,EAAKsW,OAKP,GAAIhQ,EAAEmE,QAAQzK,EAAKM,QAAQknB,WAuB1B/nB,GAAmB,EACnB0nB,EAAmB7gB,EAAEyf,MAAMoB,EAAkBI,OAxBR,CACrC7nB,GAAqB,EAIrB,IAAI,IAAIvL,EAAI,EAAGA,EAAIozB,EAAkBlzB,OAAQF,IAAI,CAChD,IAAI2yB,EAAMS,EAAkBpzB,GACyD,MAA/B6L,EAAKM,QAAQknB,UAAUV,KAC5EK,EAAiBze,KAAKoe,GACtBrnB,GAAmB,GAIrB8G,EAAK5H,SAAS,CACbK,WAAYkH,EAAQ1C,cACpBzE,aAAc7L,EAAO4L,QACrBgQ,OAAQ3I,EAAcugB,QACtBvX,aAAcjc,EAAO4L,QACrBkQ,YAAa9b,EAAO0N,GACpB6mB,WAAYjE,EAAkCxjB,EAAKM,QAAQknB,WAC3DE,mBAAoBnrB,WAAa8qB,EAAWH,EAAe,YAQ7DznB,GAAmB,EACnB0nB,EAAmB7gB,EAAEyf,MAAMoB,EAAkBI,MAE5C/mB,QAAO,WAET,GAAG6mB,EAAWH,EAEbG,GADAD,EAAaC,GAvDA,GAwDyBH,EAAcA,EAAeE,EAxDtD,GA0DbE,EAAoBL,EAAc3V,MAAM8V,EAAYC,QAGhD,CACJ,IAAIlY,EAAgB1P,EAAmBvM,EAAO0N,GAAMlB,EAAqBxM,EAAO2N,MAAQ3N,EAAO4N,QAI/FyF,EAAK5H,SAAS,CACbK,WAAYkH,EAAQ1C,cACpBzE,aAAc7L,EAAO4L,QACrBgQ,OAAQ3I,EAAcugB,QACtBvX,aAAcA,EACdgY,iBAAkBA,EAClB3E,wBAAyBA,IAGvBrT,GAAgBjc,EAAO2N,MACzBzB,EAAeiX,SAEfjX,EAAe2B,QAAQ,CAAEd,QAAUkP,GAAgBjc,EAAO4N,eAI5DwZ,KAAKxkB,MAGPwxB,EAAoBL,EAAc3V,MAAM8V,EAAYC,SA5GpD9gB,EAAK5H,SAAS,CACbK,WAAYkH,EAAQ1C,cACpBzE,aAAc7L,EAAO4L,QACrBgQ,OAAQ3I,EAAcugB,QACtBvX,aAAcjc,EAAO0N,GACrBumB,iBAAkBA,EAClB3E,wBAAyBA,IAE1BpjB,EAAe2B,UAuGhB,OAAO3B,GAIRuoB,kBAAmB,WAElBphB,EAAK5H,SAAS,CACbK,WAAYkH,EAAQ1C,cACpBzE,aAAc7L,EAAO4L,QACrBgQ,OAAQ3I,EAAcyhB,SACtBzY,aAAcjc,EAAO4L,UAKtB,IAAIM,EAAiBtM,IAAEuM,WAyCvB,OAvCAvM,IAAEijB,KAAK,CAENrY,IAAK6I,EAAKlQ,OAAS,gBACnBwX,KAAM,MACNmI,QAAS,CAAE,cAAiBzP,EAAKvO,qBACjCoe,SAAU,SACRrW,MAAK,WAEPwG,EAAK5H,SAAS,CACbK,WAAYkH,EAAQ1C,cACpBzE,aAAc7L,EAAO4L,QACrBgQ,OAAQ3I,EAAcyhB,SACtBzY,aAAcjc,EAAO2N,QAEtBzB,EAAeiX,YACbjW,MAAK,SAASJ,GACbA,EAAKsW,QAEP/P,EAAK5H,SAAS,CACbK,WAAYkH,EAAQ1C,cACpBzE,aAAc7L,EAAO4L,QACrBgQ,OAAQ3I,EAAcyhB,SACtBzY,aAAcjc,EAAO0N,GACrBinB,gBAAiB7nB,EAAKM,UAEvBlB,EAAe2B,YAIfwF,EAAK5H,SAAS,CACbK,WAAYkH,EAAQ1C,cACpBzE,aAAc7L,EAAO4L,QACrBgQ,OAAQ3I,EAAcyhB,SACtBzY,aAAcjc,EAAO2N,QAEtBzB,EAAeiX,aAIVjX,GAMR0oB,iBAAkB,SAASne,GAC1BA,EAAiBA,EAAe2H,QAChC,IAAIlS,EAAiBtM,IAAEuM,WACnB0oB,EAAepe,EAAetV,OAC9BoL,GAAmB,EACnBC,GAAqB,EA2HzB,OAxHA5M,IAAEijB,KAAK,CAENrY,IAAK6I,EAAKlQ,OAAS,0BACnBwX,KAAM,MACN7N,KAAM,CAAC,MAAS,YAChBgW,QAAS,CAAE,cAAiBzP,EAAKvO,qBACjCoe,SAAU,SACRrW,MAAK,WACPN,GAAmB,KACjBW,MAAK,SAAS4Y,GACbA,EAAW1C,QACb5W,GAAqB,EAErB6G,EAAK5H,SAAS,CACbK,WAAYkH,EAAQ1C,cACpBzE,aAAc7L,EAAO4L,QACrBgQ,OAAQ3I,EAAc4I,SACtBI,aAAcjc,EAAO4L,QAErBkQ,YAAa9b,EAAO0N,GACpBqO,eAAgB+J,EAAW1Y,QAE3BonB,mBAAoBnrB,WAAa,GAAKwrB,EAAe,GAAM,QAI5DtoB,GAAmB,KAIlBe,QAAO,WAET,GAAIunB,EAgBC,CASJ,IAAInP,EAAkB,SAASnQ,GAC9B3V,IAAEijB,KAAK,CAENrY,IAAK6I,EAAKlQ,OAAS,kBACnBwX,KAAM,MACN7N,KAAM,CAAC,GAAMyI,GACbuN,QAAS,CAAE,cAAiBzP,EAAKvO,qBACjCoe,SAAU,SACRrW,MAAK,WACPN,GAAmB,KACjBW,MAAK,SAASJ,GACbA,EAAKsW,QACP5W,GAAqB,EAGrB6G,EAAK5H,SAAS,CACbK,WAAYkH,EAAQ1C,cACpBzE,aAAc7L,EAAO4L,QACrBgQ,OAAQ3I,EAAc4I,SACtBI,aAAcjc,EAAO4L,QAErBkQ,YAAa9b,EAAO0N,GACpBsO,eAAgB,CAAClP,EAAKM,SAEtBonB,mBAAoBnrB,YAAcwrB,EAAepe,EAAetV,OAAS,IAAM0zB,EAAe,GAAM,QAIrGtoB,GAAmB,KAElBe,QAAO,WAET,GAAGmJ,EAAetV,OAAS,EAE1BukB,EAAgBjP,EAAejJ,aAG3B,CACJ,IAAIyO,EAAgB1P,EAAmBvM,EAAO0N,GAAMlB,EAAqBxM,EAAO2N,MAAQ3N,EAAO4N,QAI/FyF,EAAK5H,SAAS,CACbK,WAAYkH,EAAQ1C,cACpBzE,aAAc7L,EAAO4L,QACrBgQ,OAAQ3I,EAAc4I,SACtBI,aAAcA,IAGZA,GAAgBjc,EAAO2N,MACzBzB,EAAeiX,SAEfjX,EAAe2B,QAAQ,CAAEd,QAAUkP,GAAgBjc,EAAO4N,eAI5DwZ,KAAKxkB,MAGP8iB,EAAgBjP,EAAejJ,aApFf,CAGhB,IAAIyO,EAAgB1P,EAAmBvM,EAAO0N,GAAK1N,EAAO4N,QAG1DyF,EAAK5H,SAAS,CACbK,WAAYkH,EAAQ1C,cACpBzE,aAAc7L,EAAO4L,QACrBgQ,OAAQ3I,EAAc4I,SACtBI,aAAcA,IAGf/P,EAAe2B,QAAQ,CAAEd,QAAUkP,GAAgBjc,EAAO4N,cA2ErD1B,GAIR4oB,kBAAmB,SAASre,GAC3B,IAAIvK,EAAiBtM,IAAEuM,WACnB0oB,EAAepe,EAAetV,OAGlC,GAAIkS,EAAKzN,2BAA8BivB,EAWlC,CAEJxhB,EAAK5H,SAAS,CACbK,WAAYkH,EAAQ1C,cACpBzE,aAAc7L,EAAO4L,QACrBgQ,OAAQ3I,EAAc8hB,WACtB9Y,aAAcjc,EAAO4L,UAGtB,IAAIW,GAAmB,EACnBC,GAAqB,EAGrB0nB,EAAa,EACbC,EAAYD,EAFA,GAE0BW,EAAeA,EAAgBX,EAFzD,GAIZc,EAAwB,SAASC,GACpCr1B,IAAEijB,KAAK,CAENrY,IAAK6I,EAAKlQ,OAAS,2BACnBwX,KAAM,MACN7N,KAAM,CAAC,IAAOmoB,EAAmB1C,QACjCzP,QAAS,CAAE,cAAiBzP,EAAKvO,qBACjCoe,SAAU,SACRrW,MAAK,WACPN,GAAmB,KACjBW,MAAK,SAASJ,GACbA,EAAKsW,QACP5W,GAAqB,EAKjB4G,EAAEmE,QAAQzK,EAAKM,QAAQknB,YAC1BjhB,EAAK5H,SAAS,CACbK,WAAYkH,EAAQ1C,cACpBzE,aAAc7L,EAAO4L,QACrBgQ,OAAQ3I,EAAc8hB,WACtB9Y,aAAcjc,EAAO4L,QACrBkQ,YAAa9b,EAAO0N,GACpB6mB,WAAYznB,EAAKM,QAAQknB,UACzBE,mBAAoBnrB,WAAa8qB,EAAWU,EAAgB,QAK9DtoB,GAAmB,KAElBe,QAAO,WAET,GAAG6mB,EAAWU,EAEbV,GADAD,EAAaC,GAvCA,GAwCyBU,EAAeA,EAAgBX,EAxCxD,GA0Cbc,EAAsBve,EAAe2H,MAAM8V,EAAYC,QAGnD,CACJ,IAAIlY,EAAgB1P,EAAmBvM,EAAO0N,GAAMlB,EAAqBxM,EAAO2N,MAAQ3N,EAAO4N,QAI/FyF,EAAK5H,SAAS,CACbK,WAAYkH,EAAQ1C,cACpBzE,aAAc7L,EAAO4L,QACrBgQ,OAAQ3I,EAAc8hB,WACtB9Y,aAAcA,IAGZA,GAAgBjc,EAAO2N,MACzBzB,EAAeiX,SAEfjX,EAAe2B,QAAQ,CAAEd,QAAUkP,GAAgBjc,EAAO4N,eAI5DwZ,KAAKxkB,MAGPoyB,EAAsBve,EAAe2H,MAAM8V,EAAYC,SAxFvD9gB,EAAK5H,SAAS,CACbK,WAAYkH,EAAQ1C,cACpBzE,aAAc7L,EAAO4L,QACrBgQ,OAAQ3I,EAAc8hB,WACtB9Y,aAAcjc,EAAO0N,KAEtBxB,EAAe2B,UAqFhB,OAAO3B,GAIRgpB,oBAAqB,SAASze,GAC7B,IAAIvK,EAAiBtM,IAAEuM,WACnB0oB,EAAepe,EAAetV,OAGlC,GAAIkS,EAAKvN,6BAAgC+uB,EAWpC,CAEJxhB,EAAK5H,SAAS,CACbK,WAAYkH,EAAQ1C,cACpBzE,aAAc7L,EAAO4L,QACrBgQ,OAAQ3I,EAAckiB,aACtBlZ,aAAcjc,EAAO4L,UAGtB,IAAIW,GAAmB,EACnBC,GAAqB,EAGrB0nB,EAAa,EACbC,EAAYD,EAFA,GAE0BW,EAAeA,EAAgBX,EAFzD,GAIZkB,EAA0B,SAASH,GACtCr1B,IAAEijB,KAAK,CAENrY,IAAK6I,EAAKlQ,OAAS,+BACnBwX,KAAM,MACN7N,KAAM,CAAC,IAAOmoB,EAAmB1C,QACjCzP,QAAS,CAAE,cAAiBzP,EAAKvO,qBACjCoe,SAAU,SACRrW,MAAK,WACPN,GAAmB,KACjBW,MAAK,SAASJ,GACbA,EAAKsW,QACP5W,GAAqB,EAKjB4G,EAAEmE,QAAQzK,EAAKM,QAAQknB,YAC1BjhB,EAAK5H,SAAS,CACbK,WAAYkH,EAAQ1C,cACpBzE,aAAc7L,EAAO4L,QACrBgQ,OAAQ3I,EAAckiB,aACtBlZ,aAAcjc,EAAO4L,QACrBkQ,YAAa9b,EAAO0N,GACpB6mB,WAAYznB,EAAKM,QAAQknB,UACzBE,mBAAoBnrB,WAAa8qB,EAAWU,EAAgB,QAK9DtoB,GAAmB,KAElBe,QAAO,WAET,GAAG6mB,EAAWU,EAEbV,GADAD,EAAaC,GAvCA,GAwCyBU,EAAeA,EAAgBX,EAxCxD,GA0CbkB,EAAwB3e,EAAe2H,MAAM8V,EAAYC,QAGrD,CACJ,IAAIlY,EAAgB1P,EAAmBvM,EAAO0N,GAAMlB,EAAqBxM,EAAO2N,MAAQ3N,EAAO4N,QAI/FyF,EAAK5H,SAAS,CACbK,WAAYkH,EAAQ1C,cACpBzE,aAAc7L,EAAO4L,QACrBgQ,OAAQ3I,EAAckiB,aACtBlZ,aAAcA,IAGZA,GAAgBjc,EAAO2N,MACzBzB,EAAeiX,SAEfjX,EAAe2B,QAAQ,CAAEd,QAAUkP,GAAgBjc,EAAO4N,eAI5DwZ,KAAKxkB,MAGPwyB,EAAwB3e,EAAe2H,MAAM8V,EAAYC,SAxFzD9gB,EAAK5H,SAAS,CACbK,WAAYkH,EAAQ1C,cACpBzE,aAAc7L,EAAO4L,QACrBgQ,OAAQ3I,EAAckiB,aACtBlZ,aAAcjc,EAAO0N,KAEtBxB,EAAe2B,UAqFhB,OAAO3B,GAIRmpB,oBAAqB,WAEpBhiB,EAAK5H,SAAS,CACbK,WAAYkH,EAAQ1C,cACpBzE,aAAc7L,EAAO4L,QACrBgQ,OAAQ3I,EAAcwc,aACtBxT,aAAcjc,EAAO4L,UAKtB,IAAIM,EAAiBtM,IAAEuM,WAyCvB,OAvCAvM,IAAEijB,KAAK,CAENrY,IAAK6I,EAAKlQ,OAAS,qBACnBwX,KAAM,MACN7N,KAAM,CAAC,WAAc,GACrBgW,QAAS,CAAE,cAAiBzP,EAAKvO,qBACjCoe,SAAU,SACRrW,MAAK,WAEPwG,EAAK5H,SAAS,CACbK,WAAYkH,EAAQ1C,cACpBzE,aAAc7L,EAAO4L,QACrBgQ,OAAQ3I,EAAcwc,aACtBxT,aAAcjc,EAAO2N,QAEtBzB,EAAeiX,YACbjW,MAAK,SAASJ,GACbA,EAAKsW,QAEP/P,EAAK5H,SAAS,CACbK,WAAYkH,EAAQ1C,cACpBzE,aAAc7L,EAAO4L,QACrBgQ,OAAQ3I,EAAcwc,aACtBxT,aAAcjc,EAAO0N,GACrBgiB,gBAAiB5iB,EAAKM,UAEvBlB,EAAe2B,YAGfwF,EAAK5H,SAAS,CACbK,WAAYkH,EAAQ1C,cACpBzE,aAAc7L,EAAO4L,QACrBgQ,OAAQ3I,EAAcwc,aACtBxT,aAAcjc,EAAO2N,QAEtBzB,EAAeiX,aAIVjX,GAIRopB,kBAAmB,WAElBjiB,EAAK5H,SAAS,CACbK,WAAYkH,EAAQ1C,cACpBzE,aAAc7L,EAAO4L,QACrBgQ,OAAQ3I,EAAc2c,UACtB3T,aAAcjc,EAAO4L,UAKtB,IAAIM,EAAiBtM,IAAEuM,WA0CvB,OAxCAvM,IAAEijB,KAAK,CAENrY,IAAK6I,EAAKlQ,OAAS,mBACnBwX,KAAM,MACN7N,KAAM,CAAC,WAAc,GACrBgW,QAAS,CAAE,cAAiBzP,EAAKvO,qBACjCoe,SAAU,SACRrW,MAAK,WAEPwG,EAAK5H,SAAS,CACbK,WAAYkH,EAAQ1C,cACpBzE,aAAc7L,EAAO4L,QACrBgQ,OAAQ3I,EAAc2c,UACtB3T,aAAcjc,EAAO2N,QAEtBzB,EAAeiX,YACbjW,MAAK,SAASJ,GACbA,EAAKsW,QAEP/P,EAAK5H,SAAS,CACbK,WAAYkH,EAAQ1C,cACpBzE,aAAc7L,EAAO4L,QACrBgQ,OAAQ3I,EAAc2c,UACtB3T,aAAcjc,EAAO0N,GACrBmiB,cAAe/iB,EAAKM,UAErBlB,EAAe2B,YAIfwF,EAAK5H,SAAS,CACbK,WAAYkH,EAAQ1C,cACpBzE,aAAc7L,EAAO4L,QACrBgQ,OAAQ3I,EAAc2c,UACtB3T,aAAcjc,EAAO2N,QAEtBzB,EAAeiX,aAIVjX,GAIRqpB,gBAAiB,WAEhBliB,EAAK5H,SAAS,CACbK,WAAYkH,EAAQ1C,cACpBzE,aAAc7L,EAAO4L,QACrBgQ,OAAQ3I,EAAc8c,QACtB9T,aAAcjc,EAAO4L,UAKtB,IAAIM,EAAiBtM,IAAEuM,WAyCvB,OAvCAvM,IAAEijB,KAAK,CAENrY,IAAK6I,EAAKlQ,OAAS,iBACnBwX,KAAM,MACNmI,QAAS,CAAE,cAAiBzP,EAAKvO,qBACjCoe,SAAU,SACRrW,MAAK,WAEPwG,EAAK5H,SAAS,CACbK,WAAYkH,EAAQ1C,cACpBzE,aAAc7L,EAAO4L,QACrBgQ,OAAQ3I,EAAc8c,QACtB9T,aAAcjc,EAAO2N,QAEtBzB,EAAeiX,YACbjW,MAAK,SAASJ,GACbA,EAAKsW,QAEP/P,EAAK5H,SAAS,CACbK,WAAYkH,EAAQ1C,cACpBzE,aAAc7L,EAAO4L,QACrBgQ,OAAQ3I,EAAc8c,QACtB9T,aAAcjc,EAAO0N,GACrBsiB,YAAaljB,EAAKM,UAEnBlB,EAAe2B,YAIfwF,EAAK5H,SAAS,CACbK,WAAYkH,EAAQ1C,cACpBzE,aAAc7L,EAAO4L,QACrBgQ,OAAQ3I,EAAc8c,QACtB9T,aAAcjc,EAAO2N,QAEtBzB,EAAeiX,aAIVjX,GAIRspB,kBAAmB,WAElBniB,EAAK5H,SAAS,CACbK,WAAYkH,EAAQ1C,cACpBzE,aAAc7L,EAAO4L,QACrBgQ,OAAQ3I,EAAcgd,SACtBhU,aAAcjc,EAAO4L,UAKtB,IAAIM,EAAiBtM,IAAEuM,WAyCvB,OAvCAvM,IAAEijB,KAAK,CAENrY,IAAK6I,EAAKlQ,OAAS,mBACnBwX,KAAM,MACNmI,QAAS,CAAE,cAAiBzP,EAAKvO,qBACjCoe,SAAU,SACRrW,MAAK,WAEPwG,EAAK5H,SAAS,CACbK,WAAYkH,EAAQ1C,cACpBzE,aAAc7L,EAAO4L,QACrBgQ,OAAQ3I,EAAcgd,SACtBhU,aAAcjc,EAAO2N,QAEtBzB,EAAeiX,YACbjW,MAAK,SAASJ,GACbA,EAAKsW,QAEP/P,EAAK5H,SAAS,CACbK,WAAYkH,EAAQ1C,cACpBzE,aAAc7L,EAAO4L,QACrBgQ,OAAQ3I,EAAcgd,SACtBhU,aAAcjc,EAAO0N,GACrBwiB,cAAepjB,EAAKM,UAErBlB,EAAe2B,YAIfwF,EAAK5H,SAAS,CACbK,WAAYkH,EAAQ1C,cACpBzE,aAAc7L,EAAO4L,QACrBgQ,OAAQ3I,EAAcgd,SACtBhU,aAAcjc,EAAO2N,QAEtBzB,EAAeiX,aAIVjX,GAMRupB,kBAAmB,SAASlC,EAAsBmC,GAEjDriB,EAAK5H,SAAS,CACbK,WAAYkH,EAAQ1C,cACpBzE,aAAc7L,EAAO4L,QACrBgQ,OAAQ3I,EAAckc,MACtBlT,aAAcjc,EAAO4L,UAIK,MAAxB2nB,IACFA,EAAuB,GAGxB,IAAIjE,EAA0Bjc,EAAKzP,cAEf,MAAjB8xB,IACFA,EAAgB,IAIjB,IAAIxpB,EAAiBtM,IAAEuM,WAkEvB,OAhEAvM,IAAEijB,KAAK,CACNjY,QAAShI,KACT4H,IAAK6I,EAAKlQ,OAAS,mBACnBwX,KAAM,MACN7N,KAAM,CAAC,KAAQymB,EAAsB,QAAWlgB,EAAK5N,aACrDqd,QAAS,CAAE,cAAiBzP,EAAKvO,qBACjCoe,SAAU,SACRrW,MAAK,WAEPwG,EAAK5H,SAAS,CACbK,WAAYkH,EAAQ1C,cACpBzE,aAAc7L,EAAO4L,QACrBgQ,OAAQ3I,EAAckc,MACtBlT,aAAcjc,EAAO2N,QAEtBzB,EAAeiX,YACbjW,MAAK,SAASJ,GAChB,GAAGA,EAAKsW,OAAO,CACd,IAAIiM,EAAcjc,EAAEsgB,KAAK5mB,EAAKM,QAAQ4E,KAItCqB,EAAK5H,SAAS,CACbK,WAAYkH,EAAQ1C,cACpBzE,aAAc7L,EAAO4L,QACrBgQ,OAAQ3I,EAAckc,MACtBlT,aAAcjc,EAAO4L,QACrByjB,YAAaA,IAGd,IAAIsG,EAAkB,GAGK,GAAxBpC,EACFoC,EAAkBtG,GAKfA,EAAYluB,OAAS,GAAKu0B,EAAcv0B,OAAS,IACnDu0B,EAAgBtiB,EAAEiD,OAAOqf,GAAe,SAAClG,GAAD,OAAUpc,EAAE8E,SAASmX,EAAaG,OAG3EmG,EAAkBviB,EAAEyf,MAAM/lB,EAAKM,QAAQymB,QAAS6B,IAIjDtT,EAAawT,2BAA2BD,EAAiBrG,GAAyBziB,MAAK,WACtFX,EAAeiX,YACbjW,MAAK,SAASJ,GAChBZ,EAAe2B,QAAQf,WAIxBuG,EAAK5H,SAAS,CACbK,WAAYkH,EAAQ1C,cACpBzE,aAAc7L,EAAO4L,QACrBgQ,OAAQ3I,EAAckc,MACtBlT,aAAcjc,EAAO2N,QAEtBzB,EAAeiX,YAIVjX,GAKR0pB,2BAA4B,SAASC,EAAavG,GACjDuG,EAAcA,EAAYzX,QAC1B,IAAIlS,EAAiBtM,IAAEuM,WACnB2pB,EAAYD,EAAY10B,OAExBouB,EAAiB,GAOrB,GAL8B,MAA3BD,IACFA,EAA0Bjc,EAAKzP,eAI5BkyB,EAaC,CAEJziB,EAAK5H,SAAS,CACbK,WAAYkH,EAAQ1C,cACpBzE,aAAc7L,EAAO4L,QACrBgQ,OAAQ3I,EAAckc,MACtBlT,aAAcjc,EAAO4L,UAGtB,IAAImqB,EAA0B,GAE1BxpB,GAAmB,EACnBC,GAAqB,EAErBwpB,EAAmB,SAASxM,GAC/B5pB,IAAEijB,KAAK,CAENrY,IAAK6I,EAAKlQ,OAAS,iBACnBwX,KAAM,MACN7N,KAAM,CAAC,GAAM0c,GACb1G,QAAS,CAAE,cAAiBzP,EAAKvO,qBACjCoe,SAAU,SACRrW,MAAK,WACPN,GAAmB,EACnBgjB,EAAe/Z,KAAKgU,MAClBtc,MAAK,SAASJ,GACbA,EAAKsW,QACP5W,GAAqB,EACrBM,EAAKM,QAAQ9C,GAAKkf,EAClBuM,EAAwBvgB,KAAKrM,SAAS2D,EAAKM,QAAQ0R,cAInDzL,EAAK5H,SAAS,CACbK,WAAYkH,EAAQ1C,cACpBzE,aAAc7L,EAAO4L,QACrBgQ,OAAQ3I,EAAckc,MACtBlT,aAAcjc,EAAO4L,QAErBkQ,YAAa9b,EAAO0N,GACpB0hB,YAAa,CAACtiB,EAAKM,SACnBonB,mBAAoBnrB,YAAcysB,EAAYD,EAAY10B,QAAU20B,EAAa,SAIlFvpB,GAAmB,EACnBgjB,EAAe/Z,KAAKgU,OAEnBlc,QAAO,WAET,GAAGuoB,EAAY10B,OAAS,EAEvB60B,EAAiBH,EAAYroB,aAGzB,CACJ,IAAIyO,EAAgB1P,EAAmBvM,EAAO0N,GAAMlB,EAAqBxM,EAAO2N,MAAQ3N,EAAO4N,QAI/FyF,EAAK5H,SAAS,CACbK,WAAYkH,EAAQ1C,cACpBzE,aAAc7L,EAAO4L,QACrBgQ,OAAQ3I,EAAckc,MACtBlT,aAAcA,EACdsT,eAAgBA,EAChBD,wBAAyBA,IAGvBrT,GAAgBjc,EAAO2N,MACzBzB,EAAeiX,SAEfjX,EAAe2B,QAAQ,CACtBd,QAAUkP,GAAgBjc,EAAO4N,QACjCR,QAAS,CAAE6oB,qBAAsB7iB,EAAEsgB,KAAKqC,WAK3C3O,KAAKxkB,MAGPozB,EAAiBH,EAAYroB,cA7F7B6F,EAAK5H,SAAS,CACbK,WAAYkH,EAAQ1C,cACpBzE,aAAc7L,EAAO4L,QACrBgQ,OAAQ3I,EAAckc,MACtBlT,aAAcjc,EAAO0N,GACrB6hB,eAAgBA,EAChBD,wBAAyBA,IAE1BpjB,EAAe2B,QAAQ,CAAET,QAAS,CAAE6oB,qBAAsB,MAwF3D,OAAO/pB,IAIT4B,EAAOC,QAAUqU,G,kDC1uDjB,oBAoCe8T,IAhCW,SAAC,GAAyB,IAAvBhoB,EAAsB,EAAtBA,UAAWiW,EAAW,EAAXA,MAEvB,MAAbA,EAAKN,MAAgBM,EAAKN,MAAQ,KACpCM,EAAKN,KAAO,EACZ3V,GAAY,IAEO,MAAjBiW,EAAKP,UAAoBO,EAAKP,UAAY,KAC5CO,EAAKP,SAAW,EAChB1V,GAAY,IAEI,MAAdiW,EAAK7F,OAAiB6F,EAAK7F,OAAS,KACtC6F,EAAK7F,MAAQ,EACbpQ,GAAY,IAES,MAAnBiW,EAAK5F,YAAsB4F,EAAK5F,YAAc,KAChD4F,EAAK5F,WAAa,EAClBrQ,GAAY,GAGb,IAAIioB,GAAchS,EAAKN,KAAO,GAAKM,EAAKP,SAAY,EAChDwS,EAAYjS,EAAKN,MAAQM,EAAK5F,WAAc4F,EAAK7F,MAAS6F,EAAKN,KAAOM,EAAKP,SAG/E,OACC,yBAAKzV,UAAW,wBAA0BD,EAAY,OAAS,WAC9D,yBAAKC,UAAU,2BACZgoB,GAAaC,EAAYD,EAAYA,EAAY,IAAMC,EAD1D,MACsE,0BAAMjoB,UAAU,gBAAgBgW,EAAK7F,W,kCC3B9GxQ,EAAOC,QAAU,CAChBohB,MAAS,QACTtT,SAAW,WACX2X,QAAU,UACVkB,SAAW,WACXjF,aAAc,eACdG,UAAY,YACZG,QAAU,UACVE,SAAW,WACX8E,WAAa,aACbI,aAAc,iB,6BCXf,IAAMkB,EAAwB,CAE7BC,cAAe,GAGfC,SAAU,WACT,OAAQ3zB,KAAK0zB,cAAcn1B,OAAS4Q,QAAQC,IAAIpP,KAAK0zB,eAAiBvkB,QAAQlE,WAG/E2oB,SAAU,SAASC,GAClB7zB,KAAK0zB,cAAc9gB,KAAKihB,IAEzBC,WAAY,WACX9zB,KAAK0zB,cAAgB,KAIRD,O,gCCnBf,uCAEAx2B,OAAOD,EAAIA,IACX,IAAIE,EAAaC,EAAQ,IACrBiT,EAAUjT,EAAQ,IAClBC,EAASD,EAAQ,GACjBqwB,EAASrwB,EAAQ,IACjBwR,EAASxR,EAAQ,IACjBsT,EAAOtT,EAAQ,GACfK,EAASL,EAAQ,IAGjB42B,EACc,SAASC,GAczB,OAZuB,MAApBA,EAASC,SACiB,MAAzBD,EAASC,QAAQC,OACnBF,EAASC,QAAQC,UAAO1c,GAGD,MAAtBwc,EAASG,YACXH,EAASG,eAAY3c,GAItBwc,EAASI,SAAoC,MAAvBJ,EAASK,YAAsBL,EAASK,WAAW91B,QAAgC,MAAtBy1B,EAASM,WAAqBN,EAASM,UAAU/1B,OAAUy1B,EAASK,WAAa,IAAML,EAASM,UAAYN,EAASplB,KAEjMolB,GAfLD,EAiBc,SAASQ,GACzB,MAEoB,SAAlBA,EAASC,OAAmC,GAAfD,EAAS7sB,IAEb,GAAxB6sB,EAASE,aAAkD,MAA9BF,EAASJ,UAAUO,UAAoBH,EAASJ,UAAUO,QAAQC,UAAY,GAAKJ,EAASJ,UAAUO,QAAQE,QAAUnkB,EAAKzP,gBAClI,GAAxBuzB,EAASE,aAA8C,MAA1BF,EAASJ,UAAUU,MAAgBN,EAASJ,UAAUU,IAAIF,UAAY,GAAKJ,EAASJ,UAAUU,IAAID,QAAUnkB,EAAKzP,gBAvB/I+yB,EA0BiB,SAASQ,GAE5B5lB,EAAOgO,WAAoC,GAAxB4X,EAASE,YAAmBjH,EAAO/P,YAAc9O,EAAO4N,uBAKzE+C,EAAc,CACjBwV,MAAO,SAASC,EAAWC,GAE1B93B,EAAW2L,SAAS,CACnBK,WAAYkH,EAAQ3E,WACpBxC,aAAc7L,EAAO4L,UAGtBhM,IAAEijB,KAAK,CAENrY,IAAK6I,EAAKlQ,OAAS,sBACnBwX,KAAM,MAENmI,QAAS,CAAE,cAAiBzP,EAAK1O,gCAAgCgzB,EAAU/yB,SAAU+yB,EAAU9yB,WAC/Fqe,SAAU,OACV2U,QAAS,MACPhrB,MAAK,SAASirB,EAAO1U,GAEvBtjB,EAAW2L,SAAS,CACnBK,WAAYkH,EAAQ3E,WACpBxC,aAAc7L,EAAO2N,MACrBoqB,WAAuB,WAAV3U,EAAsB,qCAAuC,oEAEzElW,MAAK,SAASJ,GACbA,EAAKsW,OAEJuT,EAAyB7pB,EAAKM,UAEhCupB,EAA4B7pB,EAAKM,SAGjCN,EAAKM,QAAQxI,SAAW+yB,EAAU/yB,SAClCkI,EAAKM,QAAQvI,SAAW8yB,EAAU9yB,SAGlC/E,EAAW2L,SAAS,CACnBK,WAAYkH,EAAQ3E,WACpBxC,aAAc7L,EAAO0N,GACrBkpB,SAAUD,EAAyB7pB,EAAKM,WAGtCwqB,GAEF93B,EAAW2L,SAAS,CACnBK,WAAYkH,EAAQzE,iBACpB1C,aAAc7L,EAAO0N,MAMvB5N,EAAW2L,SAAS,CACnBK,WAAYkH,EAAQ3E,WACpBxC,aAAc7L,EAAO2N,MACrBoqB,WAAY,kDAMdj4B,EAAW2L,SAAS,CACnBK,WAAYkH,EAAQ3E,WACpBxC,aAAc7L,EAAO2N,MAErBoqB,WAA4B,oBAAdjrB,EAAKkW,OAA6C,oBAAdlW,EAAKkW,OAA6C,oBAAdlW,EAAKkW,MAA+BlW,EAAKkW,MAAQ,wBAM3IgV,OAAQ,WAEPl4B,EAAW2L,SAAS,CACnBK,WAAYkH,EAAQ1E,YACpBzC,aAAc7L,EAAO0N,MAQvBuqB,YAAa,SAAStS,GAErBtS,EAAK5H,SAAS,CACbK,WAAYkH,EAAQvE,aACpB5C,aAAc7L,EAAO4L,UAKtB,IAAIM,EAAiBtM,IAAEuM,WAmGvB,OAjGAvM,IAAEijB,KAAK,CACNjY,QAAShI,KACT4H,IAAK6I,EAAKlQ,OAAS,sBACnBwX,KAAM,MACNmI,QAAS,CAAE,cAAiBzP,EAAKvO,qBACjCoe,SAAU,SACRrW,MAAK,SAASirB,EAAO1U,GAGvB/P,EAAK5H,SAAS,CACbK,WAAYkH,EAAQvE,aACpB5C,aAAc7L,EAAO2N,QAEtBzB,EAAeiX,YACbjW,MAAK,SAASJ,GACbA,EAAKsW,OAEJuT,EAAyB7pB,EAAKM,UAGhCupB,EAA4B7pB,EAAKM,SAG9BuY,EACF/lB,IAAEijB,KAAK,CAENrY,IAAK6I,EAAKlQ,OAAS,0BACnBwX,KAAM,MACN7N,KAAM,CAAC,MAAS,QAChBgW,QAAS,CAAE,cAAiBzP,EAAKvO,qBACjCoe,SAAU,SACRrW,MAAK,WAEPwG,EAAK5H,SAAS,CACbK,WAAYkH,EAAQvE,aACpB5C,aAAc7L,EAAO4N,QACrBgpB,SAAUD,EAAyB7pB,EAAKM,WAEzClB,EAAe2B,QAAQ,CAACd,SAAS,OAC/BG,MAAK,SAAS4Y,GACbA,EAAW1C,QAEb/P,EAAK5H,SAAS,CACbK,WAAYkH,EAAQvE,aACpB5C,aAAc7L,EAAO0N,GACrBkpB,SAAUD,EAAyB7pB,EAAKM,SACxC8qB,cAAepS,EAAW1Y,QAC1B+qB,gBAAiB9kB,EAAKzP,gBAEvBsI,EAAe2B,YAKfwF,EAAK5H,SAAS,CACbK,WAAYkH,EAAQvE,aACpB5C,aAAc7L,EAAO4N,QACrBgpB,SAAUD,EAAyB7pB,EAAKM,WAEzClB,EAAe2B,QAAQ,CAACd,SAAS,SAMnCsG,EAAK5H,SAAS,CACbK,WAAYkH,EAAQvE,aACpB5C,aAAc7L,EAAO0N,GACrBkpB,SAAUD,EAAyB7pB,EAAKM,WAEzClB,EAAe2B,aAKhBwF,EAAK5H,SAAS,CACbK,WAAYkH,EAAQvE,aACpB5C,aAAc7L,EAAO2N,QAEtBzB,EAAeiX,SAGf/iB,EAAO4iB,MAAM,iDACbpgB,KAAKo1B,WAMN3kB,EAAK5H,SAAS,CACbK,WAAYkH,EAAQvE,aACpB5C,aAAc7L,EAAO2N,QAEtBzB,EAAeiX,aAIVjX,GAQRsW,YAAa,SAAS4V,EAAiBC,EAAqBC,GAO9B,MAA1BA,IACFA,EAAyB,MAG1B14B,IAAEijB,KAAK,CACNjY,QAAShI,KACT4H,IAAK6I,EAAKlQ,OAAS,sBACnBwX,KAAM,MAENmI,QAAS,CAAE,cAAiBzP,EAAKvO,qBACjCoe,SAAU,OACV2U,QAAS,MACPhrB,MAAK,SAASirB,EAAO1U,GAYvBgV,EAAgBptB,MAAMstB,EAAwBD,MAE5CnrB,MAAK,SAASJ,GACbA,EAAKsW,QAEJuT,EAAyB7pB,EAAKM,UAEhCupB,EAA4B7pB,EAAKM,SAOjCgrB,EAAgBptB,MAAMstB,EAAwBD,KA4B/Cj4B,EAAO4iB,MAAM,iDACbpgB,KAAKo1B,cAKRO,qBAAsB,SAASnB,GAClB,MAATA,GAAkBA,EAAMj2B,SAK3BrB,EAAW2L,SAAS,CACnBK,WAAYkH,EAAQxE,4BACpB3C,aAAc7L,EAAO4L,QACrBwrB,MAAOA,IAGRx3B,IAAEijB,KAAK,CAENrY,IAAK6I,EAAKlQ,OAAS,mCACnBwX,KAAM,OACN7N,KAAM,CAAC,MAASsqB,GAChBtU,QAAS,CAAE,cAAiBzP,EAAKvO,qBACjCoe,SAAU,SACRrW,MAAK,WAEP/M,EAAW2L,SAAS,CACnBK,WAAYkH,EAAQxE,4BACpB3C,aAAc7L,EAAO2N,MACrBypB,MAAOA,OAENlqB,MAAK,SAASJ,GACbA,EAAKsW,OAEPtjB,EAAW2L,SAAS,CACnBK,WAAYkH,EAAQxE,4BACpB3C,aAAc7L,EAAO0N,GACrB0pB,MAAOA,IAKRt3B,EAAW2L,SAAS,CACnBK,WAAYkH,EAAQxE,4BACpB3C,aAAc7L,EAAO2N,MACrBypB,MAAOA,UAOZtpB,EAAOC,QAAUmU,G,kDC1WjB,IAAIpiB,EAAaC,EAAQ,IACrBiT,EAAUjT,EAAQ,IAClBC,EAASD,EAAQ,GACjBkT,EAAgBlT,EAAQ,IACxBE,EAAeF,EAAQ,IAAUE,aACjCC,EAASH,EAAQ,IAEjBqwB,EAASrwB,EAAQ,IACjBwR,EAASxR,EAAQ,IACjBsT,EAAOtT,EAAQ,GAIfy4B,EAAW,GAGXC,EAAe,GAGfC,EAAsB,GAOtBC,EAAsB,GAC1BA,EAAoB3lB,EAAQ1C,eAAiB,GAC7CqoB,EAAoB3lB,EAAQ1C,eAAe2C,EAAcwc,cAAgB,IACzEkJ,EAAoB3lB,EAAQ1C,eAAe2C,EAAc2c,WAAc,IACvE+I,EAAoB3lB,EAAQ1C,eAAe2C,EAAc8c,SAAY,IACrE4I,EAAoB3lB,EAAQ1C,eAAe2C,EAAcgd,UAAa,IACtE0I,EAAoB3lB,EAAQ1C,eAAe2C,EAAcugB,SAAY,IACrEmF,EAAoB3lB,EAAQ1C,eAAe2C,EAAcyhB,UAAa,IACtEiE,EAAoB3lB,EAAQ1C,eAAe2C,EAAckc,OAAW,IACpEwJ,EAAoB3lB,EAAQ1C,eAAe2C,EAAc4I,UAAa,IACtE8c,EAAoB3lB,EAAQ1C,eAAe2C,EAAc8hB,YAAc,IACvE4D,EAAoB3lB,EAAQ1C,eAAe2C,EAAckiB,cAAgB,IAEzEwD,EAAoB3lB,EAAQnC,sBAAwB,GACpD8nB,EAAoB3lB,EAAQnC,sBAAsBoC,EAAcwc,cAAgB,IAChFkJ,EAAoB3lB,EAAQnC,sBAAsBoC,EAAc2c,WAAc,IAC9E+I,EAAoB3lB,EAAQnC,sBAAsBoC,EAAc8c,SAAY,IAC5E4I,EAAoB3lB,EAAQnC,sBAAsBoC,EAAcgd,UAAa,IAC7E0I,EAAoB3lB,EAAQnC,sBAAsBoC,EAAcyhB,UAAa,GAG7EiE,EAAoB3lB,EAAQlC,yBAA2B,GACvD6nB,EAAoB3lB,EAAQlC,yBAAyBmC,EAAc4I,UAAa,GAChF8c,EAAoB3lB,EAAQlC,yBAAyBmC,EAAc8hB,YAAe,IAClF4D,EAAoB3lB,EAAQlC,yBAAyBmC,EAAckiB,cAAgB,IAEnFwD,EAAoB3lB,EAAQjC,uBAAyB,GACrD4nB,EAAoB3lB,EAAQjC,uBAAuBkC,EAAc4I,UAAc,GAC/E8c,EAAoB3lB,EAAQjC,uBAAuBkC,EAAc8hB,YAAe,KAChF4D,EAAoB3lB,EAAQjC,uBAAuBkC,EAAckiB,cAAiB,KAElFwD,EAAoB3lB,EAAQhC,+BAAiC,GAC7D2nB,EAAoB3lB,EAAQhC,+BAA+BiC,EAAckc,OAAW5d,EAAOK,IAAIwe,EAAOlQ,uBAAyB,GAAM,GACrIyY,EAAoB3lB,EAAQhC,+BAA+BiC,EAAc4I,UAAatK,EAAOK,IAAIwe,EAAOlQ,uBAAyB,GAAM,GACvIyY,EAAoB3lB,EAAQhC,+BAA+BiC,EAAc8hB,YAAc,IACvF4D,EAAoB3lB,EAAQhC,+BAA+BiC,EAAckiB,cAAgB,IAEzFwD,EAAoB3lB,EAAQ/B,aAAe,GAC3C0nB,EAAoB3lB,EAAQ/B,aAAagC,EAAcugB,SAAgB,GACvEmF,EAAoB3lB,EAAQ/B,aAAagC,EAAckc,OAAc,IACrEwJ,EAAoB3lB,EAAQ/B,aAAagC,EAAc4I,UAAgB,IACvE8c,EAAoB3lB,EAAQ/B,aAAagC,EAAc8hB,YAAkB,IACzE4D,EAAoB3lB,EAAQ/B,aAAagC,EAAckiB,cAAmB,IAG1E,IAAIyD,EAAoB14B,EAAO,GAAID,EAAawC,UAAW,CAC1DC,kBAAmB,SAASC,GAAWC,KAAKC,GAlE1B,SAkE2CF,IAC7DG,qBAAsB,SAASH,GAAWC,KAAKG,eAnE7B,SAmE0DJ,IAC5EK,WAAY,WAAYJ,KAAKK,KApEX,WAwElBiS,UAAW,SAASpJ,GACnB,OAAQ0sB,EAAS1sB,GAAc0sB,EAAS1sB,GAAYD,aAAe,MAEpEgtB,0BAA2B,SAAS/sB,GACnC,OAAQ2sB,EAAa3sB,GAAc2sB,EAAa3sB,GAAYgtB,SAAW,MAExEC,oCAAqC,SAASjtB,GAC7C,OAAQ2sB,EAAa3sB,GAAc2sB,EAAa3sB,GAAY9L,EAAO0N,IAAM,MAE1EsrB,sBAAuB,SAASltB,GAC/B,OAAQ4sB,EAAoB5sB,GAAc4sB,EAAoB5sB,GAAYmtB,WAAa,MAExFC,kBAAmB,SAASptB,GAE3B,OAAQ0sB,EAAS1sB,GAAc0sB,EAAS1sB,GAAYqtB,eAAiB,MAItE9sB,cAAe,SAASP,GACvB0sB,EAAS1sB,GAAc,GACvB2sB,EAAa3sB,GAAc,GAC3B4sB,EAAoB5sB,GAAc,MAIpChM,EAAWmb,UAAS,SAAStQ,GAE5B,IAAIyuB,EAA6B,EAEjC,OAAOzuB,EAAOmB,YACb,KAAKkH,EAAQpC,gBACb,KAAKoC,EAAQxE,4BACb,KAAKwE,EAAQ7D,qBAEZqpB,EAAS7tB,EAAOmB,YAAcnB,EAG1B8tB,EAAa9tB,EAAOmB,cACvB2sB,EAAa9tB,EAAOmB,YAAc,IAEnC2sB,EAAa9tB,EAAOmB,YAAYgtB,SAAWzlB,EAAK9O,kBAEhDq0B,EAAkB51B,aAClB,MAED,KAAKgQ,EAAQ1C,cA4DZ,GA1DG3F,EAAO0B,eACTusB,EAAkBvsB,cAAc1B,EAAOmB,YAKpC0sB,EAAS7tB,EAAOmB,cACnB0sB,EAAS7tB,EAAOmB,YAAc,IAE/B0sB,EAAS7tB,EAAOmB,YAAYA,WAAanB,EAAOmB,WAChD0sB,EAAS7tB,EAAOmB,YAAYD,aAAelB,EAAOkB,aAG9C4sB,EAAa9tB,EAAOmB,cACvB2sB,EAAa9tB,EAAOmB,YAAc,IAEnC2sB,EAAa9tB,EAAOmB,YAAYgtB,SAAWzlB,EAAK9O,kBAE5Ci0B,EAAS7tB,EAAOmB,YAAYqtB,iBAC/BX,EAAS7tB,EAAOmB,YAAYqtB,eAAiB,IAE1CT,EAAoB/tB,EAAOmB,cAC9B4sB,EAAoB/tB,EAAOmB,YAAc,IAEtC4sB,EAAoB/tB,EAAOmB,YAAYutB,oBAC1CX,EAAoB/tB,EAAOmB,YAAYutB,kBAAoB,IAIxC,MAAjB1uB,EAAOiR,SAET4c,EAAS7tB,EAAOmB,YAAYqtB,eAAexuB,EAAOiR,QAAUjR,EAAOsR,aAI/DtR,EAAOiR,QAAU3I,EAAcugB,SAAW7oB,EAAOiR,QAAU3I,EAAckc,OAASxkB,EAAOiR,QAAU3I,EAAc4I,UACpHlR,EAAOiR,QAAU3I,EAAc8hB,YAAcpqB,EAAOiR,QAAU3I,EAAckiB,aAEzExqB,EAAOsR,cAAgBjc,EAAO4L,QAEA,MAA7BjB,EAAO6pB,mBACTkE,EAAoB/tB,EAAOmB,YAAYutB,kBAAkB1uB,EAAOiR,QAAUjR,EAAO6pB,mBAEjFkE,EAAoB/tB,EAAOmB,YAAYutB,kBAAkB1uB,EAAOiR,QAAU,EAK3E8c,EAAoB/tB,EAAOmB,YAAYutB,kBAAkB1uB,EAAOiR,QAAU,IAG3E8c,EAAoB/tB,EAAOmB,YAAYutB,kBAAkB1uB,EAAOiR,QAAWjR,EAAOsR,cAAgBjc,EAAO4L,QAAU,EAAI,KAOtHjB,EAAOkB,cAAgB7L,EAAO4L,QAGhC,IAAI,IAAIgQ,KAFR8c,EAAoB/tB,EAAOmB,YAAYmtB,WAAa,EAElCP,EAAoB/tB,EAAOmB,YAAYutB,kBACxDX,EAAoB/tB,EAAOmB,YAAYmtB,YAAeN,EAAoBhuB,EAAOmB,YAAY8P,GAAU8c,EAAoB/tB,EAAOmB,YAAYutB,kBAAkBzd,QAIjK8c,EAAoB/tB,EAAOmB,YAAYmtB,WAAa,IA+BxB,MAA1BtuB,EAAOQ,iBAA4C,MAAjBR,EAAOiR,SAExCjR,EAAO0B,eACTusB,EAAkBvsB,cAAc1B,EAAOQ,iBAIpCqtB,EAAS7tB,EAAOQ,mBACnBqtB,EAAS7tB,EAAOQ,iBAAmB,IAEpCqtB,EAAS7tB,EAAOQ,iBAAiBW,WAAanB,EAAOQ,gBACrDqtB,EAAS7tB,EAAOQ,iBAAiBU,aAAelB,EAAOgB,kBAGnD8sB,EAAa9tB,EAAOQ,mBACvBstB,EAAa9tB,EAAOQ,iBAAmB,IAExCstB,EAAa9tB,EAAOQ,iBAAiB2tB,SAAWzlB,EAAK9O,kBAEjDi0B,EAAS7tB,EAAOQ,iBAAiBguB,iBACpCX,EAAS7tB,EAAOQ,iBAAiBguB,eAAiB,IAE/CT,EAAoB/tB,EAAOQ,mBAC9ButB,EAAoB/tB,EAAOQ,iBAAmB,IAE3CutB,EAAoB/tB,EAAOQ,iBAAiBkuB,oBAC/CX,EAAoB/tB,EAAOQ,iBAAiBkuB,kBAAoB,IAIjEb,EAAS7tB,EAAOQ,iBAAiBguB,eAAexuB,EAAOiR,QAAUjR,EAAOsR,aAyBpEtR,EAAOiR,QAAU3I,EAAcugB,SAAW7oB,EAAOiR,QAAU3I,EAAckc,OAASxkB,EAAOiR,QAAU3I,EAAc4I,UACpHlR,EAAOiR,QAAU3I,EAAc8hB,YAAcpqB,EAAOiR,QAAU3I,EAAckiB,cAEzExqB,EAAOsR,cAAgBjc,EAAO4L,SAAwC,MAA7BjB,EAAO6pB,qBAClD4E,EAA6BzuB,EAAO6pB,mBAAqBmE,EAAoBhuB,EAAOQ,iBAAiBR,EAAOiR,UAM/Ggd,EAAkB51B,aAClB,MAGD,KAAKgQ,EAAQzE,iBACZiqB,EAAW,GACXC,EAAe,GACfC,EAAsB,GAQxB,OAAO/tB,EAAOQ,iBAEb,KAAK6H,EAAQ/B,YACb,KAAK+B,EAAQ1C,cACb,KAAK0C,EAAQnC,qBACb,KAAKmC,EAAQlC,wBACb,KAAKkC,EAAQjC,sBACb,KAAKiC,EAAQhC,8BAETrG,EAAO0B,eACTusB,EAAkBvsB,cAAc1B,EAAOQ,iBAOpCqtB,EAAS7tB,EAAOQ,mBACnBqtB,EAAS7tB,EAAOQ,iBAAmB,IAEpCqtB,EAAS7tB,EAAOQ,iBAAiBW,WAAanB,EAAOQ,gBACrDqtB,EAAS7tB,EAAOQ,iBAAiBU,aAAelB,EAAOgB,kBAGnD8sB,EAAa9tB,EAAOQ,mBACvBstB,EAAa9tB,EAAOQ,iBAAmB,IAExCstB,EAAa9tB,EAAOQ,iBAAiB2tB,SAAWzlB,EAAK9O,kBAQjDm0B,EAAoB/tB,EAAOQ,mBAC9ButB,EAAoB/tB,EAAOQ,iBAAmB,IAE5CR,EAAOgB,mBAAqB3L,EAAO4L,SACrC8sB,EAAoB/tB,EAAOQ,iBAAiB8tB,WAAgD,MAAlCtuB,EAAOY,wBAAmCZ,EAAOY,wBAA0B,EAGlI6tB,EAA6B,IAC/BV,EAAoB/tB,EAAOQ,iBAAiB8tB,YAAcG,KAI3DV,EAAoB/tB,EAAOQ,iBAAiB8tB,WAAa,IAEtDtuB,EAAOgB,mBAAqB3L,EAAO0N,KAErC+qB,EAAa9tB,EAAOQ,iBAAiBnL,EAAO0N,IAAM2F,EAAK9O,oBAUzDq0B,EAAkB51B,iBAQrB8K,EAAOC,QAAU6qB,G,6BC1XjB,uCAGI94B,EAAaC,EAAQ,IACrBiT,EAAUjT,EAAQ,IAClBC,EAASD,EAAQ,GACjBkT,EAAgBlT,EAAQ,IACxBu5B,EAAgBv5B,EAAQ,IACxBoT,EAAcpT,EAAQ,IACtBE,EAAeF,EAAQ,IAAUE,aACjCC,EAASH,EAAQ,IACjBqT,EAAIrT,EAAQ,IACZqwB,EAASrwB,EAAQ,IACjBwR,EAASxR,EAAQ,IACjBsT,EAAOtT,EAAQ,GAIbw5B,EAAS,CAEdC,SAAU,GAGVC,aAAc,CACb9iB,UAAW,KACXqR,SAAU,IAIXsK,WAAY,GAEZoH,aAAc,GAGdC,WAAY,GAGZC,oBAAqB,GAErBC,aAAc,GAGdC,eAAgB,GAGhB1W,OAAQ,GAGR2W,mBAAoB,GAEpBC,gBAAiB,GAEjBC,gBAAiB,EAEjBC,oBAAqB,GAErBC,mBAAoB,KAEpBC,iBAAkB,KAElBC,sBAAuB,KAGvBC,oBAAqB,GAErBC,iBAAkB,GAElBC,iBAAkB,EAElBC,qBAAsB,GAEtBC,oBAAqB,KAErBC,kBAAmB,KAEnBC,uBAAwB,MAIrBC,EAAa,CAChBpH,cAAe,KACfkG,WAAY,GACZC,oBAAqB,GACrBC,aAAc,IAGTiB,EAAe56B,EAAO,GAAID,EAAawC,UAAW,CACvDC,kBAAmB,SAASC,GAAWC,KAAKC,GAxE1B,SAwE2CF,IAC7DG,qBAAsB,SAASH,GAAWC,KAAKG,eAzE7B,SAyE0DJ,IAC5EK,WAAY,WAAYJ,KAAKK,KA1EX,WA4ElBiS,UAAW,SAASpJ,GASnB,IAAIqJ,EAAenV,EAAO0N,GAE1B,OAAO5B,GACN,KAAKkH,EAAQtC,sBACb,KAAKsC,EAAQrC,uBACZwE,EAA6C,MAA7BokB,EAAOnW,OAAOtX,GAAsBytB,EAAOnW,OAAOtX,GAAc9L,EAAO0N,GACvF,MACD,QACCyH,EAAyC,MAAzBokB,EAAOnW,OAAOhO,QAAkBmkB,EAAOnW,OAAOhO,QAAUpV,EAAO0N,GAGjF,OAAOyH,GASRkM,eAAgB,WACf,OAAOkY,EAAOE,aAAa9iB,WAI5BokB,mBAAoB,WACnB,OAAOxB,EAAOE,aAAazR,UAG5BgT,YAAa,WACZ,IAAIC,EAAc,GAElB,IAAK,IAAIzK,KAAa+I,EAAOC,SACK,MAA9BD,EAAOC,SAAShJ,IAClByK,EAAYzlB,KAAK+jB,EAAOC,SAAShJ,IAMnC,OAAOyK,GAGRC,WAAY,SAAS1K,GACpB,OAAO+I,EAAOC,SAAShJ,IAGxB2K,uBAAwB,WACvB,OAAO/nB,EAAEiD,OAAOkjB,EAAOC,UAAU,SAAC/I,GAAD,OACpB,MAAXA,GAAgD,GAA7BA,EAAQA,QAAQla,WAAiD,GAA/Bka,EAAQA,QAAQ2K,eACpEj6B,QAGJk6B,YAAa,SAASC,GACrB,OAAO/B,EAAOjH,WAAWgJ,IAE1BC,gBAAiB,WAChB,OAAOhC,EAAOG,cAGf8B,2BAA4B,SAASC,GACpC,IAAK,IAAIx6B,EAAI,EAAGA,EAAIw6B,EAAQt6B,OAAQF,IACnCs4B,EAAOjH,WAAWmJ,EAAQx6B,GAAGqJ,IAAM,CAClCA,GAAMmxB,EAAQx6B,GAAGqJ,GACjBoxB,UAAYD,EAAQx6B,GAAGy6B,UACvBlqB,KAAQiqB,EAAQx6B,GAAGuQ,MAGM,MAAvBiqB,EAAQx6B,GAAG06B,UACb/4B,KAAK44B,2BAA2BC,EAAQx6B,GAAG06B,WAK9CniB,iBAAkB,SAASC,GAC1B,OAAQA,GAActG,EAAYuG,OAAS6f,EAAOe,oBAAsBf,EAAOQ,oBAEhFpgB,cAAe,SAASF,GACvB,OAAQA,GAActG,EAAYuG,OAAS6f,EAAOgB,iBAAmBhB,EAAOS,iBAE7EpgB,cAAe,SAASH,GACvB,OAAQA,GAActG,EAAYuG,OAAS6f,EAAOiB,iBAAmBjB,EAAOU,iBAE7EpgB,kBAAmB,SAASJ,GAC3B,OAAQA,GAActG,EAAYuG,OAAS6f,EAAOkB,qBAAuBlB,EAAOW,qBAEjF0B,iBAAkB,SAASniB,GAC1B,OAAQA,GAActG,EAAYuG,OAAS6f,EAAOmB,oBAAsBnB,EAAOY,oBAEhFrgB,eAAgB,SAASL,GACxB,OAAQA,GAActG,EAAYuG,OAAS6f,EAAOoB,kBAAoBpB,EAAOa,kBAE9ErgB,oBAAqB,SAASN,GAC7B,OAAQA,GAActG,EAAYuG,OAAS6f,EAAOqB,uBAAyBrB,EAAOc,uBAInFrf,WAAY,WAGX,MAAO,IAFS,CAAC,WAAY,eAAgB,aAAc,eAAgB,aAAc,sBAAuB,eAAgB,kBAEzGrO,KAAI,SAACU,GAAD,MAAS,IAAMA,EAAM,KAAO3J,KAAKC,UAAU41B,EAAOlsB,OAAOklB,OAAS,OAI/FzyB,EAAWmb,UAAS,SAAStQ,GAC5B,OAAOA,EAAOmB,YACb,KAAKkH,EAAQ5E,WAMZ5K,aAAag2B,UAEfD,EAAOC,SAAW91B,KAAK4B,MAAM9B,aAAag2B,UACvCh2B,aAAai2B,eACfF,EAAOE,aAAe/1B,KAAK4B,MAAM9B,aAAai2B,eAI/CoC,IAAQvpB,IAAI,CAAC,CAAC,WAAYinB,EAAOC,UAAW,CAAC,eAAgBD,EAAOE,gBAAgBtnB,MAAK,WACxF3O,aAAas4B,WAAW,YACxBt4B,aAAas4B,WAAW,gBACxB1gB,QAAQC,IAAI,6DACV0gB,OAAM,SAACC,GACT5gB,QAAQC,IAAI,6DAA8D2gB,MAI3ElB,EAAa93B,aACbi5B,IAAYzF,SAASzkB,QAAQlE,YAM3BouB,IAAYzF,SACXqF,IAAQjqB,IAAI,CAAC,WAAY,eAAgB,aAAc,eAAgB,aAAc,sBAAuB,eAAgB,mBAAmBO,MAAK,SAACC,GACpJA,EAAOuL,SAAQ,SAACpL,GACD,MAAXA,EAAK,KAAagnB,EAAOhnB,EAAK,IAAMA,EAAK,UAE3CwpB,OAAM,SAACC,OAGP7pB,MAAK,WAEP2oB,EAAa93B,iBASf,MA8BD,KAAKgQ,EAAQjE,iBAGRwC,EAAOK,IAAIwe,EAAOlQ,wBAClBvV,EAAOkB,cAAgB7L,EAAO0N,IAAM/C,EAAOkB,cAAgB7L,EAAO4N,SAC1C,MAAvBjD,EAAO2P,eAETif,EAAOO,eAAenvB,EAAO2P,aAAahQ,IAAMK,EAAO2P,aAAakf,SAAS7sB,KAAI,SAACrC,GAAD,OAAQnB,SAASmB,MAElGuxB,IAAQvpB,IAAI,iBAAkBinB,EAAOO,gBAAgBiC,OAAM,SAACC,OAC5DlB,EAAa93B,cAIhB,MAED,KAAKgQ,EAAQ1C,cACZ,IAAIqL,GAAkB,EAEtB,GAAGhR,EAAOiR,QAAU3I,EAAcugB,QAAQ,CAEzC,GAAG7oB,EAAOmR,aAAe9b,EAAO0N,GAC/B,IAAI,IAAI8iB,KAAa7lB,EAAO4pB,WACQ,MAAhC5pB,EAAO4pB,WAAW/D,KACpB+I,EAAOC,SAAS7uB,EAAO4pB,WAAW/D,GAAWC,QAAQnmB,IAAMK,EAAO4pB,WAAW/D,IAWhF,GAAG7lB,EAAOsR,cAAgBjc,EAAO4L,SAGhC,GAA2B,MAAxBjB,EAAO8oB,cAAsB,CAC/B,IAAK,IAAIjD,KAAa+I,EAAOC,SAEK,MAA9BD,EAAOC,SAAShJ,IAAuBpd,EAAE8E,SAASvN,EAAO8oB,cAAejD,WAEnE+I,EAAOC,SAAShJ,GAIzBqK,EAAWpH,cAAgB9oB,EAAO8oB,mBAO/B,CAiBJ,GAfAoI,IAAQvpB,IAAI,WAAYinB,EAAOC,UAAUuC,OAAM,SAACC,OAO7CrxB,EAAOsR,cAAgBjc,EAAO2N,QAEhC4rB,EAAOE,aAAa9iB,UAA+C,MAAlChM,EAAO2kB,wBAAkC3kB,EAAO2kB,wBAA0Bjc,EAAKnP,wBAChHq1B,EAAOE,aAAazR,SAAWrd,EAAOspB,kBAKR,MAA5B4G,EAAWpH,cAAsB,CAEnC,IAAI,IAAIxyB,EAAI,EAAGA,EAAI45B,EAAWpH,cAActyB,OAAQF,IAAI,CACvD,IAAI2yB,EAAMiH,EAAWpH,cAAcxyB,GACqC,MAAxBs4B,EAAOC,SAAS5F,IAC9DxgB,EAAE8E,SAASqhB,EAAOE,aAAazR,SAAU4L,IAC1C2F,EAAOE,aAAazR,SAASxS,KAAKoe,GAIpCiH,EAAWpH,cAAgB,KAI5BoI,IAAQvpB,IAAI,eAAgBinB,EAAOE,cAAcsC,OAAM,SAACC,OAGxDrgB,GAAkB,QAEd,GAAGhR,EAAOiR,QAAU3I,EAAc8hB,WAAW,CAElD,GAAGpqB,EAAOmR,aAAe9b,EAAO0N,GAC/B,IAAQzM,EAAI,EAAGA,EAAI0J,EAAO4pB,WAAWpzB,OAAQF,IAAK,CACjD,IAAIi7B,EAAKvxB,EAAO4pB,WAAWtzB,GAGQ,MAAhC45B,EAAWlB,WAAWuC,EAAG5xB,IAC3BuwB,EAAWlB,WAAWuC,EAAG5xB,IAAI6xB,aAAe/oB,EAAEyf,MAAMgI,EAAWlB,WAAWuC,EAAG5xB,IAAI6xB,aAAcD,EAAGC,cAElGtB,EAAWlB,WAAWuC,EAAG5xB,IAAM4xB,EAIhC,IAAI,IAAIjkB,EAAI,EAAGA,EAAIikB,EAAGC,aAAah7B,OAAQ8W,IAC1C4iB,EAAWjB,oBAAoBsC,EAAGC,aAAalkB,IAAMikB,EAAG5xB,GAUxDK,EAAOsR,cAAgBjc,EAAO4L,UAE7BjB,EAAOsR,cAAgBjc,EAAO2N,QAEhC4rB,EAAOI,WAAakB,EAAWlB,WAC/BJ,EAAOK,oBAAsBiB,EAAWjB,oBAGxCiC,IAAQvpB,IAAI,CAAC,CAAC,aAAcinB,EAAOI,YAAa,CAAC,sBAAuBJ,EAAOK,uBAAuBmC,OAAM,SAACC,QAI9GnB,EAAWlB,WAAa,GACxBkB,EAAWjB,oBAAsB,GAGjCje,GAAkB,QAEd,GAAGhR,EAAOiR,QAAU3I,EAAckiB,aAAa,CAEpD,GAAGxqB,EAAOmR,aAAe9b,EAAO0N,GAC/B,IAAQzM,EAAI,EAAGA,EAAI0J,EAAO4pB,WAAWpzB,OAAQF,IAAK,CACjD,IAAIm7B,EAAKzxB,EAAO4pB,WAAWtzB,GAI3B,GAAkB,MAAfm7B,EAAG5C,UAAmC,IAAf4C,EAAG5C,SAC5B,IAAQvhB,EAAI,EAAGA,EAAImkB,EAAGD,aAAah7B,OAAQ8W,IAC1C4iB,EAAWhB,aAAauC,EAAGD,aAAalkB,IAAMmkB,EAAG5C,SAASj3B,MAAM,KAAKoK,KAAI,SAACrC,GAAD,OAAQnB,SAASmB,MAW3FK,EAAOsR,cAAgBjc,EAAO4L,UAE7BjB,EAAOsR,cAAgBjc,EAAO2N,QAEhC4rB,EAAOM,aAAegB,EAAWhB,aAGjCgC,IAAQvpB,IAAI,eAAgBinB,EAAOM,cAAckC,OAAM,SAACC,QAIzDnB,EAAWhB,aAAe,GAG1Ble,GAAkB,QAEd,GAAGhR,EAAOiR,QAAU3I,EAAc4I,SAAS,CAEhD,GAAGlR,EAAOmR,aAAe9b,EAAO0N,IACH,MAAzB/C,EAAOqR,eACT,IAAS/a,EAAI,EAAGA,EAAI0J,EAAOqR,eAAe7a,OAAQF,IAClB,MAA5B0J,EAAOqR,eAAe/a,KACxBs4B,EAAOO,eAAenvB,EAAOqR,eAAe/a,GAAGqJ,IAAMK,EAAOqR,eAAe/a,GAAGu4B,SAAS7sB,KAAI,SAACrC,GAAD,OAAQnB,SAASmB,OAU7GK,EAAOsR,cAAgBjc,EAAO4L,UAEhCiwB,IAAQvpB,IAAI,iBAAkBinB,EAAOO,gBAAgBiC,OAAM,SAACC,OAG5DrgB,GAAkB,QAEXhR,EAAOiR,QAAU3I,EAAcyhB,UAEpC/pB,EAAOsR,cAAgBjc,EAAO0N,KAChC6rB,EAAOG,aAAe/uB,EAAOgqB,gBAC7BmG,EAAaU,2BAA2BjC,EAAOG,cAG/CmC,IAAQvpB,IAAI,CAAC,CAAC,aAAcinB,EAAOjH,YAAa,CAAC,eAAgBiH,EAAOG,gBAAgBqC,OAAM,SAACC,OAE/FrgB,GAAkB,GAIjBA,GACFmf,EAAa93B,aAGd,MAED,KAAKgQ,EAAQtC,sBACZ6oB,EAAOnW,OAAOzY,EAAOmB,YAAcnB,EAAOkB,aAC1C0tB,EAAOS,gBAAkBrvB,EAAO4S,WAChCgc,EAAOU,gBAAkBtvB,EAAO6S,WAChC+b,EAAOW,oBAAsBvvB,EAAO8S,eAAiB9S,EAAO8S,eAAiB,GAC7E8b,EAAOY,mBAAqBxvB,EAAOmnB,cAEnC,IAAIpU,EAAiB,GACrBtK,EAAEuK,QAAQ4b,EAAOS,gBAAgBz3B,MAAM,MAAM,SAACqb,GAC7C,IAAIC,EAAcD,EAAKE,OACL,IAAfD,GACFH,EAAelI,KAAKqI,EAAYE,kBAIlC,IAAIse,EAA8B,KAC9BC,EAA8B,GAC9BC,EAA+C,MAA7BhD,EAAOY,mBACzBqC,GAA4B,EAC5BC,EAA0B,KAC1BC,EAAsB,KAG1B,GAAwB,MAArB/xB,EAAO4K,YAAsB5K,EAAO4K,WAAa,EAAE,CACrD,IAAIonB,EAAcpD,EAAOK,oBAAoBjvB,EAAO4K,YAClC,MAAfonB,IACFN,EAAgE,MAAlC9C,EAAOI,WAAWgD,GAAuBpD,EAAOI,WAAWgD,GAAanD,SAAW,MAGlH8C,EAAwE,MAA1C/C,EAAOM,aAAalvB,EAAO4K,YAAsBgkB,EAAOM,aAAalvB,EAAO4K,YAAc,GAGrHgnB,GAAkBhD,EAAOY,mBAAmB9H,kBAAoBiH,EAAcsD,SAEhFH,EAAsE,MAA5ClD,EAAOO,eAAenvB,EAAO4K,YAAsBgkB,EAAOO,eAAenvB,EAAO4K,YAAc,IAIvHgnB,IAEuC,MAAtChD,EAAOY,mBAAmB/H,UAAoBmH,EAAOY,mBAAmB/H,WAC1EoK,GAA4B,GAIc,MAAxCjD,EAAOY,mBAAmB7H,YAAsBiH,EAAOY,mBAAmB7H,WAAWnxB,SACvFu7B,EAAsBnD,EAAOY,mBAAmB7H,aAKlD,IAAItU,EAAmB5K,EAAEiD,OAAOkjB,EAAOC,UAAU,SAAC/I,GAEjD,GAAc,MAAXA,EACF,OAAO,EAGR,IAAI6B,EAAa7B,EAAQ6B,WAIzB,GAAwB,IAHxB7B,EAAUA,EAAQA,SAGPla,WAAyC,GAAvBka,EAAQ2K,YACpC,OAAO,EAIR,GAAGoB,IAAqD,MAAvB/L,EAAQoM,aAA8C,GAAvBpM,EAAQoM,aACvE,OAAO,EAMR,IAAIrM,EAAiC,MAApBC,EAAQqM,UAAoBrM,EAAQqM,SAAS37B,OAAS,EAAIsvB,EAAQqM,SAAS,GAAGxyB,GAAKmmB,EAAQnmB,GAG5G,GAA8B,MAA3BmyB,IAAoCrpB,EAAE8E,SAASukB,EAAyBjM,GAC1E,OAAO,EAIR,GAA0B,MAAvBkM,EAA4B,CAE9B,IAAIpK,EAAWnxB,OACd,OAAO,EAGP,IADA,IAAI47B,GAAc,EACT9kB,EAAI,EAAGA,EAAIqa,EAAWnxB,OAAQ8W,IACtC,GAAG7E,EAAE8E,SAASwkB,EAAqBpK,EAAWra,GAAG3N,IAAI,CACpDyyB,GAAc,EACd,MAGF,IAAIA,EACH,OAAO,EAUV,IAFA,IAAIvrB,EAAwB,MAAhBif,EAAQjf,KAAgBif,EAAQjf,KAAKuM,cAAgB,GAC7Dif,EAAsB,MAAfvM,EAAQwM,IAAexM,EAAQwM,IAAIlf,cAAgB,GACrD9c,EAAI,EAAGA,EAAIyc,EAAevc,OAAQF,IAE1C,IAAyC,IAArCuQ,EAAK/P,QAAQic,EAAezc,MAAoD,IAApC+7B,EAAIv7B,QAAQic,EAAezc,IAC1E,OAAO,EAKT,OAAkC,MAA/Bo7B,GAAiF,MAA1CA,EAA4B7L,MAKnEpd,EAAE8E,SAASokB,EAA6B9L,MAO5C+I,EAAOa,iBAAmBpc,EAAiB7c,OAC3Co4B,EAAOc,sBAAwBt2B,KAAKC,MAAMu1B,EAAOa,iBAAmBb,EAAOW,sBAAyBX,EAAOa,iBAAmBb,EAAOW,oBAAuB,EAAI,EAAI,GACpKX,EAAOU,gBAAmD,GAAhCV,EAAOc,uBAA8Bd,EAAOU,gBAAkB,EAAK,EAAKV,EAAOU,gBAAkBV,EAAOc,sBAAwBd,EAAOc,sBAAwBd,EAAOU,gBAEhM,IAAI9b,GAAmBob,EAAOU,gBAAkB,GAAKV,EAAOW,oBAC5DX,EAAOQ,mBAAqB/b,EAAiBI,MAAMD,EAAkBA,EAAkBob,EAAOW,qBAiB9FX,EAAOQ,mBAAqBR,EAAOQ,mBAAmBptB,KAAI,SAACuwB,GAI1D,IAAI1M,EAAmC,MAAtB0M,EAAEzM,QAAQqM,UAAoBI,EAAEzM,QAAQqM,SAAS37B,OAAS,EAAI+7B,EAAEzM,QAAQqM,SAAS,GAAGxyB,GAAK4yB,EAAEzM,QAAQnmB,GAOpH,OADA4yB,EAAEzM,QAAQ0M,WAA6C,MAA/Bd,EAAsCA,EAA4B7L,GAAa0M,EAAEzM,QAAQ2M,WAC1GF,KAGRpC,EAAa93B,aACb,MAED,KAAKgQ,EAAQrC,uBACThG,EAAOkB,cAAgB7L,EAAO0N,KAEhC6rB,EAAOe,oBAAsB3vB,EAAO0T,YACpCkb,EAAOoB,kBAAoBhwB,EAAO2T,MAClCib,EAAOqB,uBAAyBjwB,EAAO4T,YAGxCgb,EAAOnW,OAAOzY,EAAOmB,YAAcnB,EAAOkB,aAC1C0tB,EAAOgB,iBAAmB5vB,EAAO4S,WACjCgc,EAAOiB,iBAAmB7vB,EAAO6S,WACjC+b,EAAOkB,qBAAuB9vB,EAAO8S,eAAiB9S,EAAO8S,eAAiB,GAC9E8b,EAAOmB,oBAAsB/vB,EAAOmnB,cAEpCgJ,EAAa93B,aACb,MAED,KAAKgQ,EAAQzE,iBACZgrB,EAAOC,SAAW,GAClBD,EAAOE,aAAe,CACrB9iB,UAAW,KACXqR,SAAU,IAGXuR,EAAOjH,WAAa,GACpBiH,EAAOG,aAAe,GAEtBH,EAAOI,WAAa,GACpBJ,EAAOK,oBAAsB,GAC7BL,EAAOM,aAAe,GAEtBN,EAAOO,eAAiB,GAExBP,EAAOQ,mBAAqB,GAC5BR,EAAOS,gBAAkB,GACzBT,EAAOU,gBAAkB,EACzBV,EAAOW,oBAAsB,GAC7BX,EAAOY,mBAAqB,KAC5BZ,EAAOa,iBAAmB,KAC1Bb,EAAOc,sBAAwB,KAE/Bd,EAAOe,oBAAsB,GAC7Bf,EAAOgB,iBAAmB,GAC1BhB,EAAOiB,iBAAmB,EAC1BjB,EAAOkB,qBAAuB,GAC9BlB,EAAOmB,oBAAsB,KAC7BnB,EAAOoB,kBAAoB,KAC3BpB,EAAOqB,uBAAyB,KAGhCiB,IAAQvpB,IAAI,CAAC,CAAC,WAAYinB,EAAOC,UAAW,CAAC,eAAgBD,EAAOE,gBAAgBsC,OAAM,SAACC,OAG3FlB,EAAa93B,iBAShB8K,EAAOC,QAAU+sB,G,2DChtBjBhtB,EAAOC,QAAU,CAChBiU,KAAM,OACN+C,MAAO,U,6BCFRjX,EAAOC,QAAU,CAChBsvB,MAAO,QACP3jB,OAAQ,W,uFCFLrG,EAAOtT,EAAQ,GAGbu9B,E,kDAcL,WAAYC,GAAQ,IAAD,8BAClB,cAAMA,IAuBPC,aAAe,WACd,IAAMC,EAAM,IAAIC,MAChBD,EAAIE,OAAS,WAEZ,EAAKC,SAAS,CAAEC,QAAQ,KAEzBJ,EAAIK,QAAU,WAEb,EAAKF,SAAS,CAAE5a,OAAO,KAExBya,EAAIM,IAAM,EAAKR,MAAMQ,KAhCrB,EAAKC,MAAQ,CACZH,QAAQ,EACR7a,OAAO,GAJU,E,gEASlBpgB,KAAK46B,iB,gDAGoBS,GAGtBr7B,KAAK26B,MAAMQ,KAAOE,EAAUF,MAC9Bn7B,KAAKg7B,SAAS,CACbC,QAAQ,EACR7a,OAAO,IAERpgB,KAAK46B,kB,+BAkBN,OAAK56B,KAAK26B,MAAMW,SAEJt7B,KAAKo7B,MAAMH,QAAUj7B,KAAKo7B,MAAMhb,MAEzCpgB,KAAK26B,MAAMY,qBAAuBv7B,KAAKo7B,MAAMH,OAC9C,kBAAC,IAAD,CAASv3B,MAAO1D,KAAK26B,MAAMa,wBAAyBlwB,WAAW,IAC/D,yBAAKC,UAAWvL,KAAK26B,MAAMc,sBAAwB,cAAe/3B,MAAO1D,KAAK26B,MAAMj3B,MAAOy3B,IAAKn7B,KAAK26B,MAAMe,iBAK5G,yBAAKnwB,UAAWvL,KAAK26B,MAAMpvB,UAAW7H,MAAO1D,KAAK26B,MAAMj3B,MAAOy3B,IAAKn7B,KAAK26B,MAAMQ,MAVxE,S,GArDcQ,IAAMC,WAAxBlB,EAQEmB,aAAe,CACrBH,eAAiBjrB,EAAKnQ,UAAY,qBAClCi7B,oBAAoB,EACpBD,SAAS,GAyDIZ,O,kCCzEf,uCAIIx9B,EAAaC,EAAQ,IACrBiT,EAAUjT,EAAQ,IAClBC,EAASD,EAAQ,GACjBE,EAAeF,EAAQ,IAAUE,aACjCC,EAASH,EAAQ,IACjBqT,EAAIrT,EAAQ,IACZqwB,EAASrwB,EAAQ,IACjBwR,EAASxR,EAAQ,IAIfw5B,EAAS,CACdmF,KAAM,GAGNC,SAAU,CACTC,SAAU,KACVnrB,OAAQ,CAOP,CAAC,KAAO,QAAS,MAAQ,QAAS,MAAQ,GAC1C,CAAC,KAAO,OAAQ,MAAQ,OAAQ,MAAQ,IAEzCC,gBAAiB,MAGlB0P,OAAQpjB,EAAO0N,GACfqqB,WAAY,IAGT53B,EAAYD,EAAO,GAAID,EAAawC,UAAW,CAClDC,kBAAmB,SAASC,GAAWC,KAAKC,GA3B1B,SA2B2CF,IAC7DG,qBAAsB,SAASH,GAAWC,KAAKG,eA5B7B,SA4B0DJ,IAC5EK,WAAY,WAAYJ,KAAKK,KA7BX,WA+BlBiS,UAAW,WACV,OAAOqkB,EAAOnW,QAEfyb,cAAe,WACd,OAAOtF,EAAOxB,YAGfvyB,QAAS,WACR,OAA0B,MAAlB+zB,EAAOmF,KAAKp0B,IAGrBw0B,QAAS,WACR,OAAOvF,EAAOmF,MAEfh5B,MAAO,WACN,OAAQ6zB,EAAOmF,KAAOnF,EAAOmF,KAAKp0B,GAAK,GAExCvF,YAAa,WACZ,OAAQw0B,EAAOmF,KAAOnF,EAAOmF,KAAK95B,SAAW,IAE9CI,YAAa,WACZ,OAAQu0B,EAAOmF,KAAOnF,EAAOmF,KAAK75B,SAAW,IAE9Ck6B,QAAS,WACR,OAAQxF,EAAOmF,KAAOnF,EAAOmF,KAAKltB,KAAO,IAE1CwtB,YAAa,WACZ,OAAQzF,EAAOmF,KAAOnF,EAAOmF,KAAK1H,SAAW,IAE9CiI,SAAU,WACT,OAAQ1F,EAAOmF,KAAOnF,EAAOmF,KAAKtH,MAAQ,IAE3C8H,eAAgB,WACf,OAAQ3F,EAAOmF,MAAQnF,EAAOmF,KAAK7H,SAAW0C,EAAOmF,KAAK7H,QAAQsI,SAAW5F,EAAOmF,KAAK7H,QAAQsI,SAAW,IAE7Gh5B,qBAAsB,WACrB,OAAQozB,EAAOmF,MAAQnF,EAAOmF,KAAK7H,SAAW0C,EAAOmF,KAAK7H,QAAQuI,eAAiB7F,EAAOmF,KAAK7H,QAAQuI,eAAiB,IAEzHz5B,mBAAoB,WAGnB,OAAQ4zB,EAAOmF,MAAQnF,EAAOmF,KAAK7H,QAAU0C,EAAOmF,KAAK7H,QAAQwI,iBAAmB,CAAC,GAAM,KAAM,KAAQ,qBAAsB,OAAU,IAAK,KAAQ,QAGvJx5B,4BAA6B,WAC5B,OAAQ0zB,EAAOmF,MAAQnF,EAAOmF,KAAK7H,SAAW0C,EAAOmF,KAAK7H,QAAQyI,mBAA+D,GAAzC/F,EAAOmF,KAAK7H,QAAQyI,mBAG7Gv5B,2BAA4B,WAC3B,OAAQwzB,EAAOmF,MAAQnF,EAAOmF,KAAK7H,SAAW0C,EAAOmF,KAAK7H,QAAQ0I,qBAAmE,GAA3ChG,EAAOmF,KAAK7H,QAAQ0I,qBAE/Gv5B,iBAAkB,WACjB,OAASuzB,EAAOmF,MAAuC,MAA/BnF,EAAOmF,KAAKc,gBAA2BjG,EAAOmF,KAAKc,gBAAkB,MAG9FC,WAAY,SAAS76B,GACpB,OAAqC,MAA5B20B,EAAOoF,SAASC,UAAqBrF,EAAOoF,SAASC,SAASh6B,UAAYA,GAEpF86B,YAAa,WACZ,OAAOnG,EAAOoF,SAASC,UAExBhoB,UAAW,WACV,OAAO2iB,EAAOoF,SAASlrB,QAGxBoD,wBAAyB,WACxB,OAAO0iB,EAAOoF,SAASjrB,iBAIxBsH,WAAY,WAEX,MAAO,WACQtX,KAAKC,UAAU41B,EAAOmF,MAD9B,eAEWh7B,KAAKC,UAAU41B,EAAOoF,UACxC,OAIF7+B,EAAWmb,UAAS,SAAStQ,GAC5B,OAAOA,EAAOmB,YACb,KAAKkH,EAAQ5E,WAMT5K,aAAak7B,MAEfnF,EAAOmF,KAAOh7B,KAAK4B,MAAM9B,aAAak7B,MACnCl7B,aAAam7B,WACfpF,EAAOoF,SAAWj7B,KAAK4B,MAAM9B,aAAam7B,WAIb,MAA3BpF,EAAOmF,KAAKrH,aAAkD,GAA3BkC,EAAOmF,KAAKrH,aACjD9lB,EAAOgO,WAAW6Q,EAAO/P,aAI1Bwb,IAAQvpB,IAAI,CAAC,CAAC,OAAQinB,EAAOmF,MAAO,CAAC,WAAYnF,EAAOoF,YAAYxsB,MAAK,WACxE3O,aAAas4B,WAAW,QACxBt4B,aAAas4B,WAAW,YACxB1gB,QAAQC,IAAI,0DACV0gB,OAAM,SAACC,GACT5gB,QAAQC,IAAI,0DAA2D2gB,MAIxE77B,EAAU6C,aACVi5B,IAAYzF,SAASzkB,QAAQlE,YAM7BouB,IAAYzF,SACXqF,IAAQjqB,IAAI,CAAC,OAAQ,aAAaO,MAAK,SAACC,GACvCA,EAAOuL,SAAQ,SAACpL,GACD,MAAXA,EAAK,KAAagnB,EAAOhnB,EAAK,IAAMA,EAAK,UAE3CwpB,OAAM,SAACC,OAGP7pB,MAAK,WAEuB,MAA3BonB,EAAOmF,KAAKrH,aAAkD,GAA3BkC,EAAOmF,KAAKrH,aACjD9lB,EAAOgO,WAAW6Q,EAAO/P,aAI1BlgB,EAAU6C,iBAQb,MACD,KAAKgQ,EAAQ3E,WACR1D,EAAOkB,cAAgB7L,EAAO0N,IAAQ/C,EAAOkB,cAAgB7L,EAAO2N,QAEvE4rB,EAAOmF,KAAQ/zB,EAAOkB,cAAgB7L,EAAO0N,GAAM/C,EAAOisB,SAAW,GACrE2C,EAAOxB,WAAcptB,EAAOkB,cAAgB7L,EAAO0N,GAAM,GAAK/C,EAAOotB,WAElEptB,EAAOkB,cAAgB7L,EAAO0N,KAEhC6rB,EAAOoF,SAASC,SAAW,CAAE,GAAMj0B,EAAOisB,SAAStsB,GAAI,SAAYK,EAAOisB,SAAShyB,UAEnFi3B,IAAQvpB,IAAI,WAAYinB,EAAOoF,UAAU5C,OAAM,SAACC,QAIjDH,IAAQvpB,IAAI,OAAQinB,EAAOmF,MAAM3C,OAAM,SAACC,QAEzCzC,EAAOnW,OAASzY,EAAOkB,aACvB1L,EAAU6C,aACV,MAED,KAAKgQ,EAAQvE,aACZ,GAAG9D,EAAOkB,cAAgB7L,EAAO0N,GAAG,CAQnC,GALA6rB,EAAOmF,KAAOtrB,EAAElT,OAAOyK,EAAOisB,SAAU,CAAEhyB,SAAUzE,EAAU4E,cAAeF,SAAU1E,EAAU6E,gBAGjGu0B,EAAOoF,SAASC,SAAW,CAAE,GAAMj0B,EAAOisB,SAAStsB,GAAI,SAAYK,EAAOisB,SAAShyB,UAExD,MAAxB+F,EAAOutB,cAAsB,CAE/B,IAAI,IAAI1mB,KAAQ7G,EAAOutB,cAEtB,GAAsC,WAAnCvtB,EAAOutB,cAAc1mB,GAAMmJ,MAAwD,QAAnChQ,EAAOutB,cAAc1mB,GAAMmJ,KAAe,CAC5F,IAAIC,EAAqBxH,EAAEqH,UAAU8e,EAAOoF,SAASlrB,OAAQ,CAACjC,KAAMA,IAChEqJ,EAAmB,CAAC,KAAOrJ,EAAM,MAAQ7G,EAAOutB,cAAc1mB,GAAMkJ,MAAO,MAAQvR,SAASwB,EAAOutB,cAAc1mB,GAAMsJ,SACjG,GAAvBF,EACF2e,EAAOoF,SAASlrB,OAAOmH,GAAsBC,EAE7C0e,EAAOoF,SAASlrB,OAAO+B,KAAKqF,GAM/B0e,EAAOoF,SAASlrB,OAASL,EAAE2H,OAAOwe,EAAOoF,SAASlrB,OAAQ,SAI1D8lB,EAAOoF,SAASjrB,gBAAkB/I,EAAOwtB,gBAI1C0D,IAAQvpB,IAAI,CAAC,CAAC,OAAQinB,EAAOmF,MAAO,CAAC,WAAYnF,EAAOoF,YAAY5C,OAAM,SAACC,OAE5EzC,EAAOnW,OAASzY,EAAOkB,aACvB1L,EAAU6C,aACV,MAED,KAAKgQ,EAAQ1E,YAEZirB,EAAOmF,KAAO,GAGd7C,IAAQvpB,IAAI,OAAQinB,EAAOmF,MAAM3C,OAAM,SAACC,OAExCzC,EAAOnW,OAASzY,EAAOkB,aACvB1L,EAAU6C,aACV,MAED,KAAKgQ,EAAQzE,iBAEZgrB,EAAOoF,SAAW,CACjBC,SAAUrF,EAAOoF,SAASC,SAC1BnrB,OAAQ,CACP,CAAC,KAAO,QAAS,MAAQ,QAAS,MAAQ,GAC1C,CAAC,KAAO,OAAQ,MAAQ,OAAQ,MAAQ,IAEzCC,gBAAiB,MAIlBmoB,IAAQvpB,IAAI,WAAYinB,EAAOoF,UAAU5C,OAAM,SAACC,OAGhD77B,EAAU6C,iBAQb8K,EAAOC,QAAU5N,G,kDCpRjB,uCAEAN,OAAOD,EAAIA,IAEMG,EAAQ,IAAzB,IACIiT,EAAUjT,EAAQ,IAClBmiB,EAAcniB,EAAQ,IACtBqiB,EAAeriB,EAAQ,IACvBuiB,EAAcviB,EAAQ,IACtBoiB,EAAepiB,EAAQ,IACvB4/B,EAAiB5/B,EAAQ,KACzBC,EAASD,EAAQ,GAEjBqwB,EAASrwB,EAAQ,IACjBwR,EAASxR,EAAQ,IACjBsT,EAAOtT,EAAQ,GACfqT,EAAIrT,EAAQ,IAGZ6/B,EAAgB,CAkBnBC,WAAY,SAAS9M,EAA6BC,EAAiBC,EAA+BC,EAAmBzc,GAC/F,MAAlBA,IACFA,EAAiB,IAGlB,IAAIkM,EAAe,CAGlB,CAAE/X,QAASsX,EAAavX,OAAQ,cAAeE,KAAM,KAAM0C,oBAAqB,IAAMN,YAAY,GAElG,CAAErC,QAAS0X,EAAa3X,OAAQ,eAAgBE,KAAM,KAAM0C,oBAAqB,GAAKN,YAAY,GAElG,CAAErC,QAASuX,EAAcxX,OAAQ,qBAAsBE,KAAM,CAAC,uBAAwB0C,oBAAqB,MAE3G,CAAE3C,QAASuX,EAAcxX,OAAQ,2BAA4BE,KAAM,CAAC,uBAAwB0C,oBAAqB,GACjH,CAAE3C,QAASuX,EAAcxX,OAAQ,4BAA6BE,KAAM,CAAC,2BAA4B0C,oBAAqB,KACtH,CAAE3C,QAAShI,KAAM+H,OAAQ,mBAAoBE,KAAM,CAAC4L,EAAgB,uBAAwBlJ,oBAAqB,GACjH,CAAE3C,QAASwX,EAAczX,OAAQ,sBAAuBE,KAAM,KAAM0C,oBAAqB,MACzF,CAAE3C,QAASwX,EAAczX,OAAQ,oBAAqBE,KAAM,KAAM0C,oBAAqB,MACvF,CAAE3C,QAASwX,EAAczX,OAAQ,kBAAmBE,KAAM,KAAM0C,oBAAqB,MACrF,CAAE3C,QAASwX,EAAczX,OAAQ,oBAAqBE,KAAM,KAAM0C,oBAAqB,MACvF,CAAE3C,QAASwX,EAAczX,OAAQ,kBAAmBE,KAAM,CAACkoB,EAA6BC,GAAkBzlB,oBAAqB,IAC/H,CAAE3C,QAASwX,EAAczX,OAAQ,oBAAqBE,KAAM,KAAM0C,oBAAqB,MACvF,CAAE3C,QAASwX,EAAczX,OAAQ,oBAAqBE,KAAM,CAACooB,EAA+BC,GAAoB3lB,oBAAqB,KAErI,CAAE3C,QAAShI,KAAM+H,OAAQ,mBAAoBE,KAAM,CAAC,kBAAmB,4BAA6B0C,oBAAqB,GACzH,CAAE3C,QAAS+0B,EAAgBh1B,OAAQ,6BAA8BE,KAAM,CAAC,mBAAoB0C,oBAAqB,KAEjH,CAAE3C,QAASwX,EAAczX,OAAQ,mBAAoBE,KAAM,CAAC,mBAAoB0C,oBAAqB,IAAMN,YAAY,GACvH,CAAErC,QAASwX,EAAczX,OAAQ,oBAAqBE,KAAM,CAAC,mBAAoB0C,oBAAqB,KACtG,CAAE3C,QAASwX,EAAczX,OAAQ,sBAAuBE,KAAM,CAAC,mBAAoB0C,oBAAqB,MAGzG,OAAO8F,EAAKtH,mBAAmB4W,EAAc3P,EAAQ/B,cAItDwhB,iBAAkB,SAASC,EAAeC,GAIzC,OAFAD,EAAgBA,EAAc/lB,KAAI,SAACrC,GAAD,OAAQnB,SAASmB,MACnDqoB,EAAgBA,EAAchmB,KAAI,SAACrC,GAAD,OAAQnB,SAASmB,MAC5C1K,IAAEuM,WAAW0B,QAAQ,CAAET,QAAS,CAAEwlB,YAAaxf,EAAEyf,MAAMH,EAAeC,OAI9EmN,cAAe,SAAShzB,GACvB,IAAIZ,EAAiBtM,IAAEuM,WAEvB,GAAW,MAARW,EAEF,OADAZ,EAAe2B,UACR3B,EAIRmH,EAAK5H,SAAS,CACbK,WAAYkH,EAAQpC,gBACpB/E,aAAc7L,EAAO4L,UAGtB,IAAIyT,EAAgB9N,EAAO8N,eAAiB+Q,EAAO9P,eAAiB,SAAY/O,EAAO8N,eAAiB+Q,EAAO/P,YAAc,MAAQ,MACjInB,EAAa3N,EAAO2N,WAwCxB,OAtCAtf,IAAEijB,KAAK,CAENrY,IAAK6I,EAAKlQ,OAAS,mBACnBwX,KAAM,OACN7N,KAAM,CACL,YAAe,iBACf,sBAAyBpJ,KAAKC,UAAU,CAAC,cAAe,mBACxD,YAAc,2BAAd,OAA0C0b,EAA1C,qBAAoEH,GACpE,WAAc,IACd,QAAWpS,GAEZgW,QAAS,CAAE,cAAiBzP,EAAKvO,qBACjCoe,SAAU,SACRrW,MAAK,WAEPwG,EAAK5H,SAAS,CACbK,WAAYkH,EAAQpC,gBACpB/E,aAAc7L,EAAO2N,QAEtBzB,EAAeiX,YACbjW,MAAK,SAASJ,GACbA,EAAKsW,QAEP/P,EAAK5H,SAAS,CACbK,WAAYkH,EAAQpC,gBACpB/E,aAAc7L,EAAO0N,KAEtBxB,EAAe2B,YAGfwF,EAAK5H,SAAS,CACbK,WAAYkH,EAAQpC,gBACpB/E,aAAc7L,EAAO2N,QAEtBzB,EAAeiX,aAIVjX,IAIT4B,EAAOC,QAAU6xB,G,kDC3IjB,IAAI9/B,EAAaC,EAAQ,IACrBiT,EAAUjT,EAAQ,IAClBmiB,EAAcniB,EAAQ,IACtBC,EAASD,EAAQ,GACjB0gB,EAAa1gB,EAAQ,IACrB8gB,EAAY9gB,EAAQ,IACpBggC,EAAahgC,EAAQ,IACrBsT,EAAOtT,EAAQ,GACfqT,EAAIrT,EAAQ,IAEVH,EAAIC,OAAOD,EAEbuiB,EAAe,CAClBI,mBAAoB,SAAS5X,EAAQE,GACvB,iBAAVF,GAGS,MAARE,GAAgBA,EAAK,IAAMA,EAAK,GAAG1J,QACrCrB,EAAW2L,SAAS,CACnBK,WAAYkH,EAAQ9C,eACpBrE,aAAc7L,EAAO4L,QACrB2J,WAAqB,MAAR1K,EAAeA,EAAK,GAAKA,IAQzCqX,EAAYM,YAAY5f,KAAK+H,GAASE,IAKvCm1B,mBAAoB,SAASC,GACF,MAAvBA,IACFA,EAAsB,IAKvB,IAAI/zB,EAAiBtM,EAAEuM,WAInB+zB,EAAc7sB,EAAKnP,wBA2EvB,OArEiC,GAA9B+7B,EAAoB9+B,QAEtBkS,EAAK5H,SAAS,CACbK,WAAYkH,EAAQ/C,qBACpBpE,aAAc7L,EAAO0N,GACrBklB,YAAaqN,EACbp8B,KAAMq8B,EACNC,yBAA0B,KAE3Bj0B,EAAe2B,YAIfwF,EAAK5H,SAAS,CACbK,WAAYkH,EAAQ/C,qBACpBpE,aAAc7L,EAAO4L,QACrBgnB,YAAaqN,EACbp8B,KAAMq8B,IAGPtgC,EAAEijB,KAAK,CAENrY,IAAK6I,EAAKlQ,OAAS,uBACnBwX,KAAM,MACN7N,KAAM,CAAC,KAAQozB,EAAa,gBAAmBx8B,KAAKC,UAAUs8B,IAC9Dnd,QAAS,CAAE,cAAiBzP,EAAKvO,qBACjCoe,SAAU,SACRrW,MAAK,WAEPwG,EAAK5H,SAAS,CACbK,WAAYkH,EAAQ/C,qBACpBpE,aAAc7L,EAAO2N,MACrBilB,YAAaqN,EACbp8B,KAAMq8B,IAEPh0B,EAAeiX,YACbjW,MAAK,SAASJ,GAChB,GAAGA,EAAKsW,OAAO,CACd,IAEKniB,EAFDk/B,EAA2B,GAC/B,GAAGrzB,EAAKM,SAAWN,EAAKM,QAAQjM,OAE/B,IAAIF,EAAI,EAAGA,EAAI6L,EAAKM,QAAQjM,OAAQF,IACnCk/B,EAAyBrzB,EAAKM,QAAQnM,GAAGukB,UAAY1Y,EAAKM,QAAQnM,GAAGm/B,gBAKvE/sB,EAAK5H,SAAS,CACbK,WAAYkH,EAAQ/C,qBACpBpE,aAAc7L,EAAO0N,GACrBklB,YAAaqN,EACbp8B,KAAMq8B,EACNC,yBAA0BA,IAE3Bj0B,EAAe2B,eAIfwF,EAAK5H,SAAS,CACbK,WAAYkH,EAAQ/C,qBACpBpE,aAAc7L,EAAO2N,MACrBilB,YAAaqN,EACbp8B,KAAMq8B,IAEPh0B,EAAeiX,aAKXjX,GAwFRm0B,cAAe,SAAS9qB,EAAY+qB,EAAa1b,GAChD,IAAI1Y,EAAiBtM,EAAEuM,WACnB4V,EAA2B,MAAZ6C,GAAoBA,EAAYnE,EAAWsE,MAAQtE,EAAWuB,KAEjF,GAAIse,GAAgBA,EAAYn/B,OAY3B,CAEJkS,EAAK5H,SAAS,CACbK,WAAYkH,EAAQ9C,eACpBrE,aAAc7L,EAAO4L,QACrBmW,WAAYA,EACZxM,WAAYA,IAKb,IAAIgrB,EAAkBD,EAAYliB,MAAM,GAEpC7R,GAAmB,EACnBC,GAAqB,EACrBg0B,EAAa,IAEjB,SAASC,EAASC,GACjB9gC,EAAEijB,KAAK,CAENrY,IAAK6I,EAAKlQ,OAAS,cACnBwX,KAAM,MACN7N,KAAM,CAAC,SAAY4zB,GACnB5d,QAAS,CAAE,cAAiBzP,EAAKvO,qBACjCoe,SAAU,SACRrW,MAAK,WACPN,GAAmB,KACjBW,MAAK,SAASJ,GACbA,EAAKsW,QACP5W,GAAqB,EACrBg0B,EAAWE,GAAW5zB,EAAKM,SAE3Bb,GAAmB,KAElBe,QAAO,WAET,GAAGizB,EAAgBp/B,OAAS,EAE3Bs/B,EAASF,EAAgB/yB,aAGrB,CACJ,IAAI3B,EAAgBU,EAAmBvM,EAAO0N,GAAMlB,EAAqBxM,EAAO2N,MAAQ3N,EAAO4N,QAI/FyF,EAAK5H,SAAS,CACbK,WAAYkH,EAAQ9C,eACpBrE,aAAcA,EACdkW,WAAYA,EACZye,WAAYA,EACZjrB,WAAYA,IAGV1J,GAAgB7L,EAAO2N,MACzBzB,EAAeiX,SAGfjX,EAAe2B,QAAQ,CAAEd,QAAUlB,GAAgB7L,EAAO4N,cAO9D6yB,CAASF,EAAgB/yB,cAzEzB6F,EAAK5H,SAAS,CACbK,WAAYkH,EAAQ9C,eACpBrE,aAAc7L,EAAO0N,GACrBqU,WAAYA,EACZye,WAAY,GACZjrB,WAAYA,IAEbrJ,EAAe2B,UAqEhB,OAAO3B,GAORy0B,0BAA2B,SAASC,GACN,MAA1BA,IACFA,EAAyB,IAG1B,IAAI10B,EAAiBtM,EAAEuM,WAEvB,GAAIy0B,EAAuBz/B,OAEtB,CAAC,IAGD0/B,EAAoB,GAEpBt0B,GAAmB,EACnBC,GAAqB,GAEzB,SAASs0B,EAAyBC,GAEjCA,EAAYC,SAAW5tB,EAAE6tB,WAAWF,EAAYC,SAAUH,GAE1D1e,EAAake,cAAcU,EAAYxrB,WAAYwrB,EAAYC,SAAUD,EAAYG,SAASr0B,MAAK,SAASC,GAC3GP,GAAmB,EACR,MAARO,GAAgBA,EAAKC,UAEvBP,GAAqB,MAEpBU,MAAK,SAASJ,GAChBN,GAAqB,EACV,MAARM,GAAgBA,EAAKC,QAEvBR,GAAmB,EAInBs0B,EAAoBztB,EAAEyf,MAAMgO,EAAmBE,EAAYC,aAE1D1zB,QAAO,SAASR,GAKlB,GAAG8zB,EAAuBz/B,OAAS,EAElC2/B,EAAyBF,EAAuBpzB,aAG5C,CACJ,IAAIC,EAAelB,EAAmBvM,EAAO0N,GAAMlB,EAAqBxM,EAAO2N,MAAQ3N,EAAO4N,QAI3FH,GAAezN,EAAO2N,MACxBzB,EAAeiX,SAEfjX,EAAe2B,QAAQ,CAAEd,QAAUU,GAAezN,EAAO4N,cAO7DkzB,CAAyBF,EAAuBpzB,cAtDhDtB,EAAe2B,UAyDhB,OAAO3B,GAMRi1B,yBAA0B,SAAS1qB,GAGlC,IAFA,IAAImqB,EAAyB,GAErB3/B,EAAI,EAAGA,EAAIwV,EAAetV,OAAQF,IAAI,CAC7C,IAAImgC,EAAOvgB,EAAUO,YAAY3K,EAAexV,IAGhD2/B,EAAuBprB,KAAK,CAC3BD,WAAY6rB,EAAKC,SACjBL,SAAUI,EAAKE,OACfJ,SAAS,IAIV,IAAIK,EAAgBxB,EAAWyB,4BAA4B/qB,EAAexV,IACvEsgC,EAAcpgC,QAChBy/B,EAAuBprB,KAAK,CAC3BD,WAAY6rB,EAAKC,SACjBL,SAAUO,EACVL,SAAS,IAKZ,OAAOthC,EAAEuM,WAAW0B,QAAQ,CAAET,QAAS,CAAEq0B,oBAAqBb,MAG/Dc,gBAAiB,SAASC,EAAQ/c,GAEjC9kB,EAAW2L,SAAS,CACnBK,WAAYkH,EAAQ7C,kBACpBtE,aAAc7L,EAAO0N,GACrBk0B,UAAyB,MAAZhd,GAAoBA,EAAYnE,EAAWsE,MAAQtE,EAAWuB,KAC3E6f,gBAAiBF,MAKpB7zB,EAAOC,QAAUoU,G,6BCxZjB,IAAIriB,EAAaC,EAAQ,IACrBiT,EAAUjT,EAAQ,IAClBC,EAASD,EAAQ,GACjB0gB,EAAa1gB,EAAQ,IAErBE,EAAeF,EAAQ,IAAUE,aACjCC,EAASH,EAAQ,IACjBqT,EAAIrT,EAAQ,IAEZsT,EAAOtT,EAAQ,GAIf+hC,EAAU,GAEVC,EAAe,GAEfC,EAAwB,GAIxBC,EAAc,GAGdC,EAAmB,GAGnB/tB,EAAUnU,EAAO0N,GAEjBqyB,EAAa7/B,EAAO,GAAID,EAAawC,UAAW,CACnDC,kBAAmB,SAASC,GAAWC,KAAKC,GAtB1B,SAsB2CF,IAC7DG,qBAAsB,SAASH,GAAWC,KAAKG,eAvB7B,SAuB0DJ,IAC5EK,WAAY,WAAYJ,KAAKK,KAxBX,WA0BlBiS,UAAW,WACV,OAAOf,GAWRguB,UAAW,SAAS7B,EAAa1b,EAAUwd,GAC1C,IAAIC,EAA8B,MAAZzd,GAAoBA,EAAYmd,EAAeD,EACjEjd,EAAY,GAEhB,GAAGyb,GAAeA,EAAYn/B,OAAO,CAIpC,IAAIF,EACJ,IAJuB,MAApBmhC,IACFA,GAAmB,GAGhBnhC,EAAI,EAAGA,EAAIq/B,EAAYn/B,OAAQF,IAE/B2B,KAAK0/B,aAAahC,EAAYr/B,GAAI2jB,IACpCC,EAAUrP,KAAK6sB,EAAc/B,EAAYr/B,KAGxCmhC,IAEFvd,EAAYzR,EAAE2H,OAAO8J,GAAW,SAASM,GACxC,OAAQA,EAAMod,UAAUC,kBAK3B,OAAO3d,GAqBR2c,4BAA6B,SAASjsB,GACrC,IAAI+qB,EAAc,GAElB,IAAK,IAAII,KAAWsB,EAEfA,EAAsBtB,KAAYttB,EAAEiE,KAAK2qB,EAAsBtB,IAAU,SAACp2B,GAAD,OAASA,GAAMiL,MAC3F+qB,EAAY9qB,KAAKkrB,GAInB,OAAOJ,GAGRmC,qCAAsC,SAAS/B,GAC9C,OAAOsB,EAAsBtB,IAI9BD,SAAU,SAASC,EAAS9b,GAE3B,OAAqB,MAAZA,GAAoBA,EAAYmd,EAAarB,GAAWoB,EAAQpB,IAI1E4B,aAAc,SAAS5B,EAAS9b,GAC/B,IAIK3M,EAJDoqB,EAA8B,MAAZzd,GAAoBA,EAAYmd,EAAeD,EAGrE,GAAGO,EAAc3B,IAAwD,WAA3C2B,EAAc3B,GAAS6B,UAAUnf,QAAwBif,EAAc3B,GAASgC,gBAAgBvhC,OAE7H,IAAI8W,EAAI,EAAGA,EAAIoqB,EAAc3B,GAASgC,gBAAgBvhC,OAAQ8W,IAE7D,GAAGoqB,EAAc3B,GAASgC,gBAAgBzqB,IAAMoqB,EAAc3B,GAASgC,gBAAgBzqB,GAAG0qB,UAAUxhC,OACnG,OAAO,EAKV,OAAO,GAIRuV,0BAA2B,SAASnB,EAAYqP,GAC/C,OACc,MAAZA,GAAoBA,EACpBsd,EAAiB3sB,GAAc2sB,EAAiB3sB,GAAYoB,UAAY,KACxEsrB,EAAY1sB,GAAc0sB,EAAY1sB,GAAYoB,UAAY,MAKjEisB,0BAA2B,SAASnsB,EAAgBmO,GACnD,IAAIie,EAAkC,MAAZje,GAAoBA,EAAYsd,EAAmBD,EAE7E,IAAK,IAAI1sB,KAAcstB,EAClBzvB,EAAE8E,SAASzB,EAAgBlB,KAC9BstB,EAAkBttB,QAAc6E,IASnC0oB,2BAA4B,SAASxC,EAAa1b,GACjD,IAAIyd,EAA8B,MAAZzd,GAAoBA,EAAYmd,EAAeD,EAEjEiB,IAAqC,MAAZne,GAAoBA,GAEjD,IAAK,IAAI8b,KAAW2B,EACdjvB,EAAE8E,SAAUooB,EAAcyC,EAAsB55B,SAASu3B,GAAWA,KACxE2B,EAAc3B,QAAWtmB,IAM5BY,WAAY,WAEX,MAAO,aACYtX,KAAKC,UAAUm+B,GAD3B,kBAEgBp+B,KAAKC,UAAUo+B,GAF/B,2BAGuBr+B,KAAKC,UAAUq+B,GAHtC,iBAIet+B,KAAKC,UAAUs+B,GAJ9B,sBAKmBv+B,KAAKC,UAAUu+B,GACzC,OAIFpiC,EAAWmb,UAAS,SAAStQ,GAC5B,OAAOA,EAAOmB,YACb,KAAKkH,EAAQ5E,WAET5K,aAAa89B,SACfQ,EAAUp+B,KAAK4B,MAAM9B,aAAa89B,SAEhC99B,aAAaw/B,cACfjB,EAAer+B,KAAK4B,MAAM9B,aAAaw/B,cAErCx/B,aAAay/B,uBACfjB,EAAwBt+B,KAAK4B,MAAM9B,aAAay/B,uBAG9Cz/B,aAAa0/B,aACfjB,EAAcv+B,KAAK4B,MAAM9B,aAAa0/B,aAEpC1/B,aAAa2/B,kBACfjB,EAAmBx+B,KAAK4B,MAAM9B,aAAa2/B,kBAE5CpD,EAAW/8B,aACX,MAGD,KAAKgQ,EAAQrE,cACZ,GAAGhE,EAAOkB,cAAgB7L,EAAO0N,GAAG,CAEnC,IAAI01B,EAAiBhwB,EAAEqI,OAAO9Q,EAAO+Q,WAGrCqkB,EAAW6C,0BAA0BQ,GAKrC,IAAIC,EAAiB,GACrB,IAAK,IAAIC,KAAU34B,EAAO+Q,UACa,MAAnC/Q,EAAO+Q,UAAU4nB,GAAQhC,QAC3B+B,EAAe7tB,KAAK7K,EAAO+Q,UAAU4nB,GAAQhC,QAG/C,IAAIiC,EAAcnwB,EAAEyf,MAAM7nB,MAAM,KAAMq4B,GAEtCtD,EAAW+C,2BAA2BS,GAGtC//B,aAAa89B,OAAS59B,KAAKC,UAAUm+B,GACrCt+B,aAAa0/B,WAAax/B,KAAKC,UAAUs+B,GAI1C,MAGD,KAAKjvB,EAAQ/C,qBACZ,GAAGtF,EAAOkB,cAAgB7L,EAAO0N,GAAG,CAInCqyB,EAAW6C,0BAA0Bj4B,EAAOioB,aAAa,GAIzDoP,EAAwBr3B,EAAOw1B,yBAG3BoD,EAAcnwB,EAAEqI,OAAO9Q,EAAOw1B,0BAGlCJ,EAAW+C,2BAA2BS,GAAa,GAGnD//B,aAAaw/B,YAAct/B,KAAKC,UAAUo+B,GAC1Cv+B,aAAay/B,qBAAuBv/B,KAAKC,UAAUq+B,GACnDx+B,aAAa2/B,gBAAkBz/B,KAAKC,UAAUu+B,GAE/C/tB,EAAUxJ,EAAOkB,aACjBk0B,EAAW/8B,aACX,MAGD,KAAKgQ,EAAQ9C,eAGZ,GAAGvF,EAAOkB,cAAgB7L,EAAO0N,IAAM/C,EAAOkB,cAAgB7L,EAAO4N,QAAQ,CAC5E,IAAIy0B,EAAkB13B,EAAOoX,YAActB,EAAWsE,MAASgd,EAAeD,EAC1Ee,EAAsBl4B,EAAOoX,YAActB,EAAWsE,MAASmd,EAAmBD,EAGtF7uB,EAAElT,OAAOmiC,EAAe13B,EAAO61B,YAG3BqC,EAAkBl4B,EAAO4K,cAC5BstB,EAAkBl4B,EAAO4K,YAAc,IAExCstB,EAAkBl4B,EAAO4K,YAAYoB,UAAYtD,EAAKzP,cAGnD+G,EAAOoX,YAActB,EAAWsE,OAClCvhB,aAAaw/B,YAAct/B,KAAKC,UAAU0+B,GAC1C7+B,aAAa2/B,gBAAkBz/B,KAAKC,UAAUk/B,KAE9Cr/B,aAAa89B,OAAS59B,KAAKC,UAAU0+B,GACrC7+B,aAAa0/B,WAAax/B,KAAKC,UAAUk/B,IAG3C1uB,EAAUxJ,EAAOkB,aACjBk0B,EAAW/8B,aACX,MACD,KAAKgQ,EAAQzE,iBACZuzB,EAAU,GACVC,EAAe,GACfC,EAAwB,GACxBC,EAAc,GACdC,EAAmB,GAEnB1+B,aAAa89B,OAAS59B,KAAKC,UAAUm+B,GACrCt+B,aAAaw/B,YAAct/B,KAAKC,UAAUo+B,GAC1Cv+B,aAAay/B,qBAAuBv/B,KAAKC,UAAUq+B,GACnDx+B,aAAa0/B,WAAax/B,KAAKC,UAAUs+B,GACzCz+B,aAAa2/B,gBAAkBz/B,KAAKC,UAAUu+B,GAE9CnC,EAAW/8B,iBAQd8K,EAAOC,QAAUgyB,G,6BCrTjBjyB,EAAOC,QAAU,CAChBy1B,IAAM,MACN5G,OAAS,W,6BCAV,IAAI98B,EAAaC,EAAQ,IACrBiT,EAAUjT,EAAQ,IAClBC,EAASD,EAAQ,GACjBE,EAAeF,EAAQ,IAAUE,aACjCC,EAASH,EAAQ,IAGjB8gB,GAFI9gB,EAAQ,IAEAA,EAAQ,KAEpB0jC,EAAQ1jC,EAAQ,IAEhBsT,EAAOtT,EAAQ,GACf0gB,EAAa1gB,EAAQ,IAGrB2jC,EAAW,GAEXC,EAAgB,GAGhBxvB,EAAUnU,EAAO0N,GAEjBk2B,EAAmBnjB,EAAWuB,KAM9BpB,EAAmBvN,EAAKnP,wBAA0B,GAElD2/B,EAAmB3jC,EAAO,GAAID,EAAawC,UAAW,CACzDC,kBAAmB,SAASC,GAAWC,KAAKC,GAzB1B,SAyB2CF,IAC7DG,qBAAsB,SAASH,GAAWC,KAAKG,eA1B7B,SA0B0DJ,IAC5EK,WAAY,WAAYJ,KAAKK,KA3BX,WA6BlBiS,UAAW,WACV,OAAOf,GAER2vB,mBAAoB,WACnB,OAAOF,GA2BRG,mCAAoC,SAAST,EAAQ1e,GACpD,GAAe,MAAZA,GAAoBA,EAItB,MAAO,CACN,YAAe0e,EACf,MAAS,KACT,KAAQ,KACR,WAAa,EACb,WAAa,GAId,IAAIriB,EAAOJ,EAAUO,YAAYkiB,GACjC,MAAO,CACN,YAAeA,EACf,kBAA+B,MAARriB,GAA0C,MAA1BA,EAAK+iB,kBAA6B/iB,EAAK+iB,kBAAoB,KAClG,uBAAoC,MAAR/iB,GAA+C,MAA/BA,EAAKgjB,uBAAkChjB,EAAKgjB,uBAAyB,KACjH,MAAS,KACT,KAAQ,KACR,WAAa,EACb,WAAa,IAKhBC,2BAA4B,SAASZ,EAAQ1e,GAC5C,IAAIuf,EAA+B,MAAZvf,GAAoBA,EAAY+e,EAAgBD,EAEvE,OAAuC,MAApCS,EAAevjB,IAAyE,MAA5CujB,EAAevjB,GAAkB0iB,GACxEa,EAAevjB,GAAkB0iB,GAGjC1gC,KAAKmhC,mCAAmCT,EAAQ1e,IAGzDwf,eAAgB,SAASd,EAAQ5C,EAAS9b,EAAUyf,GAInD,OAAe,MAAZzf,GAAoBA,GACtByf,EAAWl7B,SAASk7B,GAElBV,EAAc/iB,IAAqB+iB,EAAc/iB,GAAkB0iB,IAAWK,EAAc/iB,GAAkB0iB,GAAQ5C,IAAYiD,EAAc/iB,GAAkB0iB,GAAQ5C,GAAS2D,GACpLV,EAAc/iB,GAAkB0iB,GAAQ5C,GAAS2D,GACjD,CAAC,YAAef,EAAQ,SAAY5C,EAAS,UAAa2D,EAAU,OAAU,EAAG,MAAS,EAAG,WAAa,IAIzGX,EAAS9iB,IAAqB8iB,EAAS9iB,GAAkB0iB,IAAWI,EAAS9iB,GAAkB0iB,GAAQ5C,GACxGgD,EAAS9iB,GAAkB0iB,GAAQ5C,GACnC,CAAC,YAAe4C,EAAQ,SAAY5C,EAAS,OAAU,EAAG,MAAS,EAAG,WAAa,IAMtF4D,mBAAoB,SAASziB,EAAUtM,EAAYmrB,EAAS9b,EAAUyf,GAErE,IAOIE,EAPAJ,GADJvf,EAAwB,MAAZA,GAAoBA,GACC+e,EAAgBD,EAQ7Cc,EAAkB,CACrB,YAAeL,EAAetiB,GAAUtM,GAAYuJ,YACpD,UAAa+C,EACb,MAASsiB,EAAetiB,GAAUtM,GAAY6P,MAC9C,KAAQ+e,EAAetiB,GAAUtM,GAAY8P,KAC7C,cAAiB,CAChB,SAAYqb,EACZ,YAAe,EACf,cAAiB,EAEjB,QAAW,KA6Bb,IAAK,IAAI+D,KAzBN7f,GACFyf,EAAWl7B,SAASk7B,GACpBE,EAAcJ,EAAetiB,GAAUtM,GAAYmrB,GAAS2D,GAC5DG,EAAgB/e,UAAY4e,EAC5BG,EAAgBlf,cAAc+b,SAAW8C,EAAetiB,GAAUtM,GAAYuJ,cAE9EylB,EAAcJ,EAAetiB,GAAUtM,GAAYmrB,GACe,MAA/DyD,EAAetiB,GAAUtM,GAAY0uB,uBACvCO,EAAgBlf,cAAc2e,uBAAyBE,EAAetiB,GAAUtM,GAAY0uB,uBAE5FO,EAAgBlf,cAAc0e,kBAAoBG,EAAetiB,GAAUtM,GAAYyuB,mBAK5D,MAA1BO,EAAYG,YAAsBH,EAAYG,WAAWvjC,SAC3DqjC,EAAgBlf,cAAcof,WAAaH,EAAYG,YAIrDH,EAAYI,OAAS,IACvBH,EAAgBlf,cAAcsf,YAAcv7B,WAAWk7B,EAAYM,MAAQN,EAAYI,SAIjEJ,EAEtB,GAAiB,eAAdE,GAA6C,YAAdA,GAA0C,UAAdA,GAAwC,SAAdA,GAAuC,aAAdA,GAA2C,cAAdA,EAA9I,CAGA,IAAIK,EAAiBP,EAAYE,GAGjC,GAAGK,EAAe5G,SAAW4G,EAAeC,SAAS,CACpD,IAAIC,EAA2B,CAC9B,kBAAqBP,EACrB,UAAaK,EAAeG,UAC5B,SAAYH,EAAe1iC,UAQ5B,OAJG0iC,EAAeG,UAAYT,EAAgBlf,cAAc4f,gBAC3DV,EAAgBlf,cAAc4f,cAAgBJ,EAAeG,WAGvDH,EAAenqB,MACrB,KAAK8oB,EAAM0B,eACVH,EAAyBI,QAAUN,EAAeO,gBACnD,KAAK5B,EAAMjQ,QACVwR,EAAyBrD,OAASmD,EAAeQ,qBACjDN,EAAyBza,MAAQua,EAAeS,cAChD,MACD,KAAK9B,EAAM+B,OACVR,EAAyBrD,OAASmD,EAAeW,OACjD,MACD,KAAKhC,EAAMiC,UACVV,EAAyBrD,OAASmD,EAAea,UACjD,MACD,KAAKlC,EAAMmC,gBACVZ,EAAyBrD,OAASmD,EAAee,iBACjD,MACD,KAAKpC,EAAMqC,aACVd,EAAyBrD,OAASmD,EAAee,iBAAiBtT,OAClE,MACD,KAAKkR,EAAMsC,MACVf,EAAyBgB,kBAAoBlB,EAAemB,MAC5D,MACD,KAAKxC,EAAMyC,QACVlB,EAAyBrD,OAASmD,EAAeqB,QACjD,MACD,KAAK1C,EAAMxT,SACV+U,EAAyBrD,OAASmD,EAAesB,SACjD,MACD,KAAK3C,EAAM4C,KACVrB,EAAyBrD,OAASmD,EAAejhC,KACjD,MACD,KAAK4/B,EAAM6C,QACVtB,EAAyBrD,OAASmD,EAAeyB,QACjD,MACD,KAAK9C,EAAM+C,UACVxB,EAAyByB,aAAe3B,EAAe2B,aACvDzB,EAAyB0B,eAAiB5B,EAAe4B,eACzD1B,EAAyB2B,mBAAqB7B,EAAe6B,mBAC7D3B,EAAyB4B,eAAiB9B,EAAe8B,eAK3DpC,EAAgBlf,cAAcuhB,QAAQrxB,KAAKwvB,IAI7C,OAAOR,GAGRsC,oBAAqB,SAASliB,GAM7B,IAAIuf,GADJvf,EAAwB,MAAZA,GAAoBA,GACC+e,EAAgBD,EAE7ChX,EAAY,GAGhB,IAAK,IAAI7K,KAAYsiB,EACpB,GAA+B,MAA5BA,EAAetiB,GAGjB,IAAK,IAAItM,KAAc4uB,EAAetiB,GAIrC,GAA2C,MAAxCsiB,EAAetiB,GAAUtM,IAAuB4uB,EAAetiB,GAAUtM,GAAY2L,YAAcijB,EAAetiB,GAAUtM,GAAY4L,UAG1I,IAAK,IAAIuf,KAAWyD,EAAetiB,GAAUtM,GAAa,CAEzD,GAAc,eAAXmrB,GAAuC,qBAAXA,GAA6C,0BAAXA,GAAkD,SAAXA,GAAiC,QAAXA,GAAgC,aAAXA,GAAqC,aAAXA,EAM7K,GAAoD,MAAjDyD,EAAetiB,GAAUtM,GAAYmrB,GAIxC,GAAG9b,GACF,GAAGuf,EAAetiB,GAAUtM,GAAYmrB,GAASv/B,OAAO,CACvD,IAAI8W,OAAC,EACL,IAAIA,EAAI,EAAGA,EAAIksB,EAAetiB,GAAUtM,GAAYmrB,GAASv/B,OAAQ8W,IAAK,CAIxE,IAAIusB,EADL,GAAuD,MAApDL,EAAetiB,GAAUtM,GAAYmrB,GAASzoB,IAAcksB,EAAetiB,GAAUtM,GAAYmrB,GAASzoB,GAAGiJ,WAC3GsjB,EAAkB5hC,KAAK0hC,mBAAmBziB,EAAUtM,EAAYmrB,EAAS9b,EAAU3M,IAGpEqN,cAAcuhB,QAAQ1lC,QACxCurB,EAAUlX,KAAKgvB,UAOnB,GAAGL,EAAetiB,GAAUtM,GAAYmrB,GAASxf,WAC5CsjB,EAAkB5hC,KAAK0hC,mBAAmBziB,EAAUtM,EAAYmrB,EAAS9b,IAG1DU,cAAcuhB,QAAQ1lC,QACxCurB,EAAUlX,KAAKgvB,GAYvB,OAAO9X,GAGRnL,UAAW,SAASqD,GAEnB,IAAIuf,GADJvf,EAAwB,MAAZA,GAAoBA,GACC+e,EAAgBD,EAC7CqD,GAAgC,EACpC,IAAK,IAAIllB,KAAYsiB,EACpB,GAAGtiB,GAAYjB,GAAgD,MAA5BujB,EAAetiB,GAAkB,CAEnE,IAAK,IAAItM,KADTwxB,GAAgC,EACT5C,EAAetiB,GACrC,GAA2C,MAAxCsiB,EAAetiB,GAAUtM,GAG3B,GAAG4uB,EAAetiB,GAAUtM,GAAY4L,YAAcgjB,EAAetiB,GAAUtM,GAAY2L,UAC1FijB,EAAetiB,GAAUtM,QAAc6E,OAGvC,GAAGwK,EAAS,CACX,IAAIoiB,GAAiC,EACrC,IAAK,IAAItG,KAAWyD,EAAetiB,GAAUtM,GAE5C,GAAc,eAAXmrB,GAAuC,SAAXA,GAAiC,QAAXA,GAAgC,aAAXA,GAAqC,aAAXA,GAMhD,MAAjDyD,EAAetiB,GAAUtM,GAAYmrB,IAAqByD,EAAetiB,GAAUtM,GAAYmrB,GAASv/B,OAA3G,CAIA,IAAI8W,OAAC,EACL,IAAIA,EAAI,EAAGA,EAAIksB,EAAetiB,GAAUtM,GAAYmrB,GAASv/B,OAAQ8W,IACb,MAApDksB,EAAetiB,GAAUtM,GAAYmrB,GAASzoB,KAC5CksB,EAAetiB,GAAUtM,GAAYmrB,GAASzoB,GAAGiJ,UAGpD8lB,GAAiC,EAFjC7C,EAAetiB,GAAUtM,GAAYmrB,GAASzoB,GAAK,MASpD+uB,EACF7C,EAAetiB,GAAUtM,QAAc6E,EAEvC2sB,GAAgC,OAIjCA,GAAgC,EAMjCA,IACF5C,EAAetiB,QAAYzH,KAU/BY,WAAY,WAEX,MAAO,cACYtX,KAAKC,UAAU+/B,GAD3B,mBAEgBhgC,KAAKC,UAAUggC,GAF/B,sBAGiBjgC,KAAKC,UAAUid,GACvC,OAIF9gB,EAAWmb,UAAS,SAAStQ,GAC5B,OAAOA,EAAOmB,YACb,KAAKkH,EAAQ5E,WAET5K,aAAaqjC,UACfnD,EAAWhgC,KAAK4B,MAAM9B,aAAaqjC,UAEjCrjC,aAAayjC,eACftD,EAAgBjgC,KAAK4B,MAAM9B,aAAayjC,eAGtCzjC,aAAaoe,kBACfhB,EAAmBld,KAAK4B,MAAM9B,aAAaoe,kBAE5CiiB,EAAiB7gC,aACjB,MAGD,KAAKgQ,EAAQrE,cACThE,EAAOkB,cAAgB7L,EAAO0N,KAGhCkT,EAAmBjW,EAAOkX,SAAW,GAIrCgiB,EAAiBtiB,YAGjB/d,aAAaqjC,QAAUnjC,KAAKC,UAAU+/B,GACtClgC,aAAaoe,gBAAkBle,KAAKC,UAAUid,IAI/C,MAGD,KAAK5N,EAAQ/C,qBACTtF,EAAOkB,cAAgB7L,EAAO0N,KAGhCm2B,EAAiBtiB,WAAU,GAG3B/d,aAAayjC,aAAevjC,KAAKC,UAAUggC,IAI5C,MAGD,KAAK3wB,EAAQhE,eAMD,MADA6R,EAAUO,YAAYzW,EAAO4K,cAEnCmuB,EAAS9iB,KACZ8iB,EAAS9iB,GAAoB,IAE1B8iB,EAAS9iB,GAAkBjW,EAAO4K,cAErCmuB,EAAS9iB,GAAkBjW,EAAO4K,YAAcsuB,EAAiBE,mCAAmCp5B,EAAO4K,aAIlD,MAAvDmuB,EAAS9iB,GAAkBjW,EAAO4K,YAAY6P,QAGhDse,EAAS9iB,GAAkBjW,EAAO4K,YAAY6P,MAAQza,EAAO8T,eAG7Djb,aAAaqjC,QAAUnjC,KAAKC,UAAU+/B,KAMxC,MACD,KAAK1wB,EAAQ7C,mBAERg0B,GADAvf,EAAYja,EAAOi3B,WAAanhB,EAAWsE,OACd4e,EAAgBD,GAC9B9iB,KAClBujB,EAAevjB,GAAoB,IAEhCujB,EAAevjB,GAAkBjW,EAAOk3B,gBAAgB/iB,eAI3DqlB,EAAevjB,GAAkBjW,EAAOk3B,gBAAgB/iB,aAAe+kB,EAAiBE,mCAAmCp5B,EAAOk3B,gBAAgB/iB,YAAa8F,GAC3JA,IAEHuf,EAAevjB,GAAkBjW,EAAOk3B,gBAAgB/iB,aAAasG,MAAQ/R,EAAKzP,gBAGhFugC,EAAevjB,GAAkBjW,EAAOk3B,gBAAgB/iB,aAAanU,EAAOk3B,gBAAgBrc,YAC/F2e,EAAevjB,GAAkBjW,EAAOk3B,gBAAgB/iB,aAAanU,EAAOk3B,gBAAgBrc,UAAaZ,EAAW,GAAK,IAGvHA,GAEFuf,EAAevjB,GAAkBjW,EAAOk3B,gBAAgB/iB,aAAanU,EAAOk3B,gBAAgBrc,UAAU7a,EAAOk3B,gBAAgBpc,WAAa9a,EAAOk3B,gBAGjJsC,EAAevjB,GAAkBjW,EAAOk3B,gBAAgB/iB,aAAaqC,WAAY,EAGjF3d,aAAayjC,aAAevjC,KAAKC,UAAUwgC,KAK3CA,EAAevjB,GAAkBjW,EAAOk3B,gBAAgB/iB,aAAanU,EAAOk3B,gBAAgBrc,UAAY7a,EAAOk3B,gBAG/Gr+B,aAAaqjC,QAAUnjC,KAAKC,UAAUwgC,IAGvCN,EAAiB7gC,aACjB,MAKD,KAAKgQ,EAAQ/D,eAIRtE,EAAOmX,qBAAsD,MAA9B4hB,EAAS9iB,IAA8E,MAAjD8iB,EAAS9iB,GAAkBjW,EAAO4K,eACtGmuB,EAAS9iB,KACZ8iB,EAAS9iB,GAAoB,IAE1B8iB,EAAS9iB,GAAkBjW,EAAO4K,cACrCmuB,EAAS9iB,GAAkBjW,EAAO4K,YAAcsuB,EAAiBE,mCAAmCp5B,EAAO4K,aAIzG5K,EAAOmX,sBACT4hB,EAAS9iB,GAAkBjW,EAAO4K,YAAY2L,WAAY,GAI3DwiB,EAAS9iB,GAAkBjW,EAAO4K,YAAY8P,KAAO1a,EAAO+T,cAG5Dlb,aAAaqjC,QAAUnjC,KAAKC,UAAU+/B,GAEtCG,EAAiB7gC,cAElB,MACD,KAAKgQ,EAAQ3C,cAEZ,GAAG1F,EAAOkB,cAAgB7L,EAAO4L,QAAQ,CACxC,IAAIgZ,EACAuf,GADAvf,EAAYja,EAAOoX,YAActB,EAAWsE,OACf4e,EAAgBD,EAQjD,IAAK,IAAI7hB,KAAYlX,EAAO0S,aAC3B,IAAK,IAAI9H,KAAc5K,EAAO0S,aAAawE,GAAW,CAGjDlX,EAAOsX,UAAUJ,IAAclX,EAAOsX,UAAUJ,GAAUtM,KAC7D4uB,EAAetiB,GAAUtM,GAAY4L,WAAY,GAKlD,IADA,IAAI+lB,EAAwBv8B,EAAO0S,aAAawE,GAAUtM,GACjDtU,EAAI,EAAGwgB,EAAIylB,EAAsB/lC,OAAQF,EAAIwgB,EAAGxgB,IACxD,GAAG2jB,EAAS,CACX,IAAIuiB,EAASD,EAAsBjmC,GAAGsB,MAAM,KAC5C4hC,EAAetiB,GAAUtM,GAAY4xB,EAAO,IAAIh+B,SAASg+B,EAAO,KAAO,UAEvEhD,EAAetiB,GAAUtM,GAAY2xB,EAAsBjmC,SAAMmZ,EAOlEwK,EACFphB,aAAayjC,aAAevjC,KAAKC,UAAUwgC,GAE3C3gC,aAAaqjC,QAAUnjC,KAAKC,UAAUwgC,GAGxChwB,EAAUxJ,EAAOkB,aACjB+3B,EAAmBj5B,EAAOoX,WAC1B8hB,EAAiB7gC,aACjB,MACD,KAAKgQ,EAAQzE,iBACZm1B,EAAW,GACXC,EAAgB,GAEhBngC,aAAaqjC,QAAUnjC,KAAKC,UAAU+/B,GACtClgC,aAAayjC,aAAevjC,KAAKC,UAAUggC,GAE3CE,EAAiB7gC,iBAQpB8K,EAAOC,QAAU81B,G,mCC3lBjB/1B,EAAOC,QAAU,CAChBylB,QAAW,UACXgS,OAAW,SACXE,UAAa,iBACbE,gBAAiB,kBACjBG,MAAU,QACVG,QAAW,UACXjW,SAAY,WACZoW,KAAS,OACTlB,eAAiB,iBACjBW,aAAe,eACfQ,QAAW,UACXE,UAAa,c,6BCbd,IAAI1mC,EAAaC,EAAQ,IACrBiT,EAAUjT,EAAQ,IAClBC,EAASD,EAAQ,GACjBE,EAAeF,EAAQ,IAAUE,aACjCC,EAASH,EAAQ,IACjBqT,EAAIrT,EAAQ,IAEZsT,EAAOtT,EAAQ,GAIfqnC,EAAc,GAEdC,EAAS,GAITC,EAAe,GAEfnzB,EAAUnU,EAAO0N,GAEjB65B,EAAernC,EAAO,GAAID,EAAawC,UAAW,CACrDC,kBAAmB,SAASC,GAAWC,KAAKC,GAhB1B,SAgB2CF,IAC7DG,qBAAsB,SAASH,GAAWC,KAAKG,eAjB7B,SAiB0DJ,IAC5EK,WAAY,WAAYJ,KAAKK,KAlBX,WAoBlBiS,UAAW,WACV,OAAOf,GAIRqzB,cAAe,WACd,OAAOJ,GAKRK,sBAAuB,WACtB,OAASL,EAAY/zB,EAAKjQ,4BAA8BgkC,EAAY/zB,EAAKjQ,2BAA2Bu4B,SAAYyL,EAAY/zB,EAAKjQ,2BAA2Bu4B,SAAW,IAKxK+L,oBAAqB,WACpB,OAASN,EAAY/zB,EAAKhQ,0BAA4B+jC,EAAY/zB,EAAKhQ,yBAAyBs4B,SAAYyL,EAAY/zB,EAAKhQ,yBAAyBs4B,SAAW,IAGlKgM,gCAAiC,SAASt6B,GACzC,OAAOzK,KAAKglC,8BAA8Bv6B,EAAK+5B,EAAa/zB,EAAKjQ,4BAGlEykC,8BAA+B,WAC9B,OAAOjlC,KAAKglC,8BAA8B,SAAUR,EAAa/zB,EAAKhQ,0BAMvEukC,8BAA+B,SAASv6B,EAAKy6B,EAAMC,GAClD,IAAIC,EAAa,GAEjB,OADAplC,KAAKqlC,oBAAoB56B,EAAKy6B,EAAME,EAAYD,GACzCC,GAERE,QAAS,SAASC,GACjB,OAAQd,EAAOc,GAAUd,EAAOc,GAAU,CAAC32B,KAAM,gBAGlD42B,qBAAsB,SAAS/6B,GAC9B,OAAQi6B,EAAaj6B,GAAOi6B,EAAaj6B,GAAKsJ,UAAY,MAK3DsxB,oBAAqB,SAAS56B,EAAKg7B,EAAYC,EAAUP,GAGxD,IAAIQ,EAAsB,EAE1B,IAAK,IAAIC,KAASH,EAEK,MAAlBN,GAA4BS,GAAST,IAIzCO,EAASE,GAAS,CACjBC,UAAW,EACX9M,SAAU,MAG8B,MAAtC0M,EAAWG,GAAOE,YAAYr7B,KAChCi7B,EAASE,GAAOC,WAAaJ,EAAWG,GAAOE,YAAYr7B,GAAKlM,QAGhC,MAA9BknC,EAAWG,GAAO7M,WACpB2M,EAASE,GAAO7M,SAAW,GAC3B2M,EAASE,GAAOC,WAAa7lC,KAAKqlC,oBAAoB56B,EAAKg7B,EAAWG,GAAO7M,SAAU2M,EAASE,GAAO7M,WAGxG4M,GAAuBD,EAASE,GAAOC,WAGxC,OAAOF,GAIRI,4BAA6B,SAASt7B,EAAKy6B,EAAMC,GAChD,IAAK,IAAIa,KAASd,EAEK,MAAlBC,GAA4Ba,GAASb,IAIN,MAAhCD,EAAKc,GAAOF,YAAYr7B,KAC1By6B,EAAKc,GAAOF,YAAYr7B,QAAO+M,GAGhCxX,KAAK+lC,4BAA4Bt7B,EAAKy6B,EAAKc,GAAOjN,YAOpDkN,2BAA4B,SAASx7B,EAAKg7B,EAAYC,EAAUP,GAC/D,IAAK,IAAIa,KAASP,EAEK,MAAlBN,GAA4Ba,GAASb,IAMtC30B,EAAE01B,SAAST,EAAWO,MAAYx1B,EAAEtB,QAAQu2B,EAAWO,KACrDN,EAASM,KACZN,EAASM,GAAS,IAEnBhmC,KAAKimC,2BAA2Bx7B,EAAKg7B,EAAWO,GAAQN,EAASM,KAEjEN,EAASM,GAASP,EAAWO,KAMhC5tB,WAAY,WAEX,MAAO,iBACatX,KAAKC,UAAUyjC,GAD5B,YAEU1jC,KAAKC,UAAU0jC,GAFzB,kBAGa3jC,KAAKC,UAAU2jC,GACnC,OAIFxnC,EAAWmb,UAAS,SAAStQ,GAC5B,OAAOA,EAAOmB,YACb,KAAKkH,EAAQ5E,WAET5K,aAAaulC,oBACf3B,EAAc1jC,KAAK4B,MAAM9B,aAAaulC,oBAEpCvlC,aAAawlC,eACf3B,EAAS3jC,KAAK4B,MAAM9B,aAAawlC,eAE/BxlC,aAAaylC,cACf3B,EAAe5jC,KAAK4B,MAAM9B,aAAaylC,cAExC1B,EAAavkC,aACb,MACD,KAAKgQ,EAAQtE,gBAGX,IAAIw6B,EADL,GAAGv+B,EAAOkB,cAAgB7L,EAAO0N,IAAM/C,EAAOkB,cAAgB7L,EAAO4N,QAI3C,MAArBjD,EAAO4K,YAAwB5K,EAAO4K,WAAa,GAClD6xB,EAAY/zB,EAAKjQ,2BAIpBmkC,EAAaoB,4BAA4Bh+B,EAAO4K,WAAY6xB,EAAa/zB,EAAKjQ,2BAH9EgkC,EAAY/zB,EAAKjQ,2BAA6B,GAO3CgQ,EAAEmE,QAAQ5M,EAAOw+B,aAAa91B,EAAKjQ,6BAEtCmkC,EAAasB,2BAA2Bl+B,EAAO4K,WAAY5K,EAAOw+B,aAAa91B,EAAKjQ,2BAA4BgkC,EAAY/zB,EAAKjQ,4BAOlI8lC,EAAUv+B,EAAO4K,aAGjB6xB,EAAY/zB,EAAKhQ,yBAA2BsH,EAAOw+B,aAAa91B,EAAKhQ,yBACrE6lC,EAAU,UAIX91B,EAAElT,OAAOmnC,EAAQ18B,EAAOy+B,UAGpB9B,EAAa4B,KAChB5B,EAAa4B,GAAW,IAEzB5B,EAAa4B,GAASvyB,UAAYtD,EAAKzP,cAGvCJ,aAAaulC,kBAAoBrlC,KAAKC,UAAUyjC,GAChD5jC,aAAawlC,aAAetlC,KAAKC,UAAU0jC,GAC3C7jC,aAAaylC,YAAcvlC,KAAKC,UAAU2jC,GAE3CnzB,EAAUxJ,EAAOkB,aACjB07B,EAAavkC,aACb,MACD,KAAKgQ,EAAQzE,iBACZ64B,EAAc,GACdC,EAAS,GACTC,EAAe,GAEf9jC,aAAaulC,kBAAoBrlC,KAAKC,UAAUyjC,GAChD5jC,aAAawlC,aAAetlC,KAAKC,UAAU0jC,GAC3C7jC,aAAaylC,YAAcvlC,KAAKC,UAAU2jC,GAE1CC,EAAavkC,iBAQhB8K,EAAOC,QAAUw5B,G,oGCvOX8B,E,uKAkBK,IAAD,EACqEzmC,KAAK26B,MAA3Erc,EADC,EACDA,UAAWooB,EADV,EACUA,OAAQC,EADlB,EACkBA,UAAWC,EAD7B,EAC6BA,OAAQr7B,EADrC,EACqCA,UAAWwtB,EADhD,EACgDA,SAAa8N,EAD7D,kFAEFnjC,EAAQ,CACbojC,gBAAiBJ,EACjBK,MAAOzoB,EAAY,IACnB0oB,WAAW,SAAD,OAAWL,EAAX,MACVC,OAAQA,GAGT,OACC,uCAAKr7B,UAAWA,GAAa,yBAA6Bs7B,GACzD,yBAAKt7B,UAAU,uBAAuB7H,MAAOA,GAAQq1B,Q,GA7B/B4C,IAAMC,WAA1B6K,EAWE5K,aAAe,CACrBvd,UAAW,EACXooB,OAAQ,UACRC,UAAW,IACXC,OAAQ,IAoBKH,QClCTQ,E,uKAgBJ,OACC,yBAAK17B,UAAU,gBAAgB7H,MAAO,CAACwjC,QAAQ,SAAUC,SAAS,KAAKC,KAAK,UAC3E,yBAAK77B,UAAU,gBACd,yBAAKA,UAAU,iBAEd,yBAAKA,UAAU,gBACd,wBAAIA,UAAU,eAAevL,KAAK26B,MAAM92B,QAGzC,yBAAK0H,UAAU,cACd,yBAAK7H,MAAO,CAAC2jC,UAAW,WACvB,kBAAC,IAAD,CAAS/7B,UAAWtL,KAAK26B,MAAM2M,YAC9BtnC,KAAK26B,MAAM4M,cAId,yBAAKh8B,UAAU,gBACd,kBAAC,EAAD,CAAa+S,UAAWte,KAAK26B,MAAMtE,qB,GAjCdsF,IAAMC,WAA5BqL,EAQEpL,aAAe,CACrBxF,WAAY,EACZxyB,MAAO,WACP0jC,YAAa,GACbD,WAAW,GA+BEL,a,6BCjDf,uDAIMO,E,uKAYJ,OACC,yBAAKj8B,UAAU,gBAAgB7H,MAAO,CAACwjC,QAAQ,SAAUC,SAAS,KAAKC,KAAK,UAC3E,yBAAK77B,UAAU,gBACd,yBAAKA,UAAU,iBAEd,yBAAKA,UAAU,cACd,yBAAK7H,MAAO,CAAC2jC,UAAW,WACtBrnC,KAAK26B,MAAM4M,cAId,yBAAKh8B,UAAU,eAAe7H,MAAO,CAAC2jC,UAAW,WAChD,4BAAQtvB,KAAK,SAASxM,UAAU,kBAAkBk8B,QAASznC,KAAK26B,MAAM+M,OAAO,uBAAGn8B,UAAU,gBAA1F,QACM,4BAAQwM,KAAK,SAASxM,UAAU,kBAAkBk8B,QAASznC,KAAK26B,MAAMgN,MAAM,uBAAGp8B,UAAU,gBAAzF,e,GAzBaowB,IAAMC,WAA1B4L,EAOE3L,aAAe,CACrB0L,YAAa,iBA2BAC,a,gCCvCf,gDAGIh3B,EAAIrT,EAAQ,IACZ+6B,EAAe/6B,EAAQ,IAErByqC,E,4MAmBLC,0BAA4B,SAACC,GAC5BA,EAAMC,iBACN,EAAKpN,MAAMqN,WAAWzhC,SAASuhC,EAAMG,cAAcC,QAApB,M,EAGhCC,wBAA0B,SAACL,GAC1BA,EAAMC,iBACN,IAAMK,EAASN,EAAMM,OACY,GAA9BA,EAAOF,QAAP,SACF,EAAKvN,MAAMqN,WAAWzhC,SAAS6hC,EAAOF,QAAP,KAE/B,EAAKvN,MAAM0N,SAAS9hC,SAAS6hC,EAAOF,QAAP,M,EAI/BI,mBAAqB,SAACxR,GAGrB,IAFA,IAAIyR,EAAO,GAEFlqC,EAAI,EAAGA,EAAIy4B,EAAav4B,OAAQF,IAAK,CAC7C,IAAImqC,EAAM1R,EAAaz4B,GACnBoqC,EAAcj4B,EAAE8E,SAAS,EAAKqlB,MAAM+N,WAAYF,EAAI9gC,IACxD6gC,EAAK31B,KACJ,yBAAKnI,IAAK+9B,EAAI9gC,GAAI6D,UAAW,mBAAqBk9B,EAAc,iBAAmB,mBAClF,yBAAKl9B,UAAU,gBAAgB67B,KAAK,MAAM1/B,GAAI,aAAe8gC,EAAI9gC,IAChE,wBAAI6D,UAAU,eAEI,MAAhBi9B,EAAIzP,SACJ,uBAAGqO,KAAK,SAASuB,cAAY,WAAWC,KAAM,gBAAkBJ,EAAI9gC,IAAK8gC,EAAI55B,MAC7E,uBAAGw4B,KAAK,SAASyB,UAASL,EAAI9gC,GAAIohC,gBAAeL,EAAc,EAAI,EAAGG,KAAK,IAAInB,QAAS,EAAKU,yBAA0BK,EAAI55B,QAK7G,MAAhB45B,EAAIzP,SACJ,yBAAKxtB,UAAU,0BAA0B67B,KAAK,WAAW1/B,GAAI,eAAiB8gC,EAAI9gC,IACjF,yBAAK6D,UAAU,cAAe,EAAK+8B,mBAAmBE,EAAIzP,YAClD,OAMb,OAAOwP,G,EAGRQ,uBAAyB,SAACrQ,GAEzB,OACC,yBAAKjuB,IAAKiuB,EAAYntB,UAAU,iDAC/B,yBAAKA,UAAU,8BAA8B67B,KAAK,OACjD,wBAAI77B,UAAU,eACX2sB,EAAaO,YAAYC,GAAY9pB,MAExC,uBAAGrD,UAAU,aAAa67B,KAAK,SAASyB,UAASnQ,EAAYkQ,KAAK,IAAInB,QAAS,EAAKI,2BAA2B,uBAAGt8B,UAAU,oB,uDAO/H,OACC,yBAAKA,UAAU,sBAEbvL,KAAK26B,MAAMqO,OAEVhpC,KAAK26B,MAAMjL,WAAWnxB,OACtByB,KAAKsoC,mBAAmBtoC,KAAK26B,MAAMjL,YAEnC,yBAAKnkB,UAAU,cAAf,2BAMAvL,KAAK26B,MAAM+N,WAAWnqC,OACtB,6BACGyB,KAAK26B,MAAM+N,WAAW3+B,IAAI/J,KAAK+oC,yBAGlC,U,GAlG0BpN,IAAMC,WAAhCgM,EASE/L,aAAe,CACrB6M,WAAY,GACZM,QAAQ,GA+FKpB,O,6BChHf,gEAKIn3B,EAAOtT,EAAQ,GAEb8rC,E,kDAWL,WAAYtO,GAAQ,IAAD,8BAClB,cAAMA,IAgBPuO,2BAA6B,WAC5B,EAAKlO,SAAS,CACbmO,qBAAsBhoC,KAAKsE,MAAMxI,OAAOmsC,YAAc,MAnBrC,EAuBnBC,kBAAoB,SAACvB,GACpBA,EAAMC,iBACN,IAAMuB,EAAMxB,EAAMM,OAAOF,QAAb,IACZ,EAAKlN,UAAS,SAACuO,GAAD,MAAgB,CAC7BC,kBACQ,QAAPF,EACCC,EAAUC,kBAAoB,EAAI,EAAK7O,MAAM8O,OAAOlrC,OAAS,EAAIgrC,EAAUC,kBAAoB,EAC/FD,EAAUC,kBAAqB,EAAK7O,MAAM8O,OAAOlrC,OAAS,EAAK,EAAIgrC,EAAUC,kBAAoB,OA9BlF,EAmCnBE,YAAc,WACb,EAAK/O,MAAMgP,WAlCX,EAAKvO,MAAQ,CACZoO,kBAAmB,EACnBL,qBAAsB,GAJL,E,gEASlBnpC,KAAKkpC,6BACLjsC,OAAO2sC,iBAAiB,SAAU5pC,KAAKkpC,8B,6CAIvCjsC,OAAO4sC,oBAAoB,SAAU7pC,KAAKkpC,8B,+BAyBjC,IAAD,OACR,OACC,yBAAK39B,UAAU,gBAAgB7H,MAAO,CAACwjC,QAAQ,SAAUC,SAAS,KAAKC,KAAK,UAC3E,yBAAK77B,UAAU,gBACd,yBAAKA,UAAU,iBAEd,yBAAKA,UAAU,gBACd,4BAAQwM,KAAK,SAASxM,UAAU,QAAQu+B,eAAa,QAAQrC,QAASznC,KAAK0pC,aAA3E,QAEqB,MAApB1pC,KAAK26B,MAAM92B,OAAiB7D,KAAK26B,MAAM92B,MAAMtF,OAC7C,wBAAIgN,UAAU,eAAevL,KAAK26B,MAAM92B,OAAc,MAIxD,yBAAK0H,UAAU,cACd,yBAAKA,UAAU,eAEbvL,KAAK26B,MAAM8O,OAAO1/B,KAAI,SAACs5B,EAAO0G,GAAR,OACrB,kBAAC,IAAD,CACCt/B,IAAK44B,EAAM37B,GACXhE,MAAO,CAACsmC,UAAW,EAAK5O,MAAM+N,sBAC9B3N,wBAAyB,CAACyO,UAAW9oC,KAAKsE,MAAM,EAAK21B,MAAM+N,qBAAuB,GAAIe,aAAc/oC,KAAKsE,MAAM,EAAK21B,MAAM+N,qBAAuB,IACjJhO,IAAK1qB,EAAK9I,qBAAqB07B,EAAM8G,WACrC5O,oBAAoB,EACpBD,QAAU,EAAKF,MAAMoO,mBAAqBO,SAO9C/pC,KAAK26B,MAAM8O,OAAOlrC,OAAS,EAC3B,yBAAKgN,UAAU,gBACd,yBAAKA,UAAU,gBACd,kBAAC,IAAD,CAAmBD,WAAW,EAAMiW,KAAM,CAACN,KAAMjhB,KAAKo7B,MAAMoO,kBAAoB,EAAGxoB,SAAU,EAAGtF,MAAO1b,KAAK26B,MAAM8O,OAAOlrC,OAAQod,WAAY3b,KAAK26B,MAAM8O,OAAOlrC,UAC/J,6BACC,wBAAIgN,UAAU,SACb,wBAAIA,UAAU,YACb,uBAAGq9B,KAAK,IAAIwB,WAAS,OAAO3C,QAASznC,KAAKqpC,mBAAmB,0BAAMgB,cAAY,QAAlB,KAA7D,UAED,wBAAI9+B,UAAU,QACb,uBAAGq9B,KAAK,IAAIwB,WAAS,OAAO3C,QAASznC,KAAKqpC,mBAA1C,QAAkE,0BAAMgB,cAAY,QAAlB,WAK9D,Y,GAhGU1O,IAAMC,WAA1BqN,EAOEpN,aAAe,CACrBh4B,MAAO,MAkGMolC,O,+CChHf,IAAI/rC,EAAaC,EAAQ,IACrBiT,EAAUjT,EAAQ,IAClBmiB,EAAcniB,EAAQ,IACtBC,EAASD,EAAQ,GACjBsT,EAAOtT,EAAQ,GACfqT,EAAIrT,EAAQ,IAEVH,EAAIC,OAAOD,EAEb+/B,EAAiB,CACpBpd,mBAAoB,SAAS5X,EAAQE,GACvB,kBAAVF,GAEF7K,EAAW2L,SAAS,CACnBK,WAAYkH,EAAQtE,gBACpB7C,aAAc7L,EAAO4L,QACrB2J,WAAqB,MAAR1K,EAAeA,EAAK,GAAKA,IAOxCqX,EAAYM,YAAY5f,KAAK+H,GAASE,IAGvCqiC,eAAgB,SAAS33B,GAExBlC,EAAK5H,SAAS,CACbK,WAAYkH,EAAQtE,gBACpB7C,aAAc7L,EAAO4L,QACrB2J,WAAYA,IAGb,IAAIrJ,EAAiBtM,EAAEuM,WAInBghC,EAAkC,MAAd53B,GAAwBA,EAAa,EACzD63B,EAAiB,GACjB7gC,GAAmB,EACnBC,GAAqB,EACrB28B,EAAe,GACfC,EAAW,GA+Jf,OArDAxpC,EAAEijB,KAAK,CAENrY,IAAK6I,EAAKlQ,OAAS,wBACnBwX,KAAM,MACN7N,KAAM,CAAC,SAAYyI,EAAY1R,KAAMwP,EAAKzP,eAC1Ckf,QAAS,CAAE,cAAiBzP,EAAKvO,qBACjCoe,SAAU,SACRrW,MAAK,WAEPwG,EAAK5H,SAAS,CACbK,WAAYkH,EAAQtE,gBACpB7C,aAAc7L,EAAO2N,MACrB4H,WAAYA,IAEbrJ,EAAeiX,YACbjW,MAAK,SAASJ,GACbA,EAAKsW,QAIJtW,EAAKM,QAAQjM,OAAS,IACxBgoC,EAhEH,SAASkE,EAAUC,EAASC,EAAUC,EAAiBC,GAGtD,IAFA,IAAIC,EAAa,GAERzsC,EAAI,EAAGwgB,EAAI6rB,EAAQnsC,OAAQF,EAAIwgB,EAAGxgB,IAAK,CAM9C,IAAI0sC,EAJL,IAAIL,EAAQrsC,GAAG2sC,WAAaN,EAAQrsC,GAAGy6B,WAAa6R,EAGnDD,EAAQrsC,GAAG2sC,WAAY,EAGR,MAAZL,GAEFC,EAAmBF,EAAQrsC,GAAG4sC,cAAgBV,EAAkB95B,EAAKjQ,0BAA4BiQ,EAAKhQ,yBAEtGsqC,EAAmB,GAAKL,EAAQrsC,GAAG4sC,YAEhCL,GAAmBF,EAAQrsC,GAAGyvB,MAAQ,GACxC0c,EAAe53B,KAAK,CAAC8lB,WAAYgS,EAAQrsC,GAAG4sC,YAAaC,SAAUH,MAIpEA,EAAmBF,EAAkB,aAAeH,EAAQrsC,GAAG4sC,YAE5DL,GAAmBF,EAAQrsC,GAAGyvB,MAAQ,GACxC0c,EAAe53B,KAAK,CAAC8lB,WAAYgS,EAAQrsC,GAAG4sC,YAAaC,SAAUH,KAKrED,EAAWJ,EAAQrsC,GAAG4sC,aAAe,CACpC,YAAeP,EAAQrsC,GAAG4sC,YAC1B,KAAUP,EAAQrsC,GAAGuQ,KACrB,YAAe,GACf,SAAa67B,EAAUC,EAASA,EAAQrsC,GAAG4sC,YAAaL,EAAiBG,IAK5E,OAAQv6B,EAAEmE,QAAQm2B,GAAc,KAAOA,EAyBtBL,CAAUvgC,EAAKM,QAAS,MAAM,EAAO,KAIlDggC,EAAejsC,OAAS,GAC1BqL,GAAqB,EAlIxB,SAASuhC,EAAiBC,GACzBpuC,EAAEijB,KAAK,CAENrY,IAAK6I,EAAKlQ,OAAS,wBACnBwX,KAAM,MACN7N,KAAM,CAAC,SAAYyI,EAAY,YAAey4B,EAAgB1S,WAAYz3B,KAAMwP,EAAKzP,eACrFkf,QAAS,CAAE,cAAiBzP,EAAKvO,qBACjCoe,SAAU,SACRrW,MAAK,WACPN,GAAmB,KAEjBW,MAAK,SAASJ,GAChB,GAAGA,EAAKsW,QAIP,GAHA5W,GAAqB,EAGlBM,EAAKM,QAAQjM,OAAS,EAAE,CAE1B,IADA,IAAI8sC,EAAqB,GAChBhtC,EAAI,EAAGwgB,EAAI3U,EAAKM,QAAQjM,OAAQF,EAAIwgB,EAAGxgB,IAC/CmoC,EAASt8B,EAAKM,QAAQnM,GAAGqJ,IAAMwC,EAAKM,QAAQnM,GAC5CgtC,EAAmBz4B,KAAK1I,EAAKM,QAAQnM,GAAGqJ,IAEzC8I,EAAEd,IAAI62B,EAAe6E,EAAgBF,SAAW,iBAAmBX,EAAkB53B,EAAa,UAAY04B,SAG/G1hC,GAAmB,KAGlBe,QAAO,WAET,GAAG8/B,EAAejsC,OAAS,EAE1B4sC,EAAiBX,EAAe5/B,aAG5B,CACJ,IAAI3B,EAAgBU,EAAmBvM,EAAO0N,GAAMlB,EAAqBxM,EAAO2N,MAAQ3N,EAAO4N,QAI/FyF,EAAK5H,SAAS,CACbK,WAAYkH,EAAQtE,gBACpB7C,aAAcA,EACd0J,WAAYA,EACZ4zB,aAAcA,EACdC,SAAUA,IAGRv9B,GAAgB7L,EAAO2N,MACzBzB,EAAeiX,SAEfjX,EAAe2B,QAAQ,CAAEd,QAAUlB,GAAgB7L,EAAO4N,cAgF3DmgC,CAAiBX,EAAe5/B,WAKhC6F,EAAK5H,SAAS,CACbK,WAAYkH,EAAQtE,gBACpB7C,aAAc7L,EAAO0N,GACrB6H,WAAYA,EACZ4zB,aAAcA,EACdC,SAAUA,IAEXl9B,EAAe2B,aAKhBwF,EAAK5H,SAAS,CACbK,WAAYkH,EAAQtE,gBACpB7C,aAAc7L,EAAO2N,MACrB4H,WAAYA,IAEbrJ,EAAeiX,aAIVjX,GAKRgiC,2BAA4B,SAASz3B,EAAgB03B,GAC7B,MAApBA,IACFA,GAAmB,GAGpB13B,EAAiBA,EAAe2H,QAE7B+vB,GACF13B,EAAejB,KAAK,MAGrB,IAAItJ,EAAiBtM,EAAEuM,WAEvB,GAAIsK,EAAetV,OAEd,CAAC,IAGDoL,GAAmB,EACnBC,GAAqB,GAEzB,SAAS4hC,EAA0B74B,GAClCoqB,EAAeuN,eAAe33B,GAAY1I,MAAK,SAASC,GACvDP,GAAmB,EACR,MAARO,GAAgBA,EAAKC,UAEvBP,GAAqB,MAEpBU,MAAK,SAASJ,GAChBN,GAAqB,EACV,MAARM,GAAgBA,EAAKC,UAEvBR,GAAmB,MAElBe,QAAO,SAASR,GAKlB,GAAG2J,EAAetV,OAAS,EAE1BitC,EAA0B33B,EAAejJ,aAGrC,CACJ,IAAIC,EAAelB,EAAmBvM,EAAO0N,GAAMlB,EAAqBxM,EAAO2N,MAAQ3N,EAAO4N,QAI3FH,GAAezN,EAAO2N,MACxBzB,EAAeiX,SAEfjX,EAAe2B,QAAQ,CAAEd,QAAUU,GAAezN,EAAO4N,cAO7DwgC,CAA0B33B,EAAejJ,cA7CzCtB,EAAe2B,UAgDhB,OAAO3B,IAIT4B,EAAOC,QAAU4xB,G,6BC/QjB7xB,EAAOC,QAAU,CAChBsb,WAAY,GACZsD,OAAQ,K,kECFT7e,EAAOC,QAAU,CAChBmP,iBAAkB,mBAClBE,mBAAoB,qBACpBE,kBAAmB,sB,6BCNpB,2CAMM1d,EAAIC,OAAOD,EACbyuC,EAAsB9P,IAAM+P,YAAY,CAAC,YAAD,sBAa3CC,gBAAiB,WAChB,MAAO,CACNhxB,WAAY,GACZC,WAAY,EACZC,eAAgB,KAChB+wB,YAAa,KACbC,iBAAkB,KAClBC,cAAe,GACfxE,WAAW,IAWbyE,kBAAmB,WAClB/uC,EAAE,oBAAoBgvC,QAEtBhsC,KAAK26B,MAAMsR,SAASjsC,KAAK26B,MAAMhgB,WAAY3a,KAAK26B,MAAM/f,aAGvDsxB,uBAAwB,SAASpE,GAChC,IAAIntB,EAAamtB,EAAMM,OAAOhiC,MAC9BpG,KAAK26B,MAAMsR,SAAStxB,EAAY,IAGjCwxB,uBAAwB,SAASrE,GAChCA,EAAMC,iBAEN,IAAMntB,EAA4C,QAA/BktB,EAAMM,OAAOF,QAAb,IACjBloC,KAAK26B,MAAM/f,WAAa,EAAI5a,KAAK26B,MAAM/f,WAAa,EAAI,EACxB,MAA/B5a,KAAK26B,MAAMkR,kBAA4B7rC,KAAK26B,MAAM/f,WAAa5a,KAAK26B,MAAMkR,iBAAoB7rC,KAAK26B,MAAM/f,WAAa,EAAI5a,KAAK26B,MAAM/f,WAErIA,GAAc5a,KAAK26B,MAAM/f,YAC3B5a,KAAK26B,MAAMsR,SAASjsC,KAAK26B,MAAMhgB,WAAYC,IAI7CwxB,sBAAuB,SAAS14B,GAC/B1T,KAAK26B,MAAM0R,UAAU34B,IAGtBg2B,YAAa,WACZ1pC,KAAK26B,MAAM2R,YAGZC,OAAQ,WAgBP,OACC,yBAAKhhC,UAAU,gBAAgB7H,MAAO,CAACwjC,QAAQ,SAAUC,SAAS,KAAKC,KAAK,UAC3E,yBAAK77B,UAAU,gBACd,yBAAKA,UAAU,iBAEd,yBAAKA,UAAU,gBACd,4BAAQwM,KAAK,SAASxM,UAAU,QAAQu+B,eAAa,QAAQrC,QAASznC,KAAK0pC,aAA3E,QACA,wBAAIn+B,UAAU,eAAd,sBAGD,yBAAKA,UAAU,cACd,2BAAOwM,KAAK,OAAOxM,UAAU,eAAe7D,GAAG,kBAAkB8kC,YAAY,SAASpmC,MAAOpG,KAAK26B,MAAMhgB,WAAY8xB,SAAUzsC,KAAKksC,uBAAwBQ,aAAa,QAExK,yBAAKnhC,UAAU,mDACd,kBAAC,IAAD,CAASD,UAAWtL,KAAK26B,MAAM2M,YAC/B,kBAAC,IAAD,CAAmBh8B,WAAYtL,KAAK26B,MAAM2M,UAAW/lB,KAAM,CAACN,KAAMjhB,KAAK26B,MAAM/f,WAAYoG,SAAUhhB,KAAK26B,MAAM9f,eAAgBa,MAAO1b,KAAK26B,MAAMiR,YAAajwB,WAAY3b,KAAK26B,MAAMkR,oBACpL,6BACC,wBAAItgC,UAAU,SACb,wBAAIA,UAAoC,GAAzBvL,KAAK26B,MAAM/f,WAAkB,oBAAsB,YACjE,uBAAGguB,KAAK,IAAIwB,WAAS,OAAO3C,QAASznC,KAAKmsC,wBAAwB,0BAAM9B,cAAY,QAAlB,KAAlE,UAED,wBAAI9+B,UAA2C,MAA/BvL,KAAK26B,MAAMkR,kBAA4B7rC,KAAK26B,MAAMkR,kBAAoB,GAAK7rC,KAAK26B,MAAM/f,YAAc5a,KAAK26B,MAAMkR,iBAAoB,gBAAkB,QACpK,uBAAGjD,KAAK,IAAIwB,WAAS,OAAO3C,QAASznC,KAAKmsC,wBAA1C,QAAuE,0BAAM9B,cAAY,QAAlB,SAK1ErqC,KAAK26B,MAAMmR,cAAcvtC,OACzB,2BAAOgN,UAAU,oCAChB,+BACEvL,KAAK26B,MAAMmR,cAAc/hC,KA7CV,SAAS2J,GAEhC,OACC,wBAAIjJ,IAAKiJ,EAAShM,IACjB,4BACC,8BAAOgM,EAAS9E,MAAY,6BAC3B8E,EAAS4H,YAAc,0BAAM/P,UAAU,gCAAgCmI,EAAS4H,aAAsB,MAExG,wBAAI/P,UAAU,eACb,4BAAQA,UAAWvL,KAAK26B,MAAM2M,UAAY,2BAA6B,kBAAmBG,QAASznC,KAAKosC,sBAAsB5nB,KAAKxkB,KAAM,CAAC0H,GAAIgM,EAAShM,GAAIkH,KAAM8E,EAAS9E,QAA1K,eAoCqD5O,QAInD,yBAAKuL,UAAWvL,KAAK26B,MAAM2M,UAAY,SAAW,cAAlD,wBAOF,yBAAK/7B,UAAU,gBACd,4BAAQwM,KAAK,SAASxM,UAAU,kBAAkBu+B,eAAa,QAAQrC,QAASznC,KAAK0pC,aAArF,eAUQ+B,a,6BC1If,yEAIIjuC,EAASL,EAAQ,IACjBsT,EAAOtT,EAAQ,GAEbwvC,E,kDAcL,WAAYhS,GAAQ,IAAD,8BAClB,cAAMA,IAgBPiS,cAAgB,WAEf,EAAKjS,MAAMkS,OAAO,EAAKC,YAnBL,EAsBnBC,iBAAmB,WAClB,QAA2B,MAAvB,EAAKD,UAAUl+B,OAAiB,EAAKk+B,UAAUl+B,KAAKrQ,QAChC,MAAvB,EAAKuuC,UAAUE,OAAiB,EAAKF,UAAUE,KAAKzuC,SAxBnC,EA+BnB0uC,sBAAwB,SAAC/iC,EAAMgjC,GAG3BA,IAGF,EAAKJ,UAAUE,KAAO9iC,EAAKvK,MAAM,KAAK,GAAGf,QAAQ,MAAO,OACxD,EAAKguC,kBAtCY,EA0CnBO,qBAAuB,WACtB,EAAKnS,UAAS,SAACuO,GAAD,OACbA,EAAU6D,oBACV,CAAEA,qBAAqB,GAEvB,CAAEC,eAAgB58B,EAAK9O,sBAMxB,EAAKmrC,UAAUE,KAAO,GACtB,EAAKJ,iBAtDa,EAyDnBU,iBAAmB,SAACxF,GACnB,EAAKgF,UAAUhF,EAAMM,OAAOF,QAAb,OAAiCJ,EAAMM,OAAOhiC,MAC7D,EAAKwmC,iBA3Da,EAmEnBW,aAAe,WACd,EAAKT,UAAUE,KAAO,GACtB,EAAKF,UAAUl+B,KAAO,GACtB,EAAKk+B,UAAUU,SAAW,GAC1B,EAAKZ,gBACL,EAAKjS,MAAMgP,WAxEO,EA2EnB8D,eAAiB,WAEZ,EAAKV,mBAKT,EAAKpS,MAAMgP,UAJVnsC,EAAO4iB,MAAM,wCAzEd,EAAK0sB,UAAYnS,EAAMmS,UAEvB,EAAK1R,MAAQ,CACZiS,eAAgB,KAChBD,oBAA8C,MAAxBzS,EAAMmS,UAAUE,MAAgBrS,EAAMmS,UAAUE,KAAKzuC,QAT1D,E,sEAaO88B,GACzBr7B,KAAK8sC,UAAYzR,EAAUyR,Y,+BAwE3B,OACC,yBAAKvhC,UAAU,gBAAgB7H,MAAO,CAACwjC,QAAQ,SAAUC,SAAS,KAAKC,KAAK,UAC3E,yBAAK77B,UAAU,gBACd,yBAAKA,UAAU,iBAEd,yBAAKA,UAAU,gBACd,4BAAQwM,KAAK,SAASxM,UAAU,QAAQu+B,eAAa,QAAQrC,QAASznC,KAAKytC,gBAA3E,QACA,wBAAIliC,UAAU,eAAevL,KAAK26B,MAAM92B,QAGzC,yBAAK0H,UAAU,cAEbvL,KAAKo7B,MAAMgS,oBACX,yBAAK7hC,UAAU,4BACd,yBAAK4vB,IAAK,yBAA2Bn7B,KAAK8sC,UAAUE,OACpD,4BAAQj1B,KAAK,SAASxM,UAAU,4BAA4Bk8B,QAASznC,KAAKmtC,sBAA1E,SAGD,yBAAK5hC,UAAU,4BACd,kBAAC,IAAD,CAAWmiC,SAAS,MAAMC,SAAS,MAAM7G,gBAAgB,mBAAmB8G,SAAS,aAAaC,QAAQ,MAAMC,MAAO9tC,KAAKitC,sBAAuBc,MAAO/tC,KAAKo7B,MAAMiS,iBAE5I,MAAvBrtC,KAAK8sC,UAAUE,MAAgBhtC,KAAK8sC,UAAUE,KAAKzuC,OACpD,4BAAQwZ,KAAK,SAASxM,UAAU,4BAA4Bk8B,QAASznC,KAAKmtC,sBAA1E,QACA,MAIH,yBAAK5hC,UAAU,cACd,2BAAOwM,KAAK,OAAOxM,UAAU,eAAe7D,GAAG,iBAAiBsmC,aAAW,OAAOxB,YAAY,OAAOpmC,MAAOpG,KAAK26B,MAAMmS,UAAUl+B,KAAM69B,SAAUzsC,KAAKstC,iBAAkBZ,aAAa,SAEtL,yBAAKnhC,UAAU,aAAa7H,MAAO,CAACwmC,aAAc,IACjD,8BAAU3+B,UAAU,eAAe7D,GAAG,qBAAqBsmC,aAAW,WAAWxB,YAAY,WAAWyB,KAAK,IAAI7nC,MAAOpG,KAAK26B,MAAMmS,UAAUU,SAAUf,SAAUzsC,KAAKstC,iBAAkBZ,aAAa,UAIvM,yBAAKnhC,UAAU,eAAe7H,MAAO,CAAC2jC,UAAW,WAC1C,4BAAQtvB,KAAK,SAASxM,UAAU,kBAAkBk8B,QAASznC,KAAKutC,cAAc,uBAAGhiC,UAAU,gBAA3F,WACN,4BAAQwM,KAAK,SAASxM,UAAU,kBAAkBk8B,QAASznC,KAAKytC,gBAAgB,uBAAGliC,UAAU,gBAA7F,iB,GAzIsBowB,IAAMC,WAA7B+Q,EAUE9Q,aAAe,CACrBh4B,MAAO,aAwIM8oC,a,6BCrJf,SAASuB,EAAMC,EAAGC,EAAGC,GACnBruC,KAAKmuC,EAAIA,EACTnuC,KAAKouC,EAAIA,EACTpuC,KAAKquC,KAAOA,IAAQ,IAAIntC,MAAOG,UANjCitC,OAAOC,eAAepjC,EAAS,aAAc,CAC3C/E,OAAO,IAQT8nC,EAAMruC,UAAU2uC,aAAe,SAAUC,GACvC,OAAOzuC,KAAKquC,OAASI,EAAMJ,KAAOruC,KAAK0uC,WAAWD,IAAUzuC,KAAKquC,KAAOI,EAAMJ,MAAQ,GAGxFH,EAAMruC,UAAU6uC,WAAa,SAAUD,GACrC,OAAOttC,KAAKqE,KAAKrE,KAAKwtC,IAAI3uC,KAAKmuC,EAAIM,EAAMN,EAAG,GAAKhtC,KAAKwtC,IAAI3uC,KAAKouC,EAAIK,EAAML,EAAG,KAG9EjjC,EAAQqH,QAAU07B,G,8BCnBlB,2BAGI19B,EAAIrT,EAAQ,IACZyxC,EAAWzxC,EAAQ,KAEnB0xC,EAAelT,IAAM+P,YAAY,CAAC,YAAD,eAWpCC,gBAAiB,WAChB,MAAO,CACNmD,oBAAqB,KACrBhY,aAAc,GACdiY,mBAAoB,GACpBzH,WAAW,IAIb0H,qBAAsB,SAASC,EAASC,EAAe/J,GACtD,IAAIgK,EAAS,GACb,IAAK,IAAIvJ,KAASqJ,EAEK,MAAlB9J,GAA4BS,GAAST,GAKzCgK,EAAOv8B,KACN,yBAAKnI,IAAKm7B,EAAOr6B,UAAW,iCAAsE,GAAlC2jC,EAActJ,GAAOC,WAAkBr1B,EAAEmE,QAAQs6B,EAAQrJ,GAAO7M,UAAa,aAAe,KAC3J,yBAAKxtB,UAAU,gBAAgB67B,KAAK,MAAM1/B,GAAI,aAAek+B,GAC5D,wBAAIr6B,UAAU,eACb,uBAAG67B,KAAK,SAASuB,cAAY,WAAWC,KAAM,gBAAkBhD,GAAO,8BAAyB,MAAlBT,EAAyB,KAAO8J,EAAQrJ,GAAOh3B,MAAY,yBAAKrD,UAAU,aAAa2jC,EAActJ,GAAOC,cAG5L,yBAAKt6B,UAAW,2BAA+C,MAAlB45B,EAAyB,MAAQ,IAAKiC,KAAK,WAAW1/B,GAAI,eAAiBk+B,GACpHp1B,EAAEmE,QAAQs6B,EAAQrJ,GAAOE,YAAY9lC,KAAK26B,MAAMyU,gBAAkJ,KAAhI,kBAACR,EAAD,CAAU9gB,MAAOmhB,EAAQrJ,GAAOE,YAAY9lC,KAAK26B,MAAMyU,eAAgB1W,WAAYkN,EAAO0B,UAAWtnC,KAAK26B,MAAM2M,YAElL92B,EAAEmE,QAAQs6B,EAAQrJ,GAAO7M,UAAoI,KAAxH,yBAAKxtB,UAAU,cAAcvL,KAAKgvC,qBAAqBC,EAAQrJ,GAAO7M,SAAUmW,EAActJ,GAAO7M,cAKjJ,OAAOoW,GAER5C,OAAQ,WACP,OACC,yBAAKhhC,UAAU,uBAAuB67B,KAAK,WAC1C,yBAAK77B,UAAWvL,KAAK26B,MAAM2M,UAAY,yBAA2B,UAAU,yBAAK/7B,UAAWvL,KAAK26B,MAAM2M,UAAY,gBAAkB,MAEpI92B,EAAEmE,QAAQ3U,KAAK26B,MAAM7D,cAGtB,yBAAKvrB,UAAWvL,KAAK26B,MAAM2M,UAAY,SAAW,cAAlD,0CAFAtnC,KAAKgvC,qBAAqBhvC,KAAK26B,MAAM7D,aAAc92B,KAAK26B,MAAMoU,mBAAoB/uC,KAAK26B,MAAMmU,yBAWlFD,a,+BCrEf,uEAMMQ,E,4MA8BLnD,uBAAyB,SAACpE,GACzB,IAAMntB,EAAamtB,EAAMM,OAAOhiC,MAChC,EAAKu0B,MAAMsR,SAAStxB,EAAY,I,EAGjCwxB,uBAAyB,SAACrE,GACzBA,EAAMC,iBAEN,IAAMntB,EAA4C,QAA/BktB,EAAMM,OAAOF,QAAb,IACjB,EAAKvN,MAAM/f,WAAa,EAAI,EAAK+f,MAAM/f,WAAa,EAAI,EACxB,MAA/B,EAAK+f,MAAMkR,kBAA4B,EAAKlR,MAAM/f,WAAa,EAAK+f,MAAMkR,iBAAoB,EAAKlR,MAAM/f,WAAa,EAAI,EAAK+f,MAAM/f,WAErIA,GAAc,EAAK+f,MAAM/f,YAC3B,EAAK+f,MAAMsR,SAAS,EAAKtR,MAAMhgB,WAAYC,I,EAI7C00B,wBAA0B,SAACxH,GAC1B,IAAIp0B,EAAW,CACd,GAAMo0B,EAAMM,OAAOF,QAAb,GACN,KAAQJ,EAAMM,OAAOF,QAAb,KACR,uBAA0BJ,EAAMM,OAAOF,QAAb,UAE3B,EAAKvN,MAAM0N,SAAS30B,I,EAGrBg2B,YAAc,WACb,EAAK/O,MAAM2R,Y,EAGZiD,kBAAoB,SAAC77B,GAAD,OACnB,wBAAIjJ,IAAKiJ,EAAShM,IACjB,4BACC,8BAAOgM,EAAS9E,MAAY,6BAC3B8E,EAAS4H,YAAc,0BAAM/P,UAAU,gCAAgCmI,EAAS4H,aAAsB,MAExG,wBAAI/P,UAAU,eACb,4BAAQA,UAAW,EAAKovB,MAAM2M,UAAY,2BAA6B,kBACtEuB,UAASn1B,EAAShM,GAAI8nC,YAAW97B,EAAS9E,KAAM6gC,gBAAe/7B,EAASg8B,uBAAwBjI,QAAS,EAAK6H,yBAD/G,a,kEAxCFtvC,KAAK26B,MAAMsR,SAASjsC,KAAK26B,MAAMhgB,WAAY3a,KAAK26B,MAAM/f,c,+BA+CtD,OACC,yBAAKrP,UAAU,gBAAgB7H,MAAO,CAACwjC,QAAQ,SAAUC,SAAS,KAAKC,KAAK,UAC3E,yBAAK77B,UAAU,eAAe7H,MAAO,CAACisC,OAAQ,IAC7C,yBAAKpkC,UAAU,iBAEd,yBAAKA,UAAU,gBACd,4BAAQwM,KAAK,SAASxM,UAAU,QAAQu+B,eAAa,QAAQrC,QAASznC,KAAK0pC,aAA3E,QACA,wBAAIn+B,UAAU,eAAd,oBAGD,yBAAKA,UAAU,cACd,2BAAOwM,KAAK,OAAOxM,UAAU,eAAe7D,GAAG,kBAAkB8kC,YAAY,SAASpmC,MAAOpG,KAAK26B,MAAMhgB,WAAY8xB,SAAUzsC,KAAKksC,uBAAwBQ,aAAa,QAExK,yBAAKnhC,UAAU,mDACd,kBAAC,IAAD,CAASD,UAAWtL,KAAK26B,MAAM2M,YAC/B,kBAAC,IAAD,CAAmBh8B,WAAYtL,KAAK26B,MAAM2M,UAAW/lB,KAAM,CAACN,KAAMjhB,KAAK26B,MAAM/f,WAAYoG,SAAUhhB,KAAK26B,MAAM9f,eAAgBa,MAAO1b,KAAK26B,MAAMiR,YAAajwB,WAAY3b,KAAK26B,MAAMkR,oBACpL,6BACC,wBAAItgC,UAAU,SACb,wBAAIA,UAAoC,GAAzBvL,KAAK26B,MAAM/f,WAAkB,oBAAsB,YACjE,uBAAGguB,KAAK,IAAIwB,WAAS,OAAO3C,QAASznC,KAAKmsC,wBAAwB,0BAAM9B,cAAY,QAAlB,KAAlE,UAED,wBAAI9+B,UAA2C,MAA/BvL,KAAK26B,MAAMkR,kBAA4B7rC,KAAK26B,MAAMkR,kBAAoB,GAAK7rC,KAAK26B,MAAM/f,YAAc5a,KAAK26B,MAAMkR,iBAAoB,gBAAkB,QACpK,uBAAGjD,KAAK,IAAIwB,WAAS,OAAO3C,QAASznC,KAAKmsC,wBAA1C,QAAuE,0BAAM9B,cAAY,QAAlB,SAK1ErqC,KAAK26B,MAAMmR,cAAcvtC,OACzB,2BAAOgN,UAAU,oCAChB,+BACGvL,KAAK26B,MAAMmR,cAAc/hC,IAAI/J,KAAKuvC,qBAItC,yBAAKhkC,UAAWvL,KAAK26B,MAAM2M,UAAY,SAAW,cAAlD,wBAOF,yBAAK/7B,UAAU,gBACd,4BAAQwM,KAAK,SAASxM,UAAU,kBAAkBu+B,eAAa,QAAQrC,QAASznC,KAAK0pC,aAArF,gB,GApH0B/N,IAAMC,WAAjCyT,EAcExT,aAAe,CACrBlhB,WAAY,GACZC,WAAY,EACZC,eAAgB,KAChB+wB,YAAa,KACbC,iBAAkB,KAClBC,cAAe,GACfxE,WAAW,GAyGE+H,a,8BClIff,OAAOC,eAAepjC,EAAS,aAAc,CAC3C/E,OAAO,IAGT,IAAIwpC,EAAe,WAAc,SAASC,EAAiBzH,EAAQzN,GAAS,IAAK,IAAIt8B,EAAI,EAAGA,EAAIs8B,EAAMp8B,OAAQF,IAAK,CAAE,IAAIyxC,EAAanV,EAAMt8B,GAAIyxC,EAAWC,WAAaD,EAAWC,aAAc,EAAOD,EAAWE,cAAe,EAAU,UAAWF,IAAYA,EAAWG,UAAW,GAAM3B,OAAOC,eAAenG,EAAQ0H,EAAWrlC,IAAKqlC,IAAiB,OAAO,SAAUI,EAAaC,EAAYC,GAAiJ,OAA9HD,GAAYN,EAAiBK,EAAYrwC,UAAWswC,GAAiBC,GAAaP,EAAiBK,EAAaE,GAAqBF,GAA7gB,GAIfG,EAAUC,EAFDnzC,EAAQ,IAMjBozC,EAAUD,EAFDnzC,EAAQ,MAMjBqzC,EAAWF,EAFDnzC,EAAQ,MAIlBszC,EAAQtzC,EAAQ,KAEpB,SAASmzC,EAAuBI,GAAO,OAAOA,GAAOA,EAAIC,WAAaD,EAAM,CAAEl+B,QAASk+B,GAQvF,IAAIE,EAAY,SAAUC,GAGxB,SAASD,EAAUjW,IATrB,SAAyBmW,EAAUZ,GAAe,KAAMY,aAAoBZ,GAAgB,MAAM,IAAIa,UAAU,qCAU5GC,CAAgBhxC,KAAM4wC,GAEtB,IAAIK,EAVR,SAAoCC,EAAM7yB,GAAQ,IAAK6yB,EAAQ,MAAM,IAAIC,eAAe,6DAAgE,OAAO9yB,GAAyB,kBAATA,GAAqC,oBAATA,EAA8B6yB,EAAP7yB,EAUlN+yB,CAA2BpxC,MAAO4wC,EAAUS,WAAa/C,OAAOgD,eAAeV,IAAYvyB,KAAKre,KAAM26B,IA6BlH,OA3BAsW,EAAMvtC,MAAQutC,EAAMtW,MAAMj3B,OAAS,GACnCutC,EAAMvtC,MAAMqjC,MAAQkK,EAAMvtC,MAAMqjC,OAAS,OACzCkK,EAAMvtC,MAAMkjC,OAASqK,EAAMvtC,MAAMkjC,QAAU,OAC3CqK,EAAMvtC,MAAM6tC,cAAgB,OAC5BN,EAAMvtC,MAAM8tC,YAAc,OAC1BP,EAAMQ,SAAW,EAEjBR,EAAMS,gBAAkBT,EAAMS,gBAAgBltB,KAAKysB,GACnDA,EAAMU,gBAAkBV,EAAMU,gBAAgBntB,KAAKysB,GACnDA,EAAMW,cAAgBX,EAAMW,cAAcptB,KAAKysB,GAC/CA,EAAMY,iBAAmBZ,EAAMY,iBAAiBrtB,KAAKysB,GACrDA,EAAMa,iBAAmBb,EAAMa,iBAAiBttB,KAAKysB,GACrDA,EAAMc,gBAAkBd,EAAMc,gBAAgBvtB,KAAKysB,GACnDA,EAAMe,eAAiBf,EAAMe,eAAextB,KAAKysB,GACjDA,EAAMgB,YAAchB,EAAMgB,YAAYztB,KAAKysB,GAC3CA,EAAMiB,aAAejB,EAAMiB,aAAa1tB,KAAKysB,GAC7CA,EAAMkB,UAAYlB,EAAMkB,UAAU3tB,KAAKysB,GACvCA,EAAMmB,cAAgBnB,EAAMmB,cAAc5tB,KAAKysB,GAC/CA,EAAMoB,cAAgBpB,EAAMoB,cAAc7tB,KAAKysB,GAC/CA,EAAMqB,YAAcrB,EAAMqB,YAAY9tB,KAAKysB,GAC3CA,EAAMsB,SAAWtB,EAAMsB,SAAS/tB,KAAKysB,GACrCA,EAAMuB,qBAAuBvB,EAAMuB,qBAAqBhuB,KAAKysB,GAC7DA,EAAMwB,UAAYxB,EAAMwB,UAAUjuB,KAAKysB,GACvCA,EAAMyB,UAAYzB,EAAMyB,UAAUluB,KAAKysB,GACvCA,EAAM0B,QAAU1B,EAAM0B,QAAQnuB,KAAKysB,GACnCA,EAAMlD,MAAQkD,EAAMlD,MAAMvpB,KAAKysB,GAC/BA,EAAM2B,MAAQ3B,EAAM2B,MAAMpuB,KAAKysB,GACxBA,EA8TT,OAnWF,SAAmB4B,EAAUC,GAAc,GAA0B,oBAAfA,GAA4C,OAAfA,EAAuB,MAAM,IAAI/B,UAAU,kEAAoE+B,GAAeD,EAAShzC,UAAYyuC,OAAOyE,OAAOD,GAAcA,EAAWjzC,UAAW,CAAEmzC,YAAa,CAAE5sC,MAAOysC,EAAU9C,YAAY,EAAOE,UAAU,EAAMD,cAAc,KAAe8C,IAAYxE,OAAO2E,eAAiB3E,OAAO2E,eAAeJ,EAAUC,GAAcD,EAASxB,UAAYyB,GAG/dI,CAAUtC,EAAWC,GAqCrBjB,EAAagB,EAAW,CAAC,CACvBnmC,IAAK,oBACLrE,MAAO,WACLpG,KAAKmzC,qBAAuBnzC,KAAK26B,MAAMwY,sBAAwB,GAC/DnzC,KAAK0tC,SAAW1tC,KAAK26B,MAAM+S,UAAY,GACvC1tC,KAAK2tC,SAAW3tC,KAAK26B,MAAMgT,UAAY,IACvC3tC,KAAKozC,SAAWpzC,KAAK26B,MAAMyY,UAAY,GACvCpzC,KAAKqzC,iBAAmBrzC,KAAKozC,UAAW,EAAI3C,EAAM2C,UAAUpzC,KAAKkyC,aAAclyC,KAAKozC,UAAYpzC,KAAKkyC,aACrGlyC,KAAKqzC,iBAAmBrzC,KAAKkyC,aAC7BlyC,KAAKszC,QAAUtzC,KAAK26B,MAAM2Y,UAAYtzC,KAAK0tC,SAAW1tC,KAAK2tC,UAAY,EACvE3tC,KAAKuzC,SAAWvzC,KAAK26B,MAAM4Y,UAAY,QACvCvzC,KAAK8mC,gBAAkB9mC,KAAK26B,MAAMmM,iBAAmB,gBACrD9mC,KAAK4tC,SAAW5tC,KAAK26B,MAAMiT,UAAY,YACvC5tC,KAAKwzC,KAAOxzC,KAAK26B,MAAM6Y,OAAQ,EAC/BxzC,KAAKkb,KAAOlb,KAAK26B,MAAMzf,OAAQ,EAC/Blb,KAAK6tC,QAAU7tC,KAAK26B,MAAMkT,SAAW,EAErC,IAAI4F,EAASzzC,KAAKyzC,OAClBA,EAAO1M,MAAQ0M,EAAOC,YACtBD,EAAO7M,OAAS6M,EAAOE,aACvB3zC,KAAK4zC,IAAMH,EAAOI,WAAW,MAC7B7zC,KAAK+tC,UAEN,CACDtjC,IAAK,4BACLrE,MAAO,SAAmCi1B,GACpCA,EAAU0S,OAAS1S,EAAU0S,QAAU/tC,KAAKyxC,WAC9CzxC,KAAKyxC,SAAWpW,EAAU0S,MAC1B/tC,KAAK+tC,WAGR,CACDtjC,IAAK,kBACLrE,MAAO,SAAyB0hC,GACT,IAAjBA,EAAMgM,SACR9zC,KAAK+zC,iBAAkB,EACvB/zC,KAAKiyC,YAAYnK,MAGpB,CACDr9B,IAAK,kBACLrE,MAAO,SAAyB0hC,GAC1B9nC,KAAK+zC,iBACP/zC,KAAKqzC,iBAAiBvL,KAGzB,CACDr9B,IAAK,gBACLrE,MAAO,SAAuB0hC,GACP,IAAjBA,EAAMgM,QAAgB9zC,KAAK+zC,kBAC7B/zC,KAAK+zC,iBAAkB,EACvB/zC,KAAKmyC,UAAUrK,MAGlB,CACDr9B,IAAK,mBACLrE,MAAO,SAA0B0hC,GACV,IAAjBA,EAAMgM,QAAgB9zC,KAAK+zC,kBAC7B/zC,KAAK+zC,iBAAkB,EACvB/zC,KAAKmyC,UAAUrK,MAGlB,CACDr9B,IAAK,mBACLrE,MAAO,SAA0B0hC,GAC/B,GAAmC,IAA/BA,EAAMkM,cAAcz1C,OAAc,CACpC,IAAI01C,EAAQnM,EAAMoM,eAAe,GACjCl0C,KAAKiyC,YAAYgC,MAGpB,CACDxpC,IAAK,kBACLrE,MAAO,SAAyB0hC,GAC9BA,EAAMC,iBACN,IAAIkM,EAAQnM,EAAMkM,cAAc,GAChCh0C,KAAKqzC,iBAAiBY,KAEvB,CACDxpC,IAAK,iBACLrE,MAAO,SAAwB0hC,GACNA,EAAMM,SAAWpoC,KAAKyzC,SAE3C3L,EAAMC,iBACN/nC,KAAKmyC,UAAUrK,MAGlB,CACDr9B,IAAK,cACLrE,MAAO,SAAqB0hC,GAC1B9nC,KAAKkK,KAAK0I,KAAK,IACf5S,KAAK4yC,QACL5yC,KAAKkyC,aAAapK,GAEgB,oBAAvB9nC,KAAK26B,MAAMwZ,SACpBn0C,KAAK26B,MAAMwZ,QAAQrM,KAGtB,CACDr9B,IAAK,eACLrE,MAAO,SAAsB0hC,GAC3B,IAAIqG,EAAIrG,EAAMsM,QACVhG,EAAItG,EAAMuM,QAEVC,EAAQt0C,KAAKsyC,YAAYnE,EAAGC,GAE5BmG,EAAYv0C,KAAKuyC,SAAS+B,GAC1BE,EAAQD,EAAUC,MAClBC,EAASF,EAAUE,OAEnBD,GAASC,GACXz0C,KAAK0yC,UAAU8B,EAAOC,EAAOhG,MAAOgG,EAAOC,KAG7C10C,KAAKkK,KAAKlK,KAAKkK,KAAK3L,OAAS,GAAGqU,KAAK,CACnCu7B,EAAGmG,EAAMnG,EACTC,EAAGkG,EAAMlG,EACTC,KAAMiG,EAAMjG,SAGf,CACD5jC,IAAK,YACLrE,MAAO,WACL,IAAIuuC,EAAe30C,KAAK40C,OAAOr2C,OAAS,EACpC+1C,EAAQt0C,KAAK40C,OAAO,IAEnBD,GAAgBL,GACnBt0C,KAAK2yC,QAAQ2B,GAGiB,oBAArBt0C,KAAK26B,MAAMmT,OACpB9tC,KAAK26B,MAAMmT,MAAM9tC,KAAKoyC,gBAAiBpyC,KAAKqyC,mBAG/C,CACD5nC,IAAK,gBACLrE,MAAO,WACL,IAAI2R,EAAOjZ,OAAOkB,KAAK4tC,UAAUzyB,cAC7BjR,OAAO,EAaX,GALEA,GANElK,KAAKkb,MACE,EAAIu1B,EAAMv1B,MAAMlb,KAAKyzC,QAErBzzC,KAAKyzC,QAGAoB,UAAU98B,EAAM/X,KAAK6tC,SAKjC7tC,KAAKwzC,KAAM,CAKb,IAHA,IAAIsB,EAAaC,KAAK7qC,EAAKvK,MAAM,KAAK,IAClCq1C,EAAa9qC,EAAKvK,MAAM,KAAK,GAAGA,MAAM,KAAK,GAAGA,MAAM,KAAK,GACzDs1C,EAAQ,IAAIC,WAAWJ,EAAWv2C,QAC7BF,EAAI,EAAGA,EAAIy2C,EAAWv2C,OAAQF,GAAK,EAC1C42C,EAAM52C,GAAKy2C,EAAWt2C,WAAWH,GAEnC6L,EAAO,IAAIirC,KAAK,CAACF,GAAQ,CAAEl9B,KAAMi9B,IAEnC,OAAO9qC,IAER,CACDO,IAAK,gBACLrE,MAAO,WACN,OAAO,EAAIqqC,EAAM2E,eAAep1C,KAAKyzC,UAErC,CACDhpC,IAAK,cACLrE,MAAO,SAAqB+nC,EAAGC,EAAGC,GAChC,IAAIgH,EAAOr1C,KAAKyzC,OAAO6B,wBAEvB,OAAO,IAAI/E,EAAQ/9B,QAAQ27B,EAAIkH,EAAKE,KAAMnH,EAAIiH,EAAKG,IAAKnH,IAAQ,IAAIntC,MAAOG,aAE5E,CACDoJ,IAAK,WACLrE,MAAO,SAAkBkuC,GACvB,IAAIM,EAAS50C,KAAK40C,OAGlB,GADAA,EAAOhiC,KAAK0hC,GACRM,EAAOr2C,OAAS,EAAG,CAGC,IAAlBq2C,EAAOr2C,QAAcq2C,EAAOa,QAAQb,EAAO,IAE/C,IAAIv1C,GADE,EAAIoxC,EAAMiF,6BAA6Bd,EAAO,GAAIA,EAAO,GAAIA,EAAO,IAC7Dv1C,GAETC,GADE,EAAImxC,EAAMiF,6BAA6Bd,EAAO,GAAIA,EAAO,GAAIA,EAAO,IAC7De,GACTnB,EAAQ,IAAIhE,EAASh+B,QAAQoiC,EAAO,GAAIv1C,EAAIC,EAAIs1C,EAAO,IACvDH,EAASz0C,KAAKwyC,qBAAqBgC,GAIvC,OADAI,EAAOhqC,QACA,CAAE4pC,MAAOA,EAAOC,OAAQA,GAEjC,MAAO,KAER,CACDhqC,IAAK,uBACLrE,MAAO,SAA8BouC,GACnC,IAAIoB,EAAapB,EAAMoB,WACnBC,EAAWrB,EAAMqB,SACjBpB,EAAS,CAAEhG,MAAO,KAAMiG,IAAK,MAE7BoB,EAAW91C,KAAKmzC,qBAAuB0C,EAASrH,aAAaoH,IAAe,EAAI51C,KAAKmzC,sBAAwBnzC,KAAK+1C,aAElHC,EAAWh2C,KAAKi2C,YAAYH,GAQhC,OANArB,EAAOhG,MAAQzuC,KAAKk2C,UACpBzB,EAAOC,IAAMsB,EAEbh2C,KAAK+1C,aAAeD,EACpB91C,KAAKk2C,UAAYF,EAEVvB,IAER,CACDhqC,IAAK,cACLrE,MAAO,SAAqB0vC,GAC1B,OAAO30C,KAAK+F,IAAIlH,KAAK2tC,UAAYmI,EAAW,GAAI91C,KAAK0tC,YAEtD,CACDjjC,IAAK,YACLrE,MAAO,SAAmB+nC,EAAGC,EAAGv/B,GAC9B7O,KAAK4zC,IAAIuC,OAAOhI,EAAGC,GACnBpuC,KAAK4zC,IAAIwC,IAAIjI,EAAGC,EAAGv/B,EAAM,EAAG,EAAI1N,KAAKwE,IAAI,GACN,oBAAxB3F,KAAK26B,MAAM8R,UACpBzsC,KAAK26B,MAAM8R,UAAS,KAGvB,CACDhiC,IAAK,YACLrE,MAAO,SAAmBouC,EAAO6B,EAAYC,GAC3C,IAAIC,EAAaD,EAAWD,EACxBG,EAAYr1C,KAAKC,MAAMozC,EAAMj2C,UAEjCyB,KAAK4zC,IAAI6C,YAET,IAAK,IAAIp4C,EAAI,EAAGA,EAAIm4C,EAAWn4C,GAAK,EAAG,CAErC,IAAIq4C,EAAIr4C,EAAIm4C,EACRG,EAAKD,EAAIA,EACTE,EAAMD,EAAKD,EACXG,EAAI,EAAIH,EACRI,EAAKD,EAAIA,EACTE,EAAMD,EAAKD,EAEX1I,EAAI4I,EAAMvC,EAAMoB,WAAWzH,EAC/BA,GAAK,EAAI2I,EAAKJ,EAAIlC,EAAMwC,SAAS7I,EACjCA,GAAK,EAAI0I,EAAIF,EAAKnC,EAAMyC,SAAS9I,EACjCA,GAAKyI,EAAMpC,EAAMqB,SAAS1H,EAE1B,IAAIC,EAAI2I,EAAMvC,EAAMoB,WAAWxH,EAC/BA,GAAK,EAAI0I,EAAKJ,EAAIlC,EAAMwC,SAAS5I,EACjCA,GAAK,EAAIyI,EAAIF,EAAKnC,EAAMyC,SAAS7I,EACjCA,GAAKwI,EAAMpC,EAAMqB,SAASzH,EAE1B,IAAIrH,EAAQsP,EAAaO,EAAML,EAC/Bv2C,KAAKyyC,UAAUtE,EAAGC,EAAGrH,GAGvB/mC,KAAK4zC,IAAIsD,YACTl3C,KAAK4zC,IAAIuD,SAEV,CACD1sC,IAAK,UACLrE,MAAO,SAAiBkuC,GACtBt0C,KAAK4zC,IAAI6C,YACTz2C,KAAKyyC,UAAU6B,EAAMnG,EAAGmG,EAAMlG,EAAGpuC,KAAKszC,SACtCtzC,KAAK4zC,IAAIsD,YACTl3C,KAAK4zC,IAAIuD,SAEV,CACD1sC,IAAK,QACLrE,MAAO,WACLpG,KAAK4zC,IAAIwD,UAAYp3C,KAAK8mC,gBAC1B9mC,KAAK4zC,IAAIyD,UAAU,EAAG,EAAGr3C,KAAKyzC,OAAO1M,MAAO/mC,KAAKyzC,OAAO7M,QACxD5mC,KAAK4zC,IAAI0D,SAAS,EAAG,EAAGt3C,KAAKyzC,OAAO1M,MAAO/mC,KAAKyzC,OAAO7M,QAEvD5mC,KAAKkK,KAAO,GACZlK,KAAK4yC,QAC8B,oBAAxB5yC,KAAK26B,MAAM8R,UACpBzsC,KAAK26B,MAAM8R,UAAS,KAGvB,CACDhiC,IAAK,QACLrE,MAAO,WACLpG,KAAK40C,OAAS,GACd50C,KAAK+1C,aAAe,EACpB/1C,KAAKk2C,WAAal2C,KAAK0tC,SAAW1tC,KAAK2tC,UAAY,EACnD3tC,KAAK4zC,IAAIwD,UAAYp3C,KAAKuzC,WAE3B,CACD9oC,IAAK,SACLrE,MAAO,WACL,IAAImxC,EAASv3C,KAEb,OAAOqwC,EAAQ79B,QAAQglC,cAAc,SAAU,CAC7C9zC,MAAO1D,KAAK0D,MACZ6H,UAAWvL,KAAK26B,MAAMpvB,UACtBksC,IAAK,SAAahE,GAChB8D,EAAO9D,OAASA,GAElBiE,YAAa13C,KAAK0xC,gBAClBiG,YAAa33C,KAAK2xC,gBAClBiG,UAAW53C,KAAK4xC,cAChBiG,aAAc73C,KAAK6xC,iBACnBiG,aAAc93C,KAAK8xC,iBACnBiG,YAAa/3C,KAAK+xC,gBAClBiG,WAAYh4C,KAAKgyC,qBAKhBpB,EAjWO,CAkWdP,EAAQ79B,QAAQopB,WAElBzwB,EAAQqH,QAAUo+B,G,mKClYlB,mCAIIngC,EAAOtT,EAAQ,GAGf86C,EAAYtc,IAAM+P,YAAY,CAAC,YAAD,YASjCC,gBAAiB,WAChB,MAAO,CACNrE,WAAW,EACX4Q,6BAA6B,IAI/B3L,OAAQ,WACP,OACC,0BAAMhhC,UAAU,cACf,yBAAKA,UAAU,mBACd,yBAAKA,UAAU,YAAY4vB,IAAK1qB,EAAKnQ,UAAY,uBACjD,yBAAKiL,UAAU,eACd,2BAAOwM,KAAK,QAAQxM,UAAU,eAAeqD,KAAK,WAAW49B,YAAY,QAAQpmC,MAAOpG,KAAK26B,MAAMpZ,KAAKvf,SAAUyqC,SAAUzsC,KAAK26B,MAAM8R,SAAU0L,WAAW,EAAMzL,aAAa,MAAM0L,SAAUp4C,KAAK26B,MAAM2M,aAE3M,yBAAK/7B,UAAU,eACd,2BAAOwM,KAAK,WAAWxM,UAAU,eAAeqD,KAAK,WAAW49B,YAAY,WAAWpmC,MAAOpG,KAAK26B,MAAMpZ,KAAKtf,SAAUwqC,SAAUzsC,KAAK26B,MAAM8R,SAAUC,aAAa,MAAM0L,SAAUp4C,KAAK26B,MAAM2M,aAEhM,yBAAK/7B,UAAU,gBACbvL,KAAK26B,MAAMud,4BACX,yBAAK3sC,UAAU,YAAY67B,KAAK,SAC/B,4BAAQrvB,KAAK,SAASxM,UAAU,kBAAkBk8B,QAASznC,KAAK26B,MAAM0d,QAASD,SAAUp4C,KAAK26B,MAAM2M,WAApG,wBACA,4BAAQ/7B,UAAU,kBAAkBk8B,QAASznC,KAAK26B,MAAM2d,SAAUF,SAAUp4C,KAAK26B,MAAM2M,WAAvF,WAGD,4BAAQvvB,KAAK,SAASxM,UAAU,kBAAkBk8B,QAASznC,KAAK26B,MAAM0d,QAASD,SAAUp4C,KAAK26B,MAAM2M,WAApG,SAED,kBAAC,IAAD,CAAM/7B,UAAU,kBAAkBgtC,GAAG,wBAArC,qBAED,yBAAKhtC,UAAWvL,KAAK26B,MAAM2M,UAAY,yBAA2B,UAAU,yBAAK/7B,UAAWvL,KAAK26B,MAAM2M,UAAY,gBAAkB,OAEtI,yBAAK/7B,UAAU,mBAAmB4vB,IAAK1qB,EAAKnQ,UAAY,kCAM7C23C,a,6BCrDf,mCAIIxnC,EAAOtT,EAAQ,GAEfq7C,EAAW7c,IAAM+P,YAAY,CAAC,YAAD,WAKhCC,gBAAiB,WAChB,MAAO,CACNrE,WAAW,IAIbiF,OAAQ,WAwBP,OACC,yBAAKhhC,UAAU,YACd,yBAAKA,UAAWvL,KAAK26B,MAAM2M,UAAY,yBAA2B,UAAU,yBAAK/7B,UAAWvL,KAAK26B,MAAM2M,UAAY,gBAAkB,MAErItnC,KAAK26B,MAAM7b,MAAMvgB,OACjB,2BAAOgN,UAAU,mCAAmC7H,MAAO,CAACumC,UAAW,IACtE,+BACEjqC,KAAK26B,MAAM7b,MAAM/U,KA9BF,SAASsU,GAM5B,IAAIo6B,EAAyC,MAArBhoC,EAAKjR,SAASuE,KAAgBsa,EAAKnL,UAAU3U,QAAU8f,EAAKnL,UAAU,GAAG1O,SACjG,OACC,wBAAIiG,IAAK4T,EAAKogB,SAAUlzB,UAAW8S,EAAKC,UAAY,UAAY,MAC/D,wBAAI/S,UAAU,YACb,8BAAO8S,EAAKq6B,YAAkB,6BAC7BD,EAAkB,0BAAMltC,UAAU,gCAAiCkF,EAAK9L,mCAAmC8L,EAAKjR,SAASuE,IAAK0M,EAAKjR,SAASwE,IAAKqa,EAAKnL,UAAU,GAAG1O,SAAU6Z,EAAKnL,UAAU,GAAGzO,WAAc,MAAe,KAC5N4Z,EAAKs6B,WAAa,0BAAMptC,UAAU,+BAA+B7H,MAAQ+0C,EAAkB,CAACG,WAAY,OAAS,MAAQv6B,EAAKs6B,WAAa,IAAMt6B,EAAK5H,UAAmB,KACzK4H,EAAKw6B,cAAgB,0BAAMttC,UAAU,+BAA+B7H,MAAS+0C,GAAmBp6B,EAAKs6B,WAAc,CAACC,WAAY,OAAS,MAApH,aAA8I,MAErK,wBAAIrtC,UAAU,uBAAuB7H,MAAO,CAACo1C,YAAa,IACzD,kBAAC,IAAD,CAAMvtC,UAAW8S,EAAKC,UAAY,2BAA8Bte,KAAK26B,MAAM2M,UAAY,2BAA6B,kBAAoBF,KAAK,SAASmR,GAAI,UAAYl6B,EAAKogB,UAAU,uBAAGlzB,UAAY8S,EAAKE,WAAaF,EAAKC,UAAa,cAAgB,sBAAxP,IAAmRD,EAAKE,UAAY,YAAeF,EAAKC,UAAY,YAAc,YAc7Ste,QAIvC,yBAAKuL,UAAWvL,KAAK26B,MAAM2M,UAAY,SAAW,cAAlD,gDASWkR,a,6BC7Df,2CAKIhoC,EAAIrT,EAAQ,IAEZ47C,EAAwBpd,IAAM+P,YAAY,CAAC,YAAD,wBAO7CC,gBAAiB,WAChB,MAAO,CACNqN,oBAAqB,GACrB1R,WAAW,IAGb2R,YAAa,SAASlkC,GACrB,OACC,wBAAItK,IAAKsK,EAAMnG,KAAMrD,UAAU,mBAC9B,yBAAKA,UAAU,OACd,yBAAKA,UAAU,YAAW,2BAAOA,UAAU,cAAcwJ,EAAM+C,QAC/D,yBAAKvM,UAAU,YAAW,0BAAMA,UAAU,gBAAgBvL,KAAK26B,MAAMjnB,SAASqB,EAAMnG,WAKxFsqC,cAAe,SAAS15C,EAAUuqC,GACjC,GAAyB,MAAtBvqC,EAASmU,WAA2C,GAAtBnU,EAASmU,UACzC,OAAO,KAGR,IAAIwlC,EAAcpP,EAAM,EACpBqP,EAAyC,MAAxB55C,EAAS+nC,aAA+C,IAAxB/nC,EAAS+nC,YAAqB/nC,EAAS+nC,YAAc,YAAc4R,EACxH,OACC,yBAAK1uC,IAAK0uC,EAAa5tC,UAAU,gCAAgC7H,MAAe,GAAPqmC,EAAW,CAACE,UAAW,GAAK,IACpG,yBAAK1+B,UAAU,gBAAgB67B,KAAK,MAAM1/B,GAAI,qBAAuByxC,GACpE,wBAAI5tC,UAAU,eACb,uBAAGA,UAAmB,GAAPw+B,EAAW,GAAK,YAAc3C,KAAK,SAASuB,cAAY,WAAW0Q,cAAY,0BAA0BzQ,KAAM,wBAA0BuQ,GACvJ,8BAAOC,GACP,uBAAG7tC,UAAU,mCACb,uBAAGA,UAAU,sCAIhB,yBAAKA,UAAW,2BAAoC,GAAPw+B,EAAW,MAAQ,IAAK3C,KAAK,WAAW1/B,GAAI,uBAAyByxC,GACjH,yBAAK5tC,UAAU,gCAEd,iCACC,yBAAKA,UAAU,OACd,yBAAKA,UAAU,YAAW,2BAAOA,UAAU,cAAjB,gBAC1B,yBAAKA,UAAU,YAAY/L,EAAS+nC,cAErC,yBAAKh8B,UAAU,OACd,yBAAKA,UAAU,YAAW,2BAAOA,UAAU,cAAjB,YAC1B,yBAAKA,UAAU,YAAY/L,EAAS85C,UAAU,6BAAO95C,EAAS+5C,YAE/D,yBAAKhuC,UAAU,OACd,yBAAKA,UAAU,YAAW,2BAAOA,UAAU,cAAjB,SAC1B,yBAAKA,UAAU,YAAY/L,EAASg6C,OAErC,yBAAKjuC,UAAU,OACd,yBAAKA,UAAU,YAAW,2BAAOA,UAAU,cAAjB,QAC1B,yBAAKA,UAAU,YAAY/L,EAASi6C,MAErC,yBAAKluC,UAAU,OACd,yBAAKA,UAAU,YAAW,2BAAOA,UAAU,cAAjB,aAC1B,yBAAKA,UAAU,YAAY/L,EAASgF,SAApC,KAAgDhF,EAASiF,iBAShEi1C,cAAe,SAAS1jC,EAAS+zB,GAChC,IAAI4P,EAAa5P,EAAM,EACnB6P,EAAkB,GACG,MAAtB5jC,EAAQqe,YAA4C,IAAtBre,EAAQqe,YACxCulB,EAAgBhnC,KAAKoD,EAAQqe,YAEN,MAArBre,EAAQse,WAA0C,IAArBte,EAAQse,WACvCslB,EAAgBhnC,KAAKoD,EAAQse,WAE9B,IAAIulB,EAAeD,EAAgBjqB,KAAK,KAGxC,OAFAkqB,EAAgC,IAAhBA,EAAqB,WAAaF,EAAaE,EAG9D,yBAAKpvC,IAAKkvC,EAAYpuC,UAAU,gCAAgC7H,MAAe,GAAPqmC,EAAW,CAACE,UAAW,GAAK,IACnG,yBAAK1+B,UAAU,gBAAgB67B,KAAK,MAAM1/B,GAAI,qBAAuBiyC,GACpE,wBAAIpuC,UAAU,eACb,uBAAGA,UAAmB,GAAPw+B,EAAW,GAAK,YAAc3C,KAAK,SAASuB,cAAY,WAAW0Q,cAAY,0BAA0BzQ,KAAM,wBAA0B+Q,GACvJ,8BAAOE,GACP,uBAAGtuC,UAAU,mCACb,uBAAGA,UAAU,sCAIhB,yBAAKA,UAAW,2BAAoC,GAAPw+B,EAAW,MAAQ,IAAK3C,KAAK,WAAW1/B,GAAI,uBAAyBiyC,GACjH,yBAAKpuC,UAAU,gCAEd,iCACC,yBAAKA,UAAU,OACd,yBAAKA,UAAU,YAAW,2BAAOA,UAAU,cAAjB,eAC1B,yBAAKA,UAAU,YAAYyK,EAAQqe,aAEpC,yBAAK9oB,UAAU,OACd,yBAAKA,UAAU,YAAW,2BAAOA,UAAU,cAAjB,cAC1B,yBAAKA,UAAU,YAAYyK,EAAQse,YAEpC,yBAAK/oB,UAAU,OACd,yBAAKA,UAAU,YAAW,2BAAOA,UAAU,cAAjB,UAC1B,yBAAKA,UAAU,YAAYyK,EAAQwe,QAEpC,yBAAKjpB,UAAU,OACd,yBAAKA,UAAU,YAAW,2BAAOA,UAAU,cAAjB,iBAC1B,yBAAKA,UAAU,YAAYyK,EAAQ8jC,eAEpC,yBAAKvuC,UAAU,OACd,yBAAKA,UAAU,YAAW,2BAAOA,UAAU,cAAjB,eAC1B,yBAAKA,UAAU,YAAYyK,EAAQ+jC,aAEpC,yBAAKxuC,UAAU,OACd,yBAAKA,UAAU,YAAW,2BAAOA,UAAU,cAAjB,QAC1B,yBAAKA,UAAU,YAAYyK,EAAQgkC,WAS1CC,iBAAkB,WACjB,IAAI9K,EAAS,GAsEb,OApEAA,EAAOv8B,KACN,yBAAKnI,IAAI,UAAUc,UAAU,iCAC5B,yBAAKA,UAAU,8BAA8B67B,KAAK,MAAM1/B,GAAG,qBAC1D,wBAAI6D,UAAU,eACb,uBAAG67B,KAAK,SAASuB,cAAY,WAAW0Q,cAAY,sBAAsBzQ,KAAK,wBAC9E,yCACA,uBAAGr9B,UAAU,mCACb,uBAAGA,UAAU,qCAGf,kBAAC,IAAD,CAAMA,UAAW,cAAgBvL,KAAK26B,MAAM2M,UAAY,YAAc,IAAKF,KAAK,SAASmR,GAAIv4C,KAAK26B,MAAMqe,oBAAsB,gBAAgB,uBAAGztC,UAAU,iBAE5J,yBAAKA,UAAU,6BAA6B67B,KAAK,WAAW1/B,GAAG,uBAC9D,wBAAI6D,UAAU,cACZvL,KAAK26B,MAAMuf,eAAenwC,IAAI/J,KAAKi5C,iBAMxC9J,EAAOv8B,KACN,yBAAKnI,IAAI,YAAYc,UAAU,iCAC9B,yBAAKA,UAAU,8BAA8B67B,KAAK,MAAM1/B,GAAG,qBAC1D,wBAAI6D,UAAU,eACb,uBAAGA,UAAU,YAAY67B,KAAK,SAASuB,cAAY,WAAW0Q,cAAY,sBAAsBzQ,KAAK,wBACpG,2CACA,uBAAGr9B,UAAU,mCACb,uBAAGA,UAAU,qCAGf,kBAAC,IAAD,CAAMA,UAAW,cAAgBvL,KAAK26B,MAAM2M,UAAY,YAAc,IAAKF,KAAK,SAASmR,GAAIv4C,KAAK26B,MAAMqe,oBAAsB,kBAAkB,uBAAGztC,UAAU,iBAE9J,yBAAKA,UAAU,0BAA0B67B,KAAK,WAAW1/B,GAAG,uBAC3D,yBAAK6D,UAAU,gCAEd,yBAAKA,UAAU,cAAc7D,GAAG,yBAAyBhE,MAAO,CAACwmC,aAAc,GAAI9C,KAAK,WACtFpnC,KAAK26B,MAAMjnB,SAASR,UAAUnJ,IAAI/J,KAAKk5C,oBAQ7C/J,EAAOv8B,KACN,yBAAKnI,IAAI,WAAWc,UAAU,iCAC7B,yBAAKA,UAAU,8BAA8B67B,KAAK,MAAM1/B,GAAG,qBAC1D,wBAAI6D,UAAU,eACb,uBAAGA,UAAU,YAAY67B,KAAK,SAASuB,cAAY,WAAW0Q,cAAY,sBAAsBzQ,KAAK,wBACpG,0CACA,uBAAGr9B,UAAU,mCACb,uBAAGA,UAAU,qCAGf,kBAAC,IAAD,CAAMA,UAAW,cAAgBvL,KAAK26B,MAAM2M,UAAY,YAAc,IAAKF,KAAK,SAASmR,GAAIv4C,KAAK26B,MAAMqe,oBAAsB,iBAAiB,uBAAGztC,UAAU,iBAE7J,yBAAKA,UAAU,0BAA0B67B,KAAK,WAAW1/B,GAAG,uBAC3D,yBAAK6D,UAAU,gCAEd,yBAAKA,UAAU,cAAc7D,GAAG,yBAAyBhE,MAAO,CAACwmC,aAAc,GAAI9C,KAAK,WACtFpnC,KAAK26B,MAAMjnB,SAASL,SAAStJ,IAAI/J,KAAK05C,oBAQrCvK,GAER5C,OAAQ,WACP,IAAI4N,EAAY3pC,EAAE4pC,KAAKp6C,KAAK26B,MAAMjnB,UAClC,OACC,yBAAKnI,UAAU,uBAAuB7D,GAAG,qBAAqB0/B,KAAK,WAClE,kBAAC,IAAD,CAAS97B,UAAWtL,KAAK26B,MAAM2M,YAE9B6S,EAAU57C,OAAS,EACpByB,KAAKi6C,mBAEL,yBAAK1uC,UAAWvL,KAAK26B,MAAM2M,UAAY,SAAW,cAAlD,sBASWyR,a,6BCpOf,uDAMMsB,E,kDAcL,WAAY1f,GAAQ,IAAD,8BAClB,cAAMA,IA2BP2S,iBAAmB,SAACxF,GACnB,EAAKpvB,cAAcovB,EAAMM,OAAOF,QAAb,OAAiCJ,EAAMM,OAAOhiC,MAEjE,EAAKk0C,uBA/Ba,EAkCnBA,oBAAsB,WAErB,EAAK3f,MAAMkS,OAAO,EAAKn0B,gBApCL,EAuCnB6hC,2BAA6B,SAACxlC,GAAD,OAC5B,yBAAKtK,IAAKsK,EAAMnG,KAAMrD,UAAU,cAC/B,2BAAOivC,QAAS,aAAezlC,EAAMnG,KAAMrD,UAAU,0BAAyB,2BAAOA,UAAU,cAAcwJ,EAAM+C,QACnH,yBAAKvM,UAAU,YACd,2BAAOwM,KAAK,OAAOxM,UAAU,eAAe7D,GAAI,aAAeqN,EAAMnG,KAAMo/B,aAAYj5B,EAAMnG,KAAMxI,MAAO,EAAKu0B,MAAMjiB,cAAc3D,EAAMnG,MAAO69B,SAAU,EAAKa,iBAAkBZ,aAAa,WApChM,EAAKh0B,cAAgBiiB,EAAMjiB,cAPT,E,sEAUO2iB,GAGzBr7B,KAAK0Y,cAAgB2iB,EAAU3iB,gB,+BAoC/B,OACC,6BACC,yBAAKnN,UAAU,gCACd,yBAAKA,UAAU,gBAAgB67B,KAAK,MAAM1/B,GAAG,+BAC5C,wBAAI6D,UAAU,eAAd,YAED,yBAAKA,UAAU,6BAA6B67B,KAAK,WAAW1/B,GAAG,iCAC9D,yBAAK6D,UAAU,cACd,yBAAKA,UAAU,8BACbvL,KAAK26B,MAAMuf,eAAenwC,IAAI/J,KAAKu6C,gCAMxC,yBAAKhvC,UAAU,gBACd,yBAAKA,UAAU,YAAY67B,KAAK,SAC/B,4BAAQ77B,UAAU,kBAAkBk8B,QAASznC,KAAK26B,MAAM2d,UAAU,uBAAG/sC,UAAU,gBAA/E,WACA,4BAAQA,UAAU,kBAAkBk8B,QAASznC,KAAK26B,MAAM8f,YAAY,uBAAGlvC,UAAU,gBAAjF,gB,GAjFiCowB,IAAMC,WAyF9Bye,a,6BC/Ff,uDAII5pC,EAAOtT,EAAQ,GAEbu9C,E,kDAeL,WAAY/f,GAAQ,IAAD,8BAClB,cAAMA,IA2BPggB,kBAAoB,WACnB,EAAKjiC,cAAc,EAAK0iB,MAAMwf,6BAA6Bp2C,SAAiC,MAArBiM,EAAKjR,SAASuE,IAAc0M,EAAKjR,SAASuE,IAAM,GAAK,GAC5H,EAAK2U,cAAc,EAAK0iB,MAAMwf,6BAA6Bn2C,UAAkC,MAArBgM,EAAKjR,SAASwE,IAAcyM,EAAKjR,SAASwE,IAAM,GAAK,GAC7H,EAAK62C,sBAAsB,EAAKzf,MAAMwf,6BACtC,EAAK5f,SAAS,CAAE4f,4BAA6B,QAhC3B,EAmCnBE,yBAA2B,aAnCR,EAqCnBC,6BAA+B,SAACjT,GAC/B,IAAMvzB,EAAauzB,EAAMG,cAAcC,QAApB,GACnB,EAAKlN,SAAS,CAAE4f,4BAA6BrmC,IAC7C9D,EAAKxM,sBAxCa,EAuDnBqpC,iBAAmB,SAACxF,GACnB,IAAMM,EAASN,EAAMM,OACrB,EAAK1vB,cAAc0vB,EAAOF,QAAP,IAAsBE,EAAOF,QAAP,OAA2BE,EAAOhiC,MAE3E,EAAKy0C,sBAAsBzS,EAAOF,QAAP,KA3DT,EA8DnB2S,sBAAwB,SAAC/gC,GAExB,EAAK6gB,MAAMkS,OAAO,EAAKn0B,cAAeoB,IAhEpB,EAmEnBkhC,8BAAgC,WAC/B,IAAI7L,EAAS,GAET8L,EAAiB,EAErB,IAAI,IAAI1mC,KAAc,EAAKomB,MAAMjiB,cAChC,GAA2C,MAAxC,EAAKiiB,MAAMjiB,cAAcnE,GAAoB,CAC/C0mC,IAEA,IAAI7B,EACkD,MAApD,EAAKze,MAAMjiB,cAAcnE,GAAYgzB,aAA2E,IAApD,EAAK5M,MAAMjiB,cAAcnE,GAAYgzB,YAClG,EAAK5M,MAAMjiB,cAAcnE,GAAYgzB,YACrC,YAAc0T,EAGXlqC,EAAiB,GACjBsE,OAAC,EACL,IAAIA,EAAI,EAAGA,EAAI,EAAKslB,MAAMuf,eAAe37C,OAAQ8W,IACb,MAAhC,EAAKslB,MAAMuf,eAAe7kC,IAC5BtE,EAAe6B,KAAK,EAAKsoC,4BAA4B3mC,EAAY,EAAKomB,MAAMuf,eAAe7kC,KAK7F,IAAI8lC,EAEwB,MAA1B,EAAKxgB,MAAMygB,aAAuB,EAAKzgB,MAAMygB,aAAe7mC,GAClC,MAA1B,EAAKomB,MAAMygB,aAAyC,GAAlBH,EAIpC9L,EAAOv8B,KACN,yBAAKnI,IAAK8J,EAAYhJ,UAAU,gCAAgC7H,MAAwB,GAAhBu3C,EAAoB,CAAChR,UAAW,GAAK,IAC5G,yBAAK1+B,UAAU,gBAAgB67B,KAAK,MAAM1/B,GAAI,uBAAyB6M,GACtE,wBAAIhJ,UAAU,eACb,uBAAGA,UAAY4vC,EAAiB,GAAK,YAAc/T,KAAK,SAASuB,cAAY,WAAW0Q,cAAY,0BAA0BzQ,KAAM,0BAA4Br0B,GAC/J,8BAAO6kC,GACP,uBAAG7tC,UAAU,mCACb,uBAAGA,UAAU,sCAIhB,yBAAKA,UAAW,2BAA6B4vC,EAAiB,MAAQ,IAAK/T,KAAK,WAAW1/B,GAAI,yBAA2B6M,GACzH,yBAAKhJ,UAAU,cACd,yBAAKA,UAAU,8BACZwF,OAST,OAAOo+B,GAzHW,EA4HnB+L,4BAA8B,SAAC3mC,EAAYQ,GAAb,OAC7B,yBAAKtK,IAAKsK,EAAMnG,KAAMrD,UAAU,cAC/B,2BAAOivC,QAAS,YAAcjmC,EAAa,IAAMQ,EAAMnG,KAAMrD,UAAU,0BAAyB,2BAAOA,UAAU,cAAcwJ,EAAM+C,QACrI,yBAAKvM,UAAU,YACd,2BAAOwM,KAAK,OAAOxM,UAAU,eAAe7D,GAAI,YAAc6M,EAAa,IAAMQ,EAAMnG,KACtFi6B,UAASt0B,EAAYy5B,aAAYj5B,EAAMnG,KAAMxI,MAAO,EAAKu0B,MAAMjiB,cAAcnE,GAAYQ,EAAMnG,MAC/FwpC,UAA0B,YAAdrjC,EAAMnG,MAAoC,aAAdmG,EAAMnG,OAAwB,EAAKwsB,MAAMwf,6BAA+BrmC,EAChHk4B,SAAU,EAAKa,iBAAkBZ,aAAa,SAGjC,aAAd33B,EAAMnG,KACN,yBAAKrD,UAAU,2BAA2B7H,MAAO,CAACumC,UAAW,SAC5D,4BAAQ1+B,UAAU,kBAAkBs9B,UAASt0B,EAAYkzB,QAAS,EAAKsT,6BAA8B3C,SAAU,EAAKhd,MAAMwf,6BAA+BrmC,GACxJ,uBAAGhJ,UAAU,qBADd,IACsC,0BAAM7H,MAAO,CAAC23C,SAAU,SAAxB,0BAE9B,OApIX,EAAK3iC,cAAgBiiB,EAAMjiB,cAE3B,EAAK0iB,MAAQ,CACZwf,4BAA6B,MAVZ,E,sEAcOvf,GAGzBr7B,KAAK0Y,cAAgB2iB,EAAU3iB,gB,0CAI/BjI,EAAK3Q,kBAAkBE,KAAK26C,qB,6CAI5BlqC,EAAKvQ,qBAAqBF,KAAK26C,qB,+BAwH/B,OACC,6BACC,yBAAKpvC,UAAU,gCACd,yBAAKA,UAAU,gBAAgB67B,KAAK,MAAM1/B,GAAG,iCAC5C,wBAAI6D,UAAU,eAAd,cAED,yBAAKA,UAAU,6BAA6B67B,KAAK,WAAW1/B,GAAG,mCAC9D,yBAAK6D,UAAU,gCAEd,yBAAKA,UAAU,cAAc7D,GAAG,yBAAyBhE,MAAO,CAACwmC,aAAc,GAAI9C,KAAK,WACtFpnC,KAAKg7C,oCAOV,yBAAKzvC,UAAU,gBACd,yBAAKA,UAAU,YAAY67B,KAAK,SAC/B,4BAAQ77B,UAAU,kBAAkBk8B,QAASznC,KAAK26B,MAAM2d,UAAU,uBAAG/sC,UAAU,gBAA/E,WACA,4BAAQA,UAAU,kBAAkBk8B,QAASznC,KAAK26B,MAAM8f,YAAY,uBAAGlvC,UAAU,gBAAjF,gB,GApLmCowB,IAAMC,WA4LhC8e,a,6BClMf,uDAMMY,E,kDAeL,WAAY3gB,GAAQ,IAAD,8BAClB,cAAMA,IA2BP2S,iBAAmB,SAACxF,GACnB,IAAMM,EAASN,EAAMM,OACrB,EAAK1vB,cAAc0vB,EAAOF,QAAP,IAAsBE,EAAOF,QAAP,OAA2BE,EAAOhiC,MAE3E,EAAKm1C,qBAAqBnT,EAAOF,QAAP,KAhCR,EAmCnBqT,qBAAuB,SAAClhC,GAEvB,EAAKsgB,MAAMkS,OAAO,EAAKn0B,cAAe2B,IArCpB,EAwCnBmhC,6BAA+B,WAC9B,IAAIrM,EAAS,GAETsM,EAAgB,EAEpB,IAAI,IAAI3lC,KAAa,EAAK6kB,MAAMjiB,cAC/B,GAA0C,MAAvC,EAAKiiB,MAAMjiB,cAAc5C,GAAmB,CAC9C2lC,IAEA,IAAI7B,EAAkB,GAC+B,MAAlD,EAAKjf,MAAMjiB,cAAc5C,GAAWue,YAAwE,IAAlD,EAAKsG,MAAMjiB,cAAc5C,GAAWue,YAChGulB,EAAgBhnC,KAAK,EAAK+nB,MAAMjiB,cAAc5C,GAAWue,YAEN,MAAjD,EAAKsG,MAAMjiB,cAAc5C,GAAWwe,WAAsE,IAAjD,EAAKqG,MAAMjiB,cAAc5C,GAAWwe,WAC/FslB,EAAgBhnC,KAAK,EAAK+nB,MAAMjiB,cAAc5C,GAAWwe,WAE1D,IAAIulB,EAAeD,EAAgBjqB,KAAK,KACxCkqB,EAAgC,IAAhBA,EAAqB,WAAa4B,EAAgB5B,EAGlE,IAAI5oC,EAAgB,GAChBoE,OAAC,EACL,IAAIA,EAAI,EAAGA,EAAI,EAAKslB,MAAMuf,eAAe37C,OAAQ8W,IACb,MAAhC,EAAKslB,MAAMuf,eAAe7kC,IAC5BpE,EAAc2B,KAAK,EAAK8oC,2BAA2B5lC,EAAW,EAAK6kB,MAAMuf,eAAe7kC,KAK1F,IAAI8lC,EAEwB,MAA1B,EAAKxgB,MAAMygB,aAAuB,EAAKzgB,MAAMygB,aAAetlC,GAClC,MAA1B,EAAK6kB,MAAMygB,aAAwC,GAAjBK,EAIpCtM,EAAOv8B,KACN,yBAAKnI,IAAKqL,EAAWvK,UAAU,gCAAgC7H,MAAuB,GAAf+3C,EAAmB,CAACxR,UAAW,GAAK,IAC1G,yBAAK1+B,UAAU,gBAAgB67B,KAAK,MAAM1/B,GAAI,sBAAwBoO,GACrE,wBAAIvK,UAAU,eACb,uBAAGA,UAAY4vC,EAAiB,GAAK,YAAc/T,KAAK,SAASuB,cAAY,WAAW0Q,cAAY,0BAA0BzQ,KAAM,yBAA2B9yB,GAC9J,8BAAO+jC,GACP,uBAAGtuC,UAAU,mCACb,uBAAGA,UAAU,sCAIhB,yBAAKA,UAAW,2BAA6B4vC,EAAiB,MAAQ,IAAK/T,KAAK,WAAW1/B,GAAI,wBAA0BoO,GACxH,yBAAKvK,UAAU,cACd,yBAAKA,UAAU,8BACZ0F,OAST,OAAOk+B,GAnGW,EAsGnBuM,2BAA6B,SAAC5lC,EAAWf,GAAZ,OAC5B,yBAAKtK,IAAKsK,EAAMnG,KAAMrD,UAAU,cAC/B,2BAAOivC,QAAS,YAAc1kC,EAAY,IAAMf,EAAMnG,KAAMrD,UAAU,0BAAyB,2BAAOA,UAAU,cAAcwJ,EAAM+C,QACpI,yBAAKvM,UAAU,YACd,2BAAOwM,KAAK,OAAOxM,UAAU,eAAe7D,GAAI,YAAcoO,EAAY,IAAMf,EAAMnG,KAAMi6B,UAAS/yB,EAAWk4B,aAAYj5B,EAAMnG,KAAMxI,MAAO,EAAKu0B,MAAMjiB,cAAc5C,GAAWf,EAAMnG,MAAO69B,SAAU,EAAKa,iBAAkBZ,aAAa,WAnGhP,EAAKh0B,cAAgBiiB,EAAMjiB,cAPT,E,sEAUO2iB,GAGzBr7B,KAAK0Y,cAAgB2iB,EAAU3iB,gB,+BAmG/B,OACC,6BACC,yBAAKnN,UAAU,gCACd,yBAAKA,UAAU,gBAAgB67B,KAAK,MAAM1/B,GAAG,gCAC5C,wBAAI6D,UAAU,eAAd,aAED,yBAAKA,UAAU,6BAA6B67B,KAAK,WAAW1/B,GAAG,kCAC9D,yBAAK6D,UAAU,gCAEd,yBAAKA,UAAU,cAAc7D,GAAG,yBAAyBhE,MAAO,CAACwmC,aAAc,GAAI9C,KAAK,WACtFpnC,KAAKw7C,mCAOV,yBAAKjwC,UAAU,gBACd,yBAAKA,UAAU,YAAY67B,KAAK,SAC/B,4BAAQ77B,UAAU,kBAAkBk8B,QAASznC,KAAK26B,MAAM2d,UAAU,uBAAG/sC,UAAU,gBAA/E,WACA,4BAAQA,UAAU,kBAAkBk8B,QAASznC,KAAK26B,MAAM8f,YAAY,uBAAGlvC,UAAU,gBAAjF,gB,GAnJkCowB,IAAMC,WA2J/B0f,a,6BCjKf,uDAMIK,EAAYhgB,IAAM+P,YAAY,CAAC,YAAD,YAOjCC,gBAAiB,WAChB,MAAO,CACNrE,WAAW,IAIbiF,OAAQ,WAcP,OACC,yBAAKhhC,UAAU,YACd,kBAAC,IAAD,CAASD,UAAWtL,KAAK26B,MAAM2M,YAE/BtnC,KAAK26B,MAAM+D,OAAOngC,OAClB,2BAAOgN,UAAU,oCAChB,+BACEvL,KAAK26B,MAAM+D,OAAO30B,KApBF,SAASwY,GAC7B,OACC,wBAAI9X,IAAK8X,EAAM7a,GAAI6D,UAAWvL,KAAK26B,MAAMsJ,QAAQ1hB,EAAM7a,KAAO1H,KAAK26B,MAAMsJ,QAAQ1hB,EAAM7a,IAAI4W,UAAY,UAAY,MAClH,4BAAI,8BAAOiE,EAAM3T,MAAY,6BAAO2T,EAAMod,UAAUC,cAAgB,0BAAMr0B,UAAU,gCAAhB,cAAmE,MAEvIvL,KAAK26B,MAAMsJ,QAAQ3lB,UAAY,KAC/B,wBAAI/S,UAAU,eAAc,kBAAC,IAAD,CAAMA,WAAYvL,KAAK26B,MAAMsJ,QAAQ1hB,EAAM7a,KAAO1H,KAAK26B,MAAMsJ,QAAQ1hB,EAAM7a,IAAI4W,UAAY,kBAAoB,oBAAsBte,KAAK26B,MAAM2M,UAAY,YAAc,IAAKF,KAAK,SAASmR,GAAI,UAAYv4C,KAAK26B,MAAMihB,WAAa,WAAar5B,EAAM7a,IAAI,uBAAG6D,UAAU,0BAAzQ,aAcYvL,QAIzC,yBAAKuL,UAAWvL,KAAK26B,MAAM2M,UAAY,SAAW,cAAlD,yDASJp8B,EAAOC,QAAUwwC,G,kDCrDjB,mFAOME,GAFE1+C,EAAQ,I,4MAef2+C,YAAc,WACb,IAAK,IAAIhe,KAAW,EAAKnD,MAAMsJ,QAE9B,GAAc,eAAXnG,GAAuC,SAAXA,GAAiC,QAAXA,GAAgC,aAAXA,GAAqC,aAAXA,GAIlE,MAA/B,EAAKnD,MAAMsJ,QAAQnG,IAAqB,EAAKnD,MAAMsJ,QAAQnG,GAASv/B,OAAvE,CAIA,IAAI8W,OAAC,EACL,IAAIA,EAAI,EAAGA,EAAI,EAAKslB,MAAMsJ,QAAQnG,GAASv/B,OAAQ8W,IAClD,GAAqC,MAAlC,EAAKslB,MAAMsJ,QAAQnG,GAASzoB,GAC9B,OAAO,EAKV,OAAO,G,EAIR0mC,kBAAoB,SAACje,GAAD,OAAc,EAAKnD,MAAMsJ,QAAQnG,IAAY,EAAKnD,MAAMsJ,QAAQnG,GAASv/B,OAAS,EAAKo8B,MAAMsJ,QAAQnG,GAASv/B,OAAS,G,EAG3Iy9C,eAAiB,SAACz5B,EAAOwnB,EAAKkS,EAAKld,EAAQmd,GAA1B,OAChB,wBAAIzxC,IAAK8X,EAAM7a,IAAgB,MAAVq3B,EAAiB,IAAMmd,EAAc,IAAK3wC,UAAqB,MAAVwzB,GAAkBA,EAAOzgB,UAAY,UAAY,MAC1H,4BAAI,8BAAOiE,EAAM3T,MAAY,6BAAO2T,EAAMod,UAAUC,cAAgB,0BAAMr0B,UAAU,gCAAhB,cAAmE,MACvI,wBAAIA,UAAU,eACb,kBAAC,IAAD,CACCA,WAAsB,MAAVwzB,GAAkBA,EAAOzgB,UAAY,kBAAoB,oBAAsB,EAAKqc,MAAM2M,UAAY,YAAc,IAChIF,KAAK,SACLmR,GAAI,UAAY,EAAK5d,MAAMihB,WAAa,gBAAkBr5B,EAAM7a,GAAK,KAAiB,MAAVq3B,EAAiBmd,EAAc,EAAKH,kBAAkBx5B,EAAM7a,MACxI,uBAAG6D,UAAU,0BAJd,Y,EAUH4wC,4BAA8B,WAC7B,IACI99C,EADA+9C,EAAY,GAEhB,IAAI/9C,EAAI,EAAGA,EAAI,EAAKs8B,MAAM+D,OAAOngC,OAAQF,IAAK,CAC7C,IAAIkkB,EAAQ,EAAKoY,MAAM+D,OAAOrgC,GAC9B,GAAG,EAAKs8B,MAAMsJ,QAAQ1hB,EAAM7a,KAAO,EAAKizB,MAAMsJ,QAAQ1hB,EAAM7a,IAAInJ,OAAO,CACtE,IAAI8W,OAAC,EACL,IAAIA,EAAI,EAAGA,EAAI,EAAKslB,MAAMsJ,QAAQ1hB,EAAM7a,IAAInJ,OAAQ8W,IACb,MAAnC,EAAKslB,MAAMsJ,QAAQ1hB,EAAM7a,IAAI2N,IAC/B+mC,EAAUxpC,KAAK,EAAKopC,eAAez5B,EAAO,KAAM,KAAM,EAAKoY,MAAMsJ,QAAQ1hB,EAAM7a,IAAI2N,GAAIA,KAM3F,OACC,yBAAK5K,IAAI,0BAA0Bc,UAAU,iDAC5C,yBAAKA,UAAU,iBACd,wBAAIA,UAAU,eAAd,uBAED,2BAAOA,UAAU,uBAChB,+BACG6wC,M,EAQPC,kBAAoB,kBACnB,yBAAK5xC,IAAI,yBAAyBc,UAAU,iDAC3C,yBAAKA,UAAU,iBACd,wBAAIA,UAAU,eAAd,qBAED,2BAAOA,UAAU,uBAChB,+BACG,EAAKovB,MAAM+D,OAAO30B,IAAI,EAAKiyC,oB,uDAOhC,OACC,6BACC,kBAAC,IAAD,CAAS1wC,UAAWtL,KAAK26B,MAAM2M,YAE/BtnC,KAAK26B,MAAM+D,OAAOngC,OAChB,CACEyB,KAAK87C,cAAgB97C,KAAKm8C,8BAAgC,KAC5Dn8C,KAAKq8C,qBAGN,yBAAK9wC,UAAWvL,KAAK26B,MAAM2M,UAAY,SAAW,uBAAlD,gE,GA3GwB3L,IAAMC,YAA7BigB,EAQEhgB,aAAe,CACrByL,WAAW,GA2Gbp8B,EAAOC,QAAU0wC,G,kDCxHjB3wC,EAAOC,QAAU,CAChBmxC,WAAmB,EACnBC,eAAsB,EACtBC,eAAsB,EACtBC,oCAAqC,EACrCC,8BAAiC,I,6BCRlC,2BAGIC,EAAWx/C,EAAQ,KAGnBy/C,GAFQz/C,EAAQ,IAEAw+B,IAAM+P,YAAY,CAAC,YAAD,gBAYrCa,OAAQ,WACP,OACC,yBAAKhhC,UAAU,uBACd,yBAAKA,UAAU,iBAAgB,wBAAIA,UAAU,eAAevL,KAAK26B,MAAMkiB,MAAMjuC,OAE7E,wBAAIrD,UAAU,cACZvL,KAAK26B,MAAMkiB,MAAM9c,UAAUh2B,KAAI,SAAS+yC,GACxC,OAAS98C,KAAK26B,MAAMgH,YAAYmb,EAASp1C,KAAO1H,KAAK26B,MAAMgH,YAAYmb,EAASp1C,IAAI4zB,QAAW,kBAACqhB,EAAD,CAAUlyC,IAAKqyC,EAASp1C,GAAIo1C,SAAUA,EAAU/d,OAAQ/+B,KAAK26B,MAAMgH,YAAYmb,EAASp1C,IAAM1H,KAAK26B,MAAMgH,YAAYmb,EAASp1C,IAAM,GAAI+kC,SAAUzsC,KAAK26B,MAAM8R,WAAe,OACzQzsC,YAOO48C,a,6BCjCf,2CAKA3/C,OAAOD,EAAIA,IACX,IAAI6jC,EAAQ1jC,EAAQ,IAChB4/C,EAAM5/C,EAAQ,KACdwvC,EAAiBxvC,EAAQ,KAEzB6/C,EAAa7/C,EAAQ,KACrB8/C,EAAS9/C,EAAQ,IAEjBqT,EAAIrT,EAAQ,IACZsT,EAAOtT,EAAQ,GAIfw/C,EAAWhhB,IAAM+P,YAAY,CAAC,YAAD,WAahCwR,gBAAiB,WAChB,MAAO,CACNC,yBAAyB,IAI3BC,qBAAsB,SAASC,GAE9Br9C,KAAK26B,MAAM8R,SAASj8B,EAAElT,OAAO,CAC5B,YAAe0C,KAAK26B,MAAMmiB,SAASp1C,GACnC,KAAQ1H,KAAK26B,MAAMmiB,SAAS/kC,KAC5B,MAAW/X,KAAK26B,MAAMmiB,SAASQ,WAAat9C,KAAK26B,MAAMmiB,SAASld,eAAiByd,EAAmBE,QAAWv9C,KAAK26B,MAAMmiB,SAASQ,UAAY,EAC/I,SAAY7sC,EAAKjR,SAASP,OAC1B,UAAawR,EAAKzP,eAEhBq8C,KAGJG,iBAAkB,SAAS1V,GAC1B,IAAI/I,EAAS/hC,IAAE8qC,EAAMM,QAAQqV,QAAQ,QAAQC,KAAK,eAClD19C,KAAKo9C,qBAAqB,CACzB,OAAUre,EACV,QAAcA,GAAUge,EAAIY,MAA8C,GAAtC39C,KAAK26B,MAAMmiB,SAASc,gBAA2E,OAApD59C,KAAK26B,MAAMmiB,SAASc,eAAeC,gBAC9G9e,GAAUge,EAAIe,KAA6C,GAAtC99C,KAAK26B,MAAMmiB,SAASc,gBAA2E,MAApD59C,KAAK26B,MAAMmiB,SAASc,eAAeC,eACvG,UAAY,KAGdE,+BAAgC,SAASjW,GACxC,IAAI/I,EAAS/hC,IAAE8qC,EAAMM,QAAQqV,QAAQ,QAAQC,KAAK,6BAC9CM,EAAoBjf,GAAUge,EAAIkB,UAClCC,EAAuBnf,GAAUge,EAAIoB,cACrCC,EAAmD,MAAnCp+C,KAAK26B,MAAMoE,OAAO4D,eAA6D,KAApC3iC,KAAK26B,MAAMoE,OAAO4D,cAC7E0b,EAAuD,MAArCr+C,KAAK26B,MAAMoE,OAAO0D,iBAAiE,KAAtCziC,KAAK26B,MAAMoE,OAAO0D,gBACrFziC,KAAKo9C,qBAAqB,CACzB,qBAAwBre,EAIxB,UAAYmf,IAA8Bl+C,KAAK26B,MAAMmiB,SAAS/kC,MAAQ8oB,EAAM0B,eAAkByb,GAAoBI,GAAgBC,EAAmBL,GAAoBI,GACzK,WAAaF,IAA8Bl+C,KAAK26B,MAAMmiB,SAAS/kC,MAAQ8oB,EAAM0B,eAAkB6b,GAAgBC,EAAkBD,MAGnIE,yBAA0B,SAASxW,GAClC,IAAIyW,EAA0B9tC,EAAK/J,eAAeohC,EAAMM,OAAOhiC,MAAsB,QAAd0hC,EAAM/vB,MAAiB,GAC1FymC,EAAgBD,EAAwBl4C,aACxC04B,EAASwf,EAAwBn4C,MAEjCg4C,EAA2B,KAAXrf,EAChBsf,EAAuD,MAArCr+C,KAAK26B,MAAMoE,OAAO0D,iBAAiE,KAAtCziC,KAAK26B,MAAMoE,OAAO0D,gBACjFgc,EAA8D,MAA1Cz+C,KAAK26B,MAAMoE,OAAO2D,sBAA2E,KAA3C1iC,KAAK26B,MAAMoE,OAAO2D,qBACxFsb,EAA8D,MAA1Ch+C,KAAK26B,MAAMoE,OAAO2D,sBAAgC1iC,KAAK26B,MAAMoE,OAAO2D,sBAAwBqa,EAAIkB,UACpHC,EAAiE,MAA1Cl+C,KAAK26B,MAAMoE,OAAO2D,sBAAgC1iC,KAAK26B,MAAMoE,OAAO2D,sBAAwBqa,EAAIoB,cAC3Hn+C,KAAKo9C,qBAAqB,CACzB,sBAAyBoB,EACzB,cAAiBzf,EAIjB,UAAYmf,IAA8Bl+C,KAAK26B,MAAMmiB,SAAS/kC,MAAQ8oB,EAAM0B,eAAkByb,GAAoBI,GAAgBC,EAAmBL,GAAoBI,GACzK,WAAaF,IAA8Bl+C,KAAK26B,MAAMmiB,SAAS/kC,MAAQ8oB,EAAM0B,eAAkBkc,GAAoBL,GAAgBC,EAAmBI,GAAoBL,MAG5KM,2BAA4B,SAAS5W,GACpC,IAAI/I,EAAiC,KAAvB+I,EAAMM,OAAOhiC,MAAgBG,SAASuhC,EAAMM,OAAOhiC,OAAS,GACtEi4C,EAA6B,KAAXtf,EAClBqf,EAAmD,MAAnCp+C,KAAK26B,MAAMoE,OAAO4D,eAA6D,KAApC3iC,KAAK26B,MAAMoE,OAAO4D,cAC7E8b,EAA8D,MAA1Cz+C,KAAK26B,MAAMoE,OAAO2D,sBAA2E,KAA3C1iC,KAAK26B,MAAMoE,OAAO2D,qBACxFsb,EAA8D,MAA1Ch+C,KAAK26B,MAAMoE,OAAO2D,sBAAgC1iC,KAAK26B,MAAMoE,OAAO2D,sBAAwBqa,EAAIkB,UACpHC,EAAiE,MAA1Cl+C,KAAK26B,MAAMoE,OAAO2D,sBAAgC1iC,KAAK26B,MAAMoE,OAAO2D,sBAAwBqa,EAAIoB,cAC3Hn+C,KAAKo9C,qBAAqB,CACzB,gBAAmBre,EAKnB,UAAYmf,IAA8Bl+C,KAAK26B,MAAMmiB,SAAS/kC,MAAQ8oB,EAAM0B,eAAkByb,GAAoBI,GAAgBC,EAAmBL,GAAoBI,GACzK,WAAaF,IAA8Bl+C,KAAK26B,MAAMmiB,SAAS/kC,MAAQ8oB,EAAM0B,eAAkBkc,GAAoBL,GAAgBC,EAAmBI,GAAoBL,MAG5KO,qBAAsB,SAAS7W,GAC9B,IAAI/I,EAAS+I,EAAMM,OAAOhiC,MAC1BpG,KAAKo9C,qBAAqB,CACzB,UAAare,EACb,QAAuB,KAAXA,EACZ,SAAwB,KAAXA,KAGf6f,oBAAqB,SAAS9W,GAC7B,IAAI/I,EAAS+I,EAAMM,OAAOhiC,MAC1BpG,KAAKo9C,qBAAqB,CACzB,QAAWre,EACX,QAAuB,KAAXA,EACZ,SAAwB,KAAXA,KAGf8f,oBAAqB,SAAS/W,GAC7B,IAAI/I,EAAiC,KAAvB+I,EAAMM,OAAOhiC,MAAgBK,WAAWqhC,EAAMM,OAAOhiC,OAAS,GAC5EpG,KAAKo9C,qBAAqB,CACzB,QAAWre,EACX,QAAuB,KAAXA,EACZ,SAAwB,KAAXA,KAGf+f,qBAAsB,SAAShX,GAC9B,IAAIyW,EAA0B9tC,EAAK/J,eAAeohC,EAAMM,OAAOhiC,MAAsB,QAAd0hC,EAAM/vB,MAAiB,GAC1FymC,EAAgBD,EAAwBl4C,aACxC04B,EAASwf,EAAwBn4C,MAErCpG,KAAKo9C,qBAAqB,CACzB,iBAAoBoB,EACpB,SAAYzf,EACZ,QAAuB,KAAXA,EACZ,SAAwB,KAAXA,KAGfggB,sBAAuB,SAASjX,GAC/B,IAAIkX,EACAzB,GAAU,EACVpb,GAAW,EAEf,GAAGniC,KAAK26B,MAAMmiB,SAAS/kC,MAAQ8oB,EAAMqC,aAAa,CACjD8b,EAAkB,GAElB,IADA,IAAIz8C,EAAUulC,EAAMM,OAAO7lC,QAClBlE,EAAI,EAAGwgB,EAAItc,EAAQhE,OAAQF,EAAIwgB,EAAGxgB,IAC1C,GAAIkE,EAAQlE,GAAG4gD,WACdD,EAAgBpsC,KAAKrQ,EAAQlE,GAAG+H,OAChC+7B,GAAW,EAO8B,IAAtCniC,KAAK26B,MAAMmiB,SAASc,iBAAyBL,GAC/C,IAAI,IAAIloC,EAAI,EAAG6pC,EAAIl/C,KAAK26B,MAAMmiB,SAASqC,qBAAqB5gD,OAAQ8W,EAAI6pC,EAAG7pC,IAE1E,GAAGrV,KAAK26B,MAAMmiB,SAASqC,qBAAqB9pC,IAAM9S,EAAQlE,GAAG+gD,KAAK,CACjE7B,GAAU,EACV,YAcL,GANApb,EAAgC,MADhC6c,EAAkBlX,EAAMM,OAAOhiC,OAOU,IAAtCpG,KAAK26B,MAAMmiB,SAASc,eAItB,IAFA,IAAIyB,EAAe7uC,EAAE8uC,OAAO9uC,EAAEiE,KAAKqzB,EAAMM,OAAO7lC,QAAS,CAAC,MAASy8C,IAAmB,QAE9EO,EAAI,EAAGpgD,EAAIa,KAAK26B,MAAMmiB,SAASqC,qBAAqB5gD,OAAQghD,EAAIpgD,EAAGogD,IAC1E,GAAGv/C,KAAK26B,MAAMmiB,SAASqC,qBAAqBI,IAAMF,EAAa,CAC9D9B,GAAU,EACV,MAMJv9C,KAAKo9C,qBAAqB,CACzB,iBAAoB4B,EACpB,QAAWzB,EACX,SAAYpb,KAGdqd,iBAAkB,SAASv+C,GAE1BjB,KAAKo9C,qBAAqB,CACzB,KAAkB,MAARn8C,EAAgBA,EAAKw+C,OAAO,cAAgB,GACtD,QAAoB,MAARx+C,EACZ,SAAqB,MAARA,KAGfy+C,iBAAkB,SAAS5X,GAE1B,GAAGA,EAAMM,OAAOta,MAAMvvB,OAAO,CAC5B,IAAIyuC,EAAOlF,EAAMM,OAAOta,MAAM,GAC1B6xB,EAAgB3/C,KACpBhD,IAAE4iD,aAAa5S,EAAM,CAEpBjG,MAAO,IACPH,OAAQ,IACRiZ,MAAM,EACNhS,QAAS,GAET9tC,SAAU,SAASmK,EAAM68B,EAAOH,GAG/B,IAAIkZ,EAA4B,GAC7B51C,IAQF41C,EAA4B51C,EAAKvK,MAAM,KAAK,GAAGf,QAAQ,MAAO,QAG/D+gD,EAAcvC,qBAAqB,CAClC,MAAS0C,EACT,QAA0C,KAA9BA,EACZ,SAA2C,KAA9BA,YAMhB9/C,KAAKo9C,qBAAqB,CACzB,MAAS,GACT,SAAW,EACX,UAAY,KAIf2C,iBAAkB,WACjB//C,KAAKo9C,qBAAqB,CACzB,MAAS,GACT,SAAW,EACX,UAAY,KAGdnQ,sBAAuB,SAAS+S,GAC/B,IAAIC,EAAaC,QACI,MAApBF,EAAct4C,IACQ,MAAtBs4C,EAAcpxC,MAAgBoxC,EAAcpxC,KAAKrQ,QAC3B,MAAtByhD,EAAchT,MAAgBgT,EAAchT,KAAKzuC,QAGlDyB,KAAKo9C,qBAAqB,CACzB,aAAgB4C,EAAct4C,GAC9B,eAAkBs4C,EAAcpxC,KAChC,mBAAsBoxC,EAAcxS,SACpC,eAAkBwS,EAAchT,KAChC,QAAWiT,EACX,SAAYA,KAGdE,oBAAqB,WACpBngD,KAAKg7B,SAAS,CAAEmiB,yBAAyB,KAE1CiD,qBAAsB,WACrBpgD,KAAKg7B,SAAS,CAAEmiB,yBAAyB,KAE1CkD,oBAAqB,WACpB,OACmC,MAAlCrgD,KAAK26B,MAAMoE,OAAO8E,cACkB,MAApC7jC,KAAK26B,MAAMoE,OAAO+E,gBAA0B9jC,KAAK26B,MAAMoE,OAAO+E,eAAevlC,QACzC,MAApCyB,KAAK26B,MAAMoE,OAAOiF,gBAA0BhkC,KAAK26B,MAAMoE,OAAOiF,eAAezlC,QAI/E+hD,aAAc,WAGb,IAAIC,EACAC,EAAY,UAAYxgD,KAAK26B,MAAMmiB,SAASp1C,GAC5C+4C,EAAU,SAAWzgD,KAAK26B,MAAMmiB,SAASp1C,GAE7C,OAAO1H,KAAK26B,MAAMmiB,SAAS/kC,MAC1B,KAAK8oB,EAAMjQ,QACX,KAAKiQ,EAAM0B,eACV,IAAIme,EAAiBjwC,EAAK1N,qBAAqByjB,OAE3Cm6B,EAAe,GAChB3gD,KAAK26B,MAAMmiB,SAAS/kC,MAAQ8oB,EAAM0B,iBACpCoe,EACA,yBAAKp1C,UAAU,YACd,2BAAOwM,KAAK,SAAS9Q,IAAI,IAAI25C,KAAK,IAAIr1C,UAAU,eAAeihC,YAAY,UAAUpmC,MAAOpG,KAAK26B,MAAMoE,OAAO0D,gBAAiBgK,SAAUzsC,KAAK0+C,2BAA4BtG,SAAUp4C,KAAK26B,MAAMoE,OAAO2D,sBAAwBqa,EAAIoB,cAAezR,aAAa,UAKhQ6T,EACA,yBAAKh1C,UAAU,mBACd,yBAAKA,UAAU,YAAYo9B,cAAY,WACtC,2BAAOp9B,UAAWvL,KAAK26B,MAAMoE,OAAO2D,sBAAwBqa,EAAIkB,UAAY,yBAA2B,kBAAmB4C,4BAA2B9D,EAAIkB,UAAWxW,QAASznC,KAAK+9C,gCACjL,2BAAOhmC,KAAK,QAAQnJ,KAAM4xC,EAAW94C,GAAI+4C,EAAU1D,EAAIkB,UAAWvR,aAAa,QADhF,cAGA,2BAAOnhC,UAAWvL,KAAK26B,MAAMoE,OAAO2D,sBAAwBqa,EAAI+D,aAAe,yBAA2B,kBAAmBD,4BAA2B9D,EAAI+D,aAAcrZ,QAASznC,KAAK+9C,gCACvL,2BAAOhmC,KAAK,QAAQnJ,KAAM4xC,EAAW94C,GAAI+4C,EAAU1D,EAAI+D,aAAcpU,aAAa,QADnF,iBAGA,2BAAOnhC,UAAWvL,KAAK26B,MAAMoE,OAAO2D,sBAAwBqa,EAAIoB,cAAgB,yBAA2B,kBAAmB0C,4BAA2B9D,EAAIoB,cAAe1W,QAASznC,KAAK+9C,gCACzL,2BAAOhmC,KAAK,QAAQnJ,KAAM4xC,EAAW94C,GAAI+4C,EAAU1D,EAAIoB,cAAezR,aAAa,QADpF,mBAID,yBAAKnhC,UAAU,MAAM7H,MAAO,CAACumC,UAAW,QACvC,yBAAK1+B,UAAU,YACd,yBAAKA,UAAU,eACd,0BAAMA,UAAU,qBAAqBm1C,GACrC,2BAAO3oC,KAAK,OAAOxM,UAAU,eAAeihC,YAAY,QAAQpmC,MAAOpG,KAAK26B,MAAMoE,OAAOgiB,sBAAuBtU,SAAUzsC,KAAKs+C,yBAA0B0C,OAAQhhD,KAAKs+C,yBAA0BlG,SAAUp4C,KAAK26B,MAAMoE,OAAO2D,sBAAwBqa,EAAIoB,cAAezR,aAAa,UAGrRiU,IAGH,MACD,KAAK9f,EAAM+B,OAGV2d,EACA,yBAAKh1C,UAAU,mBACd,yBAAKA,UAAU,YAAYo9B,cAAY,WACtC,2BAAOp9B,UAAWvL,KAAK26B,MAAMoE,OAAO8D,QAAUka,EAAIY,IAAM,yBAA2B,kBAAmBsD,cAAalE,EAAIY,IAAKlW,QAASznC,KAAKw9C,kBACzI,2BAAOzlC,KAAK,QAAQnJ,KAAM4xC,EAAW94C,GAAI+4C,EAAU1D,EAAIY,IAAKjR,aAAa,QAD1E,QAGA,2BAAOnhC,UAAWvL,KAAK26B,MAAMoE,OAAO8D,QAAUka,EAAIe,GAAK,yBAA2B,kBAAmBmD,cAAalE,EAAIe,GAAIrW,QAASznC,KAAKw9C,kBACvI,2BAAOzlC,KAAK,QAAQnJ,KAAM4xC,EAAW94C,GAAI+4C,EAAU1D,EAAIe,GAAIpR,aAAa,QADzE,SAKF,MACD,KAAK7L,EAAMiC,UACVyd,EACA,yBAAKh1C,UAAU,mBACd,2BAAOwM,KAAK,OAAOxM,UAAU,eAAenF,MAAOpG,KAAK26B,MAAMoE,OAAOgE,UAAW0J,SAAUzsC,KAAK2+C,qBAAsBjS,aAAa,SAEnI,MACD,KAAK7L,EAAM6C,QACV6c,EACA,yBAAKh1C,UAAU,mBACd,2BAAOwM,KAAK,OAAOxM,UAAU,eAAenF,MAAOpG,KAAK26B,MAAMoE,OAAO4E,QAAS8I,SAAUzsC,KAAK4+C,oBAAqBlS,aAAa,SAEhI,MACD,KAAK7L,EAAMmC,gBACX,KAAKnC,EAAMqC,aACVqd,EACA,yBAAKh1C,UAAU,mBACd,4BAAQ21C,SAAUlhD,KAAK26B,MAAMmiB,SAAS/kC,MAAQ8oB,EAAMqC,aAAc33B,UAAU,eAAenF,MAAOpG,KAAK26B,MAAMoE,OAAOkE,iBAAkBwJ,SAAUzsC,KAAK++C,sBAAuBrS,aAAa,OACvL1sC,KAAK26B,MAAMmiB,SAAS/kC,MAAQ8oB,EAAMmC,gBAAkB,4BAAQv4B,IAAI,cAAcrE,MAAM,IAAhC,mBAA8D,GAClHpG,KAAK26B,MAAMmiB,SAASqE,wBAAwBp3C,KAAI,SAASyjB,GACzD,OAAO,4BAAQ/iB,IAAK+iB,EAAO9lB,GAAItB,MAAOonB,EAAO9lB,IAAK8lB,EAAO3pB,YAI5D,MACD,KAAKg9B,EAAMsC,MAEVod,EACA,yBAAKh1C,UAAU,mBAEe,MAA3BvL,KAAK26B,MAAMoE,OAAOsE,OAA6C,KAA5BrjC,KAAK26B,MAAMoE,OAAOsE,MACtD,6BACC,0BAAM93B,UAAU,gBAAhB,cACA,4BAAQA,UAAU,kBAAkBk8B,QAASznC,KAAK+/C,iBAAkBr8C,MAAO,CAACk1C,WAAY,QAAxF,WAED,2BAAO7gC,KAAK,OAAOqpC,OAAO,UAAUC,QAAQ,SAAS5U,SAAUzsC,KAAK0/C,oBAWtE,MACD,KAAK7e,EAAMyC,QACVid,EACA,yBAAKh1C,UAAU,uBACd,yBAAKA,UAAU,YACd,2BAAOwM,KAAK,SAAS9Q,IAAI,IAAI25C,KAAK,IAAIr1C,UAAU,eAAenF,MAAOpG,KAAK26B,MAAMoE,OAAOwE,QAASkJ,SAAUzsC,KAAK6+C,oBAAqBnS,aAAa,UAGpJ,MACD,KAAK7L,EAAMxT,SACNqzB,EAAiBjwC,EAAK1N,qBAAqByjB,OAE/C+5B,EACA,yBAAKh1C,UAAU,uBACd,yBAAKA,UAAU,YACd,yBAAKA,UAAU,eACd,0BAAMA,UAAU,qBAAqBm1C,GACrC,2BAAO3oC,KAAK,OAAOxM,UAAU,eAAenF,MAAOpG,KAAK26B,MAAMoE,OAAOuiB,iBAAkB7U,SAAUzsC,KAAK8+C,qBAAsBkC,OAAQhhD,KAAK8+C,qBAAsBpS,aAAa,WAI/K,MACD,KAAK7L,EAAM4C,KACV8c,EACA,yBAAKh1C,UAAU,uBACd,yBAAKA,UAAU,YACd,kBAACyxC,EAAD,CAAYiC,SAAUj/C,KAAK26B,MAAMoE,OAAO99B,KAAOg8C,EAAOj9C,KAAK26B,MAAMoE,OAAO99B,KAAM,cAAgB,KAAMwrC,SAAUzsC,KAAKw/C,iBAAkB+B,gBAAgB,cAAch2C,UAAU,mBAG/K,MACD,KAAKs1B,EAAM+C,UACV,IAAI4d,EAAcxhD,KAAKqgD,sBAEvBE,EACA,yBAAKh1C,UAAU,uBAEbvL,KAAKo7B,MAAM+hB,wBACX,kBAACxQ,EAAD,CACC9oC,MAAQ7D,KAAK26B,MAAMmiB,SAAShZ,eAAet8B,OAAO,EAAG,GAAGq2C,cAAgB79C,KAAK26B,MAAMmiB,SAAShZ,eAAet8B,OAAO,GAAK,aACvHslC,UAAW,CACVplC,GAAI1H,KAAK26B,MAAMmiB,SAASjZ,aACxBj1B,KAAM5O,KAAK26B,MAAMoE,OAAO+E,eACxB0J,SAAUxtC,KAAK26B,MAAMoE,OAAOgF,mBAC5BiJ,KAAMhtC,KAAK26B,MAAMoE,OAAOiF,gBAEzB6I,OAAQ7sC,KAAKitC,sBACbtD,QAAS3pC,KAAKogD,uBACV,KAEN,yBAAK70C,UAAU,YACd,4BAAQA,UAAW,YAAci2C,EAAc,UAAY,WAAY/Z,QAASznC,KAAKmgD,qBAAqB,uBAAG50C,UAAW,UAAYi2C,EAAc,QAAU,YAA5J,IAA6KxhD,KAAK26B,MAAMmiB,SAAShZ,kBAQrM,OAAOyc,GAERhU,OAAQ,WACP,OACC,wBAAIhhC,UAAU,mBACb,6BAAMvL,KAAK26B,MAAMmiB,SAASj5C,MAA1B,IAAmC7D,KAAK26B,MAAMmiB,SAASld,cAAgB,0BAAMr0B,UAAU,gBAAhB,KAA0C,IAChHvL,KAAKsgD,mBAMK3D,a,6BC7cfzxC,EAAOC,QAAU,CAChB8yC,UAAa,IACb6C,aAAe,IACf3C,cAAgB,IAChBR,IAAQ,MACRG,GAAQ,O,6BCJT,SAAS2D,EAAO7L,EAAYoB,EAAUC,EAAUpB,GAC9C71C,KAAK41C,WAAaA,EAClB51C,KAAKg3C,SAAWA,EAChBh3C,KAAKi3C,SAAWA,EAChBj3C,KAAK61C,SAAWA,EAPlBvH,OAAOC,eAAepjC,EAAS,aAAc,CAC3C/E,OAAO,IAUTq7C,EAAO5hD,UAAUtB,OAAS,WAMxB,IALA,IACIA,EAAS,EACTmjD,OAAK,EACLC,OAAK,EAEAtjD,EAAI,EAAGA,GALJ,GAKgBA,GAAK,EAAG,CAClC,IAAIq4C,EAAIr4C,EANE,GAONujD,EAAK5hD,KAAKs0C,MAAMoC,EAAG12C,KAAK41C,WAAWzH,EAAGnuC,KAAKg3C,SAAS7I,EAAGnuC,KAAKi3C,SAAS9I,EAAGnuC,KAAK61C,SAAS1H,GACtF0T,EAAK7hD,KAAKs0C,MAAMoC,EAAG12C,KAAK41C,WAAWxH,EAAGpuC,KAAKg3C,SAAS5I,EAAGpuC,KAAKi3C,SAAS7I,EAAGpuC,KAAK61C,SAASzH,GAC1F,GAAI/vC,EAAI,EAAG,CACT,IAAIyjD,EAAQF,EAAKF,EACbK,EAAQF,EAAKF,EACjBpjD,GAAU4C,KAAKqE,KAAKs8C,EAAQA,EAAQC,EAAQA,GAE9CL,EAAKE,EACLD,EAAKE,EAGP,OAAOtjD,GAGTkjD,EAAO5hD,UAAUy0C,MAAQ,SAAwBoC,EAAGjI,EAAOkH,EAAIt2C,EAAIq1C,GACjE,OAAOjG,GAAS,EAAMiI,IAAM,EAAMA,IAAM,EAAMA,GAAK,EAAMf,GAAM,EAAMe,IAAM,EAAMA,GAAKA,EAAI,EAAMr3C,GAAM,EAAMq3C,GAAKA,EAAIA,EAAIhC,EAAMgC,EAAIA,EAAIA,GAGzIvrC,EAAQqH,QAAUivC,G,6BCrClBnT,OAAOC,eAAepjC,EAAS,aAAc,CAC3C/E,OAAO,IAET+E,EAAQioC,SAYR,SAAkB4O,EAAMC,EAAM1/C,GAC5B,IAAK,IAAI2/C,EAAOC,UAAU5jD,OAAQ6Q,EAAMH,MAAMizC,EAAO,EAAIA,EAAO,EAAI,GAAIE,EAAO,EAAGA,EAAOF,EAAME,IAC7FhzC,EAAIgzC,EAAO,GAAKD,UAAUC,GAG5B,IAAIp6C,OAAU,EACVC,OAAO,EACPq3C,OAAS,EACTrqB,EAAU,KACVotB,EAAW,EACXC,EAAO//C,GAAW,GAClBggD,EAAQ,WACVF,GAA4B,IAAjBC,EAAKE,QAAoB,EAAIthD,KAAKuhD,MAC7CxtB,EAAU,KACVqqB,EAAS0C,EAAK55C,MAAMJ,EAASC,GACxBgtB,IAEHjtB,EADAC,EAAO,OAIX,OAAO,WACL,IAAIw6C,EAAMvhD,KAAKuhD,MACVJ,IAA6B,IAAjBC,EAAKE,UAAmBH,EAAWI,GACpD,IAAIC,EAAYT,GAAQQ,EAAMJ,GAiB9B,OAhBAr6C,EAAUhI,KACViI,EAAOmH,EACHszC,GAAa,GAAKA,EAAYT,GAC5BhtB,IACF0tB,aAAa1tB,GACbA,EAAU,MAEZotB,EAAWI,EACXnD,EAAS0C,EAAK55C,MAAMJ,EAASC,GACxBgtB,IAEHjtB,EADAC,EAAO,OAGCgtB,IAA6B,IAAlBqtB,EAAKM,WAC1B3tB,EAAU4tB,WAAWN,EAAOG,IAEvBpD,IAnDXn0C,EAAQ+P,KAyDR,SAAcu4B,GAWZ,IAVA,IAAIG,EAAMH,EAAOI,WAAW,MACxBiP,EAAOt/C,SAASg0C,cAAc,UAAU3D,WAAW,MACnDkP,EAASnP,EAAIoP,aAAa,EAAG,EAAGvP,EAAO1M,MAAO0M,EAAO7M,QACrDroC,EAASwkD,EAAO74C,KAAK3L,OACrB0kD,EAAQ,CACVzN,IAAK,KACLD,KAAM,KACN2N,MAAO,KACPC,OAAQ,MAED9kD,EAAI,EAAGA,EAAIE,EAAQF,GAAK,EAC/B,GAA2B,IAAvB0kD,EAAO74C,KAAK7L,EAAI,GAAU,CAC5B,IAAI8vC,EAAI9vC,EAAI,EAAIo1C,EAAO1M,MACnBqH,EAAIjtC,KAAKC,MAAM/C,EAAI,EAAIo1C,EAAO1M,OAEhB,OAAdkc,EAAMzN,MACRyN,EAAMzN,IAAMpH,IAGK,OAAf6U,EAAM1N,MAECpH,EAAI8U,EAAM1N,QADnB0N,EAAM1N,KAAOpH,IAKK,OAAhB8U,EAAMC,OAECD,EAAMC,MAAQ/U,KADvB8U,EAAMC,MAAQ/U,IAKK,OAAjB8U,EAAME,QAECF,EAAME,OAAS/U,KADxB6U,EAAME,OAAS/U,GAOrB,IAAIgV,EAAaH,EAAME,OAASF,EAAMzN,IAClC6N,EAAYJ,EAAMC,MAAQD,EAAM1N,KAChC+N,EAAU1P,EAAIoP,aAAaC,EAAM1N,KAAM0N,EAAMzN,IAAK6N,EAAWD,GAKjE,OAHAN,EAAKrP,OAAO1M,MAAQsc,EACpBP,EAAKrP,OAAO7M,OAASwc,EACrBN,EAAKS,aAAaD,EAAS,EAAG,GACvBR,EAAKrP,QAvGdtoC,EAAQiqC,cA0GR,SAAuB3B,GAOrB,IANA,IACIsP,EADMtP,EAAOI,WAAW,MACXmP,aAAa,EAAG,EAAGvP,EAAO1M,MAAO0M,EAAO7M,QACrDroC,EAASwkD,EAAO74C,KAAK3L,OAErBilD,GAAa,EAERnlD,EAAI,EAAGA,EAAIE,EAAQF,GAAK,EAC/B,GAA2B,IAAvB0kD,EAAO74C,KAAK7L,EAAI,GAAU,CAGhCmlD,GAAa,EACb,MAGD,OAAOA,GAxHRr4C,EAAQuqC,4BA2HR,SAAqC+N,EAAIC,EAAIC,GAC3C,IAAIC,EAAMH,EAAGtV,EAAIuV,EAAGvV,EAChB0V,EAAMJ,EAAGrV,EAAIsV,EAAGtV,EAChB0V,EAAMJ,EAAGvV,EAAIwV,EAAGxV,EAChB4V,EAAML,EAAGtV,EAAIuV,EAAGvV,EAEhB4V,EAAK,CAAE7V,GAAIsV,EAAGtV,EAAIuV,EAAGvV,GAAK,EAAKC,GAAIqV,EAAGrV,EAAIsV,EAAGtV,GAAK,GAClD6V,EAAK,CAAE9V,GAAIuV,EAAGvV,EAAIwV,EAAGxV,GAAK,EAAKC,GAAIsV,EAAGtV,EAAIuV,EAAGvV,GAAK,GAElD8V,EAAK/iD,KAAKqE,KAAKo+C,EAAMA,EAAMC,EAAMA,GACjCM,EAAKhjD,KAAKqE,KAAKs+C,EAAMA,EAAMC,EAAMA,GAKjCxE,EAAI4E,GAAMD,EAAKC,GACfC,EAAK,CAAEjW,EAAG8V,EAAG9V,GAJP6V,EAAG7V,EAAI8V,EAAG9V,GAIOoR,EAAGnR,EAAG6V,EAAG7V,GAH1B4V,EAAG5V,EAAI6V,EAAG7V,GAG0BmR,GAE1C8E,EAAKX,EAAGvV,EAAIiW,EAAGjW,EACfmW,EAAKZ,EAAGtV,EAAIgW,EAAGhW,EAEnB,MAAO,CACLuH,GAAI,IAAIpF,EAAQ/9B,QAAQwxC,EAAG7V,EAAIkW,EAAIL,EAAG5V,EAAIkW,GAC1CjlD,GAAI,IAAIkxC,EAAQ/9B,QAAQyxC,EAAG9V,EAAIkW,EAAIJ,EAAG7V,EAAIkW,KAhJ9C,IAIgC5T,EAJ5B6T,EAASpnD,EAAQ,KAEjBozC,GAE4BG,EAFK6T,IAEgB7T,EAAIC,WAAaD,EAAM,CAAEl+B,QAASk+B,I,8BCdvF,uDAGI/D,EAAiBxvC,EAAQ,KAEvBqnD,E,kDAaL,WAAY7pB,GAAQ,IAAD,8BAClB,cAAMA,IAkBP8pB,wBAA0B,SAAC/8C,GAAD,MAAS,CAClCA,GAAIA,EACJkH,KAAM,GACN4+B,SAAU,GACVR,KAAM,KAvBY,EA0BnB0X,cAAgB,SAAC5c,GAChB,IAAM6c,EAAU7c,EAAMG,cAAcC,QACpC,EAAK0c,mBAAqBr+C,SAASo+C,EAAO,KAC1C,EAAK3pB,SAAS,CACbmiB,yBAAyB,EACzB0H,oBAAqBF,EAAO,KAASn9C,OAAO,EAAG,GAAGq2C,cAAgB8G,EAAO,KAASn9C,OAAO,GAAK,aAC9Fs9C,iBAAoE,MAAjD,EAAKC,gBAAgB,EAAKH,oBAA8B,EAAKG,gBAAgB,EAAKH,oBAAsB,EAAKH,wBAAwBE,EAAO,OAhC9I,EAsCnB/X,cAAgB,SAACoT,GAChB,EAAK+E,gBAAgB,EAAKH,oBAAsB5E,EAEhD,EAAKrlB,MAAM8R,SAAS,EAAKsY,kBAzCP,EA4CnBC,oBAAsB,WACrB,EAAKJ,mBAAqB,KAC1B,EAAK5pB,SAAS,CACbmiB,yBAAyB,EACzB0H,oBAAqB,KACrBC,iBAAkB,QAjDD,EAqDnBzE,oBAAsB,SAACtW,GAAD,OACG,MAAxB,EAAKgb,iBAAwD,MAA7B,EAAKA,gBAAgBhb,IACnB,MAAlC,EAAKgb,gBAAgBhb,GAAKn7B,MAAgB,EAAKm2C,gBAAgBhb,GAAKn7B,KAAKrQ,QACvC,MAAlC,EAAKwmD,gBAAgBhb,GAAKiD,MAAgB,EAAK+X,gBAAgBhb,GAAKiD,KAAKzuC,QAnDzE,EAAKwmD,gBAAkBpqB,EAAMoqB,gBAE7B,EAAKH,mBAAqB,KAE1B,EAAKxpB,MAAQ,CACZ+hB,yBAAyB,EACzB0H,oBAAqB,MAXJ,E,sEAeOxpB,GACzBr7B,KAAK+kD,gBAAkB1pB,EAAU0pB,kB,+BA2CxB,IAAD,OACR,OACC,yBAAKx5C,UAAU,uBAEbvL,KAAKo7B,MAAM+hB,wBACX,kBAACxQ,EAAD,CACC9oC,MAAO7D,KAAKo7B,MAAMypB,oBAClB/X,UAAW9sC,KAAKo7B,MAAM0pB,iBACtBjY,OAAQ7sC,KAAK4sC,cACbjD,QAAS3pC,KAAKglD,sBACV,KAGN,yBAAKz5C,UAAU,iBACd,wBAAIA,UAAU,eAAd,eAGD,wBAAIA,UAAU,cACXvL,KAAK26B,MAAMmH,WAAW/3B,KAAI,SAAC+iC,EAAW/C,GACvC,IAAIyX,EAAc,EAAKnB,oBAAoB95C,SAASwjC,IACpD,OACC,wBAAIx+B,UAAU,kBAAkBd,IAAKs/B,GACpC,4BAAQx+B,UAAW,YAAci2C,EAAc,UAAY,WAAYyD,WAAUlb,EAAKlB,UAASiE,EAAUplC,GAAI8nC,YAAW1C,EAAUl+B,KAAM64B,QAAS,EAAKid,eAAe,uBAAGn5C,UAAW,UAAYi2C,EAAc,QAAU,YAAvN,IAAwO1U,EAAUl+B,gB,GA9F7N+sB,IAAMC,WAwGpB4oB,a,6BC7Gf,2BAGI7f,EAAexnC,EAAQ,IACvBsT,EAAOtT,EAAQ,GAEfyxC,EAAWjT,IAAM+P,YAAY,CAAC,YAAD,WAMhCC,gBAAiB,WAChB,MAAO,CACNrE,WAAW,IAIbiF,OAAQ,WAaP,OACC,6BAGCvsC,KAAK26B,MAAM7M,MAAMvvB,OACjB,2BAAOgN,UAAU,sBAAsB7H,MAAO,CAAC,aAAgB,IAC9D,+BACE1D,KAAK26B,MAAM7M,MAAM/jB,KAnBF,SAASw7B,GAG5B,IAAIyH,EAAOrI,EAAaW,QAAQC,GAChC,OACC,wBAAI96B,IAAKzK,KAAK26B,MAAMjC,WAAa,IAAM6M,GACtC,4BAAKyH,EAAKp+B,MACV,wBAAIrD,UAAU,eAAc,uBAAGq9B,KAAMn4B,EAAKlQ,OAAS,yBAA2BysC,EAAKtlC,GAAK,IAAM+I,EAAKpO,mBAAoBkJ,UAAWvL,KAAK26B,MAAM2M,UAAY,2BAA6B,kBAAmBF,KAAK,UAAS,uBAAG77B,UAAU,mBAAxM,iBAYUvL,QAIvC,yBAAKuL,UAAWvL,KAAK26B,MAAM2M,UAAY,SAAW,cAAlD,2BASWsH,a,6BCnDf,qDAOIsW,EAAcvpB,IAAM+P,YAAY,CAAC,YAAD,cAWnCC,gBAAiB,WAChB,MAAO,CACNrE,WAAW,EACXh8B,WAAW,EACX65C,SAAS,IAIX5Y,OAAQ,WACP,OACC,kBAAC,IAAD,CAAoB6Y,UAAU,MAC7BC,eAAe,eACfC,uBAAwB,IACxBC,uBAAwB,KAExBvlD,KAAK26B,MAAMrvB,UACX,8BACC,yBAAKC,UAAU,iBACd,8BAAUA,UAAU,eAAeqD,KAAK,cAAcq/B,KAAK,IAAIzB,YAAY,UAAUpmC,MAAOpG,KAAK26B,MAAMvX,QAASqpB,SAAUzsC,KAAK26B,MAAM8R,SAAUC,aAAa,MAAM0L,SAAUp4C,KAAK26B,MAAM2M,aAExL,yBAAK/7B,UAAU,kBACd,yBAAKA,UAAU,YAAY67B,KAAK,SAC/B,4BAAQrvB,KAAK,SAASxM,UAAU,kBAAkBk8B,QAASznC,KAAK26B,MAAMkS,OAAQuL,SAAUp4C,KAAK26B,MAAM2M,YAActnC,KAAK26B,MAAMwqB,SAA5H,OACA,4BAAQ55C,UAAU,kBAAkBk8B,QAASznC,KAAK26B,MAAM2d,SAAUF,SAAUp4C,KAAK26B,MAAM2M,WAAvF,YAGF,kBAAC,IAAD,CAASh8B,UAAWtL,KAAK26B,MAAM2M,aAE9B,SAOS4d,a,uCCrDf,mCAKIjI,EAAS9/C,EAAQ,IAIjBqoD,EAAc7pB,IAAM+P,YAAY,CAAC,YAAD,cAKnCC,gBAAiB,WAChB,MAAO,CACNrE,WAAW,IAIbiF,OAAQ,WAYP,OACC,yBAAKhhC,UAAU,YACd,kBAAC,IAAD,CAASD,UAAWtL,KAAK26B,MAAM2M,YAE/BtnC,KAAK26B,MAAM6S,SAASjvC,OACpB,2BAAOgN,UAAU,oCAChB,+BACEvL,KAAK26B,MAAM6S,SAASzjC,KAlBF,SAASqZ,GAC/B,OACC,wBAAI3Y,IAAK2Y,EAAQ1b,IAChB,4BACC,0BAAM6D,UAAU,8BAA6B,4BAAQA,UAAU,gBAAgB6X,EAAQ0Y,MAAe,OAASmhB,EAAOwI,KAAKriC,EAAQniB,MAAMw+C,OAAO,iCAAuC,6BACvL,0BAAM/7C,MAAO,CAACgiD,WAAY,aAActiC,EAAQA,aAaLpjB,QAI7C,yBAAKuL,UAAWvL,KAAK26B,MAAM2M,UAAY,SAAW,cAAlD,8BASWke,a,6BCpDf,uEAKIxgC,EAAgB7nB,EAAQ,KAExBsT,GADItT,EAAQ,IACLA,EAAQ,IAEbwoD,E,kDAUL,WAAYhrB,GAAQ,IAAD,8BAClB,cAAMA,IAQPirB,WAAa,SAACl+B,GACb,IAGKrS,EAHDwwC,EAAY,EAEhB,GAAGn+B,EAAMnpB,OAER,IAAI8W,EAAI,EAAGA,EAAIqS,EAAMnpB,OAAQ8W,IACb,MAAZqS,EAAMrS,IACRwwC,IAKH,OAAOA,GArBW,EAwBnBC,eAAiB,SAAC5tC,GACjB,IAAI2tC,EAAY,EAAKD,WAAW1tC,EAAMwP,OAEtC,OACC,wBAAIjd,IAAKyN,EAAMxQ,GAAI6D,UAAW2M,EAAMsI,QAAUwE,EAAc+E,OAAS,UAAY,MAChF,4BACC,8BAA4B,MAArB7R,EAAMgE,YAAsBhE,EAAMgU,cAAgB,qBAA2B,6BACpF,0BAAM3gB,UAAU,gCAAhB,SAAqD,iCAA2C,MAAjC2M,EAAMoU,wBAAkCpU,EAAMoU,wBAA0B,EAAKy5B,uBAAyB7tC,EAAM4P,gBAC3K,0BAAMvc,UAAU,+BAA+B7H,MAAO,CAACk1C,WAAY,QAAS,IAAMiN,EAAY,SAAwB,GAAbA,EAAiB,GAAK,KAAO,MAEvI,wBAAIt6C,UAAU,eACb,kBAAC,IAAD,CAAMA,UAAW2M,EAAMsI,QAAUwE,EAAc+E,OAAS,2BAA8B,EAAK4Q,MAAM2M,UAAY,2BAA6B,kBAAoBF,KAAK,SAASmR,GAAI,iBAAmBrgC,EAAMxQ,IAAI,uBAAG6D,UAAW2M,EAAMsI,QAAUwE,EAAc+E,OAAS,cAAgB,wBAAlR,IAA+S7R,EAAMsI,QAAUwE,EAAc+E,OAAS,SAAW,WA/BpW,EAAKg8B,sBAAwBt1C,EAAK1N,qBAAqByjB,OAJrC,E,qDA2ClB,OACC,yBAAKjb,UAAU,YACd,kBAAC,IAAD,CAASD,UAAWtL,KAAK26B,MAAM2M,YAE/BtnC,KAAK26B,MAAMvP,OAAO7sB,OAClB,2BAAOgN,UAAU,mCAAmC7H,MAAO,CAACumC,UAAW,IACtE,+BACGjqC,KAAK26B,MAAMvP,OAAOrhB,IAAI/J,KAAK8lD,kBAI/B,yBAAKv6C,UAAWvL,KAAK26B,MAAM2M,UAAY,SAAW,cAAlD,8B,GAhEoB3L,IAAMC,WAAxB+pB,EAME9pB,aAAe,CACrByL,WAAW,GAkEEqe,a,6BClFf,uDAIIne,EAAcrqC,EAAQ,IAEtBsT,GADItT,EAAQ,IACLA,EAAQ,IACfqwB,EAASrwB,EAAQ,IACjBwR,EAASxR,EAAQ,IAEf6oD,E,kDAeL,WAAYrrB,GAAQ,IAAD,8BAClB,cAAMA,IA2BPkkB,oBAAsB,SAAC/W,GACtB,IAAMM,EAASN,EAAMM,OACf6d,EAAYne,EAAM/vB,KAEpBmuC,EAAkBz1C,EAAKjK,cAAc4hC,EAAOhiC,MAAqB,QAAb6/C,GACpDE,EAAsE,MAAxD,EAAKjuC,MAAMwP,MAAM0gB,EAAOF,QAAP,KAAuBke,aAAuB,EAAKluC,MAAMwP,MAAM0gB,EAAOF,QAAP,KAAuBke,aAAe,EACpIC,EAAsE,MAAxD,EAAKnuC,MAAMwP,MAAM0gB,EAAOF,QAAP,KAAuBoe,aAAuB,EAAKpuC,MAAMwP,MAAM0gB,EAAOF,QAAP,KAAuBoe,aAAe,EACpIC,EAAsE,MAAxD,EAAKruC,MAAMwP,MAAM0gB,EAAOF,QAAP,KAAuBse,aAAuB,EAAKtuC,MAAMwP,MAAM0gB,EAAOF,QAAP,KAAuBse,aAAe,EAcxI,GAZGN,EAAgB9/C,MAAQ+/C,IAC1BD,EAAgB9/C,MAAQ+/C,EACR,QAAbF,IACFC,EAAgB7/C,aAAe8/C,IAKjC,EAAKjuC,MAAMwP,MAAM0gB,EAAOF,QAAP,KAAuBtgB,SAAWs+B,EAAgB9/C,MACnE,EAAK8R,MAAMwP,MAAM0gB,EAAOF,QAAP,KAAuBue,iBAAmBP,EAAgB7/C,aAG3D,QAAb4/C,EAAoB,CACtB,IAAIS,EAAmBj2C,EAAK3J,eAC3B,EAAKoR,MAAMwP,MAAM0gB,EAAOF,QAAP,KAAuBtgB,SACxC,EAAK1P,MAAMwP,MAAM0gB,EAAOF,QAAP,KAAuBue,iBACxCN,EAAaE,EAAaE,GAE3B,EAAKruC,MAAMwP,MAAM0gB,EAAOF,QAAP,KAAuBtgB,SAAW8+B,EAAiBtgD,MACpE,EAAK8R,MAAMwP,MAAM0gB,EAAOF,QAAP,KAAuBue,iBAAmBC,EAAiBrgD,aAI7E,EAAK8nB,aA5Da,EA+DnB2wB,qBAAuB,SAAChX,GACvB,IAAM6e,EAAY7e,EAAMM,OAAOF,QAC3BrgB,EAAoBpX,EAAK/J,eAAeohC,EAAMM,OAAOhiC,MAAsB,QAAd0hC,EAAM/vB,MAEzC,GAA3B8P,EAAkBzhB,OAA4B,QAAd0hC,EAAM/vB,OACxC8P,EAAkBxhB,aAAe,QAGT,cAAtBsgD,EAAS,OAEX,EAAKzuC,MAAMwP,MAAMi/B,EAAS,KAASC,cAAgB/+B,EAAkBxhB,aACrE,EAAK6R,MAAMwP,MAAMi/B,EAAS,KAASh/B,MAAQE,EAAkBzhB,MAG7D,EAAK+nB,cAIL,EAAKjW,MAAMyuC,EAAS,MAAY,YAAc9+B,EAAkBxhB,aAChE,EAAK6R,MAAMyuC,EAAS,OAAa9+B,EAAkBzhB,MAGnD,EAAK+nB,cArFY,EAyFnB04B,gBAAkB,WACe,MAA7B,EAAKC,uBACP,EAAK5uC,MAAMwP,MAAM,EAAKo/B,sBAAwB,KAC9C,EAAKA,qBAAuB,KAE5B,EAAK9rB,SAAS,CAAE+rB,sCAAsC,IAGtD,EAAK54B,cAjGY,EAqGnBA,UAAY,WAiCX,EAAKwM,MAAMkS,OAAO,EAAK30B,QAtIL,EA2InB8uC,UAAY,WAEV,IAAI3xC,EADL,GAAG,EAAKslB,MAAMziB,MAAMwP,MAAMnpB,OAEzB,IAAI8W,EAAI,EAAGA,EAAI,EAAKslB,MAAMziB,MAAMwP,MAAMnpB,OAAQ8W,IAC7C,GAAgC,MAA7B,EAAKslB,MAAMziB,MAAMwP,MAAMrS,GACzB,OAAO,EAKV,OAAO,GArJW,EAwJnB4xC,sCAAwC,SAACnf,GACxC,EAAKgf,qBAAuBhf,EAAMM,OAAOF,QAAb,IAC5B,EAAKlN,SAAS,CAAE+rB,sCAAsC,KA1JpC,EA6JnBG,sCAAwC,WACvC,EAAKJ,qBAAuB,KAC5B,EAAK9rB,SAAS,CAAE+rB,sCAAsC,KA/JpC,EAkKnBI,mBAAqB,SAACC,EAAMrd,EAAKkS,GAAZ,OACZ,MAARmL,EACA,wBAAI38C,IAAKs/B,GACR,wBAAIsd,QAAQ,KACX,yBAAK97C,UAAU,cACd,yBAAKA,UAAU,OACd,yBAAKA,UAAU,0BAA0B67C,EAAKhtB,KAC9C,yBAAK7uB,UAAU,YAAW,4BAAQwM,KAAK,SAASxM,UAAU,QAAQ05C,WAAUlb,EAAKtC,QAAS,EAAKwf,uCAArE,UAE3B,yBAAK17C,UAAU,OACd,yBAAKA,UAAU,aAAa67C,EAAKx4C,OAElC,yBAAKrD,UAAU,OACd,yBAAKA,UAAU,YACd,2BAAOwM,KAAK,OAAOxM,UAAU,eAAenF,MAAOghD,EAAKX,iBAAkBxB,WAAUlb,EAAK0C,SAAU,EAAKoS,oBAAqBmC,OAAQ,EAAKnC,oBAAqBnS,aAAa,SAE7K,yBAAKnhC,UAAU,YACd,yBAAKA,UAAU,eACd,0BAAMA,UAAU,qBAAqB,EAAKm1C,gBACzC,EAAK/lB,MAAM2sB,gBACX,2BAAOvvC,KAAK,OAAOxM,UAAU,eAAenF,MAAOghD,EAAKR,cAAe5Y,aAAW,aAAaiX,WAAUlb,EAAK0C,SAAU,EAAKqS,qBAAsBkC,OAAQ,EAAKlC,qBAAsBpS,aAAa,QACnM,2BAAO30B,KAAK,OAAOxM,UAAU,eAAenF,MAAOghD,EAAKR,cAAe5Y,aAAW,aAAaiX,WAAUlb,EAAKqO,UAAU,EAAM1L,aAAa,UAG9I,yBAAKnhC,UAAU,YACd,yBAAKA,UAAU,eACd,0BAAMA,UAAU,qBAAqB,EAAKm1C,gBAC1C,2BAAO3oC,KAAK,OAAOxM,UAAU,eAAenF,MAAOghD,EAAKt/B,cAAeswB,UAAU,EAAM1L,aAAa,cAO1G,MA7LA,EAAKx0B,MAAQyiB,EAAMziB,MAGnB,EAAK6tC,sBAAwBt1C,EAAK1N,qBAAqByjB,OAEvD,EAAKk6B,eAAyD,MAAvC/lB,EAAMziB,MAAMoU,wBAAmCqO,EAAMziB,MAAMoU,wBAA0B,EAAKy5B,sBAEjH,EAAKe,qBAAuB,KAC5B,EAAKS,kCAAoC,6CAEzC,EAAKnsB,MAAQ,CACZ2rB,sCAAsC,GAlBrB,E,sEAsBO1rB,GAGzBr7B,KAAKkY,MAAQmjB,EAAUnjB,Q,+BAkLvB,OAFAlY,KAAK0gD,eAA8D,MAA5C1gD,KAAK26B,MAAMziB,MAAMoU,wBAAmCtsB,KAAK26B,MAAMziB,MAAMoU,wBAA0BtsB,KAAK+lD,sBAG1H,6BACG/lD,KAAKo7B,MAAM2rB,qCACZ,kBAACvf,EAAD,CACCD,YAAavnC,KAAKunD,kCAClB7f,MAAO1nC,KAAK6mD,gBACZlf,KAAM3nC,KAAKknD,wCACP,KAEN,yBAAK37C,UAAU,0CACd,yBAAKA,UAAU,iBACd,wBAAIA,UAAU,eACb,uBAAG67B,KAAK,SAASuB,cAAY,WAAWC,KAAK,0BAC5C,+CACA,uBAAGr9B,UAAU,mCACb,uBAAGA,UAAU,sCAIhB,yBAAKA,UAAU,6BAA6B67B,KAAK,WAAW1/B,GAAG,yBAC9D,2BAAO6D,UAAU,uBAChB,+BACC,4BACC,wBAAIA,UAAU,YAAd,YACA,wBAAIA,UAAU,YAAd,SACA,wBAAIA,UAAU,YAAd,WAGF,+BAEEvL,KAAKgnD,YACLhnD,KAAK26B,MAAMziB,MAAMwP,MAAM3d,IAAI/J,KAAKmnD,oBAChC,4BACC,wBAAIE,QAAQ,KAAI,0BAAM97C,UAAU,cAAhB,wBAQtB,yBAAKA,UAAU,0CACd,yBAAKA,UAAU,iBACd,wBAAIA,UAAU,eACb,uBAAG67B,KAAK,SAASuB,cAAY,WAAWC,KAAK,yBAC5C,8CACA,uBAAGr9B,UAAU,mCACb,uBAAGA,UAAU,sCAIhB,yBAAKA,UAAU,6BAA6B67B,KAAK,WAAW1/B,GAAG,wBAC9D,wBAAI6D,UAAU,8BACb,wBAAIA,UAAU,mBACb,yBAAKA,UAAU,aAAa7H,MAAO,CAACwmC,aAAc,IACjD,2BAAOsQ,QAAQ,iBAAiBjvC,UAAU,0BAA1C,YACA,yBAAKA,UAAU,wBACd,0BAAMA,UAAU,qBAAqBvL,KAAK0gD,gBAC1C,2BAAO3oC,KAAK,OAAOxM,UAAU,eAAe7D,GAAG,iBAAiBtB,MAAOpG,KAAK26B,MAAMziB,MAAMiQ,iBAAkBiwB,UAAU,EAAM1L,aAAa,WAI1I,wBAAInhC,UAAU,mBACb,yBAAKA,UAAU,aAAa7H,MAAO,CAACwmC,aAAc,IACjD,2BAAOsQ,QAAQ,mBAAmBjvC,UAAU,0BAA5C,cACA,yBAAKA,UAAU,wBACd,0BAAMA,UAAU,qBAAqBvL,KAAK0gD,gBACzC1gD,KAAK26B,MAAM2sB,gBACX,2BAAOvvC,KAAK,OAAOxM,UAAU,eAAe7D,GAAG,mBAAmBtB,MAAOpG,KAAK26B,MAAMziB,MAAMsvC,mBAAoBxZ,aAAW,aAAavB,SAAUzsC,KAAK8+C,qBAAsBkC,OAAQhhD,KAAK8+C,qBAAsBpS,aAAa,QAC3N,2BAAO30B,KAAK,OAAOxM,UAAU,eAAe7D,GAAG,mBAAmBtB,MAAOpG,KAAK26B,MAAMziB,MAAMsvC,mBAAoBxZ,aAAW,aAAaoK,UAAU,EAAM1L,aAAa,WAIvK,wBAAInhC,UAAU,mBACb,yBAAKA,UAAU,aAAa7H,MAAO,CAACwmC,aAAc,IACjD,2BAAOsQ,QAAQ,iBAAiBjvC,UAAU,0BAA1C,YACA,yBAAKA,UAAU,wBACd,0BAAMA,UAAU,qBAAqBvL,KAAK0gD,gBACzC1gD,KAAK26B,MAAM2sB,gBACX,2BAAOvvC,KAAK,OAAOxM,UAAU,eAAe7D,GAAG,iBAAiBtB,MAAOpG,KAAK26B,MAAMziB,MAAMuvC,iBAAkBzZ,aAAW,WAAWvB,SAAUzsC,KAAK8+C,qBAAsBkC,OAAQhhD,KAAK8+C,qBAAsBpS,aAAa,QACrN,2BAAO30B,KAAK,OAAOxM,UAAU,eAAe7D,GAAG,iBAAiBtB,MAAOpG,KAAK26B,MAAMziB,MAAMuvC,iBAAkBzZ,aAAW,WAAWoK,UAAU,EAAM1L,aAAa,WAIjK,wBAAInhC,UAAU,mBACb,yBAAKA,UAAU,aAAa7H,MAAO,CAACwmC,aAAc,IACjD,2BAAOsQ,QAAQ,YAAYjvC,UAAU,0BAArC,OACA,yBAAKA,UAAU,wBACd,0BAAMA,UAAU,qBAAqBvL,KAAK0gD,gBAC1C,2BAAO3oC,KAAK,OAAOxM,UAAU,eAAe7D,GAAG,YAAYtB,MAAOpG,KAAK26B,MAAMziB,MAAMqQ,YAAa6vB,UAAU,EAAM1L,aAAa,WAIhI,wBAAInhC,UAAU,mBACb,yBAAKA,UAAU,aAAa7H,MAAO,CAACwmC,aAAc,IACjD,2BAAOsQ,QAAQ,cAAcjvC,UAAU,0BAAvC,SACA,yBAAKA,UAAU,wBACd,0BAAMA,UAAU,oBAAoB7H,MAAO,CAACgkD,WAAY,SAAU1nD,KAAK0gD,gBACvE,2BAAO3oC,KAAK,OAAOxM,UAAU,eAAe7D,GAAG,cAAchE,MAAO,CAACgkD,WAAY,QAASthD,MAAOpG,KAAK26B,MAAMziB,MAAM4P,cAAeswB,UAAU,EAAM1L,aAAa,cAQpK,yBAAKnhC,UAAU,gBACd,yBAAKA,UAAU,YAAY67B,KAAK,SAC/B,4BAAQ77B,UAAU,kBAAkBk8B,QAASznC,KAAK26B,MAAM2d,UAAU,uBAAG/sC,UAAU,gBAA/E,WACEoD,EAAO8N,eAAiB+Q,EAAO/P,aAAe,4BAAQlS,UAAU,kBAAkBk8B,QAASznC,KAAK26B,MAAMgtB,SAAS,uBAAGp8C,UAAU,gBAA9E,UAChD,4BAAQA,UAAW,2BAA6BoD,EAAOK,IAAIwe,EAAOpQ,2BAA6B,IAAM,KAAMqqB,QAASznC,KAAK4nD,0BAA0B,uBAAGr8C,UAAU,eAAhK,oB,GAxUkBowB,IAAMC,WAAxBoqB,EAUEnqB,aAAe,CAErByrB,iBAAiB,GAoUJtB,a,6BC1Vf,uDAIIhJ,EAAa7/C,EAAQ,KACrB8/C,EAAS9/C,EAAQ,IAEjBsT,GADItT,EAAQ,IACLA,EAAQ,IAEb0qD,E,kDAcL,WAAYltB,GAAQ,IAAD,8BAClB,cAAMA,IAeP6kB,iBAAmB,SAACv+C,GACnB,EAAKiX,MAAM8Q,cAAyB,MAAR/nB,EAAgBA,EAAKwkD,OAAS,KAE1D,EAAKt3B,aAnBa,EAsBnB4wB,sBAAwB,SAACjX,GACxB,EAAK5vB,MAAM4vB,EAAMM,OAAOF,QAAb,OAAiC3hC,SAASuhC,EAAMM,OAAOhiC,OAElE,EAAK+nB,aAzBa,EA4BnBmf,iBAAmB,SAACxF,GACnB,EAAK5vB,MAAM4vB,EAAMM,OAAOF,QAAb,OAAiCJ,EAAMM,OAAOhiC,MAEzD,EAAK+nB,aA/Ba,EAkCnBA,UAAY,WAEX,EAAKwM,MAAMkS,OAAO,EAAK30B,QA7BvB,EAAKA,MAAQyiB,EAAMziB,MAPD,E,sEAUOmjB,GAGzBr7B,KAAKkY,MAAQmjB,EAAUnjB,Q,+BA6BvB,OACC,yBAAK3M,UAAU,0CACd,yBAAKA,UAAU,gBAAgB67B,KAAK,MAAM1/B,GAAG,oBAC5C,wBAAI6D,UAAU,eACb,uBAAG67B,KAAK,SAASuB,cAAY,WAAWC,KAAK,uBAC5C,mDACA,uBAAGr9B,UAAU,mCACb,uBAAGA,UAAU,sCAIhB,yBAAKA,UAAU,6CAA6C67B,KAAK,WAAW1/B,GAAG,sBAC9E,yBAAK6D,UAAU,kBACd,yBAAKA,UAAU,4BACd,yBAAKA,UAAU,cACd,2BAAOivC,QAAQ,sBAAsBjvC,UAAU,0BAA/C,iBACA,yBAAKA,UAAU,uBACd,kBAACyxC,EAAD,CAAYiC,SAAUj/C,KAAK26B,MAAMziB,MAAM8Q,cAAgBi0B,EAAOwI,KAAKzlD,KAAK26B,MAAMziB,MAAM8Q,eAAiB,KAAMyjB,SAAUzsC,KAAKw/C,iBAA8C+B,gBAAgB,cAAch2C,UAAU,mBAGlN,yBAAKA,UAAU,cACd,2BAAOivC,QAAQ,0BAA0BjvC,UAAU,0BAAnD,qBACA,yBAAKA,UAAU,YACd,4BAAQA,UAAU,eAAe7D,GAAG,0BAA0BsmC,aAAW,aAAa5nC,MAAOpG,KAAK26B,MAAMziB,MAAM4Q,WAAY2jB,SAAUzsC,KAAK++C,sBAAuBrS,aAAa,OAC3K1sC,KAAK26B,MAAMlP,SAAS1hB,KAAI,SAASyjB,GACjC,OAAO,4BAAQ/iB,IAAK+iB,EAAO9lB,GAAItB,MAAOonB,EAAO9lB,IAAK8lB,EAAO5e,YAK7D,yBAAKrD,UAAU,cACd,2BAAOivC,QAAQ,WAAWjvC,UAAU,0BAApC,QACA,yBAAKA,UAAU,YACd,2BAAOwM,KAAK,OAAOxM,UAAU,eAAe7D,GAAG,WAAWsmC,aAAW,KAAK5nC,MAAOpG,KAAK26B,MAAMziB,MAAM6Q,GAAI0jB,SAAUzsC,KAAKstC,iBAAkBZ,aAAa,UAGpJ1sC,KAAK26B,MAAMmtB,kBAAkBvpD,OAC9B,yBAAKgN,UAAU,cACd,2BAAOivC,QAAQ,yBAAyBjvC,UAAU,0BAAlD,mBACA,yBAAKA,UAAU,YACd,4BAAQA,UAAU,eAAe7D,GAAG,yBAAyBsmC,aAAW,sBAAsB5nC,MAAOpG,KAAK26B,MAAMziB,MAAMmR,oBAAqBojB,SAAUzsC,KAAK++C,sBAAuBrS,aAAa,OAC7L,4BAAQjiC,IAAI,eAAerE,MAAM,MAChCpG,KAAK26B,MAAMmtB,kBAAkB/9C,KAAI,SAASyjB,GAC1C,OAAO,4BAAQ/iB,IAAK+iB,EAAO9lB,GAAItB,MAAOonB,EAAO9lB,IAA4B,MAAtB8lB,EAAO+Z,aAA6C,IAAtB/Z,EAAO+Z,YAAqB/Z,EAAO+Z,YAAc/Z,EAAO8rB,iBAIpI,MAIX,yBAAK/tC,UAAU,4BACd,yBAAKA,UAAU,cACd,2BAAOivC,QAAQ,iBAAiBjvC,UAAU,0BAA1C,YACA,yBAAKA,UAAU,YACd,2BAAOwM,KAAK,OAAOxM,UAAU,eAAe7D,GAAG,iBAAiBtB,MAAiD,MAA1CpG,KAAK26B,MAAMziB,MAAMmU,sBAAgCrsB,KAAK26B,MAAMziB,MAAMmU,sBAAwB5b,EAAK1N,qBAAqB6L,KAAMwpC,UAAU,EAAM1L,aAAa,UAGhO,yBAAKnhC,UAAU,cACd,2BAAOivC,QAAQ,qBAAqBjvC,UAAU,0BAA9C,gBACA,yBAAKA,UAAU,YACd,4BAAQA,UAAU,eAAe7D,GAAG,qBAAqBsmC,aAAW,mBAAmB5nC,MAAOpG,KAAK26B,MAAMziB,MAAM2Q,iBAAkB4jB,SAAUzsC,KAAK++C,sBAAuBrS,aAAa,OAClL1sC,KAAK26B,MAAMpP,aAAaxhB,KAAI,SAASyjB,GACrC,OAAO,4BAAQ/iB,IAAK+iB,EAAO9lB,GAAItB,MAAOonB,EAAO9lB,IAAK8lB,EAAO5e,YAK7D,yBAAKrD,UAAU,cACd,2BAAOivC,QAAQ,kBAAkBjvC,UAAU,0BAA3C,aACA,yBAAKA,UAAU,YACd,4BAAQA,UAAU,eAAe7D,GAAG,kBAAkBsmC,aAAW,eAAe5nC,MAAOpG,KAAK26B,MAAMziB,MAAMmP,aAAcolB,SAAUzsC,KAAK++C,sBAAuBrS,aAAa,OACvK1sC,KAAK26B,MAAMnP,WAAWzhB,KAAI,SAASyjB,GACnC,OAAO,4BAAQ/iB,IAAK+iB,EAAO9lB,GAAItB,MAAOonB,EAAO9lB,IAAK8lB,EAAO5e,YAK3D5O,KAAK26B,MAAMmtB,kBAAkBvpD,OAC9B,yBAAKgN,UAAU,cACd,2BAAOivC,QAAQ,0BAA0BjvC,UAAU,0BAAnD,oBACA,yBAAKA,UAAU,YACd,4BAAQA,UAAU,eAAe7D,GAAG,0BAA0BsmC,aAAW,uBAAuB5nC,MAAOpG,KAAK26B,MAAMziB,MAAMoR,qBAAsBmjB,SAAUzsC,KAAK++C,sBAAuBrS,aAAa,OAChM,4BAAQjiC,IAAI,eAAerE,MAAM,MAChCpG,KAAK26B,MAAMmtB,kBAAkB/9C,KAAI,SAASyjB,GAC1C,OAAO,4BAAQ/iB,IAAK+iB,EAAO9lB,GAAItB,MAAOonB,EAAO9lB,IAA4B,MAAtB8lB,EAAO+Z,aAA6C,IAAtB/Z,EAAO+Z,YAAqB/Z,EAAO+Z,YAAc/Z,EAAO8rB,iBAIpI,MAIX,yBAAK/tC,UAAU,6BACd,yBAAKA,UAAU,aAAa7H,MAAO,CAACwmC,aAAc,IACjD,2BAAOsQ,QAAQ,iBAAiBjvC,UAAU,0BAA1C,YACA,yBAAKA,UAAU,aACd,8BAAUA,UAAU,eAAe7D,GAAG,iBAAiBsmC,aAAW,SAASC,KAAK,IAAI7nC,MAAOpG,KAAK26B,MAAMziB,MAAM+Q,OAAQwjB,SAAUzsC,KAAKstC,iBAAkBZ,aAAa,kB,GAzJ/I/Q,IAAMC,WAA5BisB,EAUEhsB,aAAe,CACrBisB,kBAAmB,IAyJND,a,6BC7Kf,+FAQInxB,EAAgBv5B,EAAQ,IACxBqT,EAAIrT,EAAQ,IACZsT,EAAOtT,EAAQ,GAEb4qD,E,kDAiCL,WAAYptB,GAAQ,IAAD,8BAClB,cAAMA,IAqBPuR,uBAAyB,SAACpE,GACzB,IAAMntB,EAAamtB,EAAMM,OAAOhiC,MAEhC,EAAKu0B,MAAMsR,SAAStxB,EAAY,EAAG,EAAKggB,MAAMzL,gBAzB5B,EA4BnB84B,iCAAmC,SAAClgB,GACnC,IAAM5Y,EAAgB,EAAKyL,MAAMzL,eAAiB,GAClDA,EAAcO,iBAAmBqY,EAAMM,OAAOF,QAAb,OAEjC,EAAKvN,MAAMsR,SAAS,EAAKtR,MAAMhgB,WAAY,EAAGuU,IAhC5B,EAmCnBid,uBAAyB,SAACrE,GACzBA,EAAMC,iBAEN,IAAMntB,EAA4C,QAA/BktB,EAAMM,OAAOF,QAAb,IACjB,EAAKvN,MAAM/f,WAAa,EAAI,EAAK+f,MAAM/f,WAAa,EAAI,EACxB,MAA/B,EAAK+f,MAAMkR,kBAA4B,EAAKlR,MAAM/f,WAAa,EAAK+f,MAAMkR,iBAAoB,EAAKlR,MAAM/f,WAAa,EAAI,EAAK+f,MAAM/f,WAGrIA,GAAc,EAAK+f,MAAM/f,YAC3B,EAAK+f,MAAMsR,SAAS,EAAKtR,MAAMhgB,WAAYC,EAAY,EAAK+f,MAAMzL,gBA5CjD,EAgDnB+4B,2BAA6B,WAC5B,IAAM/4B,EAAgB,EAAKyL,MAAMzL,eAAiB,GAClDA,EAAcM,WAAuC,MAA1BN,EAAcM,UAAoBN,EAAcM,UAC3E,EAAKmL,MAAMsR,SAAS,EAAKtR,MAAMhgB,WAAY,EAAGuU,IAnD5B,EAsDnBg5B,kCAAoC,WACnC,EAAKltB,UAAS,SAACuO,GAAD,MAAgB,CAC7B4e,+BAAgC5e,EAAU4e,mCAxDzB,EA4DnBC,oCAAsC,SAACxiB,GACtC,IAAM1W,EAAgB,EAAKyL,MAAMzL,eAAiB,GAClDA,EAAcQ,WAAaR,EAAcQ,YAAc,GACvDR,EAAcQ,WAAW9c,KAAKgzB,GAC9B1W,EAAcQ,WAAalf,EAAEsgB,KAAK5B,EAAcQ,YAChD,EAAKiL,MAAMsR,SAAS,EAAKtR,MAAMhgB,WAAY,EAAGuU,IAjE5B,EAoEnBm5B,sCAAwC,SAACziB,GACxC,IAAM1W,EAAgB,EAAKyL,MAAMzL,eAAiB,GAClDA,EAAcQ,WAAaR,EAAcQ,YAAc,GACvDlf,EAAE83C,KAAKp5B,EAAcQ,WAAYkW,GACjC,EAAKjL,MAAMsR,SAAS,EAAKtR,MAAMhgB,WAAY,EAAGuU,IAxE5B,EA2EnBq5B,4BAA8B,SAACzgB,GAC9B,IAAMM,EAASN,EAAMM,OACf6d,EAAYne,EAAM/vB,KAEpB8V,EAAU,CACb,GAAMua,EAAOF,QAAP,GACN,KAAQE,EAAOF,QAAP,KACR,IAAOE,EAAOF,QAAP,IACP,WAAcE,EAAOF,QAAP,UACd,WAAeE,EAAOF,QAAP,UAA8B,EAC7C,aAAgBE,EAAOF,QAAP,WAChB,aAAgBzhC,WAAW2hC,EAAOF,QAAP,KAC3B,aAAgBzhC,WAAW2hC,EAAOF,QAAP,KAC3B,aAAgB3hC,SAAS6hC,EAAOF,QAAP,MAG1B,EAAKlN,UAAS,SAASuO,EAAW5O,GAEjC,GAAkB,UAAfyN,EAAOrwB,KAAiB,CAC1B,IAAIywC,EAA0D,MAA1Cjf,EAAUkf,iBAAiB56B,EAAQnmB,KAAe6hC,EAAUkf,iBAAiB56B,EAAQnmB,IAAIkgB,SAAW,EAAK2hB,EAAUkf,iBAAiB56B,EAAQnmB,IAAIkgB,SAAW,EAC3K8gC,EAAe76B,EAAQ24B,aAAe34B,EAAQu4B,aAAe,EACjEv4B,EAAQjG,SAAWnX,EAAKpJ,UAAmC,MAAzB+gC,EAAOF,QAAP,IAAgCsgB,EAAeE,EAAeF,EAAeE,GAC/G76B,EAAQ44B,iBAAmB54B,EAAQjG,aAG/B,CACJ,IAAIs+B,EAAkBz1C,EAAKjK,cAAc4hC,EAAOhiC,MAAqB,QAAb6/C,GACxDp4B,EAAQjG,SAAWs+B,EAAgB9/C,MACnCynB,EAAQ44B,iBAAmBP,EAAgB7/C,aAS5C,GANGwnB,EAAQjG,SAAW,IACrBiG,EAAQjG,SAAW,EACnBiG,EAAQ44B,iBAAmB,GAIV,UAAfre,EAAOrwB,MAAiC,QAAbkuC,EAAoB,CACjD,IAAIS,EAAmBj2C,EAAK3J,eAAe+mB,EAAQjG,SAAUiG,EAAQ44B,iBAAkB54B,EAAQu4B,aAAcv4B,EAAQy4B,aAAcz4B,EAAQ24B,cAC3I34B,EAAQjG,SAAW8+B,EAAiBtgD,MACpCynB,EAAQ44B,iBAAmBC,EAAiBrgD,aAa7C,OATGwnB,EAAQjG,SAAW,EACrB2hB,EAAUkf,iBAAiB56B,EAAQnmB,IAAMmmB,EAII,MAA1C0b,EAAUkf,iBAAiB56B,EAAQnmB,MACrC6hC,EAAUkf,iBAAiB56B,EAAQnmB,SAAM8P,GAGpC,CACNixC,iBAAkBlf,EAAUkf,sBAjIZ,EAuInB/e,YAAc,WACb,EAAK/O,MAAM2R,SAAS,EAAKlR,MAAMqtB,mBAxIb,EA4InBE,iBAAmB,WAAc5e,GAAS,IAApBlc,EAAmB,EAAnBA,QAIjBD,EAAiC,MAApBC,EAAQqM,UAAoBrM,EAAQqM,SAAS37B,OAAS,EAAIsvB,EAAQqM,SAAS,GAAGxyB,GAAKmmB,EAAQnmB,GAExGkhD,EAAwC,MAAzB/6B,EAAQg7B,eAAyBh7B,EAAQg7B,cAActqD,OAE1E,OACC,wBAAIkM,IAAKojB,EAAQnmB,IAChB,wBAAI6D,UAAU,YACb,yBAAKA,UAAW,gBAAkBq9C,EAAc,sBAAwB,KAEtEA,EACA,yBAAKr9C,UAAU,iBACd,uBAAGq9B,KAAK,IAAInB,QAAS,EAAKqhB,gBAAiB7D,WAAUlb,GACpD,kBAAC,IAAD,CAAW5O,IAAK1qB,EAAK9I,qBAAqBkmB,EAAQg7B,mBAE3C,KAEV,8BAAOh7B,EAAQjf,MAAY,6BACzBif,EAAQvS,YACT,0BAAM/P,UAAU,uCAAuCsiB,EAAQvS,aAAsB,KAEpFuS,EAAQwM,IACT,0BAAM9uB,UAAU,sCAAsC7H,MAAQmqB,EAAQvS,YAAc,CAACs9B,WAAY,OAAS,MAAQ/qB,EAAQwM,KAAc,KAEzI,0BAAM9uB,UAAU,sCAAsC7H,MAAQmqB,EAAQvS,aAAeuS,EAAQwM,IAAM,CAACue,WAAY,OAAS,MAAQ,QAAU/qB,EAAQk7B,cAAgBl7B,EAAQk7B,cAAgB,MAC3L,0BAAMx9C,UAAU,oCAAoC7H,MAAO,CAACk1C,WAAY,QACtE,EAAKje,MAAM+lB,eAAiB7yB,EAAQ0M,YAEZ,MAAvB1M,EAAQoM,aAA8C,GAAvBpM,EAAQoM,YACzC,0BAAM1uB,UAAU,+BAA+B7H,MAAO,CAACk1C,WAAY,QAClE,uBAAGrtC,UAAU,gBACJ,OAIb,wBAAIA,UAAU,YACb,yBAAKA,UAAU,eACd,0BAAMA,UAAU,mBACf,4BAAQA,UAAW,EAAKovB,MAAM2M,UAAY,2BAA6B,kBAAmBvvB,KAAK,SAC9F0vB,QAAS,EAAK8gB,4BACdne,WAAS,OAAOvB,UAASjb,EAAW4hB,YAAW3hB,EAAQjf,KAAMo6C,WAAUn7B,EAAQwM,IAAK4uB,iBAAgBp7B,EAAQ0M,WAAY2uB,iBAAgBr7B,EAAQ9F,WAChJohC,kBAAiBt7B,EAAQxG,aAAc+hC,WAAUv7B,EAAQw7B,cAAeC,WAAUz7B,EAAQ07B,cAAeC,WAAU37B,EAAQ47B,kBAH5H,MAKD,2BAAO1xC,KAAK,OAAOxM,UAAU,mDAAmDmhC,aAAa,MAC5FtmC,MAAiD,MAA1C,EAAKg1B,MAAMqtB,iBAAiB76B,GAAqB,EAAKwN,MAAMqtB,iBAAiB76B,GAAW64B,iBAAmB,EAAKrrB,MAAMsuB,0BAC7Hjd,SAAU,EAAK8b,4BAA6BvH,OAAQ,EAAKuH,4BAA6BnQ,SAAU,EAAKzd,MAAM2M,UAC3GuB,UAASjb,EAAW4hB,YAAW3hB,EAAQjf,KAAMo6C,WAAUn7B,EAAQwM,IAAK4uB,iBAAgBp7B,EAAQ0M,WAAY2uB,iBAAgBr7B,EAAQ9F,WAChIohC,kBAAiBt7B,EAAQxG,aAAc+hC,WAAUv7B,EAAQw7B,cAAeC,WAAUz7B,EAAQ07B,cAAeC,WAAU37B,EAAQ47B,mBAC5H,0BAAMl+C,UAAU,mBACf,4BAAQA,UAAW,EAAKovB,MAAM2M,UAAY,2BAA6B,kBAAmBvvB,KAAK,SAC9F0vB,QAAS,EAAK8gB,4BACdne,WAAS,KAAKvB,UAASjb,EAAW4hB,YAAW3hB,EAAQjf,KAAMo6C,WAAUn7B,EAAQwM,IAAK4uB,iBAAgBp7B,EAAQ0M,WAAY2uB,iBAAgBr7B,EAAQ9F,WAC9IohC,kBAAiBt7B,EAAQxG,aAAc+hC,WAAUv7B,EAAQw7B,cAAeC,WAAUz7B,EAAQ07B,cAAeC,WAAU37B,EAAQ47B,kBAH5H,UAhMa,EA2MnBX,gBAAkB,SAAChhB,GAClBA,EAAMC,iBACN,IAAM4hB,EAAe7hB,EAAMG,cAAcC,QAApB,IACjBra,EAAU,EAAK8M,MAAMmR,cAAc6d,GAAc97B,QACrD,EAAKmN,SAAS,CACb4uB,sBAAsB,EACtBC,iBAAkBh8B,EAAQjf,KAC1Bk7C,kBAAmBj8B,EAAQ4b,UAlNV,EAsNnBsgB,iBAAmB,WAClB,EAAK/uB,SAAS,CACb4uB,sBAAsB,EACtBC,iBAAkB,KAClBC,kBAAmB,MAvNpB,EAAK1uB,MAAQ,CAEZqtB,iBAAkB,GAClBiB,0BAA2B,EAE3BvB,+BAA+B,EAC/ByB,sBAAsB,EACtBC,iBAAkB,KAClBC,kBAAmB,IAXF,E,gEAmBlB9pD,KAAK26B,MAAMsR,SAASjsC,KAAK26B,MAAMhgB,WAAY3a,KAAK26B,MAAM/f,WAAY5a,KAAK26B,MAAMzL,iB,+BA4M7E,IAAI86B,EAAyD,MAA5BhqD,KAAK26B,MAAMzL,eAA8D,MAArClvB,KAAK26B,MAAMzL,cAAcM,UAAoBxvB,KAAK26B,MAAMzL,cAAcM,SACvIy6B,EAA+D,MAA5BjqD,KAAK26B,MAAMzL,eAAyBlvB,KAAK26B,MAAMzL,cAAcO,kBAAoBiH,EAAcsD,OAClIkwB,EAAmD,MAA5BlqD,KAAK26B,MAAMzL,eAAgE,MAAvClvB,KAAK26B,MAAMzL,cAAcQ,YAAsB1vB,KAAK26B,MAAMzL,cAAcQ,WAAWnxB,OAElJ,OACC,yBAAKgN,UAAU,gBAAgB7H,MAAO,CAACwjC,QAAQ,SAAUC,SAAS,KAAKC,KAAK,UAC3E,yBAAK77B,UAAU,eAAe7H,MAAO,CAACisC,OAAQ,IAC7C,yBAAKpkC,UAAU,iBAEd,yBAAKA,UAAU,gBACd,4BAAQwM,KAAK,SAASxM,UAAU,QAAQu+B,eAAa,QAAQrC,QAASznC,KAAK0pC,aAA3E,QACA,wBAAIn+B,UAAU,eAAd,kBAE0B,MAAvBvL,KAAK26B,MAAMwvB,SAAmB,6BAAS,KAChB,MAAvBnqD,KAAK26B,MAAMwvB,SAAmB,+BAAQnqD,KAAK26B,MAAMwvB,UAAoB,OAIzE,yBAAK5+C,UAAU,cAGbvL,KAAKo7B,MAAMwuB,qBACX,kBAAC,IAAD,CACC/lD,MAAO7D,KAAKo7B,MAAMyuB,iBAClBpgB,OAAQzpC,KAAKo7B,MAAM0uB,kBACnBngB,QAAS3pC,KAAK+pD,mBACV,KAIL/pD,KAAK26B,MAAMyvB,4BACX,yBAAK7+C,UAAU,OACd,yBAAKA,UAAU,YACd,2BAAOwM,KAAK,OAAOxM,UAAU,eAAe7D,GAAG,iBAAiB8kC,YAAY,SAASpmC,MAAOpG,KAAK26B,MAAMhgB,WAAY8xB,SAAUzsC,KAAKksC,uBAAwBQ,aAAa,SAExK,yBAAKnhC,UAAU,2BACd,yBAAKA,UAAU,gCAAgC67B,KAAK,SACnD,yBAAK77B,UAAU,YAAY67B,KAAK,SAC/B,4BAAQ77B,UAAW,kBAAoBy+C,EAA4B,cAAgB,eAClF5R,SAAUp4C,KAAK26B,MAAM2M,UACrBG,QAASznC,KAAKioD,4BAA4B,uBAAG18C,UAAU,iBAEzD,yBAAKA,UAAU,YAAY67B,KAAK,SAC/B,4BAAQ77B,UAAW,kBAAoB2+C,EAAsB,cAAgB,eAC5E9R,SAAUp4C,KAAK26B,MAAM2M,UACrBG,QAASznC,KAAKkoD,mCAAmC,uBAAG38C,UAAU,qBAIlE,yBAAKA,UAAU,2BACd,yBAAKA,UAAU,gCAAgC67B,KAAK,SACnD,yBAAK77B,UAAU,YAAY67B,KAAK,SAC/B,4BAAQ77B,UAAW,QAAU0+C,EAAkC,cAAgB,eAC9E7R,SAAW6R,GAAmCjqD,KAAK26B,MAAM2M,UACzD+iB,cAAa3zB,EAAcsD,OAAQyN,QAASznC,KAAKgoD,kCAFlD,WAID,yBAAKz8C,UAAU,YAAY67B,KAAK,SAC/B,4BAAQ77B,UAAW,QAAW0+C,EAAkD,cAAhB,eAC/D7R,UAAY6R,GAAmCjqD,KAAK26B,MAAM2M,UAC1D+iB,cAAa3zB,EAAckK,IAAK6G,QAASznC,KAAKgoD,kCAF/C,WAQJ,yBAAKz8C,UAAU,OACd,yBAAKA,UAAU,YACd,2BAAOwM,KAAK,OAAOxM,UAAU,eAAe7D,GAAG,iBAAiB8kC,YAAY,SAASpmC,MAAOpG,KAAK26B,MAAMhgB,WAAY8xB,SAAUzsC,KAAKksC,uBAAwBQ,aAAa,SAExK,yBAAKnhC,UAAU,2BACd,yBAAKA,UAAU,gCAAgC67B,KAAK,SACnD,yBAAK77B,UAAU,YAAY67B,KAAK,SAC/B,4BAAQ77B,UAAW,kBAAoBy+C,EAA4B,cAAgB,eAClF5R,SAAUp4C,KAAK26B,MAAM2M,UACrBG,QAASznC,KAAKioD,4BAA4B,uBAAG18C,UAAU,iBAEzD,yBAAKA,UAAU,YAAY67B,KAAK,SAC/B,4BAAQ77B,UAAW,kBAAoB2+C,EAAsB,cAAgB,eAC5E9R,SAAUp4C,KAAK26B,MAAM2M,UACrBG,QAASznC,KAAKkoD,mCAAmC,uBAAG38C,UAAU,sBAMpE,kBAAC,IAAD,CACCmkB,WAAY1vB,KAAK26B,MAAMjL,WACvBgZ,WAAawhB,EAAsBlqD,KAAK26B,MAAMzL,cAAcQ,WAAa,GACzE2Y,SAAUroC,KAAKooD,oCACfpgB,WAAYhoC,KAAKqoD,sCACjBrf,OAAQhpC,KAAKo7B,MAAM+sB,gCACpB,yBAAK58C,UAAU,mDACd,kBAAC,IAAD,CAASD,UAAWtL,KAAK26B,MAAM2M,YAC/B,kBAAC,IAAD,CAAmBh8B,WAAYtL,KAAK26B,MAAM2M,UAAW/lB,KAAM,CAACN,KAAMjhB,KAAK26B,MAAM/f,WAAYoG,SAAUhhB,KAAK26B,MAAM9f,eAAgBa,MAAO1b,KAAK26B,MAAMiR,YAAajwB,WAAY3b,KAAK26B,MAAMkR,oBACpL,6BACC,wBAAItgC,UAAU,SACb,wBAAIA,UAAoC,GAAzBvL,KAAK26B,MAAM/f,WAAkB,oBAAsB,YACjE,uBAAGguB,KAAK,IAAIwB,WAAS,OAAO3C,QAASznC,KAAKmsC,wBAAwB,0BAAM9B,cAAY,QAAlB,KAAlE,UAED,wBAAI9+B,UAA2C,MAA/BvL,KAAK26B,MAAMkR,kBAA4B7rC,KAAK26B,MAAMkR,kBAAoB,GAAK7rC,KAAK26B,MAAM/f,YAAc5a,KAAK26B,MAAMkR,iBAAoB,gBAAkB,QACpK,uBAAGjD,KAAK,IAAIwB,WAAS,OAAO3C,QAASznC,KAAKmsC,wBAA1C,QAAuE,0BAAM9B,cAAY,QAAlB,SAK1ErqC,KAAK26B,MAAMmR,cAAcvtC,OACzB,2BAAOgN,UAAU,oCAChB,+BACGvL,KAAK26B,MAAMmR,cAAc/hC,IAAI/J,KAAK2oD,oBAItC,yBAAKp9C,UAAW,eAAiBvL,KAAK26B,MAAM2M,UAAY,SAAW,eAAnE,uBAOF,yBAAK/7B,UAAU,gBACd,4BAAQwM,KAAK,SAASxM,UAAU,kBAAkBu+B,eAAa,QAAQrC,QAASznC,KAAK0pC,aAArF,gB,GAxXyB/N,IAAMC,WAAhCmsB,EAkBElsB,aAAe,CACrBsuB,SAAU,KACVzJ,eAAgBjwC,EAAK1N,qBAAqByjB,OAC1CkJ,WAAY,GACZ/U,WAAY,GACZC,WAAY,EACZC,eAAgB,KAChBqU,cAAe,KACfk7B,6BAA6B,EAC7Bxe,YAAa,KACbC,iBAAkB,KAClBC,cAAe,GACfxE,WAAW,GAoWEygB,a,6BC9Yf,uEAKI11C,EAAgBlV,EAAQ,IACxBqT,EAAIrT,EAAQ,IACZsT,EAAOtT,EAAQ,GAEbmtD,E,kDAUL,WAAY3vB,GAAQ,IAAD,8BAClB,cAAMA,IAMPmrB,eAAiB,SAAC5tC,GACjB,IAAI2tC,EAAYr1C,EAAE4pC,KAAKliC,EAAMwP,OAAOnpB,OAChCgsD,EAAiB95C,EAAK/J,eAAewR,EAAMwD,OAC3ChI,EAAWrB,EAAcQ,YAAYqF,EAAMgE,aAE/C,OACC,wBAAIzR,IAAKyN,EAAMxQ,IACd,4BACC,8BAAmB,MAAZgM,EAAmBA,EAAS9E,KAAO,6BAAmC,6BAC7E,0BAAMrD,UAAU,gCAAhB,SAAqD,iCAAmC,MAAzB2M,EAAMsrB,SAAShd,OAAiBtO,EAAMsrB,SAAShd,OAAS,EAAKu/B,uBAAyBwE,EAAelkD,eACpK,0BAAMkF,UAAU,+BAA+B7H,MAAO,CAACk1C,WAAY,QAAS,IAAMiN,EAAY,SAAwB,GAAbA,EAAiB,GAAK,KAAO,MAEvI,wBAAIt6C,UAAU,eACb,kBAAC,IAAD,CAAMA,UAAY,EAAKovB,MAAM2M,UAAY,2BAA6B,kBAAoBF,KAAK,SAASmR,GAAI,sBAAwBrgC,EAAMxQ,IAAI,uBAAG6D,UAAU,wBAA3J,YAhBH,EAAKw6C,sBAAwBt1C,EAAK1N,qBAAqByjB,OAJrC,E,qDA4BlB,OACC,yBAAKjb,UAAU,YACd,kBAAC,IAAD,CAASD,UAAWtL,KAAK26B,MAAM2M,YAE/BtnC,KAAK26B,MAAMvP,OAAO7sB,OAClB,2BAAOgN,UAAU,mCAAmC7H,MAAO,CAACumC,UAAW,IACtE,+BACGjqC,KAAK26B,MAAMvP,OAAOrhB,IAAI/J,KAAK8lD,kBAI/B,yBAAKv6C,UAAWvL,KAAK26B,MAAM2M,UAAY,SAAW,cAAlD,8B,GAjDwB3L,IAAMC,WAA5B0uB,EAMEzuB,aAAe,CACrByL,WAAW,GAmDEgjB,a,6BCnEf,uDAGI5kC,EAAavoB,EAAQ,IACrBkV,EAAgBlV,EAAQ,IACxB8/C,EAAS9/C,EAAQ,IAEfqtD,E,kDASL,WAAY7vB,GAAQ,IAAD,8BAClB,cAAMA,IAGDS,MAAQ,CACZqvB,YAAa/kC,EAAW2E,eAAesQ,EAAMziB,MAAMwyC,iBACnDC,SAAUjlC,EAAW0B,YAAYuT,EAAMziB,MAAMmP,cAC7CujC,gBAAkBjwB,EAAMziB,MAAMmR,oBAAsB,EAAIhX,EAAciC,oBAAoBqmB,EAAMziB,MAAMgE,YAAaye,EAAMziB,MAAMmR,qBAAuB,KACtJwhC,iBAAmBlwB,EAAMziB,MAAMoR,qBAAuB,EAAIjX,EAAciC,oBAAoBqmB,EAAMziB,MAAMgE,YAAaye,EAAMziB,MAAMoR,sBAAwB,MARxI,E,qDAalB,OACC,yBAAK/d,UAAU,0CACd,yBAAKA,UAAU,gBAAgB67B,KAAK,MAAM1/B,GAAG,oBAC5C,wBAAI6D,UAAU,eACb,uBAAG67B,KAAK,SAASuB,cAAY,WAAWC,KAAK,uBAC5C,mDACA,uBAAGr9B,UAAU,mCACb,uBAAGA,UAAU,sCAIhB,yBAAKA,UAAU,6CAA6C67B,KAAK,WAAW1/B,GAAG,sBAC9E,yBAAK6D,UAAU,kBACd,yBAAKA,UAAU,4BACd,yBAAKA,UAAU,cACd,2BAAOivC,QAAQ,sBAAsBjvC,UAAU,0BAA/C,iBACA,yBAAKA,UAAU,uBACZ0xC,EAAOwI,KAAKl/C,SAASvG,KAAK26B,MAAMziB,MAAM8Q,gBAAgBy2B,OAAO,gBAGjE,yBAAKl0C,UAAU,cACd,2BAAOivC,QAAQ,0BAA0BjvC,UAAU,0BAAnD,qBACA,yBAAKA,UAAU,YACZvL,KAAK26B,MAAMziB,MAAMuT,SAASzrB,KAAK26B,MAAMziB,MAAM4Q,cAG/C,yBAAKvd,UAAU,cACd,2BAAOivC,QAAQ,WAAWjvC,UAAU,0BAApC,QACA,yBAAKA,UAAU,YACZvL,KAAK26B,MAAMziB,MAAM4yC,KAGW,MAA9B9qD,KAAKo7B,MAAMwvB,gBACZ,yBAAKr/C,UAAU,cACd,2BAAOivC,QAAQ,yBAAyBjvC,UAAU,0BAAlD,mBACA,yBAAKA,UAAU,YAC+B,MAA1CvL,KAAKo7B,MAAMwvB,gBAAgBrjB,aAAiE,IAA1CvnC,KAAKo7B,MAAMwvB,gBAAgBrjB,YAAqBvnC,KAAKo7B,MAAMwvB,gBAAgBrjB,YAAcvnC,KAAKo7B,MAAMwvB,gBAAgBtR,YAElK,MAIX,yBAAK/tC,UAAU,4BACd,yBAAKA,UAAU,cACd,2BAAOivC,QAAQ,iBAAiBjvC,UAAU,0BAA1C,YACA,yBAAKA,UAAU,YACsB,MAAlCvL,KAAK26B,MAAMziB,MAAMsrB,SAAS50B,KAAe5O,KAAK26B,MAAMziB,MAAMsrB,SAAS50B,KAAO5O,KAAK26B,MAAMziB,MAAMsrB,SAAShd,SAGxG,yBAAKjb,UAAU,cACd,2BAAOivC,QAAQ,qBAAqBjvC,UAAU,0BAA9C,gBACA,yBAAKA,UAAU,YACc,MAA1BvL,KAAKo7B,MAAMqvB,YAAsBzqD,KAAKo7B,MAAMqvB,YAAY77C,KAAO,OAGnE,yBAAKrD,UAAU,cACd,2BAAOivC,QAAQ,kBAAkBjvC,UAAU,0BAA3C,aACA,yBAAKA,UAAU,YACW,MAAvBvL,KAAKo7B,MAAMuvB,SAAmB3qD,KAAKo7B,MAAMuvB,SAAS/7C,KAAO,OAG5B,MAA/B5O,KAAKo7B,MAAMyvB,iBACZ,yBAAKt/C,UAAU,cACd,2BAAOivC,QAAQ,yBAAyBjvC,UAAU,0BAAlD,oBACA,yBAAKA,UAAU,YACgC,MAA3CvL,KAAKo7B,MAAMyvB,iBAAiBtjB,aAAkE,IAA3CvnC,KAAKo7B,MAAMyvB,iBAAiBtjB,YAAqBvnC,KAAKo7B,MAAMyvB,iBAAiBtjB,YAAcvnC,KAAKo7B,MAAMyvB,iBAAiBvR,YAEtK,MAIX,yBAAK/tC,UAAU,6BACd,yBAAKA,UAAU,aAAa7H,MAAO,CAACwmC,aAAc,IACjD,2BAAOsQ,QAAQ,iBAAiBjvC,UAAU,0BAA1C,YACA,yBAAKA,UAAU,aACZvL,KAAK26B,MAAMziB,MAAM+Q,iB,GAjGA0S,IAAMC,WA4GnB4uB,a,6BCnHf,uDAII/5C,EAAOtT,EAAQ,GACfqT,EAAIrT,EAAQ,IAEV4tD,E,kDAUL,WAAYpwB,GAAQ,IAAD,8BAClB,cAAMA,IAQPqwB,gBAAkB,SAAC5D,GAAD,OACT,MAARA,EACA,wBAAI38C,IAAK28C,EAAK1/C,IACb,wBAAI2/C,QAAQ,KACX,yBAAK97C,UAAU,cACd,yBAAKA,UAAU,OACd,yBAAKA,UAAU,0BAA0B67C,EAAK/sB,MAE/C,yBAAK9uB,UAAU,OACd,yBAAKA,UAAU,aAAa67C,EAAKx4C,OAElC,yBAAKrD,UAAU,OACd,yBAAKA,UAAU,YACb67C,EAAK6D,KAEP,yBAAK1/C,UAAU,YACb,EAAKm1C,gBAAgC,MAAd0G,EAAKz/B,MAAgBlX,EAAK/J,eAAe0gD,EAAKz/B,OAAOthB,aAAeoK,EAAK5J,qBAAqBugD,EAAK8D,gBAAgB7kD,eAE5I,yBAAKkF,UAAU,YACb,EAAKm1C,eAAiBjwC,EAAK5J,qBAAqBugD,EAAK1rC,OAAOrV,kBAMlE,MAlCkB,EAqCnB8kD,iBAAmB,SAACzjC,GACnB,IAAI0jC,EAAmB,GAEvB,GAAG56C,EAAE4pC,KAAK1yB,GAAOnpB,OAChB,IAAK,IAAIkM,KAAOid,EACf0jC,EAAiBx4C,KAAK,EAAKo4C,gBAAgBtjC,EAAMjd,UAGlD2gD,EAAiBx4C,KAChB,wBAAInI,IAAI,KACP,wBAAI48C,QAAQ,KAAI,0BAAM97C,UAAU,cAAhB,qBAKnB,OAAO6/C,GAhDP,EAAKrF,sBAAwBt1C,EAAK1N,qBAAqByjB,OAEvD,EAAKk6B,eAAiD,MAA/B/lB,EAAMziB,MAAMsrB,SAAShd,OAAkBmU,EAAMziB,MAAMsrB,SAAShd,OAAS,EAAKu/B,sBAN/E,E,qDAwDlB,IAAIsF,EAAoB56C,EAAK/J,eAAe1G,KAAK26B,MAAMziB,MAAMsP,UACzD8jC,EAAsB76C,EAAK/J,eAAe1G,KAAK26B,MAAMziB,MAAMgR,mBAC3DqiC,EAAoB96C,EAAK/J,eAAe1G,KAAK26B,MAAMziB,MAAMkR,iBACzDoiC,EAAe/6C,EAAK/J,eAAe1G,KAAK26B,MAAMziB,MAAMuP,KACpD8iC,EAAiB95C,EAAK/J,eAAe1G,KAAK26B,MAAMziB,MAAMwD,OAK1D,OAFA1b,KAAK0gD,eAAsD,MAApC1gD,KAAK26B,MAAMziB,MAAMsrB,SAAShd,OAAkBxmB,KAAK26B,MAAMziB,MAAMsrB,SAAShd,OAASxmB,KAAK+lD,sBAG1G,6BACC,yBAAKx6C,UAAU,0CACd,yBAAKA,UAAU,iBACd,wBAAIA,UAAU,eACb,uBAAG67B,KAAK,SAASuB,cAAY,WAAWC,KAAK,0BAC5C,+CACA,uBAAGr9B,UAAU,mCACb,uBAAGA,UAAU,sCAIhB,yBAAKA,UAAU,6BAA6B67B,KAAK,WAAW1/B,GAAG,yBAC9D,2BAAO6D,UAAU,uBAChB,+BACC,4BACC,wBAAIA,UAAU,YAAd,YACA,wBAAIA,UAAU,YAAd,SACA,wBAAIA,UAAU,YAAd,WAGF,+BAEEvL,KAAKmrD,iBAAiBnrD,KAAK26B,MAAMziB,MAAMwP,WAO5C,yBAAKnc,UAAU,0CACd,yBAAKA,UAAU,iBACd,wBAAIA,UAAU,eACb,uBAAG67B,KAAK,SAASuB,cAAY,WAAWC,KAAK,yBAC5C,8CACA,uBAAGr9B,UAAU,mCACb,uBAAGA,UAAU,sCAIhB,yBAAKA,UAAU,6BAA6B67B,KAAK,WAAW1/B,GAAG,wBAC9D,wBAAI6D,UAAU,8BACb,wBAAIA,UAAU,mBACb,yBAAKA,UAAU,aAAa7H,MAAO,CAACwmC,aAAc,IACjD,2BAAOsQ,QAAQ,iBAAiBjvC,UAAU,0BAA1C,YACA,yBAAKA,UAAU,wBACd,8BAAOvL,KAAK0gD,eAAiB2K,EAAkBhlD,iBAIlD,wBAAIkF,UAAU,mBACb,yBAAKA,UAAU,aAAa7H,MAAO,CAACwmC,aAAc,IACjD,2BAAOsQ,QAAQ,mBAAmBjvC,UAAU,0BAA5C,cACA,yBAAKA,UAAU,wBACd,8BAAOvL,KAAK0gD,eAAiB4K,EAAoBjlD,iBAIpD,wBAAIkF,UAAU,mBACb,yBAAKA,UAAU,aAAa7H,MAAO,CAACwmC,aAAc,IACjD,2BAAOsQ,QAAQ,iBAAiBjvC,UAAU,0BAA1C,YACA,yBAAKA,UAAU,wBACd,8BAAOvL,KAAK0gD,eAAiB6K,EAAkBllD,iBAIlD,wBAAIkF,UAAU,mBACb,yBAAKA,UAAU,aAAa7H,MAAO,CAACwmC,aAAc,IACjD,2BAAOsQ,QAAQ,YAAYjvC,UAAU,0BAArC,OACA,yBAAKA,UAAU,wBACd,8BAAOvL,KAAK0gD,eAAiB8K,EAAanlD,iBAI7C,wBAAIkF,UAAU,mBACb,yBAAKA,UAAU,aAAa7H,MAAO,CAACwmC,aAAc,IACjD,2BAAOsQ,QAAQ,cAAcjvC,UAAU,0BAAvC,SACA,yBAAKA,UAAU,wBACd,8BAAM,gCAASvL,KAAK0gD,eAAiB6J,EAAelkD,qBAQ1D,yBAAKkF,UAAU,gBACd,yBAAKA,UAAU,YAAY67B,KAAK,SAC/B,4BAAQ77B,UAAU,kBAAkBk8B,QAASznC,KAAK26B,MAAM8wB,SAAS,uBAAGlgD,UAAU,gBAA9E,uB,GAnKuBowB,IAAMC,WA2KpBmvB,a,6BClLf,+FAQIr0B,EAAgBv5B,EAAQ,IACxBqT,EAAIrT,EAAQ,IACZsT,EAAOtT,EAAQ,GAKbuuD,E,kDAmCL,WAAY/wB,GAAQ,IAAD,8BAClB,cAAMA,IAUPuR,uBAAyB,SAACpE,GACzB,IAAMntB,EAAamtB,EAAMM,OAAOhiC,MAEhC,EAAKu0B,MAAMsR,SAAStxB,EAAY,EAAG,EAAKggB,MAAMzL,gBAd5B,EAiBnB84B,iCAAmC,SAAClgB,GACnC,IAAM5Y,EAAgB,EAAKyL,MAAMzL,eAAiB,GAClDA,EAAcO,iBAAmBqY,EAAMM,OAAOF,QAAb,OAEjC,EAAKvN,MAAMsR,SAAS,EAAKtR,MAAMhgB,WAAY,EAAGuU,IArB5B,EAwBnBid,uBAAyB,SAACrE,GACzBA,EAAMC,iBAEN,IAAMntB,EAA4C,QAA/BktB,EAAMM,OAAOF,QAAb,IACjB,EAAKvN,MAAM/f,WAAa,EAAI,EAAK+f,MAAM/f,WAAa,EAAI,EACxB,MAA/B,EAAK+f,MAAMkR,kBAA4B,EAAKlR,MAAM/f,WAAa,EAAK+f,MAAMkR,iBAAoB,EAAKlR,MAAM/f,WAAa,EAAI,EAAK+f,MAAM/f,WAGrIA,GAAc,EAAK+f,MAAM/f,YAC3B,EAAK+f,MAAMsR,SAAS,EAAKtR,MAAMhgB,WAAYC,EAAY,EAAK+f,MAAMzL,gBAjCjD,EAqCnB+4B,2BAA6B,WAC5B,IAAM/4B,EAAgB,EAAKyL,MAAMzL,eAAiB,GAClDA,EAAcM,WAAuC,MAA1BN,EAAcM,UAAoBN,EAAcM,UAC3E,EAAKmL,MAAMsR,SAAS,EAAKtR,MAAMhgB,WAAY,EAAGuU,IAxC5B,EA2CnBg5B,kCAAoC,WACnC,EAAKltB,UAAS,SAACuO,GAAD,MAAgB,CAC7B4e,+BAAgC5e,EAAU4e,mCA7CzB,EAiDnBC,oCAAsC,SAACxiB,GACtC,IAAM1W,EAAgB,EAAKyL,MAAMzL,eAAiB,GAClDA,EAAcQ,WAAaR,EAAcQ,YAAc,GACvDR,EAAcQ,WAAW9c,KAAKgzB,GAC9B1W,EAAcQ,WAAalf,EAAEsgB,KAAK5B,EAAcQ,YAChD,EAAKiL,MAAMsR,SAAS,EAAKtR,MAAMhgB,WAAY,EAAGuU,IAtD5B,EAyDnBm5B,sCAAwC,SAACziB,GACxC,IAAM1W,EAAgB,EAAKyL,MAAMzL,eAAiB,GAClDA,EAAcQ,WAAaR,EAAcQ,YAAc,GACvDlf,EAAE83C,KAAKp5B,EAAcQ,WAAYkW,GACjC,EAAKjL,MAAMsR,SAAS,EAAKtR,MAAMhgB,WAAY,EAAGuU,IA7D5B,EAgEnBq5B,4BAA8B,SAACzgB,GAC9B,IAAMM,EAASN,EAAMM,OACf6d,EAAYne,EAAM/vB,KAEpB8V,EAAU,CACb,GAAMua,EAAOF,QAAP,GACN,KAAQE,EAAOF,QAAP,KACR,IAAOE,EAAOF,QAAP,IACP,WAAcE,EAAOF,QAAP,UACd,WAAeE,EAAOF,QAAP,UAA8B,EAC7C,aAAgBE,EAAOF,QAAP,WAChB,aAAgBzhC,WAAW2hC,EAAOF,QAAP,KAC3B,aAAgBzhC,WAAW2hC,EAAOF,QAAP,KAC3B,aAAgB3hC,SAAS6hC,EAAOF,QAAP,MAI1B,GAAkB,UAAfE,EAAOrwB,KAAiB,CAC1B,IAAIywC,EAA2D,MAA3C,EAAK7tB,MAAM8tB,iBAAiB56B,EAAQnmB,KAAe,EAAKizB,MAAM8tB,iBAAiB56B,EAAQnmB,IAAIkgB,SAAW,EAAK,EAAK+S,MAAM8tB,iBAAiB56B,EAAQnmB,IAAIkgB,SAAW,EAC9K8gC,EAAe76B,EAAQ24B,aAAe34B,EAAQu4B,aAAe,EACjEv4B,EAAQjG,SAAWnX,EAAKpJ,UAAmC,MAAzB+gC,EAAOF,QAAP,IAAgCsgB,EAAeE,EAAeF,EAAeE,GAC/G76B,EAAQ44B,iBAAmB54B,EAAQjG,aAG/B,CACJ,IAAIs+B,EAAkBz1C,EAAKjK,cAAc4hC,EAAOhiC,MAAqB,QAAb6/C,GACxDp4B,EAAQjG,SAAWs+B,EAAgB9/C,MACnCynB,EAAQ44B,iBAAmBP,EAAgB7/C,aAS5C,GANGwnB,EAAQjG,SAAW,IACrBiG,EAAQjG,SAAW,EACnBiG,EAAQ44B,iBAAmB,GAIV,UAAfre,EAAOrwB,MAAiC,QAAbkuC,EAAoB,CACjD,IAAIS,EAAmBj2C,EAAK3J,eAAe+mB,EAAQjG,SAAUiG,EAAQ44B,iBAAkB54B,EAAQu4B,aAAcv4B,EAAQy4B,aAAcz4B,EAAQ24B,cAC3I34B,EAAQjG,SAAW8+B,EAAiBtgD,MACpCynB,EAAQ44B,iBAAmBC,EAAiBrgD,aAG7C,EAAKs0B,MAAMgxB,wBAAwB99B,IA1GjB,EA6GnB86B,iBAAmB,WAAc5e,GAAS,IAApBlc,EAAmB,EAAnBA,QAIjBD,EAAiC,MAApBC,EAAQqM,UAAoBrM,EAAQqM,SAAS37B,OAAS,EAAIsvB,EAAQqM,SAAS,GAAGxyB,GAAKmmB,EAAQnmB,GAExGkhD,EAAwC,MAAzB/6B,EAAQg7B,eAAyBh7B,EAAQg7B,cAActqD,OAE1E,OACC,wBAAIkM,IAAKojB,EAAQnmB,IAChB,wBAAI6D,UAAW,EAAKovB,MAAMixB,4BAA8B,WAAa,YACpE,yBAAKrgD,UAAW,gBAAkBq9C,EAAc,sBAAwB,KAEtEA,EACA,yBAAKr9C,UAAU,iBACd,uBAAGq9B,KAAK,IAAInB,QAAS,EAAKqhB,gBAAiB7D,WAAUlb,GACpD,kBAAC,IAAD,CAAW5O,IAAK1qB,EAAK9I,qBAAqBkmB,EAAQg7B,mBAE3C,KAEV,8BAAOh7B,EAAQjf,MAAY,6BACzBif,EAAQvS,YACT,0BAAM/P,UAAU,uCAAuCsiB,EAAQvS,aAAsB,KAEpFuS,EAAQwM,IACT,0BAAM9uB,UAAU,sCAAsC7H,MAAQmqB,EAAQvS,YAAc,CAACs9B,WAAY,OAAS,MAAQ/qB,EAAQwM,KAAc,KAEzI,0BAAM9uB,UAAU,sCAAsC7H,MAAQmqB,EAAQvS,aAAeuS,EAAQwM,IAAM,CAACue,WAAY,OAAS,MAAQ,QAAU/qB,EAAQk7B,cAAgBl7B,EAAQk7B,cAAgB,MACzL,EAAKpuB,MAAMixB,4BACZ,0BAAMrgD,UAAU,oCAAoC7H,MAAO,CAACk1C,WAAY,QACtE,EAAKje,MAAM+lB,eAAiB7yB,EAAQ0M,YAC5B,KAEe,MAAvB1M,EAAQoM,aAA8C,GAAvBpM,EAAQoM,YACzC,0BAAM1uB,UAAU,+BAA+B7H,MAAO,CAACk1C,WAAY,QAClE,uBAAGrtC,UAAU,gBACJ,OAIb,wBAAIA,UAAW,EAAKovB,MAAMixB,4BAA8B,WAAa,WAAYloD,MAAO,EAAKi3B,MAAMixB,4BAA8B,GAAK,CAACvkB,UAAW,UAEhJ,EAAK1M,MAAMixB,4BACX,yBAAKrgD,UAAU,eACd,0BAAMA,UAAU,mBACf,4BAAQA,UAAW,EAAKovB,MAAM2M,UAAY,2BAA6B,kBAAmBvvB,KAAK,SAC9F0vB,QAAS,EAAK8gB,4BACdne,WAAS,OAAOvB,UAASjb,EAAW4hB,YAAW3hB,EAAQjf,KAAMo6C,WAAUn7B,EAAQwM,IAAK4uB,iBAAgBp7B,EAAQ0M,WAAY2uB,iBAAgBr7B,EAAQ9F,WAChJohC,kBAAiBt7B,EAAQxG,aAAc+hC,WAAUv7B,EAAQw7B,cAAeC,WAAUz7B,EAAQ07B,cAAeC,WAAU37B,EAAQ47B,kBAH5H,MAKD,2BAAO1xC,KAAK,OAAOxM,UAAU,mDAAmDmhC,aAAa,MAC5FtmC,MAAiD,MAA1C,EAAKu0B,MAAM8tB,iBAAiB76B,GAAqB,EAAK+M,MAAM8tB,iBAAiB76B,GAAW64B,iBAAmB,EAClHha,SAAU,EAAK8b,4BAA6BvH,OAAQ,EAAKuH,4BAA6BnQ,SAAU,EAAKzd,MAAM2M,UAC3GuB,UAASjb,EAAW4hB,YAAW3hB,EAAQjf,KAAMo6C,WAAUn7B,EAAQwM,IAAK4uB,iBAAgBp7B,EAAQ0M,WAAY2uB,iBAAgBr7B,EAAQ9F,WAChIohC,kBAAiBt7B,EAAQxG,aAAc+hC,WAAUv7B,EAAQw7B,cAAeC,WAAUz7B,EAAQ07B,cAAeC,WAAU37B,EAAQ47B,mBAC5H,0BAAMl+C,UAAU,mBACf,4BAAQA,UAAW,EAAKovB,MAAM2M,UAAY,2BAA6B,kBAAmBvvB,KAAK,SAC9F0vB,QAAS,EAAK8gB,4BACdne,WAAS,KAAKvB,UAASjb,EAAW4hB,YAAW3hB,EAAQjf,KAAMo6C,WAAUn7B,EAAQwM,IAAK4uB,iBAAgBp7B,EAAQ0M,WAAY2uB,iBAAgBr7B,EAAQ9F,WAC9IohC,kBAAiBt7B,EAAQxG,aAAc+hC,WAAUv7B,EAAQw7B,cAAeC,WAAUz7B,EAAQ07B,cAAeC,WAAU37B,EAAQ47B,kBAH5H,OAOF,0BAAMl+C,UAAU,2BAA2B,EAAKovB,MAAM+lB,eAAiB7yB,EAAQ0M,eA5KjE,EAmLnBuuB,gBAAkB,SAAChhB,GAClBA,EAAMC,iBACN,IAAM4hB,EAAe7hB,EAAMG,cAAcC,QAApB,IACjBra,EAAU,EAAK8M,MAAM/D,SAAS+yB,GAAc97B,QAChD,EAAKmN,SAAS,CACb4uB,sBAAsB,EACtBC,iBAAkBh8B,EAAQjf,KAC1Bk7C,kBAAmBj8B,EAAQ4b,UA1LV,EA8LnBsgB,iBAAmB,WAClB,EAAK/uB,SAAS,CACb4uB,sBAAsB,EACtBC,iBAAkB,KAClBC,kBAAmB,MA/LpB,EAAK1uB,MAAQ,CACZ+sB,+BAA+B,EAC/ByB,sBAAsB,EACtBC,iBAAkB,KAClBC,kBAAmB,IAPF,E,qDAuMlB,IAAIE,EAAyD,MAA5BhqD,KAAK26B,MAAMzL,eAA8D,MAArClvB,KAAK26B,MAAMzL,cAAcM,UAAoBxvB,KAAK26B,MAAMzL,cAAcM,SACvIy6B,EAA+D,MAA5BjqD,KAAK26B,MAAMzL,eAAyBlvB,KAAK26B,MAAMzL,cAAcO,kBAAoBiH,EAAcsD,OAClIkwB,EAAmD,MAA5BlqD,KAAK26B,MAAMzL,eAAgE,MAAvClvB,KAAK26B,MAAMzL,cAAcQ,YAAsB1vB,KAAK26B,MAAMzL,cAAcQ,WAAWnxB,OAElJ,OACC,yBAAKmF,MAAO,CAACumC,UAAW,SAEtBjqC,KAAKo7B,MAAMwuB,qBACX,kBAAC,IAAD,CACC/lD,MAAO7D,KAAKo7B,MAAMyuB,iBAClBpgB,OAAQzpC,KAAKo7B,MAAM0uB,kBACnBngB,QAAS3pC,KAAK+pD,mBACV,KAGL/pD,KAAK26B,MAAMyvB,4BACX,yBAAK7+C,UAAU,OACd,yBAAKA,UAAU,YACd,2BAAOwM,KAAK,OAAOxM,UAAU,eAAe7D,GAAG,iBAAiB8kC,YAAY,SAASpmC,MAAOpG,KAAK26B,MAAMhgB,WAAY8xB,SAAUzsC,KAAKksC,uBAAwBQ,aAAa,SAExK,yBAAKnhC,UAAU,2BACd,yBAAKA,UAAU,gCAAgC67B,KAAK,SACnD,yBAAK77B,UAAU,YAAY67B,KAAK,SAC/B,4BAAQ77B,UAAW,kBAAoBy+C,EAA4B,cAAgB,eAClF5R,SAAUp4C,KAAK26B,MAAM2M,UACrBG,QAASznC,KAAKioD,4BAA4B,uBAAG18C,UAAU,iBAEzD,yBAAKA,UAAU,YAAY67B,KAAK,SAC/B,4BAAQ77B,UAAW,kBAAoB2+C,EAAsB,cAAgB,eAC5E9R,SAAUp4C,KAAK26B,MAAM2M,UACrBG,QAASznC,KAAKkoD,mCAAmC,uBAAG38C,UAAU,qBAIlE,yBAAKA,UAAU,2BACd,yBAAKA,UAAU,gCAAgC67B,KAAK,SACnD,yBAAK77B,UAAU,YAAY67B,KAAK,SAC/B,4BAAQ77B,UAAW,QAAU0+C,EAAkC,cAAgB,eAC9E7R,SAAW6R,GAAmCjqD,KAAK26B,MAAM2M,UACzD+iB,cAAa3zB,EAAcsD,OAAQyN,QAASznC,KAAKgoD,kCAFlD,WAID,yBAAKz8C,UAAU,YAAY67B,KAAK,SAC/B,4BAAQ77B,UAAW,QAAW0+C,EAAkD,cAAhB,eAC/D7R,UAAY6R,GAAmCjqD,KAAK26B,MAAM2M,UAC1D+iB,cAAa3zB,EAAckK,IAAK6G,QAASznC,KAAKgoD,kCAF/C,WAQJ,yBAAKz8C,UAAU,OACd,yBAAKA,UAAU,YACd,2BAAOwM,KAAK,OAAOxM,UAAU,eAAe7D,GAAG,iBAAiB8kC,YAAY,SAASpmC,MAAOpG,KAAK26B,MAAMhgB,WAAY8xB,SAAUzsC,KAAKksC,uBAAwBQ,aAAa,SAExK,yBAAKnhC,UAAU,2BACd,yBAAKA,UAAU,gCAAgC67B,KAAK,SACnD,yBAAK77B,UAAU,YAAY67B,KAAK,SAC/B,4BAAQ77B,UAAW,kBAAoBy+C,EAA4B,cAAgB,eAClF5R,SAAUp4C,KAAK26B,MAAM2M,UACrBG,QAASznC,KAAKioD,4BAA4B,uBAAG18C,UAAU,iBAEzD,yBAAKA,UAAU,YAAY67B,KAAK,SAC/B,4BAAQ77B,UAAW,kBAAoB2+C,EAAsB,cAAgB,eAC5E9R,SAAUp4C,KAAK26B,MAAM2M,UACrBG,QAASznC,KAAKkoD,mCAAmC,uBAAG38C,UAAU,sBAMpE,kBAAC,IAAD,CACCmkB,WAAY1vB,KAAK26B,MAAMjL,WACvBgZ,WAAawhB,EAAsBlqD,KAAK26B,MAAMzL,cAAcQ,WAAa,GACzE2Y,SAAUroC,KAAKooD,oCACfpgB,WAAYhoC,KAAKqoD,sCACjBrf,OAAQhpC,KAAKo7B,MAAM+sB,gCACpB,yBAAK58C,UAAU,mDACd,kBAAC,IAAD,CAASD,UAAWtL,KAAK26B,MAAM2M,YAC/B,kBAAC,IAAD,CAAmBh8B,WAAYtL,KAAK26B,MAAM2M,UAAW/lB,KAAM,CAACN,KAAMjhB,KAAK26B,MAAM/f,WAAYoG,SAAUhhB,KAAK26B,MAAM9f,eAAgBa,MAAO1b,KAAK26B,MAAMiR,YAAajwB,WAAY3b,KAAK26B,MAAMkR,oBACpL,6BACC,wBAAItgC,UAAU,SACb,wBAAIA,UAAoC,GAAzBvL,KAAK26B,MAAM/f,WAAkB,oBAAsB,YACjE,uBAAGguB,KAAK,IAAIwB,WAAS,OAAO3C,QAASznC,KAAKmsC,wBAAwB,0BAAM9B,cAAY,QAAlB,KAAlE,UAED,wBAAI9+B,UAA2C,MAA/BvL,KAAK26B,MAAMkR,kBAA4B7rC,KAAK26B,MAAMkR,kBAAoB,GAAK7rC,KAAK26B,MAAM/f,YAAc5a,KAAK26B,MAAMkR,iBAAoB,gBAAkB,QACpK,uBAAGjD,KAAK,IAAIwB,WAAS,OAAO3C,QAASznC,KAAKmsC,wBAA1C,QAAuE,0BAAM9B,cAAY,QAAlB,SAK1ErqC,KAAK26B,MAAM/D,SAASr4B,OACpB,2BAAOgN,UAAU,oCAChB,+BACGvL,KAAK26B,MAAM/D,SAAS7sB,IAAI/J,KAAK2oD,oBAIjC,yBAAKp9C,UAAW,eAAiBvL,KAAK26B,MAAM2M,UAAY,SAAW,eAAnE,2B,GA3UqB3L,IAAMC,WAA1B8vB,EAmBE7vB,aAAe,CACrB6kB,eAAgBjwC,EAAK1N,qBAAqByjB,OAC1CoQ,SAAU,GACV6xB,iBAAkB,GAClB/4B,WAAY,GACZ/U,WAAY,GACZC,WAAY,EACZC,eAAgB,KAChBqU,cAAe,KACfk7B,6BAA6B,EAC7Bxe,YAAa,KACbC,iBAAkB,KAClBvE,WAAW,EACXskB,6BAA6B,GAqThBF,a,6BCpWf,+EAWMG,GALK1uD,EAAQ,G,4MA4BlB+uC,uBAAyB,SAACpE,GACzB,IAAMntB,EAAamtB,EAAMM,OAAOhiC,MAChC,EAAKu0B,MAAMsR,SAAStxB,EAAY,I,EAGjCwxB,uBAAyB,SAACrE,GACzBA,EAAMC,iBAEN,IAAMntB,EAA4C,QAA/BktB,EAAMM,OAAOF,QAAb,IACjB,EAAKvN,MAAM/f,WAAa,EAAI,EAAK+f,MAAM/f,WAAa,EAAI,EACxB,MAA/B,EAAK+f,MAAMkR,kBAA4B,EAAKlR,MAAM/f,WAAa,EAAK+f,MAAMkR,iBAAoB,EAAKlR,MAAM/f,WAAa,EAAI,EAAK+f,MAAM/f,WAErIA,GAAc,EAAK+f,MAAM/f,YAC3B,EAAK+f,MAAMsR,SAAS,EAAKtR,MAAMhgB,WAAYC,I,EAa7C20B,kBAAoB,SAAC77B,GAAD,OACnB,wBAAIjJ,IAAKiJ,EAAShM,IACjB,4BACC,8BAAOgM,EAAS9E,MAAY,6BAC3B8E,EAAS4H,YAAc,0BAAM/P,UAAU,gCAAgCmI,EAAS4H,aAAsB,MAExG,wBAAI/P,UAAU,cAAc7H,MAAO,CAACo1C,YAAa,IAChD,kBAAC,IAAD,CAAMvtC,UAAW,EAAKovB,MAAM2M,UAAY,2BAA6B,kBAAmBF,KAAK,SAASmR,GAAI,oBAAsB7kC,EAAShM,IAAI,uBAAG6D,UAAU,sBAA1J,Y,uDAMF,OACC,yBAAK7H,MAAO,CAACumC,UAAW,SACvB,2BAAOlyB,KAAK,OAAOxM,UAAU,eAAe7D,GAAG,kBAAkB8kC,YAAY,SAASpmC,MAAOpG,KAAK26B,MAAMhgB,WAAY8xB,SAAUzsC,KAAKksC,uBAAwBQ,aAAa,QACxK,yBAAKnhC,UAAU,mDACd,kBAAC,IAAD,CAASD,UAAWtL,KAAK26B,MAAM2M,YAC/B,kBAAC,IAAD,CAAmBh8B,WAAYtL,KAAK26B,MAAM2M,UAAW/lB,KAAM,CAACN,KAAMjhB,KAAK26B,MAAM/f,WAAYoG,SAAUhhB,KAAK26B,MAAM9f,eAAgBa,MAAO1b,KAAK26B,MAAMiR,YAAajwB,WAAY3b,KAAK26B,MAAMkR,oBACpL,6BACC,wBAAItgC,UAAU,SACb,wBAAIA,UAAoC,GAAzBvL,KAAK26B,MAAM/f,WAAkB,oBAAsB,YACjE,uBAAGguB,KAAK,IAAIwB,WAAS,OAAO3C,QAASznC,KAAKmsC,wBAAwB,0BAAM9B,cAAY,QAAlB,KAAlE,UAED,wBAAI9+B,UAA2C,MAA/BvL,KAAK26B,MAAMkR,kBAA4B7rC,KAAK26B,MAAMkR,kBAAoB,GAAK7rC,KAAK26B,MAAM/f,YAAc5a,KAAK26B,MAAMkR,iBAAoB,gBAAkB,QACpK,uBAAGjD,KAAK,IAAIwB,WAAS,OAAO3C,QAASznC,KAAKmsC,wBAA1C,QAAuE,0BAAM9B,cAAY,QAAlB,SAK1ErqC,KAAK26B,MAAM/pB,UAAUrS,OACrB,2BAAOgN,UAAU,oCAChB,+BACGvL,KAAK26B,MAAM/pB,UAAU7G,IAAI/J,KAAKuvC,qBAIlC,yBAAKhkC,UAAWvL,KAAK26B,MAAM2M,UAAY,SAAW,cAAlD,4B,GAtFsB3L,IAAMC,YAA3BiwB,EAaEhwB,aAAe,CACrBjrB,UAAW,GACX+J,WAAY,GACZC,WAAY,EACZC,eAAgB,KAChB+wB,YAAa,KACbC,iBAAkB,KAClBvE,WAAW,GA4EEukB,a,6BC3Gf,mCAII5O,EAAS9/C,EAAQ,IAEjB2uD,EAAenwB,IAAM+P,YAAY,CAAC,YAAD,eAMpCC,gBAAiB,WAChB,MAAO,CACNrE,WAAW,IAGb2R,YAAa,SAASlkC,GACrB,OACC,wBAAItK,IAAKsK,EAAMnG,KAAMrD,UAAU,mBAC9B,yBAAKA,UAAU,OACd,yBAAKA,UAAU,YAAW,2BAAOA,UAAU,cAAcwJ,EAAM+C,QAC/D,yBAAKvM,UAAU,YACd,0BAAMA,UAAU,gBACA,iBAAdwJ,EAAMnG,MAA0D,MAA/B5O,KAAK26B,MAAMmB,KAAK/mB,EAAMnG,MACzDquC,EAAOwI,KAAKzlD,KAAK26B,MAAMmB,KAAK/mB,EAAMnG,OAAO6wC,OAAO,cAChDz/C,KAAK26B,MAAMmB,KAAK/mB,EAAMnG,WAS3B29B,OAAQ,WACP,OACC,yBAAKhhC,UAAU,wBACd,kBAAC,IAAD,CAASD,UAAWtL,KAAK26B,MAAM2M,YAER,MAAtBtnC,KAAK26B,MAAMmB,KAAKp0B,GACjB,wBAAI6D,UAAU,cACZvL,KAAK26B,MAAMoxB,WAAWhiD,IAAI/J,KAAKi5C,cAGjC,yBAAK1tC,UAAWvL,KAAK26B,MAAM2M,UAAY,SAAW,cAAlD,sBASWwkB,a,6BCtDf,wFAQME,E,kDAUL,WAAYrxB,GAAQ,IAAD,8BAClB,cAAMA,IAOPsxB,wCAA0C,WACzC,EAAKjxB,SAAS,CAAEkxB,wCAAwC,KATtC,EAYnBC,wCAA0C,WACzC,EAAKnxB,SAAS,CAAEkxB,wCAAwC,KAbtC,EAgBnBhvB,cAAgB,WACf,EAAKivB,0CACL,EAAKxxB,MAAMyxB,mBAhBX,EAAKC,yCAA2C,iDAChD,EAAKjxB,MAAQ,CACZ8wB,wCAAwC,GAJvB,E,qDAsBlB,OACC,yBAAK3gD,UAAU,wBACZvL,KAAKo7B,MAAM8wB,uCACZ,kBAAC,UAAD,CACC3kB,YAAavnC,KAAKqsD,yCAClB3kB,MAAO1nC,KAAKk9B,cACZyK,KAAM3nC,KAAKmsD,0CACP,KAEN,kBAAC,IAAD,CAAS7gD,UAAWtL,KAAK26B,MAAM2M,YAE/B,wBAAI/7B,UAAU,cACb,wBAAIA,UAAU,mBACb,yBAAKA,UAAU,OACd,yBAAKA,UAAU,YAAW,2BAAOA,UAAU,cAAjB,gBAC1B,yBAAKA,UAAU,YACd,0BAAMA,UAAU,gBACboD,IAAO2N,eAKb,wBAAI/Q,UAAU,mBACb,yBAAKA,UAAU,OACd,yBAAKA,UAAU,YAAW,2BAAOA,UAAU,cAAjB,aAC1B,yBAAKA,UAAU,YACd,2BAAOA,UAAU,cAAjB,uEAAyG,6BACzG,4BAAQwM,KAAK,SAASxM,UAAU,yBAAyBk8B,QAASznC,KAAKisD,wCAAyC7T,SAAUp4C,KAAK26B,MAAM2M,WAArI,mB,GA3DkB3L,IAAMC,WAA1BowB,EAMEnwB,aAAe,CACrByL,WAAW,GA8DE0kB,a,0CC5Ef,2BAiBA/uD,OAAOD,EAAIA,IAEX,WAGI,IAAIsvD,EAAa,SAASC,EAASC,EAAaC,GAC5C,IAAIviD,EAAOqiD,EACPG,EAAaF,GAAe,EAC5BG,EAAa,EACbC,EAAqB5vD,IAAEgD,MAAM4sD,qBAC7BC,EAAqB7vD,IAAEgD,MAAM6sD,qBAEjC7sD,KAAK8sD,WAAa,WACd,OAAO5iD,GAGW,iBAAXqiD,GACPI,EAAaF,GAAeviD,EAAK3L,OAEjCyB,KAAK+sD,UAAY,SAASC,GACtB,OAA+C,IAAxC9iD,EAAK1L,WAAWwuD,EAAUN,KAEZ,kBAAXH,IACbI,EAAaF,GAAeG,EAAmB1iD,GAEhDlK,KAAK+sD,UAAY,SAASC,GACtB,OAAOH,EAAmB3iD,EAAM8iD,EAAUN,KAIlD1sD,KAAKitD,UAAY,WACb,OAAON,GAGX3sD,KAAKktD,WAAa,SAASF,GACvB,IAAIG,EAAQntD,KAAK+sD,UAAUC,GAC3B,OAAIG,EAAQ,IACDA,EAAQ,IAERA,GAGfntD,KAAKotD,WAAa,SAASJ,EAASK,GAChC,IAAIC,EAASD,GACJrtD,KAAK+sD,UAAUC,IAAY,GAAKhtD,KAAK+sD,UAAUC,EAAU,IACvDhtD,KAAK+sD,UAAUC,EAAU,IAAM,GAAKhtD,KAAK+sD,UAAUC,GAG9D,OAFIM,EAAS,IACTA,GAAU,OACPA,GAEXttD,KAAKutD,YAAc,SAASP,EAASK,GACjC,IAAIG,EAAUxtD,KAAKotD,WAAWJ,EAASK,GACvC,OAAIG,EAAU,MACHA,EAAU,MAEVA,GAEfxtD,KAAKytD,UAAY,SAAST,EAASK,GAC/B,IAAIK,EAAS1tD,KAAK+sD,UAAUC,GACpBW,EAAS3tD,KAAK+sD,UAAUC,EAAU,GAClCY,EAAS5tD,KAAK+sD,UAAUC,EAAU,GAClCa,EAAS7tD,KAAK+sD,UAAUC,EAAU,GAEtCc,EAAQT,KACCK,GAAU,GAAKC,GAAW,GAAKC,GAAW,GAAKC,KAC7CA,GAAU,GAAKD,GAAW,GAAKD,GAAW,GAAKD,EAG9D,OAFII,EAAQ,IACRA,GAAS,YACNA,GAEX9tD,KAAK+tD,WAAa,SAASf,EAASK,GAChC,IAAIW,EAAShuD,KAAKytD,UAAUT,EAASK,GACrC,OAAIW,EAAS,WACFA,EAAS,WAETA,GAEfhuD,KAAKiuD,YAAc,SAASjB,EAASkB,GAEjC,IADA,IAAIC,EAAO,GACF9vD,EAAI2uD,EAAS33C,EAAI,EAAGhX,EAAI2uD,EAAUkB,EAAS7vD,IAAKgX,IACrD84C,EAAK94C,GAAKvW,OAAOC,aAAaiB,KAAK+sD,UAAU1uD,IAEjD,OAAO8vD,EAAKx+B,KAAK,KAGrB3vB,KAAKouD,UAAY,SAASpB,GACtB,OAAOluD,OAAOC,aAAaiB,KAAK+sD,UAAUC,KAE9ChtD,KAAKquD,SAAW,WACZ,OAAOpxD,OAAOqxD,KAAKpkD,IAEvBlK,KAAKuuD,WAAa,SAASC,GACvBtkD,EAAOjN,OAAO83C,KAAKyZ,KAKvBC,EAAc,WAEd,SAASC,IACL,IAAIC,EAAQ,KACRC,EAAgB5xD,IAAEgD,MAAM4uD,cAM5B,OALI3xD,OAAO4xD,eACPF,EAAQ,IAAIE,eACL5xD,OAAO2xD,gBACdD,EAAQ,IAAIC,EAAc,sBAEvBD,EAuCX,SAASG,EAAYC,EAAQC,EAAaC,EAAUC,EAAQC,EAAeC,GACvE,IAAIT,EAAQD,IACZ,GAAIC,EAAO,CAEP,IAAInC,EAAc,EACd0C,IAAWC,IACX3C,EAAc0C,EAAO,IAEzB,IAAIG,EAAW,EACXH,IACAG,EAAWH,EAAO,GAAKA,EAAO,GAAK,GAGnCF,IAC4B,oBAAjBL,EAAM5zB,OACb4zB,EAAM5zB,OAAS,WAES,OAAhB4zB,EAAMnuC,QAAmC,OAAhBmuC,EAAMnuC,QAAmC,KAAhBmuC,EAAMnuC,QACxDxgB,KAAKsvD,eAAiB,IAAIhD,EAAWtsD,KAAKuvD,aAAc/C,EAAa6C,GACrErvD,KAAKwvD,SAAWJ,GAAapvD,KAAKyvD,kBAAkB,kBACpDT,EAAYhvD,OAERivD,GACAA,IAERN,EAAQ,MAGZA,EAAMe,mBAAqB,WACC,GAApBf,EAAMgB,aACc,OAAhBhB,EAAMnuC,QAAmC,OAAhBmuC,EAAMnuC,QAAmC,KAAhBmuC,EAAMnuC,QACxDxgB,KAAKsvD,eAAiB,IAAIhD,EAAWqC,EAAMiB,aAAcpD,EAAa6C,GACtErvD,KAAKwvD,SAAWJ,GAAapvD,KAAKyvD,kBAAkB,kBACpDT,EAAYhvD,OAERivD,GACAA,IAERN,EAAQ,QAKxBA,EAAMkB,KAAK,MAAOd,GAAQ,GAEtBJ,EAAMmB,kBACNnB,EAAMmB,iBAAiB,sCAEvBZ,GAAUC,GACVR,EAAMoB,iBAAiB,QAAS,SAAWb,EAAO,GAAK,IAAMA,EAAO,IAGxEP,EAAMoB,iBAAiB,oBAAqB,gCAE5CpB,EAAMqB,KAAK,WAEPf,GACAA,IAIZ,OAAO,SAASF,EAAQC,EAAaC,EAAUC,GAEvCA,EAnGR,SAAiBH,EAAQC,EAAaC,GAClC,IAAIN,EAAQD,IACRC,GACIK,IAC4B,oBAAjBL,EAAM5zB,OACb4zB,EAAM5zB,OAAS,WACS,OAAhB4zB,EAAMnuC,OACNwuC,EAAYhvD,MAERivD,GACAA,IAERN,EAAQ,MAGZA,EAAMe,mBAAqB,WACC,GAApBf,EAAMgB,aACc,OAAhBhB,EAAMnuC,OACNwuC,EAAYhvD,MAERivD,GACAA,IAERN,EAAQ,QAKxBA,EAAMkB,KAAK,OAAQd,GAAQ,GAC3BJ,EAAMqB,KAAK,OAEPf,GACAA,IAoEJgB,CACQlB,GACA,SAASJ,GACL,IAGIuB,EAAQC,EAHRjC,EAAU3nD,SAASooD,EAAMc,kBAAkB,kBAAmB,IAC9DW,EAAkBzB,EAAMc,kBAAkB,iBAG9CS,EAAShB,EAAO,GACZA,EAAO,GAAK,IACZgB,GAAUhC,GACdiC,EAAOD,EAAShB,EAAO,GAAK,EAE5BJ,EAAYC,EAAQC,EAAaC,EAAU,CAACiB,EAAQC,GAA2B,SAAnBC,EAA6BlC,MAKrGY,EAAYC,EAAQC,EAAaC,IAlI3B,GAyIlBzrD,SAAS6sD,MACD,sRAWR,IAAIC,EAAO,IAEX,WAySI,SAASC,EAAaC,GAElB,QAAUA,EAAKC,SA2BnB,SAASC,EAAeC,GAGpB,GAA0B,KAAtBA,EAAM5D,UAAU,IAAoC,KAAtB4D,EAAM5D,UAAU,GAC9C,OAAO,EAKX,IAFA,IAAIC,EAAU,EACVkB,EAAUyC,EAAM1D,YACbD,EAAUkB,GAAS,CACtB,GAAgC,KAA5ByC,EAAM5D,UAAUC,GAGhB,OAAO,EAGX,IAAI4D,EAAUD,EAAM5D,UAAUC,EAAU,GAKxC,GAAe,OAAX4D,EAGA,OAAOC,EAAaF,EAAO3D,EAAU,EAAG2D,EAAMvD,WAAWJ,EAAU,GAAG,GAAQ,GAG3E,GAAe,KAAX4D,EAIP,OAAOC,EAAaF,EAAO3D,EAAU,EAAG2D,EAAMvD,WAAWJ,EAAU,GAAG,GAAQ,GAG9EA,GAAW,EAAI2D,EAAMvD,WAAWJ,EAAU,GAAG,IAQzD,SAAS8D,EAASH,EAAOI,EAAYC,EAAWC,EAAUC,GAItD,IAFA,IAAIC,EAAWR,EAAMvD,WAAW4D,EAAWE,GACvCE,EAAQ,GACH/yD,EAAI,EAAGA,EAAI8yD,EAAU9yD,IAAK,CAC/B,IAAIgzD,EAAeL,EAAgB,GAAJ3yD,EAAS,EACpCizD,EAASL,EAASN,EAAMvD,WAAWiE,EAAcH,IACjD,EAEJE,EAAME,GAAUC,EAAaZ,EAAOU,EAAcN,EAAYC,EAAWE,GAE7E,OAAOE,EAIX,SAASG,EAAaZ,EAAOU,EAAcN,EAAYC,EAAWE,GAE9D,IAAIM,EAAQb,EAAMvD,WAAWiE,EAAe,EAAGH,GAC3CO,EAAad,EAAMlD,UAAU4D,EAAe,EAAGH,GAC/CQ,EAAef,EAAMlD,UAAU4D,EAAe,EAAGH,GAAWH,EAEhE,OAAQS,GACJ,KAAK,EACL,KAAK,EACD,GAAkB,GAAdC,EACA,OAAOd,EAAM5D,UAAUsE,EAAe,EAAGH,GAIzC,IAFA,IAAIS,EAAaF,EAAa,EAAIC,EAAgBL,EAAe,EAC7DO,EAAQ,GACHzyD,EAAI,EAAGA,EAAIsyD,EAAYtyD,IAC5ByyD,EAAMzyD,GAAKwxD,EAAM5D,UAAU4E,EAAaxyD,GAE5C,OAAOyyD,EAIf,KAAK,EACD,IAAIC,EAAgBJ,EAAa,EAAIC,EAAgBL,EAAe,EACpE,OAAOV,EAAM1C,YAAY4D,EAAeJ,EAAa,GAGzD,KAAK,EACD,GAAkB,GAAdA,EACA,OAAOd,EAAMvD,WAAWiE,EAAe,EAAGH,GAI1C,IAFIS,EAAaF,EAAa,EAAIC,EAAgBL,EAAe,EAC7DO,EAAQ,GACHzyD,EAAI,EAAGA,EAAIsyD,EAAYtyD,IAC5ByyD,EAAMzyD,GAAKwxD,EAAMvD,WAAWuE,EAAa,EAAIxyD,EAAG+xD,GAEpD,OAAOU,EAIf,KAAK,EACD,GAAkB,GAAdH,EACA,OAAOd,EAAMlD,UAAU4D,EAAe,EAAGH,GAGzC,IADIU,EAAQ,GACHzyD,EAAI,EAAGA,EAAIsyD,EAAYtyD,IAC5ByyD,EAAMzyD,GAAKwxD,EAAMlD,UAAUiE,EAAe,EAAIvyD,EAAG+xD,GAErD,OAAOU,EAGf,KAAK,EACD,GAAkB,GAAdH,EACA,OAAOd,EAAMlD,UAAUiE,EAAcR,GAAWP,EAAMlD,UAAUiE,EAAe,EAAGR,GAGlF,IADIU,EAAQ,GACHzyD,EAAI,EAAGA,EAAIsyD,EAAYtyD,IAC5ByyD,EAAMzyD,GAAKwxD,EAAMlD,UAAUiE,EAAe,EAAIvyD,EAAG+xD,GAAWP,EAAMlD,UAAUiE,EAAe,EAAI,EAAIvyD,EAAG+xD,GAE1G,OAAOU,EAGf,KAAK,EACD,GAAkB,GAAdH,EACA,OAAOd,EAAM5C,WAAWsD,EAAe,EAAGH,GAG1C,IADIU,EAAQ,GACHzyD,EAAI,EAAGA,EAAIsyD,EAAYtyD,IAC5ByyD,EAAMzyD,GAAKwxD,EAAM5C,WAAW2D,EAAe,EAAIvyD,EAAG+xD,GAEtD,OAAOU,EAGf,KAAK,GACD,GAAkB,GAAdH,EACA,OAAOd,EAAM5C,WAAW2D,EAAcR,GAAWP,EAAM5C,WAAW2D,EAAe,EAAGR,GAGpF,IADIU,EAAQ,GACHzyD,EAAI,EAAGA,EAAIsyD,EAAYtyD,IAC5ByyD,EAAMzyD,GAAKwxD,EAAM5C,WAAW2D,EAAe,EAAIvyD,EAAG+xD,GAAWP,EAAM5C,WAAW2D,EAAe,EAAI,EAAIvyD,EAAG+xD,GAE5G,OAAOU,GAOvB,SAASf,EAAaF,EAAOT,EAAQhC,GAEjC,GAAoC,QAAhCyC,EAAM1C,YAAYiC,EAAQ,GAG1B,OAAO,EAGX,IAAIgB,EAEAY,EAAc5B,EAAS,EAG3B,GAAqC,OAAjCS,EAAMvD,WAAW0E,GACjBZ,GAAU,MACP,IAAqC,OAAjCP,EAAMvD,WAAW0E,GAKxB,OAAO,EAJPZ,GAAU,EAOd,GAAkD,IAA9CP,EAAMvD,WAAW0E,EAAc,EAAGZ,GAGlC,OAAO,EAGX,GAAiD,GAA7CP,EAAMlD,UAAUqE,EAAc,EAAGZ,GAGjC,OAAO,EAGX,IAAIE,EAAQN,EAASH,EAAOmB,EAAaA,EAAc,EAAGxB,EAAKyB,SAAUb,GAEzE,GAAIE,EAAMY,eAAgB,CACtB,IAAIC,EAAYnB,EAASH,EAAOmB,EAAaA,EAAcV,EAAMY,eAAgB1B,EAAK4B,KAAMhB,GAC5F,IAAK,IAAII,KAAUW,EAAW,CAC1B,OAAQX,GACJ,IAAK,cACL,IAAK,QACL,IAAK,eACL,IAAK,kBACL,IAAK,gBACL,IAAK,mBACL,IAAK,YACL,IAAK,iBACL,IAAK,eACL,IAAK,cACL,IAAK,WACL,IAAK,aACL,IAAK,YACL,IAAK,uBACL,IAAK,aACDW,EAAUX,GAAUhB,EAAK6B,aAAab,GAAQW,EAAUX,IACxD,MAEJ,IAAK,cACL,IAAK,kBACDW,EAAUX,GAAUxyD,OAAOC,aAAakzD,EAAUX,GAAQ,GAAIW,EAAUX,GAAQ,GAAIW,EAAUX,GAAQ,GAAIW,EAAUX,GAAQ,IAC5H,MAEJ,IAAK,0BACDW,EAAUX,GACFhB,EAAK6B,aAAaC,WAAWH,EAAUX,GAAQ,IAC7ChB,EAAK6B,aAAaC,WAAWH,EAAUX,GAAQ,IAC/ChB,EAAK6B,aAAaC,WAAWH,EAAUX,GAAQ,IAC/ChB,EAAK6B,aAAaC,WAAWH,EAAUX,GAAQ,IAGjEF,EAAME,GAAUW,EAAUX,IAIlC,GAAIF,EAAMiB,kBAAmB,CACzB,IAAIC,EAAWxB,EAASH,EAAOmB,EAAaA,EAAcV,EAAMiB,kBAAmB/B,EAAKiC,QAASrB,GACjG,IAAK,IAAII,KAAUgB,EAAU,CACzB,OAAQhB,GACJ,IAAK,eACDgB,EAAShB,GAAUgB,EAAShB,GAAQ,GAC1B,IAAMgB,EAAShB,GAAQ,GACvB,IAAMgB,EAAShB,GAAQ,GACvB,IAAMgB,EAAShB,GAAQ,GAGzCF,EAAME,GAAUgB,EAAShB,IAIjC,OAAOF,EA7iBXd,EAAK4B,KAAO,CAGR,MAAQ,cACR,MAAQ,kBAGR,MAAQ,aAGR,MAAQ,kBACR,MAAQ,kBACR,MAAQ,0BACR,MAAQ,yBAGR,MAAQ,YACR,MAAQ,cAGR,MAAQ,mBAGR,MAAQ,mBACR,MAAQ,oBACR,MAAQ,aACR,MAAQ,qBACR,MAAQ,sBAGR,MAAQ,eACR,MAAQ,UACR,MAAQ,kBACR,MAAQ,sBACR,MAAQ,kBACR,MAAQ,OACR,MAAQ,oBACR,MAAQ,gBACR,MAAQ,kBACR,MAAQ,eACR,MAAQ,mBACR,MAAQ,kBACR,MAAQ,eACR,MAAQ,cACR,MAAQ,QACR,MAAQ,cACR,MAAQ,cACR,MAAQ,cACR,MAAQ,2BACR,MAAQ,wBACR,MAAQ,wBACR,MAAQ,2BACR,MAAQ,kBACR,MAAQ,gBACR,MAAQ,gBACR,MAAQ,aACR,MAAQ,YACR,MAAQ,aACR,MAAQ,iBACR,MAAQ,eACR,MAAQ,eACR,MAAQ,oBACR,MAAQ,wBACR,MAAQ,mBACR,MAAQ,cACR,MAAQ,WACR,MAAQ,aACR,MAAQ,YACR,MAAQ,2BACR,MAAQ,uBAGR,MAAQ,6BACR,MAAQ,iBAGZ5B,EAAKyB,SAAW,CACZ,IAAQ,aACR,IAAQ,cACR,MAAQ,iBACR,MAAQ,oBACR,MAAQ,6BACR,IAAQ,gBACR,IAAQ,cACR,IAAQ,4BACR,IAAQ,cACR,IAAQ,kBACR,IAAQ,sBACR,IAAQ,mBACR,IAAQ,mBACR,IAAQ,cACR,IAAQ,cACR,IAAQ,iBACR,IAAQ,eACR,IAAQ,eACR,IAAQ,kBACR,IAAQ,wBACR,IAAQ,8BACR,IAAQ,mBACR,IAAQ,aACR,IAAQ,wBACR,IAAQ,oBACR,IAAQ,sBACR,IAAQ,WACR,IAAQ,mBACR,IAAQ,OACR,IAAQ,QACR,IAAQ,WACR,IAAQ,SACR,MAAQ,aAGZzB,EAAKiC,QAAU,CACXC,EAAQ,eACR,EAAQ,iBACR,EAAQ,cACR,EAAQ,kBACR,EAAQ,eACR,EAAQ,iBACR,EAAQ,cACR,EAAQ,eACR,EAAQ,gBACR,EAAQ,YACR,GAAQ,iBACR,GAAQ,SACR,GAAQ,cACR,GAAQ,WACR,GAAQ,cACR,GAAQ,WACR,GAAQ,qBACR,GAAQ,kBACR,GAAQ,cACR,GAAQ,qBACR,GAAQ,kBACR,GAAQ,sBACR,GAAQ,mBACR,GAAQ,oBACR,GAAQ,iBACR,GAAQ,qBACR,GAAQ,kBACR,GAAQ,sBACR,GAAQ,qBACR,GAAQ,eACR,GAAQ,mBAGZlC,EAAK6B,aAAe,CAChBM,gBAAiB,CACbD,EAAG,cACHE,EAAG,SACHC,EAAG,iBACHC,EAAG,oBACHC,EAAG,mBACHC,EAAG,mBACHC,EAAG,iBACHC,EAAG,gBACHC,EAAG,kBAEPC,aAAc,CACVV,EAAG,UACHE,EAAG,UACHC,EAAG,wBACHC,EAAG,OACHC,EAAG,YACHC,EAAG,UACHC,EAAG,UACHI,IAAK,SAETC,YAAa,CACTZ,EAAG,UACHE,EAAG,WACHC,EAAG,cACHC,EAAG,gCACHC,EAAG,QACHQ,EAAG,eACHC,GAAI,iBACJC,GAAI,QACJC,GAAI,wCACJC,GAAI,yCACJC,GAAI,0CACJC,GAAI,sCACJC,GAAI,mBACJC,GAAI,mBACJC,GAAI,mBACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,sBACJhB,IAAK,SAETiB,MAAO,CACH5B,EAAQ,qBACR,EAAQ,cACR,EAAQ,mCACR,EAAQ,+BACR,EAAQ,qCACR,GAAQ,gEACR,GAAQ,4DACR,GAAQ,4CACR,GAAQ,gCACR,GAAQ,yBACR,GAAQ,oDACR,GAAQ,gDACR,GAAQ,oBACR,GAAQ,sCACR,GAAQ,iEACR,GAAQ,6DACR,GAAQ,6DACR,GAAQ,wFACR,GAAQ,oFACR,GAAQ,iDACR,GAAQ,4EACR,GAAQ,yEAEZ6B,cAAe,CACX3B,EAAG,cACHC,EAAG,6BACHC,EAAG,6BACHC,EAAG,+BACHC,EAAG,+BACHE,EAAG,mBACHC,EAAG,kCAEPqB,iBAAkB,CACd9B,EAAG,WACHE,EAAG,YACHC,EAAG,WACHC,EAAG,eAEP2B,UAAW,CACP7B,EAAG,yBAEP8B,eAAgB,CACZhC,EAAG,iBACHE,EAAG,kBAEP+B,aAAc,CACVjC,EAAG,qBACHE,EAAG,wBAEPgC,YAAa,CACTlC,EAAG,OACHE,EAAG,cACHC,EAAG,eACHC,EAAG,gBACHC,EAAG,kBAEP8B,SAAU,CACNnC,EAAG,SACHE,EAAG,OACHC,EAAG,QAEPiC,WAAY,CACRpC,EAAG,SACHE,EAAG,iBACHC,EAAG,mBAEPkC,UAAW,CACPrC,EAAG,SACHE,EAAG,OACHC,EAAG,QAEPmC,qBAAsB,CAClBtC,EAAG,UACHE,EAAG,QACHC,EAAG,aACHC,EAAG,gBAEPmC,WAAY,CACRnC,EAAG,OAEPR,WAAY,CACRI,EAAG,GACHE,EAAG,IACHC,EAAG,KACHC,EAAG,KACHC,EAAG,IACHC,EAAG,IACHC,EAAG,MA0RXzC,EAAK0E,QAAU,SAASxE,EAAMxB,GAE1B,QAAKwB,EAAKnwC,WAELkwC,EAAaC,GAGVxB,GACAA,IA/QZ,SAAsBwB,EAAMxB,GAExBP,EACQ+B,EAAKr1B,KACL,SAASwzB,GACLn2C,QAAQC,IAAI,SAAUk2C,EAAMW,gBAC5B,IAAI2F,EAAQvE,EAAe/B,EAAMW,gBACjCkB,EAAKC,SAAWwE,GAAS,GACrBjG,GACRA,OAmQJhM,CAAawN,EAAMxB,IAKhB,IAGXsB,EAAK4E,mBAAqB,SAAS1E,EAAMxB,GAErC,QAAKwB,EAAKnwC,WAELkwC,EAAaC,GAGVxB,GACAA,IA9QZ,SAAiCwB,EAAMxB,GAEnC,IAAIla,EAAaC,KAAKyb,EAAKr1B,IAAIx7B,MAAM,KAAK,IAEtCs1D,EAAQvE,EADJ,IAAIpE,EAAWxX,EAAY,EAAGA,EAAWv2C,SAEjDiyD,EAAKC,SAAWwE,GAAS,GACrBjG,GACAA,IAoQAmG,CAAwB3E,EAAMxB,IAK3B,IAGXsB,EAAK8E,OAAS,SAAS5E,EAAMc,GAEzB,GAAKf,EAAaC,GAElB,OAAOA,EAAKC,SAASa,IAGzBhB,EAAK+E,WAAa,SAAS7E,GAEvB,IAAKD,EAAaC,GACd,MAAO,GACX,IAAI8E,EAAQ9E,EAAKC,SACb8E,EAAW,GACf,IAAK,IAAIpwD,KAAKmwD,EACNA,EAAME,eAAerwD,KACrBowD,EAASpwD,GAAKmwD,EAAMnwD,IAG5B,OAAOowD,GAGXjF,EAAKmF,OAAS,SAASjF,GAEnB,IAAKD,EAAaC,GACd,MAAO,GACX,IAAI8E,EAAQ9E,EAAKC,SACbiF,EAAY,GAChB,IAAK,IAAIvwD,KAAKmwD,EACNA,EAAME,eAAerwD,KACE,iBAAZmwD,EAAMnwD,GACbuwD,GAAavwD,EAAI,OAASmwD,EAAMnwD,GAAG5G,OAAS,eAE5Cm3D,GAAavwD,EAAI,MAAQmwD,EAAMnwD,GAAK,QAIhD,OAAOuwD,GAGXpF,EAAKqF,mBAAqB,SAAShF,GAC/B,OAAOD,EAAeC,IAsB1BiF,IAAOpyD,UAAUwM,OAnBjB,WAGI,IADA,IA7Vc6lD,EAAUC,EAAUC,EA6V9BC,EAAUxyD,SAASyyD,qBAAqB,OACnC53D,EAAI,EAAGA,EAAI23D,EAAQz3D,OAAQF,IACO,QAAnC23D,EAAQ33D,GAAG63D,aAAa,UACnBF,EAAQ33D,GAAGgiB,SAOZiwC,EAAK0E,QAAQgB,EAAQ33D,KAvWnBw3D,EAiWOG,EAAQ33D,GAjWLy3D,EAiWS,OAjWCC,EAkWd,WACIzF,EAAK0E,QAAQh1D,OAjWjC61D,EAASjsB,iBACTisB,EAASjsB,iBAAiBksB,EAAUC,GAAY,GACzCF,EAASM,aAChBN,EAASM,YAAY,KAAOL,EAAUC,QA4W9CH,IAAOQ,GAAGC,SAAW,SAASrH,GAC1B,OAAOhvD,KAAKs2D,MAAK,WACbhG,EAAK0E,QAAQh1D,KAAMgvD,OAK3B4G,IAAOQ,GAAGG,oBAAsB,SAASvH,GACrC,OAAOhvD,KAAKs2D,MAAK,WAEb,OADAhG,EAAK4E,mBAAmBl1D,KAAMgvD,IACvB,MAIf4G,IAAOQ,GAAGI,KAAO,SAASlF,GACtB,IAAImF,EAAW,GAIf,OAHAz2D,KAAKs2D,MAAK,WACNG,EAAS7jD,KAAK09C,EAAK8E,OAAOp1D,KAAMsxD,OAE7BmF,GAGXb,IAAOQ,GAAGM,QAAU,WAChB,IAAID,EAAW,GAIf,OAHAz2D,KAAKs2D,MAAK,WACNG,EAAS7jD,KAAK09C,EAAK+E,WAAWr1D,UAE3By2D,GAGXb,IAAOQ,GAAGO,WAAa,WACnB,IAAIF,EAAW,GAIf,OAHAz2D,KAAKs2D,MAAK,WACNG,EAAS7jD,KAAK09C,EAAKmF,OAAOz1D,UAEvBy2D,GAnrBf,GAtPJ,CAg7BGb,M,6BCp8BH,mBAqBA,SAAU54D,GACN,IACQ45D,EAAU,CACdC,QAAS,SAASC,EAAGC,EAAGC,EAAGC,EAAGC,GAC1B,IAAI93D,EAAI83D,EAAI,IAAM,GAClB,GAAKF,GAAKF,EAAIE,GAAOC,GAAKF,EAAIE,EAAI,CAC9B,IAAIpxD,EAAIixD,EAAIC,GACPlxD,GAAK,GAAW,IAANoxD,IAAYD,IAAME,GAC7BJ,EAAIE,EACJD,EAAKC,EAAInxD,GAAM,GACRqxD,GAAKrxD,GAAMmxD,EAAIC,GACtBH,EAAIE,EACJD,EAAKC,EAAInxD,GAAM,EACfzG,EAAI,MAEJ03D,EAAKG,EAAIpxD,GAAM,EACfkxD,EAAIE,GAGZ,MAAO,CACH,MAASH,EACT,OAAUC,EACV,QAAW33D,IAGnB+3D,cAAe,SAASjtD,GAKpB,IAJA,IAAI8qC,EAAa9qC,EAAKvK,MAAM,KAAK,GAAGA,MAAM,KAAK,GAAGA,MAAM,KAAK,GACzDm1C,EAAaC,KAAK7qC,EAAKvK,MAAM,KAAK,IAClCy3D,EAAK,IAAIC,YAAYviB,EAAWv2C,QAChC+4D,EAAK,IAAIpiB,WAAWkiB,GACf/4D,EAAI,EAAGA,EAAIy2C,EAAWv2C,OAAQF,IACnCi5D,EAAGj5D,GAAKy2C,EAAWt2C,WAAWH,GAElC,IAAIk5D,EAAMt6D,OAAOu6D,aAAev6D,OAAOw6D,mBAAqBx6D,OAAOy6D,eACnE,OAAIH,IAEAA,EAAK,IAAKt6D,OAAOu6D,aAAev6D,OAAOw6D,mBAAqBx6D,OAAOy6D,iBAChEC,OAAOP,GACHG,EAAGK,QAAQ5iB,IAGlBuiB,EAAK,IAAIpiB,KAAK,CAACiiB,GAAK,CAChB,KAASpiB,KASrB6iB,kBAAmB,SAASh9B,GACxB,IAAIi9B,EAAKj9B,EAAIkM,MACb,GAAI+wB,EADqBj9B,EAAI+L,OACf,QAAS,CACnB,IAAI6M,EAASjwC,SAASg0C,cAAc,UACpC/D,EAAO1M,MAAQ0M,EAAO7M,OAAS,EAC/B,IAAIgN,EAAMH,EAAOI,WAAW,MAK5B,OAJAD,EAAImkB,UAAUl9B,EAAW,EAALi9B,EAAQ,GAIoB,IAAzClkB,EAAIoP,aAAa,EAAG,EAAG,EAAG,GAAG94C,KAAK,GAEzC,OAAO,GAMf8tD,OAAQ,SAASC,EAAaC,GAC1B,IAAIC,EAAI,CAEJzF,EAAG,CAAC0F,GAAI,EAAGC,IAAK,EAAGC,IAAK,GAExB3F,EAAG,CAACyF,GAAI,EAAGC,IAAK,EAAGC,IAAK,GAExB1F,EAAG,CAACwF,GAAI,EAAGC,IAAK,EAAGC,IAAK,GAExBzF,EAAG,CAACuF,GAAI,EAAGC,IAAK,EAAGC,IAAK,GAExBxF,EAAG,CAACsF,GAAI,EAAGC,IAAK,EAAGC,IAAK,GAExBvF,EAAG,CAACqF,GAAI,EAAGC,IAAK,EAAGC,IAAK,GAExBtF,EAAG,CAACoF,GAAI,EAAGC,IAAK,EAAGC,IAAK,GAExBrF,EAAG,CAACmF,GAAI,EAAGC,IAAK,EAAGC,IAAK,IAE5B,OAAOH,EAAEF,GAAaC,GAASC,EAAEF,GAAaC,GAASD,GAM3DM,oBAAqB,SAAS9kB,EAAQ1M,EAAOH,EAAQqxB,GAEjD,OAAQA,GACJ,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACDxkB,EAAO1M,MAAQH,EACf6M,EAAO7M,OAASG,EAChB,MACJ,QACI0M,EAAO1M,MAAQA,EACf0M,EAAO7M,OAASA,EAExB,IAAIgN,EAAMH,EAAOI,WAAW,MAC5B,OAAQokB,GACJ,KAAK,EAED,MACJ,KAAK,EAEDrkB,EAAI4kB,UAAUzxB,EAAO,GACrB6M,EAAI6kB,OAAO,EAAG,GACd,MACJ,KAAK,EAED7kB,EAAI4kB,UAAUzxB,EAAOH,GACrBgN,EAAIokB,OAAO72D,KAAKwE,IAChB,MACJ,KAAK,EAEDiuC,EAAI4kB,UAAU,EAAG5xB,GACjBgN,EAAI6kB,MAAM,GAAI,GACd,MACJ,KAAK,EAED7kB,EAAIokB,OAAO,GAAM72D,KAAKwE,IACtBiuC,EAAI6kB,MAAM,GAAI,GACd,MACJ,KAAK,EAED7kB,EAAIokB,OAAO,GAAM72D,KAAKwE,IACtBiuC,EAAI4kB,UAAU,GAAI5xB,GAClB,MACJ,KAAK,EAEDgN,EAAIokB,OAAO,GAAM72D,KAAKwE,IACtBiuC,EAAI4kB,UAAUzxB,GAAQH,GACtBgN,EAAI6kB,OAAO,EAAG,GACd,MACJ,KAAK,EAED7kB,EAAIokB,QAAQ,GAAM72D,KAAKwE,IACvBiuC,EAAI4kB,WAAWzxB,EAAO,KAUlC2xB,qBAAsB,SAAS79B,EAAKi9B,EAAIa,GACpC,IAAIllB,EAASjwC,SAASg0C,cAAc,UACpC/D,EAAO1M,MAAQ,EACf0M,EAAO7M,OAAS+xB,EAChB,IAAI/kB,EAAMH,EAAOI,WAAW,MAC5BD,EAAImkB,UAAUl9B,EAAK,EAAG,GAMtB,IALA,IAAI3wB,EAAO0pC,EAAIoP,aAAa,EAAG,EAAG,EAAG2V,GAAIzuD,KAErC0uD,EAAK,EACLC,EAAKF,EACLhX,EAAKgX,EACFhX,EAAKiX,GAAI,CAEE,IADF1uD,EAAgB,GAAVy3C,EAAK,GAAS,GAE5BkX,EAAKlX,EAELiX,EAAKjX,EAETA,EAAMkX,EAAKD,GAAO,EAEtB,IAAIE,EAAQnX,EAAKgX,EACjB,OAAiB,IAAVG,EAAc,EAAIA,GAE7B/4D,SAAU,SAASuF,GACf,OAAOA,IAGfyzD,EAAW,CACPhyB,MAAO,IACPH,OAAQ,EACRiZ,MAAM,EACNhS,QAAS,GACT,SAAY+oB,EAAQ72D,UAExB,SAASi5D,EAAOhsB,EAAMzqC,GAClBvC,KAAKgtC,KAAOA,EACZhtC,KAAKuC,QAAUvF,EAAEi8D,OAAO,GAAIF,EAAUx2D,GACtCvC,KAAKk5D,UAAYH,EACjB/4D,KAAKm5D,MAlMQ,eAmMbn5D,KAAKyO,OAETuqD,EAAOn5D,UAAY,CACf4O,KAAM,WAEF,IAAI2qD,EAAQp5D,KACRgtC,EAAOhtC,KAAKgtC,KAEZqsB,EAAS,IAAIC,WACjBD,EAAOE,UAAY,SAASC,GACxB,IAAIC,EAAUD,EAAEpxB,OAAOkX,OACnBzkB,EAAM,IAAIC,MACdD,EAAIE,OAAS,SAASy+B,GAElBx8D,EAAE69B,GAAK07B,qBAAoB,WACvB,IAAI0B,EAAcj7D,EAAE69B,GAAK27B,KAAK,eAAe,IAAM,EAI/C3nD,GAHJopD,EAAcrB,EAAQoB,OAAOC,EAAamB,EAAM72D,QAAQy1D,UAG7B,GAAKC,GAAe,EACrCrB,EAAQC,QAAQh8B,EAAI+L,OAAQ/L,EAAIkM,MAAOqyB,EAAM72D,QAAQwkC,MAAOqyB,EAAM72D,QAAQqkC,OAAQwyB,EAAM72D,QAAQs9C,MAChG+W,EAAQC,QAAQh8B,EAAIkM,MAAOlM,EAAI+L,OAAQwyB,EAAM72D,QAAQwkC,MAAOqyB,EAAM72D,QAAQqkC,OAAQwyB,EAAM72D,QAAQs9C,MAEtGiY,EAAKj9B,EAAIkM,MAAO4xB,EAAK99B,EAAI+L,OACzBG,EAAQl4B,EAAKk4B,MAAOH,EAAS/3B,EAAK+3B,OAIlC6M,EAASjwC,SAASg0C,cAAc,UAChC5D,EAAMH,EAAOI,WAAW,MAC5BD,EAAI8lB,OACJ9C,EAAQ2B,oBAAoB9kB,EAAQ1M,EAAOH,EAAQqxB,GAG/CrB,EAAQiB,kBAAkBh9B,KAC1Bi9B,GAAM,EACNa,GAAM,GAEV,IAAIrzD,EAAI,KACJq0D,EAAYn2D,SAASg0C,cAAc,UACvCmiB,EAAU5yB,MAAQ4yB,EAAU/yB,OAASthC,EAIrC,IAHA,IAAIs0D,EAASD,EAAU9lB,WAAW,MAC9BgmB,EAAkBjD,EAAQ8B,qBAAqB79B,EAAKi9B,EAAIa,GACxDC,EAAK,EACFA,EAAKD,GAAI,CAGZ,IAFA,IAAImB,EAAKlB,EAAKtzD,EAAIqzD,EAAKA,EAAKC,EAAKtzD,EAC7By0D,EAAK,EACFA,EAAKjC,GAAI,CACZ,IAAIkC,EAAKD,EAAKz0D,EAAIwyD,EAAKA,EAAKiC,EAAKz0D,EACjCs0D,EAAOviB,UAAU,EAAG,EAAG/xC,EAAGA,GAC1Bs0D,EAAO7B,UAAUl9B,GAAMk/B,GAAKnB,GAC5B,IAAIqB,EAAK94D,KAAKC,MAAM24D,EAAKhzB,EAAQ+wB,GAC7BoC,EAAK/4D,KAAKg5D,KAAKH,EAAKjzB,EAAQ+wB,GAC5BsC,EAAKj5D,KAAKC,MAAMw3D,EAAKhyB,EAAS+xB,EAAKkB,GACnCQ,EAAKl5D,KAAKg5D,KAAKL,EAAKlzB,EAAS+xB,EAAKkB,GACtCjmB,EAAImkB,UAAU4B,EAAW,EAAG,EAAGK,EAAIF,EAAIG,EAAIG,EAAIF,EAAIG,GACnDN,GAAMz0D,EAEVszD,GAAMtzD,EAEVsuC,EAAI0mB,UACJX,EAAYC,EAAS,KAGrB,IAAIW,EAAY/2D,SAASg0C,cAAc,UACvC+iB,EAAUxzB,MAAyB,MAAjBl4B,EAAK2rD,QAAkB5zB,EAASG,EAClDwzB,EAAU3zB,OAA0B,MAAjB/3B,EAAK2rD,QAAkBzzB,EAAQH,EAClD,IAAIuH,EAAqB,MAAjBt/B,EAAK2rD,QAAqC,IAAlB5zB,EAASG,GAAc,EACnDqH,EAAqB,MAAjBv/B,EAAK2rD,QAAqC,IAAlBzzB,EAAQH,GAAe,EAIvD,GAHa2zB,EAAU1mB,WAAW,MAC3BkkB,UAAUtkB,EAAQtF,EAAGC,EAAGrH,EAAOH,GAEpB,cAAdoG,EAAKj1B,KACL,IAAI7N,EAAOqwD,EAAU1lB,UAAU7H,EAAKj1B,WAEhC7N,EAAOqwD,EAAU1lB,UAAU,aAAuC,IAAxBukB,EAAM72D,QAAQsrC,SAIhEurB,EAAM72D,QAAQxC,SAASmK,EAAM68B,EAAOH,OAI5C/L,EAAIM,IAAMs+B,GAGdJ,EAAOoB,cAAcztB,KAI7BhwC,EAAC,aAAe,SAASgwC,EAAMzqC,GAC3B,GAAoB,kBAATyqC,EACP,OAAO4pB,EAAQ5pB,GAAMzqC,GAErB,IAAIy2D,EAAOhsB,EAAMzqC,IAlS7B,CArBA,OA0TGqzD,I,6BC1TH,+BAGI14D,EAAaC,EAAQ,IACrBiT,EAAUjT,EAAQ,IAElBu9D,EAAwB,CAC3Bp4D,QAAS,WAUR,OATApF,EAAW2L,SAAS,CACnBK,WAAYkH,EAAQ5E,WACpBmvD,YAAa,KAOPthC,IAAY1F,aAIrBzoB,EAAOC,QAAUuvD,G,kJCXXE,E,kLAUD56D,KAAK26B,MAAMkgC,cAAct8D,QAC3B86B,IAAYzF,SACXzkB,QAAQC,IAAIpP,KAAK26B,MAAMkgC,cAAc9wD,KAAI,SAAC+wD,GAAD,OACxC,IAAI3rD,SAAQ,SAASlE,EAASsV,GAC7B,IAAMsa,EAAM,IAAIC,MAChBD,EAAIE,OAAS,WAEZ9vB,EAAQ6vD,EAAS,YAElBjgC,EAAIK,QAAU,WAEb3a,EAAOw6C,MAAMD,EAAS,qBAEvBjgC,EAAIM,IAAM2/B,SAER3hC,OAAM,kB,+BASZ,OACC,yBAAK5tB,UAAU,UACd,yBAAK4vB,IAAK1qB,IAAKnQ,UAAY,4B,GApCVq7B,IAAMC,WAArBg/B,EAKE/+B,aAAe,CACrBg/B,cAAe,IAoCFD,Q,6DC/CXt7C,EAAcniB,EAAQ,IACtBI,EAAYJ,EAAQ,IACpBqwB,EAASrwB,EAAQ,IACjBwR,EAASxR,EAAQ,IACjBsT,EAAOtT,EAAQ,GAGbH,EAAIC,OAAOD,EACbg+D,EAASr/B,IAAM+P,YAAY,CAAC,YAAD,SAC9BwR,gBAAiB,WAChB,MAAO,CACN+d,YAAaxqD,EAAK7M,WAAWC,MAC7Bq3D,aAAa,EACbC,aAAc59D,EAAU6+B,cACxBg/B,kBAAmB79D,EAAU++B,iBAC7B++B,qBAAqB,IAIvBC,mBAAoB,WAGnB7qD,EAAK3Q,kBAAkBE,KAAKu7D,sBAG7BxvB,kBAAmB,WAClBxuC,EAAUuC,kBAAkBE,KAAKw7D,WAEjCx+D,EAAEwG,UAAUvD,GAAG,QAAS,uBAAuB,SAASu5D,GACpDx8D,EAAEw8D,EAAEpxB,QAAQqzB,GAAG,MAAuC,mBAA7Bz+D,EAAEw8D,EAAEpxB,QAAQsV,KAAK,UAC5C1gD,EAAEgD,MAAM07D,SAAS,WAMnBjrD,EAAKpN,0BAGNs4D,0BAA2B,SAAStgC,GAGnCr7B,KAAKg7B,SAAS,CACbkgC,aAAa,KAIfU,qBAAsB,WACrBr+D,EAAU2C,qBAAqBF,KAAKw7D,WACpC/qD,EAAKvQ,qBAAqBF,KAAKu7D,sBAGhCC,UAAW,WAQPj+D,EAAUqF,UAEZ5C,KAAKg7B,SAAS,CACbmgC,aAAc59D,EAAU6+B,cACxBg/B,kBAAmB79D,EAAU++B,iBAC7B++B,qBAAqB,IAKtBr7D,KAAKg7B,SAAS,CACbmgC,aAAc,GACdC,kBAAmB,GACnBC,qBAAqB,IAMvB5qD,EAAKpN,0BAGNk4D,oBAAqB,WACpBv7D,KAAKg7B,SAAS,CACbigC,YAAaxqD,EAAK7M,WAAWC,SAI/Bg4D,WAAY,WACX77D,KAAKg7B,UAAS,SAACuO,GAAD,MAAgB,CAC7B2xB,aAAc3xB,EAAU2xB,iBAI1B9lC,OAAQ,SAAS0S,GAChBA,EAAMC,iBACNzoB,EAAY8V,UAGbmX,OAAQ,WAWP,OACC,6BACEvsC,KAAKo7B,MAAM+/B,aACX,4BAAQ5vD,UAAU,0CACjB,yBAAKA,UAAU,aACd,yBAAKA,UAAU,iBAEmB,MAAhCvL,KAAKo7B,MAAMggC,mBAA6D,IAAhCp7D,KAAKo7B,MAAMggC,kBACnD,4BAAQrjD,KAAK,SAASxM,UAAU,6CAA6Ck8B,QAASznC,KAAK67D,WAAYC,gBAAc,SACpH,yBAAK3gC,IAAK,yBAA2Bn7B,KAAKo7B,MAAMggC,qBAGjD,4BAAQrjD,KAAK,SAASxM,UAAU,0BAA0Bk8B,QAASznC,KAAK67D,WAAYC,gBAAc,SACjG,0BAAMvwD,UAAU,aAChB,0BAAMA,UAAU,aAChB,0BAAMA,UAAU,eAInB,yBAAKA,UAAU,gBAAgBvL,KAAKo7B,MAAM6/B,aACzCj7D,KAAKo7B,MAAM+/B,aACZ,yBAAK5vD,UAAW,gCAAkCvL,KAAKo7B,MAAM8/B,YAAc,GAAK,QAC/E,yBAAK3vD,UAAU,mBACd,wBAAIA,UAAU,kBACb,wBAAIA,UAAU,YACb,kBAACwwD,EAAA,EAAD,CAAMxwD,UAAU,WAAWgtC,GAAG,KAAI,yBAAKpd,IAAK1qB,EAAKnQ,UAAY,6BAA7D,SAGCqO,EAAOK,IAAIwe,EAAOzQ,qBACnB,wBAAIxR,UAAU,YACb,kBAACwwD,EAAA,EAAD,CAAMxwD,UAAU,WAAWgtC,GAAG,UAAS,uBAAGhtC,UAAU,kBAApD,iBACO,KACPoD,EAAOK,IAAIwe,EAAOzQ,qBACnB,yBAAKxR,UAAU,gBAAuB,KAEvC,wBAAIA,UAAU,YACb,kBAACwwD,EAAA,EAAD,CAAMxwD,UAAU,WAAWgtC,GAAG,UAAS,uBAAGhtC,UAAU,wBAApD,aAED,yBAAKA,UAAU,gBACf,wBAAIA,UAAU,YACb,kBAACwwD,EAAA,EAAD,CAAMxwD,UAAU,WAAWgtC,GAAG,SAAQ,uBAAGhtC,UAAU,oBAAoB7H,MAAO,CAACs4D,YAAa,UAA5F,mBAED,yBAAKzwD,UAAU,gBAEboD,EAAOK,IAAIwe,EAAOxQ,mBACnB,wBAAIzR,UAAU,YACb,kBAACwwD,EAAA,EAAD,CAAMxwD,UAAU,WAAWgtC,GAAG,YAAW,uBAAGhtC,UAAU,gBAAtD,YACO,KACPoD,EAAOK,IAAIwe,EAAOxQ,mBACnB,yBAAKzR,UAAU,gBAAuB,KAEvC,wBAAIA,UAAU,YACb,uBAAGq9B,KAAK,IAAIr9B,UAAU,WAAWk8B,QAASznC,KAAKo1B,QAAQ,uBAAG7pB,UAAU,mBAApE,WAED,wBAAIA,UAAU,YACb,yBAAK4vB,IAAK1qB,EAAKnQ,UAAY,8BAC3B,4BAAQyX,KAAK,SAASxM,UAAU,2BAA2Bk8B,QAASznC,KAAK67D,YAAY,uBAAGtwD,UAAU,4BAKpG,OAIF,KAGFvL,KAAKo7B,MAAMigC,oBACX,kBAACY,EAAA,EAAD,CAAUrpD,MAAI,EAAC2lC,GAAG,WAChB,SAOQ2jB,cAAWlB,GCzLtBh+B,EAAgB7/B,EAAQ,IACxBC,EAASD,EAAQ,GACjBkT,EAAgBlT,EAAQ,IACxBiT,EAAUjT,EAAQ,IAClB64B,EAAoB74B,EAAQ,IAC5BkV,EAAgBlV,EAAQ,IACxB+6B,EAAe/6B,EAAQ,IACvBuoB,EAAavoB,EAAQ,IACrB8gB,EAAY9gB,EAAQ,IACpBI,EAAYJ,EAAQ,IACpB8pC,EAAgB9pC,EAAQ,IACxBqwB,EAASrwB,EAAQ,IACjBwR,EAASxR,EAAQ,IACjBsT,EAAOtT,EAAQ,GACfK,EAASL,EAAQ,IACjBqT,EAAIrT,EAAQ,IAEVg/D,E,kDACL,WAAYxhC,GAAQ,IAAD,8BAClB,cAAMA,IAwDP6gC,UAAY,WAEX,IAAIY,EAAgBpmC,EAAkB1jB,UAAU,EAAK+pD,mBACjDC,EAAwBtmC,EAAkBM,kBAAkB,EAAK+lC,mBACjEE,EAA4BvmC,EAAkBI,sBAAsB,EAAKimC,mBAG7E,GAAGD,GAAiBh/D,EAAO4L,QAAQ,CAClC,IAAIwzD,EAAuB,UAC3B,GAA4B,MAAzBF,EACF,IAAI,IAAItjD,KAAUsjD,EACjB,GAAGA,EAAsBtjD,IAAW5b,EAAO4L,QAAQ,CAClDwzD,EAAuBxjD,EACvB,MAKH,EAAKgiB,SAAS,CACbsM,WAAW,EACXm1B,0BAA0B,EAC1BF,0BAA2BA,EAC3BG,2BAA4B,EAAKC,qBAAqBH,GAAwB,KAAOr7D,KAAKsE,MAAM82D,GAA6B,YAK9H,EAAKvhC,SAAS,CACbsM,WAAW,EACXm1B,0BAA0B,EAC1BF,0BAA2BA,EAC3BG,2BAA4B,aAAev7D,KAAKsE,MAAM82D,GAA6B,OAIpF1Z,WAAW,EAAK+Z,0BAA2B,KAEd,MAA1B,EAAKP,mBAAgF,MAAnD,EAAKQ,mBAAmB,EAAKR,qBAC9DD,GAAiBh/D,EAAO0N,GAC1BtN,EAAO2iB,QAAQ,EAAK08C,mBAAmB,EAAKR,mBAAmBj/D,EAAO0N,KAC9DsxD,GAAiBh/D,EAAO2N,MAChCvN,EAAO4iB,MAAM,EAAKy8C,mBAAmB,EAAKR,mBAAmBj/D,EAAO2N,QAC5DqxD,GAAiBh/D,EAAO4N,SAChCxN,EAAOmxB,QAAQ,EAAKkuC,mBAAmB,EAAKR,mBAAmBj/D,EAAO4N,YApGvD,EA0GnBiyB,WAAa,SAAC6K,GAKb,GAJY,MAATA,GACFA,EAAMC,kBAGH,EAAK3M,MAAMkM,UAAU,CACxB,EAAK+0B,kBAAoBjsD,EAAQ/B,YAIjC,IAAIwF,EAAiBrD,EAAEyf,MAAM5d,EAAcuB,iBAAkBqK,EAAUS,qBAAsBgH,EAAWsE,uBAIxGgT,EAAcC,WAAW/E,EAAazZ,iBAAkByZ,EAAaC,qBAAsBzS,EAAWsB,2BAA4BtB,EAAWuB,+BAAgCpT,KAxH5J,EA4HnB+oD,0BAA4B,WAC3B,EAAK5hC,SAAS,CAACyhC,0BAA0B,KA1HzC,EAAKrhC,MAAQ,CACZ0hC,YAAav/D,EAAU4+B,UACvBmL,WAAW,EACXm1B,0BAA0B,EAC1BF,0BAA2B,EAC3BG,2BAA4B,IAO7B,EAAKL,kBAAoB,KAEzB,EAAKM,qBAAuB,GAC5B,EAAKA,qBAAL,QAA4C,aAC5C,EAAKA,qBAAqBtsD,EAAcwc,cAAiB,2BACzD,EAAK8vC,qBAAqBtsD,EAAc2c,WAAe,yBACvD,EAAK2vC,qBAAqBtsD,EAAc8c,SAAa,sBACrD,EAAKwvC,qBAAqBtsD,EAAcgd,UAAc,wBACtD,EAAKsvC,qBAAqBtsD,EAAcugB,SAAa,sBACrD,EAAK+rC,qBAAqBtsD,EAAcyhB,UAAc,wBACtD,EAAK6qC,qBAAqBtsD,EAAckc,OAAY,oBACpD,EAAKowC,qBAAqBtsD,EAAc4I,UAAc,uBACtD,EAAK0jD,qBAAqBtsD,EAAc8hB,YAAe,yBACvD,EAAKwqC,qBAAqBtsD,EAAckiB,cAAiB,2BAEzD,EAAKsqC,mBAAqB,GAE1B,EAAKA,mBAAmBzsD,EAAQ/B,aAAe,GAC/C,EAAKwuD,mBAAmBzsD,EAAQ/B,aAAajR,EAAO0N,IAAM,iCAC1D,EAAK+xD,mBAAmBzsD,EAAQ/B,aAAajR,EAAO2N,OAAS,yCAC7D,EAAK8xD,mBAAmBzsD,EAAQ/B,aAAajR,EAAO4N,SAAW,6CAnC7C,E,iEAuClBhL,KAAKi7D,YAAc,WAAaj7D,KAAKo7B,MAAM0hC,YAAc,IAAM98D,KAAKo7B,MAAM0hC,YAAc,IACxFrsD,EAAK3M,eAAe9D,KAAKi7D,e,0CAIzBjlC,EAAkBl2B,kBAAkBE,KAAKw7D,a,6CAUzCxlC,EAAkB91B,qBAAqBF,KAAKw7D,a,+BA2E5C,IAAMuB,EAAkB,CACvBr9D,SAAU,WACV07B,MAAO,CACN4hC,KAAMh9D,KAAK26B,MAAMn7B,SACjBy9D,UAAW,SAab,OACC,6BACKtuD,EAAOK,IAAIwe,EAAOlQ,wBAA2B3O,EAAOK,IAAIwe,EAAOnQ,sBASzD,KART,yBAAK9R,UAAU,sCACd,4BAAQA,UAAU,yCAAyC6sC,SAAUp4C,KAAKo7B,MAAMkM,UAAWqB,cAAY,WAAWu0B,gBAAc,OAAOpB,gBAAc,SACpJ,uBAAGvwD,UAAW,uBAAyBvL,KAAKo7B,MAAMkM,UAAY,WAAa,OAE5E,wBAAI/7B,UAAU,iBACb,4BAAI,uBAAGq9B,KAAK,IAAInB,QAASznC,KAAKi9B,WAAY1xB,UAAYvL,KAAKo7B,MAAMkM,UAAY,YAAc,IAAvF,gBACJ,4BAAI,kBAACy0B,EAAA,EAAD,CAAMxjB,GAAIwkB,EAAiBxxD,UAAYvL,KAAKo7B,MAAMkM,UAAY,YAAc,IAA5E,mBAILtnC,KAAKo7B,MAAMqhC,yBACZ,kBAACx1B,EAAD,CACC5Q,WAAYr2B,KAAKo7B,MAAMmhC,0BACvBh1B,YAAavnC,KAAKo7B,MAAMshC,2BACxB74D,MAAM,mBACNyjC,UAAWtnC,KAAKo7B,MAAMkM,YAClB,KAEN,wBAAI/7B,UAAU,aACXoD,EAAOK,IAAIwe,EAAOzQ,qBACnB,wBAAIxR,UAAU,iBAAiB4xD,iBAAe,QAC7C,kBAACpB,EAAA,EAAD,CAAMxwD,UAAU,4CAA4CgtC,GAAG,UAC9D,4BACC,uBAAGhtC,UAAU,kBACb,mDAGK,KACT,wBAAIA,UAAU,iBAAiB4xD,iBAAe,QAC7C,kBAACpB,EAAA,EAAD,CAAMxwD,UAAU,4CAA4CgtC,GAAG,UAC9D,4BACC,uBAAGhtC,UAAU,wBACb,+CAIH,wBAAIA,UAAU,iBAAiB4xD,iBAAe,QAC7C,kBAACpB,EAAA,EAAD,CAAMxwD,UAAU,4CAA4CgtC,GAAG,SAC9D,4BACC,uBAAGhtC,UAAU,sBACb,qDAIDoD,EAAOK,IAAIwe,EAAOxQ,mBACnB,wBAAIzR,UAAU,iBAAiB4xD,iBAAe,QAC7C,kBAACpB,EAAA,EAAD,CAAMxwD,UAAU,4CAA4CgtC,GAAG,YAC9D,4BACC,uBAAGhtC,UAAU,gBACb,8CAGK,W,GA1MSowB,IAAMC,WAiNdugC,ICtOX1rD,EAAOtT,EAAQ,GAEfigE,EAAezhC,IAAM+P,YAAY,CAAC,YAAD,eACpC4vB,mBAAoB,WACnB7qD,EAAK3M,eAAe,cAGrByoC,OAAQ,WACP,OACC,6BACC,8CACA,+EAMW6wB,IChBX99C,EAAcniB,EAAQ,IACtBC,EAASD,EAAQ,GACjBI,GAAYJ,EAAQ,IACpB86C,GAAY96C,EAAQ,KACpBsT,GAAOtT,EAAQ,GACfK,GAASL,EAAQ,IAEjBkgE,GAAY1hC,IAAM+P,YAAY,CAAC,YAAD,YACjCwR,gBAAiB,WAChB,MAAO,CACN37B,KAAM,CAACvf,SAAU,GAAIC,SAAU,IAC/BqlC,WAAW,EACX4Q,6BAA6B,EAI7BolB,mBAAoB7sD,GAAK9N,eAQ3BopC,kBAAmB,WAClBxuC,GAAUuC,kBAAkBE,KAAKw7D,YAGlCI,qBAAsB,WACrBr+D,GAAU2C,qBAAqBF,KAAKw7D,YAGrCA,UAAW,WACV,IAAIh7C,EAASjjB,GAAU+U,YAEpBkO,GAAUpjB,EAAO0N,IAEnBtN,GAAO2iB,QAAQ,WAAa5iB,GAAU4+B,WACtCn8B,KAAKg7B,SAAS,CAACsiC,oBAAoB,KAG3B98C,GAAUpjB,EAAO4L,QACzBhJ,KAAKg7B,SAAS,CAACsM,WAAW,IAGlB9mB,GAAUpjB,EAAO2N,QACzB/K,KAAKg7B,SAAS,CAACsM,WAAW,IAC1B9pC,GAAO4iB,MAAM7iB,GAAU0+B,mBAIzBshC,aAAc,SAASz1B,GACtB,IAAI/yB,EAAQ+yB,EAAMM,OAAOx5B,KACrBxI,EAAQ0hC,EAAMM,OAAOhiC,MAEzB,OADApG,KAAKo7B,MAAM7Z,KAAKxM,GAAS3O,EAClBpG,KAAKg7B,SAAS,CAACzZ,KAAMvhB,KAAKo7B,MAAM7Z,QAGxCi8C,iBAAkB,WACjB,IAAIC,GAAc,EAMlB,OAJIz9D,KAAKo7B,MAAM7Z,KAAKvf,SAASzD,QAAWyB,KAAKo7B,MAAM7Z,KAAKtf,SAAS1D,SAChEk/D,GAAc,GAGRA,GAGRC,oBAAqB,WACpB,IAAIC,GAAiB,EACjB3hC,EAAWz+B,GAAUu/B,cAOzB,OAJgB,MAAZd,GAAsBA,EAASh6B,UAAYhC,KAAKo7B,MAAM7Z,KAAKvf,WAC9D27D,GAAiB,GAGXA,GAGR7oC,MAAO,SAASgT,GAGf,GAFAA,EAAMC,kBAEF/nC,KAAKo7B,MAAMkM,UAAU,CAExB,IAAItnC,KAAKw9D,mBAER,YADAhgE,GAAO4iB,MAAM,+BAId,IAAIpgB,KAAKo7B,MAAM8c,6BAA+Bl4C,KAAK09D,sBAGlD,OAFAlgE,GAAOmxB,QAAQ,iFACf3uB,KAAKg7B,SAAS,CAACkd,6BAA6B,IAI7C54B,EAAYwV,MAAM90B,KAAKo7B,MAAM7Z,KAAMvhB,KAAKo7B,MAAM8c,+BAKhD0lB,yBAA0B,WACrB59D,KAAKo7B,MAAMkM,WACdtnC,KAAKg7B,SAAS,CAACkd,6BAA6B,KAI9C3L,OAAQ,WACP,GAAIvsC,KAAKo7B,MAAMkiC,mBAAoB,CAElC,IAAMO,GAAiB79D,KAAK26B,MAAMn7B,SAAS47B,OAASp7B,KAAK26B,MAAMn7B,SAAS47B,MAAM4hC,KAAQh9D,KAAK26B,MAAMn7B,SAAS47B,MAAM4hC,KAAO,OAAS,CAAEt9D,SAAU,KAC5I,OACC,kBAACu8D,EAAA,EAAD,CAAU1jB,GAAIslB,IAIhB,OACC,yBAAKtyD,UAAU,cACd,kBAAC0sC,GAAD,CAAW12B,KAAMvhB,KAAKo7B,MAAM7Z,KAAMkrB,SAAUzsC,KAAKu9D,aAAcllB,QAASr4C,KAAK80B,MAAOwjB,SAAUt4C,KAAK49D,yBAA0Bt2B,UAAWtnC,KAAKo7B,MAAMkM,UAAW4Q,4BAA6Bl4C,KAAKo7B,MAAM8c,kCAM3LmlB,M,SC3HXjtD,GAAUjT,EAAQ,IAClBC,GAASD,EAAQ,GACjBmiB,GAAcniB,EAAQ,IACtB64B,GAAoB74B,EAAQ,IAC5BsT,GAAOtT,EAAQ,GACfK,GAASL,EAAQ,IAEf2gE,G,kDACL,WAAYnjC,GAAQ,IAAD,8BAClB,cAAMA,IAsBP6gC,UAAY,WACX,IAAIh7C,EAASwV,GAAkB1jB,UAAUlC,GAAQxE,6BAG9C4U,GAAUpjB,GAAO0N,IAEnB,EAAKkwB,SAAS,CAAEsM,WAAW,EAAOh9B,MAAM,IACxC9M,GAAO2iB,QAAQ,6BAGPK,GAAUpjB,GAAO4L,QACzB,EAAKgyB,SAAS,CAAEsM,WAAW,IAGnB9mB,GAAUpjB,GAAO2N,QACzB,EAAKiwB,SAAS,CAAEsM,WAAW,IAC3B9pC,GAAO4iB,MAAM,6GAA8G,KAAM,CAAE5d,QAAS,QAvC3H,EA2CnBu7D,SAAW,SAACj2B,GAEX,OADA,EAAK1M,MAAM5G,MAAQsT,EAAMM,OAAOhiC,MACzB,EAAK40B,SAAS,CAACxG,MAAO,EAAK4G,MAAM5G,SA7CtB,EAgDnBipC,YAAc,WACb,OAAQ,EAAKriC,MAAM5G,MAAMj2B,QAjDP,EAoDnBo3B,qBAAuB,SAACmS,GAGvB,GAFAA,EAAMC,kBAEF,EAAK3M,MAAMkM,UAAU,CAExB,IAAI,EAAKm2B,cAER,YADAjgE,GAAO4iB,MAAM,qCAIdd,GAAYqW,qBAAqB,EAAKyF,MAAM5G,SA3D7C,EAAK4G,MAAQ,CACZ5G,MAAO,GACPlqB,MAAM,EACNg9B,WAAW,GANM,E,gEAgBlBtR,GAAkBl2B,kBAAkBE,KAAKw7D,a,6CAIzCxlC,GAAkB91B,qBAAqBF,KAAKw7D,a,+BA+C5C,OAAIx7D,KAAKo7B,MAAM9wB,KAGb,kBAAC2xD,EAAA,EAAD,CAAUrpD,MAAI,EAAC2lC,GAAG,WAKnB,yBAAKhtC,UAAU,cACd,0BAAMA,UAAU,cACf,yBAAKA,UAAU,mBACd,yBAAKA,UAAU,YAAY4vB,IAAK1qB,GAAKnQ,UAAY,uBACjD,yBAAKiL,UAAU,sBAAf,kDAGA,yBAAKA,UAAU,eACd,2BAAOwM,KAAK,QAAQxM,UAAU,eAAeqD,KAAK,WAAW49B,YAAY,QAAQpmC,MAAOpG,KAAKo7B,MAAM5G,MAAOiY,SAAUzsC,KAAK+9D,SAAU5lB,WAAW,EAAMzL,aAAa,MAAM0L,SAAUp4C,KAAKo7B,MAAMkM,aAE7L,yBAAK/7B,UAAU,gBACd,yBAAKA,UAAU,YAAY67B,KAAK,SAC/B,kBAAC20B,EAAA,EAAD,CAAMxwD,UAAU,kBAAkB67B,KAAK,SAASmR,GAAG,UAAnD,UACA,4BAAQxgC,KAAK,SAASxM,UAAU,kBAAkBk8B,QAASznC,KAAK21B,qBAAsByiB,SAAUp4C,KAAKo7B,MAAMkM,WAA3G,4BAGF,kBAAC,KAAD,CAASh8B,UAAWtL,KAAKo7B,MAAMkM,aAEhC,yBAAK/7B,UAAU,mBAAmB4vB,IAAK1qB,GAAKnQ,UAAY,oC,GA9F7Bq7B,IAAMC,WAqGvBkiC,MC7GXrtD,GAAOtT,EAAQ,GACf8gB,GAAY9gB,EAAQ,IACpB64B,GAAoB74B,EAAQ,IAC5B8jC,GAAmB9jC,EAAQ,IAC3BkV,GAAgBlV,EAAQ,IACxB+6B,GAAe/6B,EAAQ,IACvBuoB,GAAavoB,EAAQ,IACrBuiB,GAAcviB,EAAQ,IACtB6/B,GAAgB7/B,EAAQ,IACxBkT,GAAgBlT,EAAQ,IACxBiT,GAAUjT,EAAQ,IAClBC,GAASD,EAAQ,GACjB0gB,GAAa1gB,EAAQ,IACrBoT,GAAcpT,EAAQ,IACtBq7C,GAAWr7C,EAAQ,KACnBsuC,GAAsBtuC,EAAQ,KAC9B8pC,GAAgB9pC,EAAQ,IACxBqwB,GAASrwB,EAAQ,IACjBwR,GAASxR,EAAQ,IACjBK,GAASL,EAAQ,IACjBqT,GAAIrT,EAAQ,IAEZ6gE,GAAYriC,IAAM+P,YAAY,CAAC,YAAD,YACjCwR,gBAAiB,WAChB,MAAO,CAENp+B,MAAOb,GAAUC,cACjBopB,WAAW,EAEXm1B,0BAA0B,EAC1BF,0BAA2B,EAC3BG,2BAA4B,GAC5BuB,mBAAoB,GACpBC,mBAAoB,EACpBC,uBAAwB,KACxBC,oBAAqB,KACrBC,yBAA0B,KAC1BC,sBAAuB,GACvBC,yBAAyB,EACzBC,0BAA0B,EAC1BC,0BAA0B,EAC1BC,sBAAsB,EACtBC,gBAAgB,IAGlBrD,mBAAoB,WAKnBt7D,KAAKq8D,kBAAoB,KAEzBr8D,KAAK28D,qBAAuB,GAC5B38D,KAAK28D,qBAAL,QAA4C,aAC5C38D,KAAK28D,qBAAqBtsD,GAAcwc,cAAiB,2BACzD7sB,KAAK28D,qBAAqBtsD,GAAc2c,WAAe,yBACvDhtB,KAAK28D,qBAAqBtsD,GAAc8c,SAAa,sBACrDntB,KAAK28D,qBAAqBtsD,GAAcgd,UAAc,wBACtDrtB,KAAK28D,qBAAqBtsD,GAAcugB,SAAa,sBACrD5wB,KAAK28D,qBAAqBtsD,GAAcyhB,UAAc,wBACtD9xB,KAAK28D,qBAAqBtsD,GAAckc,OAAY,oBACpDvsB,KAAK28D,qBAAqBtsD,GAAc4I,UAAc,uBACtDjZ,KAAK28D,qBAAqBtsD,GAAc8hB,YAAe,yBACvDnyB,KAAK28D,qBAAqBtsD,GAAckiB,cAAiB,2BAEzDvyB,KAAK68D,mBAAqB,GAE1B78D,KAAK68D,mBAAmBzsD,GAAQjC,uBAAyB,GACzDnO,KAAK68D,mBAAmBzsD,GAAQjC,uBAAuB/Q,GAAO0N,IAAM,uCACpE9K,KAAK68D,mBAAmBzsD,GAAQjC,uBAAuB/Q,GAAO2N,OAAS,+CACvE/K,KAAK68D,mBAAmBzsD,GAAQjC,uBAAuB/Q,GAAO4N,SAAW,+CAEzEhL,KAAK68D,mBAAmBzsD,GAAQ/B,aAAe,GAC/CrO,KAAK68D,mBAAmBzsD,GAAQ/B,aAAajR,GAAO0N,IAAM,iCAC1D9K,KAAK68D,mBAAmBzsD,GAAQ/B,aAAajR,GAAO2N,OAAS,yCAC7D/K,KAAK68D,mBAAmBzsD,GAAQ/B,aAAajR,GAAO4N,SAAW,6CAE/DhL,KAAKi7D,YAAc,eACnBxqD,GAAK3M,eAAe9D,KAAKi7D,aACzBxqD,GAAKxM,sBAEN8nC,kBAAmB,WAClB9tB,GAAUne,kBAAkBE,KAAKw7D,WACjCxlC,GAAkBl2B,kBAAkBE,KAAK4+D,kBACzC39B,GAAiBnhC,kBAAkBE,KAAK6+D,sBACxCxsD,GAAcvS,kBAAkBE,KAAK8+D,yBAGrC9+D,KAAK++D,wCAGFtuD,GAAK7O,cAAcqc,GAAUQ,oBAC/Bze,KAAKq8D,kBAAoBjsD,GAAQjC,sBAGjCuR,GAAYG,+BAId+7C,qBAAsB,WACrB39C,GAAU/d,qBAAqBF,KAAKw7D,WACpCxlC,GAAkB91B,qBAAqBF,KAAK4+D,kBAC5C39B,GAAiB/gC,qBAAqBF,KAAK6+D,sBAC3CxsD,GAAcnS,qBAAqBF,KAAK8+D,0BAGzCtD,UAAW,WACV,IAAIh7C,EAASvC,GAAU3L,YA8BpBkO,GAAUpjB,GAAO0N,IAAM0V,GAAUpjB,GAAO4N,QAC1ChL,KAAKg7B,SAAS,CAAClc,MAAOb,GAAUC,gBAExBsC,GAAUpjB,GAAO4L,SAEP5L,GAAO2N,OAK3B6zD,iBAAkB,WAEjB,IAAIxC,EAAgBpmC,GAAkB1jB,UAAUtS,KAAKq8D,mBACjDC,EAAwBtmC,GAAkBM,kBAAkBt2B,KAAKq8D,mBACjEE,EAA4BvmC,GAAkBI,sBAAsBp2B,KAAKq8D,mBAG7E,GAAGD,GAAiBh/D,GAAO4L,QAAQ,CAClC,IAAIwzD,EAAuB,UAC3B,GAA4B,MAAzBF,EACF,IAAI,IAAItjD,KAAUsjD,EACjB,GAAGA,EAAsBtjD,IAAW5b,GAAO4L,QAAQ,CAClDwzD,EAAuBxjD,EACvB,MAKHhZ,KAAKg7B,SAAS,CACbsM,WAAW,EACXm1B,0BAA0B,EAC1BF,0BAA2BA,EAC3BG,2BAA4B18D,KAAK28D,qBAAqBH,GAAwB,KAAOr7D,KAAKsE,MAAM82D,GAA6B,YAK9Hv8D,KAAKg7B,SAAS,CACbsM,WAAW,EACXm1B,0BAA0B,EAC1BF,0BAA2BA,EAC3BG,2BAA4B,aAAev7D,KAAKsE,MAAM82D,GAA6B,OAIpF1Z,WAAW7iD,KAAK48D,0BAA2B,KAEd,MAA1B58D,KAAKq8D,mBAAgF,MAAnDr8D,KAAK68D,mBAAmB78D,KAAKq8D,qBAC9DD,GAAiBh/D,GAAO0N,GAC1BtN,GAAO2iB,QAAQngB,KAAK68D,mBAAmB78D,KAAKq8D,mBAAmBj/D,GAAO0N,KAC9DsxD,GAAiBh/D,GAAO2N,MAChCvN,GAAO4iB,MAAMpgB,KAAK68D,mBAAmB78D,KAAKq8D,mBAAmBj/D,GAAO2N,QAC5DqxD,GAAiBh/D,GAAO4N,SAChCxN,GAAOmxB,QAAQ3uB,KAAK68D,mBAAmB78D,KAAKq8D,mBAAmBj/D,GAAO4N,YA2B1E6zD,qBAAsB,WACrB,IAAIr+C,EAASygB,GAAiB3uB,YAC1B0sB,EAAYiC,GAAiBC,qBAE9B1gB,GAAUpjB,GAAO0N,IACnBtN,GAAO2iB,SAAS6e,GAAanhB,GAAWsE,MAAQ,eAAiB,UAAY,cAC7EniB,KAAKg7B,SAAS,CAACsM,WAAW,IAE1BtnC,KAAK++D,yCAGGv+C,GAAUpjB,GAAO4L,QACzBhJ,KAAKg7B,SAAS,CAACsM,WAAW,IAGlB9mB,GAAUpjB,GAAO2N,OACzBvN,GAAO4iB,MAAM,qBAAuB4e,GAAanhB,GAAWsE,MAAQ,eAAiB,WACrFniB,KAAKg7B,SAAS,CAACsM,WAAW,KAGlB9mB,GAAUpjB,GAAO4N,UACzBxN,GAAOmxB,QAAQ,yBAA2BqQ,GAAanhB,GAAWsE,MAAQ,eAAiB,WAC3FniB,KAAKg7B,SAAS,CAACsM,WAAW,IAE1BtnC,KAAK++D,0CAIPD,wBAAyB,WACxB,IAAIt+C,EAASnO,GAAcC,UAAUlC,GAAQnE,yBAEzC+yD,EAA6B3sD,GAAcC,UAAUlC,GAAQlE,mBAAqB9O,GAAO4L,QAEzFi2D,EAA0B5sD,GAAc+E,uBAGzCoJ,GAAUpjB,GAAO0N,GACnB9K,KAAKg7B,SAAS,CACbwjC,yBAA0BQ,EAC1BN,qBAAsBO,EACtBV,yBAAyB,EACzBN,mBAAoB5rD,GAAc0E,cAAcxG,GAAYuG,QAC5DonD,mBAAoB7rD,GAAc2E,cAAczG,GAAYuG,QAC5DqnD,uBAAwB9rD,GAAc4E,kBAAkB1G,GAAYuG,QACpEsnD,oBAAqB/rD,GAAc6E,eAAe3G,GAAYuG,QAC9DunD,yBAA0BhsD,GAAc8E,oBAAoB5G,GAAYuG,QACxEwnD,sBAAuBjsD,GAAcuE,iBAAiBrG,GAAYuG,UAK3D0J,GAAUpjB,GAAO4L,QACzBhJ,KAAKg7B,SAAS,CACbwjC,yBAA0BQ,EAC1BN,qBAAsBO,EACtBV,yBAAyB,EACzBN,mBAAoB5rD,GAAc0E,cAAcxG,GAAYuG,QAC5DonD,mBAAoB7rD,GAAc2E,cAAczG,GAAYuG,UAIrD0J,GAAUpjB,GAAO2N,OACzB/K,KAAKg7B,SAAS,CACbwjC,yBAA0BQ,EAC1BN,qBAAsBO,EACtBV,yBAAyB,EACzBN,mBAAoB5rD,GAAc0E,cAAcxG,GAAYuG,QAC5DonD,mBAAoB7rD,GAAc2E,cAAczG,GAAYuG,WAgB/DkJ,aAAc,SAAS8nB,GACV,MAATA,GACFA,EAAMC,iBAGH/nC,KAAKo7B,MAAMkM,YACdtnC,KAAKq8D,kBAAoBjsD,GAAQjC,sBAGjCuR,GAAYG,+BAGdod,WAAY,SAAS6K,GAKpB,GAJY,MAATA,GACFA,EAAMC,kBAGH/nC,KAAKo7B,MAAMkM,UAAU,CACxBtnC,KAAKq8D,kBAAoBjsD,GAAQ/B,YAIjC,IAAIwF,EAAiBrD,GAAEyf,MAAM5d,GAAcuB,iBAAkBqK,GAAUS,qBAAsBgH,GAAWsE,uBAIxGgT,GAAcC,WAAW/E,GAAazZ,iBAAkByZ,GAAaC,qBAAsBzS,GAAWsB,2BAA4BtB,GAAWuB,+BAAgCpT,KAG/KqrD,wBAAyB,WACpBl/D,KAAKo7B,MAAMkM,WAIdtnC,KAAKg7B,SAAS,CACbyjC,0BAA0B,EAC1BR,mBAAoB,GACpBC,mBAAoB,EACpBG,yBAA0B,KAC1BC,sBAAuB,MAI1Ba,wBAAyB,WACpBn/D,KAAKo7B,MAAMkM,YACXtnC,KAAKo7B,MAAMsjC,sBACb1+D,KAAKggB,eAENhgB,KAAKg7B,SAAS,CAACyjC,0BAA0B,EAAOC,sBAAsB,IACtErsD,GAAcgF,2BAGhByX,gBAAiB,SAASnU,EAAYC,GAEpC5a,KAAKq8D,kBAAoBjsD,GAAQnE,wBACjCyT,GAAYmB,wBAAwBlG,EAAYC,IAGlD0G,gBAAiB,SAAS5N,GACrB1T,KAAKo7B,MAAMmjC,0BACdv+D,KAAKq8D,kBAAoBjsD,GAAQlE,iBACjCwT,GAAY4B,gBAAgB5N,KAG9BmO,aAAc,WACb,IAAI7hB,KAAKo7B,MAAMkM,UAAU,CACxB,IAAI83B,EAAsBn+B,GAAiBiD,sBACvCm7B,EAA2Bp+B,GAAiBiD,qBAAoB,GAEpE,IAAIk7B,EAAoB7gE,SAAW8gE,EAAyB9gE,OAG3D,YADAf,GAAO2iB,QAAQ,uBAGhBngB,KAAKq8D,kBAAoBjsD,GAAQ3C,cACjCiS,GAAY8B,2BAA2B49C,EAAqBC,EAA0BhtD,GAAcgE,4BAItG0oD,sCAAuC,WACtC,IAAIK,EAAsBn+B,GAAiBiD,sBACvCm7B,EAA2Bp+B,GAAiBiD,qBAAoB,GAEpElkC,KAAKg7B,SAAS,CACb2jC,eAAiBS,EAAoB7gE,OAAS,GAAK8gE,EAAyB9gE,OAAS,KAIvFq+D,0BAA2B,WAC1B58D,KAAKg7B,SAAS,CAACyhC,0BAA0B,KAG1ClwB,OAAQ,WAEP,IAAMwwB,EAAkB,CACvBr9D,SAAU,WACV07B,MAAO,CACN4hC,KAAMh9D,KAAK26B,MAAMn7B,SACjBy9D,UAAWj9D,KAAKi7D,cAOlB,OACC,6BACGtsD,GAAOK,IAAIwe,GAAOlQ,uBACnB,4BAAQ/R,UAAU,yBAAyBk8B,QAASznC,KAAKggB,aAAco4B,SAAUp4C,KAAKo7B,MAAMkM,WAC3F,uBAAG/7B,UAAW,uBAAyBvL,KAAKo7B,MAAMkM,UAAY,WAAa,OAG5E,yBAAK/7B,UAAU,sCACd,4BAAQA,UAAU,yCAAyC6sC,SAAUp4C,KAAKo7B,MAAMkM,UAAWqB,cAAY,WAAWu0B,gBAAc,OAAOpB,gBAAc,SACpJ,uBAAGvwD,UAAW,uBAAyBvL,KAAKo7B,MAAMkM,UAAY,WAAa,OAE5E,wBAAI/7B,UAAU,iBACb,4BAAI,uBAAGq9B,KAAK,IAAInB,QAASznC,KAAKggB,aAAczU,UAAYvL,KAAKo7B,MAAMkM,UAAY,YAAc,IAAzF,kBACJ,4BAAI,uBAAGsB,KAAK,IAAInB,QAASznC,KAAKi9B,WAAY1xB,UAAYvL,KAAKo7B,MAAMkM,UAAY,YAAc,IAAvF,gBACJ,4BAAI,kBAACy0B,EAAA,EAAD,CAAMxjB,GAAIwkB,EAAiBxxD,UAAYvL,KAAKo7B,MAAMkM,UAAY,YAAc,IAA5E,mBAKP,4BAAQ/7B,UAAU,wBAAwBk8B,QAASznC,KAAK6hB,aAAcu2B,SAAUp4C,KAAKo7B,MAAMkM,WAC1F,uBAAG/7B,UAAU,uBAA0BvL,KAAKo7B,MAAMujC,eAAiB,uBAAGpzD,UAAU,4BAAiC,MAGlH,yBAAKA,UAAU,UAAU67B,KAAK,SAC7B,4BAAQ77B,UAAU,4BAA4Bk8B,QAASznC,KAAKk/D,wBAAyB9mB,SAAUp4C,KAAKo7B,MAAMkM,WAAW,uBAAG/7B,UAAU,oBAAlI,sBAGCvL,KAAKo7B,MAAMqhC,yBACZ,kBAAC,GAAD,CACCpmC,WAAYr2B,KAAKo7B,MAAMmhC,0BACvBh1B,YAAavnC,KAAKo7B,MAAMshC,2BACxB74D,MAAM,mBACNyjC,UAAWtnC,KAAKo7B,MAAMkM,YAClB,KAEJtnC,KAAKo7B,MAAMqjC,yBACZ,kBAAChzB,GAAD,CACC9wB,WAAY3a,KAAKo7B,MAAM6iC,mBACvBrjD,WAAY5a,KAAKo7B,MAAM8iC,mBACvBrjD,eAAgB7a,KAAKo7B,MAAM+iC,uBAC3BvyB,YAAa5rC,KAAKo7B,MAAMgjC,oBACxBvyB,iBAAkB7rC,KAAKo7B,MAAMijC,yBAC7BvyB,cAAe9rC,KAAKo7B,MAAMkjC,sBAC1BryB,SAAUjsC,KAAK8uB,gBACfud,UAAWrsC,KAAKshB,gBAChBgrB,SAAUtsC,KAAKm/D,wBACf73B,UAAYtnC,KAAKo7B,MAAMmjC,yBAA2Bv+D,KAAKo7B,MAAMojC,2BACzD,KAEN,kBAAChmB,GAAD,CAAU15B,MAAO9e,KAAKo7B,MAAMtc,MAAOwoB,UAAWtnC,KAAKo7B,MAAMkM,gBAM9C02B,MC3cX//C,GAAY9gB,EAAQ,IACpBkV,GAAgBlV,EAAQ,IACxBuoB,GAAavoB,EAAQ,IACrBiT,GAAUjT,EAAQ,IAClBC,GAASD,EAAQ,GACjBuiB,GAAcviB,EAAQ,IACtBqiB,GAAeriB,EAAQ,IAGvBqwB,GAASrwB,EAAQ,IACjBwR,GAASxR,EAAQ,IACjBsT,GAAOtT,EAAQ,GACfK,GAASL,EAAQ,IAEfmiE,G,kDACL,WAAY3kC,GAAQ,IAAD,8BAClB,cAAMA,IAuEP4kC,eAAiB,WAChB,IAAIC,EAAa95C,GAAWmB,SAAS,EAAKuU,MAAMljB,MAAMxQ,IACrC,MAAd83D,GACF,EAAKxkC,SAAS,CACb9iB,MAAOsnD,EACPC,yBAAqD,MAA1BD,EAAWtjD,aAAuBsjD,EAAWtjD,YAAc,KA7EtE,EAmFnBwjD,yBAA2B,WAC1B,IAAItD,EAAgB/pD,GAAcC,UAAUlC,GAAQjE,kBAIpD,GAAGiwD,GAAiBh/D,GAAO0N,IAAMsxD,GAAiBh/D,GAAO4N,QAAQ,CAChExN,GAAO2iB,QAAQi8C,GAAiBh/D,GAAO0N,GAAK,iCAAmC,8CAG/E,IAAI0zB,EAAOnsB,GAAcQ,YAAY,EAAK8nB,MAAMglC,MAAMC,OAAOl4D,IAClD,MAAR82B,IACF,EAAKy8B,YAAcz8B,EAAK5vB,KACxB6B,GAAK3M,eAAe,EAAKm3D,mBAIlBmB,GAAiBh/D,GAAO2N,OAChCvN,GAAO4iB,MAAM,0CAuCd,EAAK4a,UAAS,SAACuO,GAAD,MAAgB,CAE7Bs2B,yBAA2BzD,GAAiBh/D,GAAO4L,aA7IlC,EAiJnBylB,cAAgB,WACfjP,GAAaiP,cAAc,EAAKkM,MAAMglC,MAAMC,OAAOl4D,IAGnD,EAAKszB,SAAS,CAACtkB,kBAAmBrE,GAAcqE,kBAAkB,EAAKikB,MAAMglC,MAAMC,OAAOl4D,OArJxE,EAwJnBgnB,aAAe,WACdlP,GAAakP,aAAa,EAAKiM,MAAMglC,MAAMC,OAAOl4D,IAClD,EAAKszB,SAAS,CAAE8kC,gBAAgB,KA1Jd,EA6JnBC,wBAA0B,WACzB,IAAIC,EAAgB3tD,GAAcQ,YAAY,EAAK8nB,MAAMglC,MAAMC,OAAOl4D,IACtE,GAAoB,MAAjBs4D,EACF,GAAGA,EAActwB,uBAAuB,CAEvC,EAAKtU,MAAMljB,MAAMgE,YAAc8jD,EAAct4D,GAC7C,EAAK0zB,MAAMljB,MAAMgU,cAAgB8zC,EAAcpxD,KAG/C,EAAKwsB,MAAMljB,MAAM8Q,cAAoD,MAAnCg3C,EAAc7zC,kBAA8B1b,GAAKnP,wBAA4D,MAAlC0+D,EAAc7zC,kBAA4B,KAEvJ,EAAKiP,MAAMljB,MAAM2Q,iBAAyD,MAArC,EAAKuS,MAAMljB,MAAM2Q,kBAA0D,MAA9Bm3C,EAAc5zC,aAAwB4zC,EAAc5zC,aAAe,EAAKgP,MAAMljB,MAAM2Q,iBAItK,IAAIiD,EAAcpG,GAAWyF,qBAAqB60C,EAAch0C,qBAChE,EAAKoP,MAAMljB,MAAM0Q,YAAckD,EAAYpkB,GAC3C,EAAK0zB,MAAMljB,MAAMmU,sBAAwBP,EAAYld,KACrD,EAAKwsB,MAAMljB,MAAMoU,wBAA0BR,EAAYtF,OAGvD,EAAK4U,MAAMljB,MAAMmR,oBAAsB,EACvC,EAAK+R,MAAMljB,MAAMoR,qBAAuB,EAExC9J,GAAa2O,UAAU,EAAKiN,MAAMljB,YAElC1a,GAAOmxB,QAAQ,sDAGhBnxB,GAAOmxB,QAAQ,6EAvLhB,EAAKyM,MAAQ,CAEZ1kB,mBAAmB,EACnBupD,gBAAgB,EAChB/nD,MAAOwN,GAAWmB,WAClB44C,0BAA0B,EAC1BS,6BAA6B,EAC7BJ,gBAAgB,EAChBD,0BAA0B,GAXT,E,iEAgBlB7/D,KAAKi7D,YAAc,WAInB,IAAIv6B,EAAS1gC,KAAK26B,MAAMglC,MAAMC,OAAOl4D,GACrC,GAAGg5B,EAEF,GAAa,OAAVA,GAAmD,mBAAhC1gC,KAAK26B,MAAMglC,MAAMC,OAAOO,KAC7CngE,KAAKg7B,SAAS,CAACklC,6BAA6B,QAGxC,CACJ,IAAI7hD,EAAOJ,GAAUO,YAAYkiB,GAGjC,GAAW,MAARriB,EACFre,KAAKg7B,SAAS,CAACilC,gBAAgB,IAE/BjgE,KAAKi7D,YAAc58C,EAAKq6B,eAEpB,CACJ14C,KAAKg7B,SAAS,CAACilC,gBAAgB,IAE/B,IAAIzhC,EAAOnsB,GAAcQ,YAAY6tB,GAC1B,MAARlC,IACFx+B,KAAKi7D,YAAcz8B,EAAK5vB,MAI1B5O,KAAKg7B,SAAS,CAACtkB,kBAAmBrE,GAAcqE,kBAAkBgqB,KAGpEjwB,GAAK3M,eAAe9D,KAAKi7D,e,0CAIzBv1C,GAAW5lB,kBAAkBE,KAAKu/D,gBAClCltD,GAAcvS,kBAAkBE,KAAK0/D,0BAGrC,IAAIh/B,EAAS1gC,KAAK26B,MAAMglC,MAAMC,OAAOl4D,GAExB,OAAVg5B,GAAmB/xB,GAAOK,IAAIwe,GAAOlQ,wBAA0B7M,GAAK7O,cAAcyQ,GAAcyB,0BAA0B4sB,KAG5HhhB,GAAYC,mBAAmB,kBAAmB,CAAC+gB,M,6CAMpDhb,GAAWxlB,qBAAqBF,KAAKu/D,gBACrCltD,GAAcnS,qBAAqBF,KAAK0/D,4B,+BA4HxC,OAAI1/D,KAAKo7B,MAAM8kC,4BAGb,kBAACjE,EAAA,EAAD,CAAUrpD,MAAI,EAAC2lC,GAAI,qCAIVv4C,KAAKo7B,MAAMqkC,yBAGpB,kBAACxD,EAAA,EAAD,CAAUrpD,MAAI,EAAC2lC,GAAI,iBAAmBv4C,KAAKo7B,MAAMljB,MAAMxQ,KAI9C1H,KAAKo7B,MAAM0kC,eAGpB,kBAAC7D,EAAA,EAAD,CAAUrpD,MAAI,EAAC2lC,GAAI,IAAMv4C,KAAK26B,MAAMglC,MAAMC,OAAOO,OAWlD,6BACC,yBAAK50D,UAAU,UAAU67B,KAAK,SAC7B,kBAAC20B,EAAA,EAAD,CAAMxwD,UAAU,2BAA2B67B,KAAK,SAASmR,GAAI,IAAMv4C,KAAK26B,MAAMglC,MAAMC,OAAOO,MAC1F,uBAAG50D,UAAU,qBADd,YAC8C,gCAA0C,SAAhCvL,KAAK26B,MAAMglC,MAAMC,OAAOO,KAAkB,eAAiB,cAEjHngE,KAAKo7B,MAAM1kB,kBACZ,4BAAQnL,UAAU,2BAA2Bk8B,QAASznC,KAAK0uB,aAAc0pB,SAAUp4C,KAAKo7B,MAAMykC,0BAA0B,uBAAGt0D,UAAU,iCAArI,IAAyK,kDACzK,4BAAQA,UAAU,2BAA2Bk8B,QAASznC,KAAKyuB,cAAe2pB,SAAUp4C,KAAKo7B,MAAMykC,0BAA0B,uBAAGt0D,UAAU,kBAAtI,oBAIF,yBAAKA,UAAU,+BAA+B7H,MAAO,CAACumC,UAAW,SAChE,kBAAC,KAAD,CAAS3+B,UAAWtL,KAAKo7B,MAAMykC,2BAC/B,kBAAC9D,EAAA,EAAD,CAAMxjB,GAAI,IAAMv4C,KAAK26B,MAAMglC,MAAMC,OAAOO,KAAO,IAAMngE,KAAK26B,MAAMglC,MAAMC,OAAOl4D,GAAK,QAAS6D,UAAW,mBAAqBvL,KAAKo7B,MAAMykC,yBAA2B,YAAc,KAC9K,wBAAIt0D,UAAU,2BAA0B,uBAAGA,UAAU,sBAArD,yBACA,uBAAGA,UAAU,wBAAb,2BAGCvL,KAAKo7B,MAAM6kC,eACZ,kBAAClE,EAAA,EAAD,CAAMxjB,GAAI,UAAYv4C,KAAK26B,MAAMglC,MAAMC,OAAOl4D,GAAK,UAAW6D,UAAW,mBAAqBvL,KAAKo7B,MAAMykC,yBAA2B,YAAc,KACjJ,wBAAIt0D,UAAU,2BAA0B,uBAAGA,UAAU,kBAArD,oBACA,uBAAGA,UAAU,wBAAb,oDACS,KAEToD,GAAOK,IAAIwe,GAAOtQ,0BACnB,kBAAC6+C,EAAA,EAAD,CAAMxjB,GAAI,IAAMv4C,KAAK26B,MAAMglC,MAAMC,OAAOO,KAAO,IAAMngE,KAAK26B,MAAMglC,MAAMC,OAAOl4D,GAAK,SAAU6D,UAAW,mBAAqBvL,KAAKo7B,MAAMykC,yBAA2B,YAAc,KAC/K,wBAAIt0D,UAAU,2BAA0B,uBAAGA,UAAU,sBAArD,UACA,uBAAGA,UAAU,wBAAb,kCACS,KAEToD,GAAOK,IAAIwe,GAAOrQ,6BACnB,kBAAC4+C,EAAA,EAAD,CAAMxjB,GAAI,IAAMv4C,KAAK26B,MAAMglC,MAAMC,OAAOO,KAAO,IAAMngE,KAAK26B,MAAMglC,MAAMC,OAAOl4D,GAAK,YAAa6D,UAAW,mBAAqBvL,KAAKo7B,MAAMykC,yBAA2B,YAAc,KAClL,wBAAIt0D,UAAU,2BAA0B,uBAAGA,UAAU,mBAArD,aACA,uBAAGA,UAAU,wBAAb,6CACS,KAEX,4BAAQk8B,QAASznC,KAAK+/D,wBAAyBx0D,UAAW,mBAAqBvL,KAAKo7B,MAAMykC,yBAA2B,YAAc,IAAKznB,SAAUp4C,KAAKo7B,MAAMykC,0BAC5J,wBAAIt0D,UAAU,2BAA0B,uBAAGA,UAAU,wBAArD,cACA,uBAAGA,UAAU,wBAAb,gD,GAnQqBowB,IAAMC,WA2QlB0jC,MC1RX5/C,GAAcviB,EAAQ,IACtBC,GAASD,EAAQ,GACjBiT,GAAUjT,EAAQ,IAClB8gB,GAAY9gB,EAAQ,IACpBkV,GAAgBlV,EAAQ,IACxB47C,GAAwB57C,EAAQ,KAChCsT,GAAOtT,EAAQ,GACfK,GAASL,EAAQ,IACjBqT,GAAIrT,EAAQ,IAGZijE,GAAmBzkC,IAAM+P,YAAY,CAAC,YAAD,mBACxCwR,gBAAiB,WAChB,MAAO,CACNxpC,SAAU,CAAE,GAAM,EAAG,KAAQ,IAC7BwmC,eAAgB,GAChB5S,WAAW,EACX+4B,eAAe,EACfC,eAAe,EACfC,eAAe,IAIjBjF,mBAAoB,WAGnBt7D,KAAKi7D,YAAc,uBACnBj7D,KAAKua,cAAgB,KACrB,IAAImmB,EAAS1gC,KAAK26B,MAAMglC,MAAMC,OAAOl4D,GACrC,GAAGg5B,EAAO,CACT,IAAI8/B,EAA8B,OAAV9/B,GAAmBjwB,GAAKhJ,UAAUi5B,GACtDlC,EAAO,GAEX,GAAGgiC,EAEFhiC,EAAOnsB,GAAcS,kBAAkB4tB,GACvC1gC,KAAKi7D,YAAc,mBACf,CAIJ,KADAz8B,EAAOnsB,GAAcQ,YAAY6tB,IACxB,CACR,IAAIriB,EAAOJ,GAAUO,YAAYkiB,GAC7BriB,IACHA,EAAO,CAAE,SAAY,EAAG,WAAc,KAEvCmgB,EAAO,CAAE,GAAMngB,EAAKogB,SAAU,KAAQpgB,EAAKq6B,YAE5C14C,KAAKi7D,YAAcz8B,EAAK5vB,KAAO4vB,EAAK5vB,KAAO5O,KAAKi7D,YAGjDj7D,KAAKg7B,SAAS,CACbtnB,SAAU8qB,EACV+hC,cAAeC,IAGjB/vD,GAAK3M,eAAe9D,KAAKi7D,aACzBj7D,KAAKg7B,SAAS,CAACkf,eAAgB7nC,GAAc2B,eAG9C+3B,kBAAmB,WAWlB,GATA/rC,KAAKo8D,cAAgBh/D,GAAO0N,GAC5B9K,KAAKygE,aAAerjE,GAAO0N,GAE3BuH,GAAcvS,kBAAkBE,KAAKw7D,WAGrCx7D,KAAK0gE,wCAGD1gE,KAAKo7B,MAAMmlC,cAAc,CAG5B,IAAII,EAA2BlwD,GAAK7O,cAAcyQ,GAAcyB,0BAA0B9T,KAAKo7B,MAAM1nB,SAAShM,KAC1Gk5D,EAAyBnwD,GAAK7O,cAAcyQ,GAAc4B,4BAC3D0sD,GAA4BC,IAE9BlhD,GAAYC,mBAAmB,kBAAmB,CAAC3f,KAAKo7B,MAAM1nB,SAAShM,GAAIk5D,MAK9EhF,qBAAsB,WACrBvpD,GAAcnS,qBAAqBF,KAAKw7D,YAGzCA,UAAW,WACV,IAAIY,EAAgB/pD,GAAcC,UAAUlC,GAAQjE,kBAChDs0D,EAAepuD,GAAcC,UAAUlC,GAAQhD,uBAGnD,GAAGpN,KAAKo8D,eAAiBA,EAKxB,GAJAp8D,KAAKo8D,cAAgBA,EAIlBp8D,KAAKo8D,eAAiBh/D,GAAO0N,IAAM9K,KAAKo8D,eAAiBh/D,GAAO4N,QAAQ,CAE1E,IAAI61D,EAA+C,MAAtB7gE,KAAKua,eAAyBva,KAAKua,cAAgB,EAC5EikB,EAAOnsB,GAAcQ,YAAYguD,EAAwB7gE,KAAKua,cAAgBva,KAAKo7B,MAAM1nB,SAAShM,IACtG1H,KAAKua,cAAgB,KAErBva,KAAKi7D,YAAcz8B,EAAK5vB,KAAO4vB,EAAK5vB,KAAO,uBAC3C6B,GAAK3M,eAAe9D,KAAKi7D,aAEzBj7D,KAAKg7B,SAAS,CACbsM,WAAW,EACXi5B,eAAe,EACf7sD,SAAU8qB,EACV0b,eAAgB7nC,GAAc2B,cAE/BxW,GAAO2iB,QAAQngB,KAAKo8D,eAAiBh/D,GAAO0N,GAAK,iCAAmC,mDAG5E9K,KAAKo8D,eAAiBh/D,GAAO4L,QACrChJ,KAAKg7B,SAAS,CAACsM,WAAW,IAGlBtnC,KAAKo8D,eAAiBh/D,GAAO2N,QACrC/K,KAAKg7B,SAAS,CACbsM,WAAW,IAEZ9pC,GAAO4iB,MAAM,2CAKZpgB,KAAKygE,cAAgBA,IACvBzgE,KAAKygE,aAAeA,EAGjBzgE,KAAKygE,cAAgBrjE,GAAO0N,IAAM9K,KAAKygE,cAAgBrjE,GAAO4N,SAG7DhL,KAAKo7B,MAAMmlC,gBACbvgE,KAAKua,cAAgBlI,GAAc8D,0BAEpCnW,KAAKg7B,SAAS,CAAEsM,WAAW,IAC3B9pC,GAAO2iB,QAAQngB,KAAKygE,cAAgBrjE,GAAO0N,GAAK,2BAA6B,uCAE7E9K,KAAK0gE,wCAGG1gE,KAAKygE,cAAgBrjE,GAAO4L,QACpChJ,KAAKg7B,SAAS,CAACsM,WAAW,IAGlBtnC,KAAKygE,cAAgBrjE,GAAO2N,QACpC/K,KAAKg7B,SAAS,CAAEsM,WAAW,IAC3B9pC,GAAO4iB,MAAM,sCAKhB0gD,eAAgB,WACX9gE,KAAKo7B,MAAMkM,WAEd5nB,GAAYC,mBAAmB,kBAAmB,CAAC3f,KAAKo7B,MAAM1nB,SAAShM,GAAI+I,GAAK7O,cAAcyQ,GAAc4B,8BAI9G8sD,YAAa,WACZ,IAAI/gE,KAAKo7B,MAAMkM,UAAU,CACxB,IAAI05B,EAAkB3uD,GAAcqC,iBAAiB1U,KAAKo7B,MAAM1nB,SAAShM,IAGzE,GAAG8I,GAAEmE,QAAQqsD,GAEZ,YADAxjE,GAAO2iB,QAAQ,+BAMhB,GAAGngB,KAAKo7B,MAAMmlC,eAAiB/vD,GAAEmE,QAAQqsD,EAAgBpsD,SAExD,YADApX,GAAO4iB,MAAM,iCAIdV,GAAYwE,oBAAoBlkB,KAAKo7B,MAAM1nB,SAAShM,GAAIs5D,KAM1DN,qCAAsC,WACrC,IAAIM,EAAkB3uD,GAAcqC,iBAAiB1U,KAAKo7B,MAAM1nB,SAAShM,IAEzE1H,KAAKg7B,SAAS,CACbqlC,eAAiB7vD,GAAEmE,QAAQqsD,MAK7B/8C,mBAAoB,WACnBvE,GAAYuE,mBAAmBjkB,KAAKo7B,MAAM1nB,SAAShM,IACnD1H,KAAKg7B,SAAS,CAAEslC,eAAe,KAGhC/zB,OAAQ,WAEP,OAAIvsC,KAAKo7B,MAAMklC,cAGb,kBAACrE,EAAA,EAAD,CAAU1jB,GAAI,IAAMv4C,KAAK26B,MAAMglC,MAAMC,OAAOO,OAa7C,6BACGngE,KAAKo7B,MAAMmlC,cAAyN,KAAzM,4BAAQh1D,UAAU,yBAAyBk8B,QAASznC,KAAK8gE,eAAgB1oB,SAAUp4C,KAAKo7B,MAAMkM,WAAW,uBAAG/7B,UAAW,uBAAyBvL,KAAKo7B,MAAMkM,UAAY,WAAa,OAChNtnC,KAAKo7B,MAAMilC,cAAgB,4BAAQ90D,UAAW,yBAA2BvL,KAAKo7B,MAAMmlC,cAAgB,eAAiB,IAAK94B,QAASznC,KAAK+gE,YAAa3oB,SAAUp4C,KAAKo7B,MAAMkM,WAAW,uBAAG/7B,UAAU,uBAAyB,uBAAGA,UAAU,6BAA0C,KAEnR,yBAAKA,UAAU,UAAU67B,KAAK,SAE5BpnC,KAAKo7B,MAAMmlC,cACX,4BAAQh1D,UAAU,4BAA4Bk8B,QAASznC,KAAKikB,oBAAoB,uBAAG1Y,UAAU,gBAA7F,WAEA,kBAACwwD,EAAA,EAAD,CAAMxwD,UAAW,6BAA+BvL,KAAKo7B,MAAMkM,UAAY,YAAc,IAAKF,KAAK,SAASmR,GAAI,IAAMv4C,KAAK26B,MAAMglC,MAAMC,OAAOO,KAAO,IAAMngE,KAAKo7B,MAAM1nB,SAAShM,IAC1K,uBAAG6D,UAAU,qBADd,YAC8C,8CAKhD,wBAAIA,UAAU,sBAAd,wBACA,kBAACwtC,GAAD,CAAuBrlC,SAAU1T,KAAKo7B,MAAM1nB,SAAUwmC,eAAgBl6C,KAAKo7B,MAAM8e,eAAgBlB,oBAAqB,IAAMh5C,KAAK26B,MAAMglC,MAAMC,OAAOO,KAAO,IAAMngE,KAAKo7B,MAAM1nB,SAAShM,GAAI4/B,UAAWtnC,KAAKo7B,MAAMkM,gBAMpM84B,MC/OX1gD,GAAcviB,EAAQ,IAEtBk9C,IADSl9C,EAAQ,GACUA,EAAQ,MACnCkV,GAAgBlV,EAAQ,IACxBsT,GAAOtT,EAAQ,GACfK,GAASL,EAAQ,IAEf8jE,G,kDACL,WAAYtmC,GAAQ,IAAD,uBAClB,cAAMA,IAgDP6gC,UAAY,WACX,EAAKxgC,SAAS,CAGbtiB,cAAerG,GAAcY,wBAAwB,EAAKmoB,MAAM1nB,SAAShM,OArDxD,EA0DnBw5D,iBAAmB,WAElB,OAAkC,MAA1B,EAAK9lC,MAAM1nB,SAAShM,KAAe,EAAK0zB,MAAM1nB,SAAShM,GAAK,GAAK+I,GAAKhJ,UAAU,EAAK2zB,MAAM1nB,SAAShM,MA5D1F,EAgEnBy5D,sBAAwB,WACvB,OAAoC,MAAjC,EAAK/lC,MAAM1iB,cAAc9J,MAAiD,IAAjC,EAAKwsB,MAAM1iB,cAAc9J,MAjEnD,EAyEnByU,wBAA0B,SAAC3K,GAC1BgH,GAAY2D,wBAAwB,EAAK+X,MAAM1nB,SAAShM,GAAIgR,IA1E1C,EA8EnB4K,4BAA8B,WACd,EAAK69C,yBAGnBzhD,GAAY4D,4BAA4B,EAAK8X,MAAM1nB,SAAShM,GAAI,EAAK0zB,MAAM1iB,eAC3E,EAAKsiB,SAAS,CAAEomC,eAAe,KAE/B5jE,GAAO4iB,MAAM,kCArFI,EA0FnBmD,0BAA4B,WAC3B7D,GAAY6D,0BAA0B,EAAK6X,MAAM1nB,SAAShM,IAC1D,EAAKszB,SAAS,CAAEomC,eAAe,KAzF/B,EAAKnG,YAAc,wBAEnB,IAAIvnD,EAAW,CAAE,GAAM,EAAG,KAAQ,IAC9BgF,EAAgB,GAChB/F,EAAagoB,EAAMglC,MAAMC,OAAOl4D,GAPlB,OAQfiL,IAEe,OAAdA,GAAuBlC,GAAKhJ,UAAUkL,IACvB,OAAdA,IACFA,EAAaN,GAAcW,YAG5BU,EAAW,CAAE,GAAMf,EAAY,KAAQ,iBAIvCe,EAAWrB,GAAcQ,YAAYF,IAAe,CAAE,GAAM,EAAG,KAAQ,IAGxE+F,EAAgBrG,GAAcY,wBAAwBN,IAAe,IAGtE,EAAKyoB,MAAQ,CACZ1nB,SAAUA,EACVgF,cAAeA,EACfwhC,eAAgB7nC,GAAc2B,YAC9BotD,eAAe,GA7BE,E,iEAmCfphE,KAAKkhE,qBACPlhE,KAAKi7D,YAAcj7D,KAAKo7B,MAAM1nB,SAAS9E,MAExC6B,GAAK3M,eAAe9D,KAAKi7D,e,0CAIzB5oD,GAAcvS,kBAAkBE,KAAKw7D,a,6CAIrCnpD,GAAcnS,qBAAqBF,KAAKw7D,a,+BAkDxC,OAAIx7D,KAAKo7B,MAAMgmC,cAGb,kBAACnF,EAAA,EAAD,CAAUrpD,MAAI,EAAC2lC,GAAI,IAAMv4C,KAAK26B,MAAMglC,MAAMC,OAAOO,KAAO,IAAMngE,KAAKo7B,MAAM1nB,SAAShM,GAAK,UAKxF,6BACC,yBAAK6D,UAAU,UAAU67B,KAAK,SAC7B,4BAAQ77B,UAAU,2BAA2Bk8B,QAASznC,KAAKujB,2BAA2B,uBAAGhY,UAAU,gBAAnG,WACA,4BAAQA,UAAU,2BAA2Bk8B,QAASznC,KAAKsjB,6BAA6B,uBAAG/X,UAAU,gBAArG,UAGD,wBAAIA,UAAU,sBAAd,yBAEA,kBAAC8uC,GAAD,CACC3hC,cAAe1Y,KAAKo7B,MAAM1iB,cAC1BwhC,eAAgBl6C,KAAKo7B,MAAM8e,eAC3BrN,OAAQ7sC,KAAKqjB,wBACbo3B,WAAYz6C,KAAKsjB,4BACjBg1B,SAAUt4C,KAAKujB,iC,GAtHkBoY,IAAMC,WA4H7BqlC,MCnIXvhD,GAAcviB,EAAQ,IAEtBu9C,IADSv9C,EAAQ,GACYA,EAAQ,MACrCkV,GAAgBlV,EAAQ,IACxBsT,GAAOtT,EAAQ,GACfK,GAASL,EAAQ,IAEfkkE,G,kDACL,WAAY1mC,GAAQ,IAAD,uBAClB,cAAMA,IAmDP6gC,UAAY,WACX,EAAKxgC,SAAS,CAGbtiB,cAAerG,GAAcc,0BAA0B,EAAKioB,MAAM1nB,SAAShM,IAC3E45D,gBAAiBjvD,GAAckD,8BAA8B,EAAK6lB,MAAM1nB,SAAShM,OAzDhE,EA8DnBw5D,iBAAmB,WAElB,OAAkC,MAA1B,EAAK9lC,MAAM1nB,SAAShM,KAAe,EAAK0zB,MAAM1nB,SAAShM,GAAK,GAAK+I,GAAKhJ,UAAU,EAAK2zB,MAAM1nB,SAAShM,MAhE1F,EAoEnBy5D,sBAAwB,WACvB,IAAI,IAAI5sD,KAAc,EAAK6mB,MAAM1iB,cAChC,IACyD,MAAvD,EAAK0iB,MAAM1iB,cAAcnE,GAAzB,aAAsH,IAAvD,EAAK6mB,MAAM1iB,cAAcnE,GAAzB,eACV,MAArD,EAAK6mB,MAAM1iB,cAAcnE,GAAzB,WAAkH,IAArD,EAAK6mB,MAAM1iB,cAAcnE,GAAzB,WAE9D,OAAO,EAIT,OAAO,GA9EW,EAkFnBiP,oBAAsB,WACrB9D,GAAY8D,oBAAoB,EAAK4X,MAAM1nB,SAAShM,KAnFlC,EAuFnB+b,0BAA4B,SAAC/K,EAAeoB,GAC3C4F,GAAY+D,0BAA0B,EAAK2X,MAAM1nB,SAAShM,GAAIgR,EAAeoB,IAxF3D,EA4FnB6J,8BAAgC,WAChB,EAAKw9C,yBAGnBzhD,GAAYiE,8BAA8B,EAAKyX,MAAM1nB,SAAShM,GAAI,EAAK0zB,MAAM1iB,eAC7E,EAAKsiB,SAAS,CAAEomC,eAAe,KAE/B5jE,GAAO4iB,MAAM,wEAnGI,EAwGnBwD,4BAA8B,WAC7BlE,GAAYkE,4BAA4B,EAAKwX,MAAM1nB,SAAShM,IAC5D,EAAKszB,SAAS,CAAEomC,eAAe,KAvG/B,EAAKnG,YAAc,0BAEnB,IAAIvnD,EAAW,CAAE,GAAM,EAAG,KAAQ,IAC9BgF,EAAgB,GAChBoB,EAAuB,KACvBnH,EAAagoB,EAAMglC,MAAMC,OAAOl4D,GARlB,OASfiL,IAEe,OAAdA,GAAuBlC,GAAKhJ,UAAUkL,IACvB,OAAdA,IACFA,EAAaN,GAAcW,YAG5BU,EAAW,CAAE,GAAMf,EAAY,KAAQ,iBAIvCe,EAAWrB,GAAcQ,YAAYF,IAAe,CAAE,GAAM,EAAG,KAAQ,IAGxE+F,EAAgBrG,GAAcc,0BAA0BR,IAAe,GACvEmH,EAAuBzH,GAAckD,8BAA8B5C,IAGpE,EAAKyoB,MAAQ,CACZ1nB,SAAUA,EACVgF,cAAeA,EACfwhC,eAAgB7nC,GAAc6B,oBAC9BktD,eAAe,EACfE,gBAAiBxnD,GAhCA,E,iEAsCf9Z,KAAKkhE,qBACPlhE,KAAKi7D,YAAcj7D,KAAKo7B,MAAM1nB,SAAS9E,MAExC6B,GAAK3M,eAAe9D,KAAKi7D,e,0CAIzB5oD,GAAcvS,kBAAkBE,KAAKw7D,a,6CAIrCnpD,GAAcnS,qBAAqBF,KAAKw7D,a,+BA6DxC,OAAIx7D,KAAKo7B,MAAMgmC,cAGb,kBAACnF,EAAA,EAAD,CAAUrpD,MAAI,EAAC2lC,GAAI,IAAMv4C,KAAK26B,MAAMglC,MAAMC,OAAOO,KAAO,IAAMngE,KAAKo7B,MAAM1nB,SAAShM,GAAK,UAKxF,6BACC,yBAAK6D,UAAU,UAAU67B,KAAK,SAC7B,4BAAQ77B,UAAU,2BAA2Bk8B,QAASznC,KAAK4jB,6BAA6B,uBAAGrY,UAAU,gBAArG,WACA,4BAAQA,UAAU,2BAA2Bk8B,QAASznC,KAAKwjB,qBAAqB,uBAAGjY,UAAU,eAA7F,iBACA,4BAAQA,UAAU,2BAA2Bk8B,QAASznC,KAAK2jB,+BAA+B,uBAAGpY,UAAU,gBAAvG,UAGD,wBAAIA,UAAU,sBAAd,2BAEA,kBAACmvC,GAAD,CACChiC,cAAe1Y,KAAKo7B,MAAM1iB,cAC1BwhC,eAAgBl6C,KAAKo7B,MAAM8e,eAC3BrN,OAAQ7sC,KAAKyjB,0BACbg3B,WAAYz6C,KAAK2jB,8BACjB20B,SAAUt4C,KAAK4jB,4BACfw3B,YAAap7C,KAAKo7B,MAAMkmC,uB,GAtIW3lC,IAAMC,WA4I/BylC,MCnJX3hD,GAAcviB,EAAQ,IAEtBm+C,IADSn+C,EAAQ,GACWA,EAAQ,MACpCkV,GAAgBlV,EAAQ,IACxBsT,GAAOtT,EAAQ,GACfK,GAASL,EAAQ,IAEfokE,G,kDACL,WAAY5mC,GAAQ,IAAD,uBAClB,cAAMA,IAmDP6gC,UAAY,WACX,EAAKxgC,SAAS,CAGbtiB,cAAerG,GAAciB,yBAAyB,EAAK8nB,MAAM1nB,SAAShM,IAC1E85D,eAAgBnvD,GAAc0D,6BAA6B,EAAKqlB,MAAM1nB,SAAShM,OAzD9D,EA8DnBw5D,iBAAmB,WAElB,OAAkC,MAA1B,EAAK9lC,MAAM1nB,SAAShM,KAAe,EAAK0zB,MAAM1nB,SAAShM,GAAK,GAAK+I,GAAKhJ,UAAU,EAAK2zB,MAAM1nB,SAAShM,MAhE1F,EAoEnBy5D,sBAAwB,WACvB,IAAI,IAAIrrD,KAAa,EAAKslB,MAAM1iB,cAC/B,GAAwD,MAArD,EAAK0iB,MAAM1iB,cAAc5C,GAAzB,YAAkH,IAArD,EAAKslB,MAAM1iB,cAAc5C,GAAzB,WAC/D,OAAO,EAIT,OAAO,GA3EW,EA+EnB+N,mBAAqB,WACpBnE,GAAYmE,mBAAmB,EAAKuX,MAAM1nB,SAAShM,KAhFjC,EAoFnBoc,yBAA2B,SAACpL,EAAe2B,GAC1CqF,GAAYoE,yBAAyB,EAAKsX,MAAM1nB,SAAShM,GAAIgR,EAAe2B,IArF1D,EAyFnB0J,6BAA+B,WACf,EAAKo9C,yBAGnBzhD,GAAYqE,6BAA6B,EAAKqX,MAAM1nB,SAAShM,GAAI,EAAK0zB,MAAM1iB,eAC5E,EAAKsiB,SAAS,CAAEomC,eAAe,KAE/B5jE,GAAO4iB,MAAM,yDAhGI,EAqGnB4D,2BAA6B,WAC5BtE,GAAYsE,2BAA2B,EAAKoX,MAAM1nB,SAAShM,IAC3D,EAAKszB,SAAS,CAAEomC,eAAe,KApG/B,EAAKnG,YAAc,yBAEnB,IAAIvnD,EAAW,CAAE,GAAM,EAAG,KAAQ,IAC9BgF,EAAgB,GAChB2B,EAAsB,KACtB1H,EAAagoB,EAAMglC,MAAMC,OAAOl4D,GARlB,OASfiL,IAEe,OAAdA,GAAuBlC,GAAKhJ,UAAUkL,IACvB,OAAdA,IACFA,EAAaN,GAAcW,YAG5BU,EAAW,CAAE,GAAMf,EAAY,KAAQ,iBAIvCe,EAAWrB,GAAcQ,YAAYF,IAAe,CAAE,GAAM,EAAG,KAAQ,IAGxE+F,EAAgBrG,GAAciB,yBAAyBX,IAAe,GACtE0H,EAAsBhI,GAAc0D,6BAA6BpD,IAGlE,EAAKyoB,MAAQ,CACZ1nB,SAAUA,EACVgF,cAAeA,EACfwhC,eAAgB7nC,GAAc+B,mBAC9BgtD,eAAe,EACfI,eAAgBnnD,GAhCC,E,iEAsCfra,KAAKkhE,qBACPlhE,KAAKi7D,YAAcj7D,KAAKo7B,MAAM1nB,SAAS9E,MAExC6B,GAAK3M,eAAe9D,KAAKi7D,e,0CAIzB5oD,GAAcvS,kBAAkBE,KAAKw7D,a,6CAIrCnpD,GAAcnS,qBAAqBF,KAAKw7D,a,+BA0DxC,OAAIx7D,KAAKo7B,MAAMgmC,cAGb,kBAACnF,EAAA,EAAD,CAAUrpD,MAAI,EAAC2lC,GAAI,IAAMv4C,KAAK26B,MAAMglC,MAAMC,OAAOO,KAAO,IAAMngE,KAAKo7B,MAAM1nB,SAAShM,GAAK,UAKxF,6BACC,yBAAK6D,UAAU,UAAU67B,KAAK,SAC7B,4BAAQ77B,UAAU,2BAA2Bk8B,QAASznC,KAAKgkB,4BAA4B,uBAAGzY,UAAU,gBAApG,WACA,4BAAQA,UAAU,2BAA2Bk8B,QAASznC,KAAK6jB,oBAAoB,uBAAGtY,UAAU,eAA5F,gBACA,4BAAQA,UAAU,2BAA2Bk8B,QAASznC,KAAK+jB,8BAA8B,uBAAGxY,UAAU,gBAAtG,UAGD,wBAAIA,UAAU,sBAAd,0BAEA,kBAAC+vC,GAAD,CACC5iC,cAAe1Y,KAAKo7B,MAAM1iB,cAC1BwhC,eAAgBl6C,KAAKo7B,MAAM8e,eAC3BrN,OAAQ7sC,KAAK8jB,yBACb22B,WAAYz6C,KAAK+jB,6BACjBu0B,SAAUt4C,KAAKgkB,2BACfo3B,YAAap7C,KAAKo7B,MAAMomC,sB,GAnIU7lC,IAAMC,WAyI9B2lC,MChJXhiD,GAAepiB,EAAQ,IAEvBqiB,IADcriB,EAAQ,IACPA,EAAQ,KACvBC,GAASD,EAAQ,GACjBggC,GAAahgC,EAAQ,IACrB8jC,GAAmB9jC,EAAQ,IAC3B8gB,GAAY9gB,EAAQ,IACpBw+C,GAAYx+C,EAAQ,KACpBsT,GAAOtT,EAAQ,GACfK,GAASL,EAAQ,IA0KNskE,GAxKE9lC,IAAM+P,YAAY,CAAC,YAAD,aAClCwR,gBAAiB,WAChB,MAAO,CACNxpC,SAAU,CAAE,WAAc,GAAI,SAAY,GAC1CgrB,OAAQ,GACRuF,QAAS,CAAE,WAAa,EAAO,WAAa,GAC5CqD,WAAW,EAEXo6B,eAAe,IAIjBpG,mBAAoB,WACnBt7D,KAAKi7D,YAAc,kBAInB,IAAIv6B,EAAS1gC,KAAK26B,MAAMglC,MAAMC,OAAOl4D,GACrC,GAAGg5B,EAAO,CACT,IAAIlC,EAAOvgB,GAAUO,YAAYkiB,GACjC1gC,KAAKg7B,SAAS,CAACtnB,SAAU8qB,EAAME,OAAQvB,GAAWoC,UAAUf,EAAKE,QAASuF,QAAShD,GAAiBK,2BAA2BZ,KAC/H1gC,KAAKi7D,YAAsB,MAARz8B,EAAeA,EAAKka,WAAa14C,KAAKi7D,YAG1DxqD,GAAK3M,eAAe9D,KAAKi7D,aACzBxqD,GAAKxM,sBAGN8nC,kBAAmB,WAClB5O,GAAWr9B,kBAAkBE,KAAKw7D,WAI/B/qD,GAAK7O,cAAcu7B,GAAWrpB,0BAA0B9T,KAAKo7B,MAAM1nB,SAAS+qB,YAE9Elf,GAAaI,mBAAmB,gBAAiB,CAAC3f,KAAKo7B,MAAM1nB,SAAS+qB,SAAUz+B,KAAKo7B,MAAM1nB,SAASgrB,SAMrGlf,GAAaiP,cAAczuB,KAAKo7B,MAAM1nB,SAAS+qB,WAGhDm9B,qBAAsB,WACrBz+B,GAAWj9B,qBAAqBF,KAAKw7D,YAKtCA,UAAW,WACV,IAAIh7C,EAAS2c,GAAW7qB,YAErBkO,GAAUpjB,GAAO0N,IACnB9K,KAAKg7B,SAAS,CACbsM,WAAW,EACX5I,OAAQvB,GAAWoC,UAAUv/B,KAAKo7B,MAAM1nB,SAASgrB,QACjDuF,QAAShD,GAAiBK,2BAA2BthC,KAAKo7B,MAAM1nB,SAAS+qB,YAE1EjhC,GAAO2iB,QAAQ,yBAGPK,GAAUpjB,GAAO4L,QACzBhJ,KAAKg7B,SAAS,CAACsM,WAAW,IAGlB9mB,GAAUpjB,GAAO2N,OACzB/K,KAAKg7B,SAAS,CACbsM,WAAW,EACX5I,OAAQvB,GAAWoC,UAAUv/B,KAAKo7B,MAAM1nB,SAASgrB,QACjDuF,QAAShD,GAAiBK,2BAA2BthC,KAAKo7B,MAAM1nB,SAAS+qB,YAE1EjhC,GAAO4iB,MAAM,iCAGLI,GAAUpjB,GAAO4N,UACzBhL,KAAKg7B,SAAS,CACbsM,WAAW,EACX5I,OAAQvB,GAAWoC,UAAUv/B,KAAKo7B,MAAM1nB,SAASgrB,QACjDuF,QAAShD,GAAiBK,2BAA2BthC,KAAKo7B,MAAM1nB,SAAS+qB,YAE1EjhC,GAAOmxB,QAAQ,iCAQjB4d,OAAQ,WACP,OAAIvsC,KAAKo7B,MAAMsmC,cAKb,kBAACzF,EAAA,EAAD,CAAUrpD,MAAI,EAAC2lC,GAAI,UAAYv4C,KAAKo7B,MAAM1nB,SAAS+qB,WASpD,6BACC,4BAAQlzB,UAAU,yBAAyBk8B,QAASznC,KAAKy9B,cAAe2a,SAAUp4C,KAAKo7B,MAAMkM,WAAW,uBAAG/7B,UAAW,uBAAyBvL,KAAKo7B,MAAMkM,UAAY,WAAa,OAEnL,yBAAK/7B,UAAU,UAAU67B,KAAK,SAC7B,kBAAC20B,EAAA,EAAD,CAAMxwD,UAAW,4BAA8BvL,KAAKo7B,MAAMkM,UAAY,YAAc,IAAKF,KAAK,SAASmR,GAAI,UAAYv4C,KAAKo7B,MAAM1nB,SAAS+qB,UAAU,uBAAGlzB,UAAU,qBAAlK,YAAkM,6CAClM,4BAAQA,UAAU,2BAA2Bk8B,QAASznC,KAAK2hE,aAAcvpB,SAAUp4C,KAAKo7B,MAAMkM,WAAW,uBAAG/7B,UAAU,gBAAtH,cAGD,wBAAIA,UAAU,sBAAd,mBACA,kBAACowC,GAAD,CAAWC,WAAY57C,KAAKo7B,MAAM1nB,SAAS+qB,SAAUC,OAAQ1+B,KAAKo7B,MAAMsD,OAAQuF,QAASjkC,KAAKo7B,MAAM6I,QAASqD,UAAWtnC,KAAKo7B,MAAMkM,cAKtI7J,cAAe,WACVz9B,KAAKo7B,MAAMkM,WAEd/nB,GAAaI,mBAAmB,gBAAiB,CAAC3f,KAAKo7B,MAAM1nB,SAAS+qB,SAAUz+B,KAAKo7B,MAAM1nB,SAASgrB,UAItGkjC,YAAa,WAIZ,IAHA,IAAIA,GAAc,EAGTvjE,EAAI,EAAGwgB,EAAI7e,KAAKo7B,MAAMsD,OAAOngC,OAAQF,EAAIwgB,EAAGxgB,IACpD,GAAI2B,KAAKo7B,MAAMsD,OAAOrgC,GAAGshC,UAAUC,iBAChC5/B,KAAKo7B,MAAM6I,QAAQjkC,KAAKo7B,MAAMsD,OAAOrgC,GAAGqJ,MAAQ1H,KAAKo7B,MAAM6I,QAAQjkC,KAAKo7B,MAAMsD,OAAOrgC,GAAGqJ,IAAI4W,WAAY,CAC1GsjD,GAAc,EACd,MAIF,OAAOA,GAcRD,aAAc,WACb,IAAI3hE,KAAKo7B,MAAMkM,UAAU,CACxB,IAAItnC,KAAK4hE,cAER,YADApkE,GAAO4iB,MAAM,yCAOdZ,GAAakP,aAAa1uB,KAAKo7B,MAAM1nB,SAAS+qB,UAAU,GAExDz+B,KAAKg7B,SAAS,CAAE0mC,eAAe,QC9K9BniD,GAAepiB,EAAQ,IAEvBC,IADcD,EAAQ,IACbA,EAAQ,IACjBggC,GAAahgC,EAAQ,IACrB8jC,GAAmB9jC,EAAQ,IAC3B8gB,GAAY9gB,EAAQ,IACpB0+C,GAAiB1+C,EAAQ,KACzBsT,GAAOtT,EAAQ,GACfK,GAASL,EAAQ,IAwHN0kE,G,kDArHd,WAAYlnC,GAAQ,IAAD,uBAClB,cAAMA,IAmDP6gC,UAAY,WACX,IAAIh7C,EAAS2c,GAAW7qB,YAErBkO,GAAUpjB,GAAO0N,IACnB,EAAKkwB,SAAS,CACbsM,WAAW,EACX5I,OAAQvB,GAAWoC,UAAU,EAAKnB,UAAU,GAAM,GAClD6F,QAAShD,GAAiBK,2BAA2B,EAAKlG,MAAM1nB,SAAS+qB,UAAU,KAEpFjhC,GAAO2iB,QAAQ,yBAGPK,GAAUpjB,GAAO4L,QACzB,EAAKgyB,SAAS,CAACsM,WAAW,IAGlB9mB,GAAUpjB,GAAO2N,OACzB,EAAKiwB,SAAS,CACbsM,WAAW,EACX5I,OAAQvB,GAAWoC,UAAU,EAAKnB,UAAU,GAAM,GAClD6F,QAAShD,GAAiBK,2BAA2B,EAAKlG,MAAM1nB,SAAS+qB,UAAU,KAEpFjhC,GAAO4iB,MAAM,iCAGLI,GAAUpjB,GAAO4N,UACzB,EAAKgwB,SAAS,CACbsM,WAAW,EACX5I,OAAQvB,GAAWoC,UAAU,EAAKnB,UAAU,GAAM,GAClD6F,QAAShD,GAAiBK,2BAA2B,EAAKlG,MAAM1nB,SAAS+qB,UAAU,KAEpFjhC,GAAOmxB,QAAQ,iCAnFE,EA2FnB8O,cAAgB,WACX,EAAKrC,MAAMkM,WAEd/nB,GAAaI,mBAAmB,gBAAiB,CAAC,EAAKyb,MAAM1nB,SAAS+qB,SAAU,EAAKL,UAAU,KAzFhG,EAAKA,SAAW,GAEhB,EAAK68B,YAAc,wBAEnB,IAAIvnD,EAAW,CAAE,WAAc,GAAI,SAAY,GAC3CgrB,EAAS,GACTuF,EAAU,CAAE,WAAa,EAAM,WAAa,GAE5CvD,EAAS/F,EAAMglC,MAAMC,OAAOl4D,GAbd,OAcfg5B,IACFhtB,EAAWuK,GAAUO,YAAYkiB,IAAWhtB,EAC5C,EAAK0qB,SAAWjB,GAAWyB,4BAA4B8B,GACvDhC,EAASvB,GAAWoC,UAAU,EAAKnB,UAAU,GAAM,GACnD6F,EAAUhD,GAAiBK,2BAA2BZ,GAAQ,GAC9D,EAAKu6B,YAA2B,MAAZvnD,GAA2C,IAAvBA,EAASglC,WAAoBhlC,EAASglC,WAAa,EAAKuiB,aAGjG,EAAK7/B,MAAQ,CACZ1nB,SAAUA,EACVgrB,OAAQA,EACRuF,QAASA,EACTqD,WAAW,GA1BM,E,iEA+BlB72B,GAAK3M,eAAe9D,KAAKi7D,aACzBxqD,GAAKxM,uB,0CAILk5B,GAAWr9B,kBAAkBE,KAAKw7D,WAI/B/qD,GAAK7O,cAAcu7B,GAAWrpB,0BAA0B9T,KAAKo7B,MAAM1nB,SAAS+qB,UAAU,KAExFlf,GAAaI,mBAAmB,gBAAiB,CAAC3f,KAAKo7B,MAAM1nB,SAAS+qB,SAAUz+B,KAAKo+B,UAAU,M,6CAKhGjB,GAAWj9B,qBAAqBF,KAAKw7D,a,+BAsDrC,OACC,6BACC,4BAAQjwD,UAAU,yBAAyBk8B,QAASznC,KAAKy9B,cAAe2a,SAAUp4C,KAAKo7B,MAAMkM,WAAW,uBAAG/7B,UAAW,uBAAyBvL,KAAKo7B,MAAMkM,UAAY,WAAa,OAEnL,yBAAK/7B,UAAU,UAAU67B,KAAK,SAC7B,kBAAC20B,EAAA,EAAD,CAAMxwD,UAAW,4BAA8BvL,KAAKo7B,MAAMkM,UAAY,YAAc,IAAKF,KAAK,SAASmR,GAAI,UAAYv4C,KAAKo7B,MAAM1nB,SAAS+qB,UAAU,uBAAGlzB,UAAU,qBAAlK,YAAkM,6CAClM,kBAACwwD,EAAA,EAAD,CAAMxwD,UAAW,4BAA8BvL,KAAKo7B,MAAMkM,UAAY,YAAc,IAAKF,KAAK,SAASmR,GAAI,UAAYv4C,KAAKo7B,MAAM1nB,SAAS+qB,SAAW,WAAW,uBAAGlzB,UAAU,kBAA9K,qBAGD,wBAAIA,UAAU,sBAAd,yBACA,kBAACswC,GAAD,CAAgBD,WAAY57C,KAAKo7B,MAAM1nB,SAAS+qB,SAAUC,OAAQ1+B,KAAKo7B,MAAMsD,OAAQuF,QAASjkC,KAAKo7B,MAAM6I,QAASqD,UAAWtnC,KAAKo7B,MAAMkM,iB,GAhH9G3L,IAAMC,WCVhCrc,GAAepiB,EAAQ,IACvBC,GAASD,EAAQ,GAEjB2kE,IADQ3kE,EAAQ,IACLA,EAAQ,MACnBggC,GAAahgC,EAAQ,IACrB8jC,GAAmB9jC,EAAQ,IAC3B8gB,GAAY9gB,EAAQ,IACpBy/C,GAAgBz/C,EAAQ,KACxBqnD,GAAiBrnD,EAAQ,KACzBqT,GAAIrT,EAAQ,IACZsT,GAAOtT,EAAQ,GACfK,GAASL,EAAQ,IA2WN4kE,GAzWCpmC,IAAM+P,YAAY,CAAC,YAAD,YACjCwR,gBAAiB,WAChB,MAAO,CACNxpC,SAAU,CAAE,WAAc,IAC1B6O,MAAO,GACPwc,OAAQ,CAAE,OAAU,EAAG,MAAS,EAAG,WAAa,GAEhDijC,gBAAgB,IAIlB1G,mBAAoB,WACnBt7D,KAAKgiB,UAA6D,GAAjDhiB,KAAK26B,MAAMglC,MAAMsC,KAAKpjE,QAAQ,eAC/CmB,KAAKkiE,gBAAkBliE,KAAKgiB,SAAWzb,SAASvG,KAAK26B,MAAMglC,MAAMC,OAAOuC,MAAQ,KAEhFniE,KAAKi7D,YAAc,QAInB,IAAIv6B,EAAS1gC,KAAK26B,MAAMglC,MAAMC,OAAOl4D,GACrC,GAAGg5B,EAAO,CACT,IAAIlC,EAAOvgB,GAAUO,YAAYkiB,GACjC1gC,KAAKg7B,SAAS,CAACtnB,SAAU8qB,IACzBx+B,KAAKi7D,YAAsB,MAARz8B,EAAeA,EAAKka,WAAa14C,KAAKi7D,YAG1D,IAAIn9B,EAAU99B,KAAK26B,MAAMglC,MAAMC,OAAOwC,IACnCtkC,IAEF99B,KAAKo7B,MAAM7Y,MAAQ4a,GAAWU,SAASC,EAAS99B,KAAKgiB,UACrDhiB,KAAKo7B,MAAM2D,OAASkC,GAAiBO,eAAed,EAAQ5C,EAAS99B,KAAKgiB,SAAUhiB,KAAKkiE,iBACzFliE,KAAKqiE,kCACLriE,KAAKg7B,SAAS,CAACzY,MAAOviB,KAAKo7B,MAAM7Y,MAAOwc,OAAQ/+B,KAAKo7B,MAAM2D,UAG5DtuB,GAAK3M,eAAe9D,KAAKi7D,aACzBxqD,GAAKxM,sBAGN8nC,kBAAmB,WAClB5O,GAAWr9B,kBAAkBE,KAAKsiE,gBAClCrhC,GAAiBnhC,kBAAkBE,KAAKuiE,kBAGzC3G,qBAAsB,WACrBz+B,GAAWj9B,qBAAqBF,KAAKsiE,gBACrCrhC,GAAiB/gC,qBAAqBF,KAAKuiE,kBAI5CD,eAAgB,WACf,IAAI9hD,EAAS2c,GAAW7qB,YAErBkO,GAAUpjB,GAAO0N,GACnB9K,KAAKg7B,SAAS,CAACzY,MAAO4a,GAAWU,SAAS79B,KAAKo7B,MAAM7Y,MAAM7a,GAAI1H,KAAKgiB,YAG5DxB,GAAUpjB,GAAO4L,SAGjBwX,GAAUpjB,GAAO2N,OAGjByV,GAAUpjB,GAAO4N,SACzBhL,KAAKg7B,SAAS,CAACzY,MAAO4a,GAAWU,SAAS79B,KAAKo7B,MAAM7Y,MAAM7a,GAAI1H,KAAKgiB,aAGtEugD,gBAAiB,WAChBviE,KAAKg7B,SAAS,CAAC+D,OAAQkC,GAAiBO,eAAexhC,KAAKo7B,MAAM1nB,SAAS+qB,SAAUz+B,KAAKo7B,MAAM7Y,MAAM7a,GAAI1H,KAAKgiB,SAAUhiB,KAAKkiE,oBAI/HM,WAAY,SAASnlB,GACjBr9C,KAAKyiE,uBACPjlE,GAAO4iB,MAAM,oDAIVpgB,KAAKo7B,MAAM2D,OAAOse,EAAmBqlB,eACxC1iE,KAAKo7B,MAAM2D,OAAOse,EAAmBqlB,aAAe,IAIrDlyD,GAAElT,OAAO0C,KAAKo7B,MAAM2D,OAAOse,EAAmBqlB,aAAcrlB,GAM5Dr9C,KAAKqiE,oCAINA,gCAAiC,WAShC,IARA,IAAIM,EAAc,EACdC,EAAa,EAGbC,GAAgB,EAChBC,GAAgB,EAChBC,GAAqB,EAEhB1kE,EAAI,EAAGwgB,EAAI7e,KAAKo7B,MAAM7Y,MAAMud,gBAAgBvhC,OAAQF,EAAIwgB,EAAGxgB,IAAK,CACxE0kE,GAAqB,EAErB,IAAK,IAAI1tD,EAAI,EAAG6pC,EAAIl/C,KAAKo7B,MAAM7Y,MAAMud,gBAAgBzhC,GAAG0hC,UAAUxhC,OAAQ8W,EAAI6pC,EAAG7pC,IAAK,CACrF,IAAIynC,EAAW98C,KAAKo7B,MAAM7Y,MAAMud,gBAAgBzhC,GAAG0hC,UAAU1qB,GAiC7D,GA/BIrV,KAAKo7B,MAAM2D,OAAO+d,EAASp1C,MAC9B1H,KAAKo7B,MAAM2D,OAAO+d,EAASp1C,IAAM,CAChC,UAAY,EACZ,SAAW,IAKVo7D,GACCC,EACCjmB,EAASkmB,aACXhjE,KAAKo7B,MAAM2D,OAAO+d,EAASp1C,IAAI4zB,QAAUunC,EAUzC7iE,KAAKo7B,MAAM2D,OAAO+d,EAASp1C,IAAI4zB,SAAU,EAM3Ct7B,KAAKo7B,MAAM2D,OAAO+d,EAASp1C,IAAI4zB,QAAWunC,GAAiB/lB,EAASkmB,aAIlEhjE,KAAKo7B,MAAM2D,OAAO+d,EAASp1C,IAAI4zB,QAAQ,CAGzC,GAAIwhB,EAASmmB,sBAAwB,GAAOnmB,EAASomB,wBAA0B,EAI9E,GAFAL,GAAgB,EAEb7iE,KAAKo7B,MAAM2D,OAAO+d,EAASp1C,IAAIy6B,UAAYniC,KAAKo7B,MAAM2D,OAAO+d,EAASp1C,IAAI61C,SAC5E,GAAGT,EAASmmB,sBAAwB,EACnC,OAAOnmB,EAASmmB,uBACf,KAAKnB,GAASvlB,eACbumB,GAAgB,EAChBD,GAAgB,EAChB,MACD,KAAKf,GAAStlB,eAEbqmB,GAAgB,EAChB,MACD,KAAKf,GAASrlB,oCAEbomB,GAAgB,EAChBE,GAAqB,EACrB,MACD,KAAKjB,GAASplB,8BAEbmmB,GAAgB,EAChBC,GAAgB,QAMnB,GAAGhmB,EAASomB,wBAA0B,EACrC,OAAOpmB,EAASomB,yBACf,KAAKpB,GAASvlB,eACbumB,GAAgB,EAChBD,GAAgB,EAChB,MACD,KAAKf,GAAStlB,eAEbqmB,GAAgB,EAChB,MACD,KAAKf,GAASrlB,oCAEbomB,GAAgB,EAChBE,GAAqB,EACrB,MACD,KAAKjB,GAASplB,8BAEbmmB,GAAgB,EAChBC,GAAgB,EASlBhmB,EAASld,eAAiBkd,EAASQ,YACrCqlB,GAAe7lB,EAASQ,UACrBt9C,KAAKo7B,MAAM2D,OAAO+d,EAASp1C,IAAIy6B,UAAYniC,KAAKo7B,MAAM2D,OAAO+d,EAASp1C,IAAI61C,UAC5EqlB,GAAc9lB,EAASQ,iBAQrBR,EAASmmB,sBAAwB,GAAOnmB,EAASomB,wBAA0B,KAC9EL,GAAgB,IAMpB7iE,KAAKo7B,MAAM2D,OAAOgD,OAAS4gC,EAC3B3iE,KAAKo7B,MAAM2D,OAAOkD,MAAQ2gC,EAE1B5iE,KAAKg7B,SAAS,CAAC+D,OAAQ/+B,KAAKo7B,MAAM2D,SAElCxf,GAAauf,gBAAgB9+B,KAAKo7B,MAAM2D,OAAQ/+B,KAAKgiB,WAItDmhD,eAAgB,SAASnjB,GACW,MAAhChgD,KAAKo7B,MAAM2D,OAAO+C,aACpB9hC,KAAKo7B,MAAM2D,OAAO+C,WAAa,IAKhC9hC,KAAKo7B,MAAM2D,OAAO+C,WAAake,EAE/BhgD,KAAKg7B,SAAS,CAAC+D,OAAQ/+B,KAAKo7B,MAAM2D,SAElCxf,GAAauf,gBAAgB9+B,KAAKo7B,MAAM2D,OAAQ/+B,KAAKgiB,WAGtDohD,aAAc,WAIb,IAHA,IAAIA,GAAe,EAGV/kE,EAAI,EAAGwgB,EAAI7e,KAAKo7B,MAAM7Y,MAAMud,gBAAgBvhC,OAAQF,EAAIwgB,EAAGxgB,IAAK,CACxE,IAAK,IAAIgX,EAAI,EAAG6pC,EAAIl/C,KAAKo7B,MAAM7Y,MAAMud,gBAAgBzhC,GAAG0hC,UAAUxhC,OAAQ8W,EAAI6pC,EAAG7pC,IAChF,GACCrV,KAAKo7B,MAAM7Y,MAAMud,gBAAgBzhC,GAAG0hC,UAAU1qB,GAAGuqB,iBAC/C5/B,KAAKo7B,MAAM2D,OAAO/+B,KAAKo7B,MAAM7Y,MAAMud,gBAAgBzhC,GAAG0hC,UAAU1qB,GAAG3N,KACpE1H,KAAKo7B,MAAM2D,OAAO/+B,KAAKo7B,MAAM7Y,MAAMud,gBAAgBzhC,GAAG0hC,UAAU1qB,GAAG3N,IAAI4zB,UAAYt7B,KAAKo7B,MAAM2D,OAAO/+B,KAAKo7B,MAAM7Y,MAAMud,gBAAgBzhC,GAAG0hC,UAAU1qB,GAAG3N,IAAIy6B,UACzJ,CACFihC,GAAe,EACf,MAGF,IAAIA,EACH,MAKF,GAAGA,GAAgBpjE,KAAKqjE,wBACvB,IAAK,IAAI9jB,EAAI,EAAG+jB,EAAMtjE,KAAKo7B,MAAM7Y,MAAMod,UAAUmC,WAAWvjC,OAAQghD,EAAI+jB,EAAK/jB,IAC5E,GAAoC,MAAhCv/C,KAAKo7B,MAAM2D,OAAO+C,YAAyD,MAAnC9hC,KAAKo7B,MAAM2D,OAAO+C,WAAWyd,IAChC,MAAxCv/C,KAAKo7B,MAAM2D,OAAO+C,WAAWyd,GAAG3wC,OAAiB5O,KAAKo7B,MAAM2D,OAAO+C,WAAWyd,GAAG3wC,KAAKrQ,QAC9C,MAAxCyB,KAAKo7B,MAAM2D,OAAO+C,WAAWyd,GAAGvS,OAAiBhtC,KAAKo7B,MAAM2D,OAAO+C,WAAWyd,GAAGvS,KAAKzuC,OAAQ,CAC9F6kE,GAAe,EACf,MAUH,OAJApjE,KAAKo7B,MAAM2D,OAAOzgB,UAAY8kD,EAC9BpjE,KAAKg7B,SAAS,CAAC+D,OAAQ/+B,KAAKo7B,MAAM2D,SAClCxf,GAAauf,gBAAgB9+B,KAAKo7B,MAAM2D,OAAQ/+B,KAAKgiB,UAE9CohD,GAGRG,cAAe,WACVvjE,KAAKojE,eAKTpjE,KAAKg7B,SAAS,CAAEgnC,gBAAgB,IAJ/BxkE,GAAO4iB,MAAM,4CAA8CpgB,KAAKqjE,wBAA0B,kBAAoB,MAOhHA,sBAAuB,WACtB,OAAsC,MAA9BrjE,KAAKo7B,MAAM7Y,MAAMod,WAAoE,MAA/C3/B,KAAKo7B,MAAM7Y,MAAMod,UAAU6jC,kBAA4BxjE,KAAKo7B,MAAM7Y,MAAMod,UAAU6jC,kBACrF,MAAzCxjE,KAAKo7B,MAAM7Y,MAAMod,UAAUmC,YAAsB9hC,KAAKo7B,MAAM7Y,MAAMod,UAAUmC,WAAWvjC,QAI1FkkE,qBAAsB,WACrB,IAAIgB,GAAuB,EAE3B,GAAmC,MAAhCzjE,KAAKo7B,MAAM2D,OAAO+C,YAAsB9hC,KAAKo7B,MAAM2D,OAAO+C,WAAWvjC,OACvE,IAAK,IAAIghD,EAAI,EAAG+jB,EAAMtjE,KAAKo7B,MAAM2D,OAAO+C,WAAWvjC,OAAQghD,EAAI+jB,EAAK/jB,IAEnE,GAAsC,MAAnCv/C,KAAKo7B,MAAM2D,OAAO+C,WAAWyd,IAOY,MAAxCv/C,KAAKo7B,MAAM2D,OAAO+C,WAAWyd,GAAG3wC,MAAgB5O,KAAKo7B,MAAM2D,OAAO+C,WAAWyd,GAAG3wC,KAAKrQ,OAAO,CAC9FklE,GAAuB,EACvB,MAMJ,OAAOA,GAGRl3B,OAAQ,WACP,OAAIvsC,KAAKo7B,MAAM4mC,eAGb,kBAAC/F,EAAA,EAAD,CAAUrpD,MAAI,EAAC2lC,GAAI,UAAYv4C,KAAKo7B,MAAM1nB,SAAS+qB,UAAYz+B,KAAKgiB,SAAW,eAAiB,aAcjG,6BACC,yBAAKzW,UAAU,UAAU67B,KAAK,SAC7B,kBAAC20B,EAAA,EAAD,CAAMxwD,UAAU,4BAA4B67B,KAAK,SAASmR,GAAI,UAAYv4C,KAAKo7B,MAAM1nB,SAAS+qB,UAAYz+B,KAAKgiB,SAAW,eAAiB,YAAY,uBAAGzW,UAAU,qBAApK,YAAoM,gCAASvL,KAAKgiB,SAAW,wBAA0B,qBAExP,wBAAIzW,UAAU,qBAAqB7H,MAAO,CAACwmC,aAAc,IAAKlqC,KAAKo7B,MAAM7Y,MAAM3T,MAC/E,yBAAKrD,UAAU,iCAAf,gBACA,yBAAKA,UAAU,UACf,6BACEvL,KAAKo7B,MAAM7Y,MAAMud,gBAAgB/1B,KAAI,SAAS8yC,GAE9C,OAAO,kBAACD,GAAD,CAAenyC,IAAKoyC,EAAMn1C,GAAIm1C,MAAOA,EAAOlb,YAAa3hC,KAAKo7B,MAAM2D,OAAQ0N,SAAUzsC,KAAKwiE,eAChGxiE,OAGHA,KAAKqjE,wBACL,kBAAC7e,GAAD,CAAgB1iB,WAAY9hC,KAAKo7B,MAAM7Y,MAAMod,UAAUmC,WAAYijB,gBAAiD,MAAhC/kD,KAAKo7B,MAAM2D,OAAO+C,WAAqB9hC,KAAKo7B,MAAM2D,OAAO+C,WAAa,GAAI2K,SAAUzsC,KAAKmjE,iBAAqB,KAEnM,yBAAK53D,UAAU,gBACd,4BAAQA,UAAU,kBAAkBk8B,QAASznC,KAAKujE,eAAe,uBAAGh4D,UAAU,gBAA9E,kBC/WD0S,GAAY9gB,EAAQ,IACpBkV,GAAgBlV,EAAQ,IACxBwnC,GAAexnC,EAAQ,IACvB4/B,GAAiB5/B,EAAQ,KACzBC,GAASD,EAAQ,GACjB0xC,GAAe1xC,EAAQ,KACvBK,GAASL,EAAQ,IACjBsT,GAAOtT,EAAQ,GAoGJumE,GAlGC/nC,IAAM+P,YAAY,CAAC,YAAD,YACjCwR,gBAAiB,WAChB,MAAO,CACNxpC,SAAU,CAAE,GAAM,EAAG,KAAQ,IAC7BojB,aAAc6N,GAAaC,gBAC3BmK,mBAAoB,GACpBzH,WAAW,IAIbg0B,mBAAoB,WACnB32B,GAAa7kC,kBAAkBE,KAAKw7D,WAEpCx7D,KAAKi7D,YAAc,QAInB,IAAIv6B,EAAS1gC,KAAK26B,MAAMglC,MAAMC,OAAOl4D,GACrC,GAAGg5B,EAAO,CACT,IAAIhtB,EAAWrB,GAAcQ,YAAY6tB,GACzC,GAAe,MAAZhtB,EAAiB,CACnBA,EAAW,CAAE,GAAM,EAAG,KAAQ,IAC9B,IAAI2K,EAAOJ,GAAUO,YAAYkiB,GACtB,MAARriB,IACF3K,EAAShM,GAAK2W,EAAKogB,SACnB/qB,EAAS9E,KAAOyP,EAAKq6B,YAKvB14C,KAAKg7B,SAAS,CACbtnB,SAAUA,EACVq7B,mBAAoBpK,GAAaI,gCAAgCrE,KAElE1gC,KAAKi7D,YAAcvnD,EAAS9E,KAAKrQ,OAASmV,EAAS9E,KAAO5O,KAAKi7D,YAGhExqD,GAAK3M,eAAe9D,KAAKi7D,cAE1BlvB,kBAAmB,WAEft7B,GAAK7O,cAAc+iC,GAAaa,qBAAqBxlC,KAAKo7B,MAAM1nB,SAAShM,MAE3Eq1B,GAAepd,mBAAmB,iBAAkB,CAAC3f,KAAKo7B,MAAM1nB,SAAShM,MAI3Ek0D,qBAAsB,WACrBj3B,GAAazkC,qBAAqBF,KAAKw7D,YAGxCA,UAAW,WACV,IAAIh7C,EAASmkB,GAAaryB,YAEvBkO,GAAUpjB,GAAO0N,IACnB9K,KAAKg7B,SAAS,CAACsM,WAAW,EAAOxQ,aAAc6N,GAAaC,gBAAiBmK,mBAAoBpK,GAAaI,gCAAgC/kC,KAAKo7B,MAAM1nB,SAAShM,MAClKlK,GAAO2iB,QAAQ,6BAGPK,GAAUpjB,GAAO4L,QACzBhJ,KAAKg7B,SAAS,CAACsM,WAAW,IAGlB9mB,GAAUpjB,GAAO2N,OACzB/K,KAAKg7B,SAAS,CAACsM,WAAW,IAC1B9pC,GAAO4iB,MAAM,qCAGLI,GAAUpjB,GAAO4N,UACzBhL,KAAKg7B,SAAS,CAACsM,WAAW,EAAOxQ,aAAc6N,GAAaC,gBAAiBmK,mBAAoBpK,GAAaI,gCAAgC/kC,KAAKo7B,MAAM1nB,SAAShM,MAClKlK,GAAOmxB,QAAQ,0CAIjB2b,eAAgB,WACXtqC,KAAKo7B,MAAMkM,WAEdvK,GAAepd,mBAAmB,iBAAkB,CAAC3f,KAAKo7B,MAAM1nB,SAAShM,MAI3E6kC,OAAQ,WAEP,OACC,6BACC,4BAAQhhC,UAAU,yBAAyBk8B,QAASznC,KAAKsqC,eAAgB8N,SAAUp4C,KAAKo7B,MAAMkM,WAAW,uBAAG/7B,UAAW,uBAAyBvL,KAAKo7B,MAAMkM,UAAY,WAAa,OAEpL,yBAAK/7B,UAAU,UAAU67B,KAAK,SAC7B,kBAAC20B,EAAA,EAAD,CAAMxwD,UAAW,6BAA+BvL,KAAKo7B,MAAMkM,UAAY,YAAc,IAAKF,KAAK,SAASmR,GAAI,IAAMv4C,KAAK26B,MAAMglC,MAAMC,OAAOO,KAAO,IAAMngE,KAAKo7B,MAAM1nB,SAAShM,IAAI,uBAAG6D,UAAU,qBAA5L,YAA4N,8CAG7N,wBAAIA,UAAU,sBAAd,SACA,kBAACsjC,GAAD,CAAc/X,aAAc92B,KAAKo7B,MAAMtE,aAAciY,mBAAoB/uC,KAAKo7B,MAAM2T,mBAAoBK,cAAepvC,KAAKo7B,MAAM1nB,SAAShM,GAAIonC,oBAAqBr+B,GAAKjQ,0BAA2B8mC,UAAWtnC,KAAKo7B,MAAMkM,gBCrG1N5nB,GAAcviB,EAAQ,IACtBC,GAASD,EAAQ,GACjBiT,GAAUjT,EAAQ,IAClB8gB,GAAY9gB,EAAQ,IACpBkV,GAAgBlV,EAAQ,IACxB64B,GAAoB74B,EAAQ,IAC5B+nD,GAAc/nD,EAAQ,KACtBqoD,GAAcroD,EAAQ,KACtBsT,GAAOtT,EAAQ,GACfK,GAASL,EAAQ,IAuKNwmE,GArKIhoC,IAAM+P,YAAY,CAAC,YAAD,eACpCwR,gBAAiB,WAChB,MAAO,CACNxpC,SAAU,CAAE,GAAM,EAAG,KAAQ,IAC7B85B,SAAU,GACVo2B,WAAY,GACZt8B,WAAW,EACXu8B,cAAc,EACdC,eAAe,EACfC,aAAa,IAIfzI,mBAAoB,WACnBt7D,KAAKi7D,YAAc,WAInB,IAAIv6B,EAAS1gC,KAAK26B,MAAMglC,MAAMC,OAAOl4D,GACrC,GAAGg5B,EAAO,CACT,IAAIhtB,EAAWrB,GAAcQ,YAAY6tB,GACzC,GAAe,MAAZhtB,EAAiB,CACnBA,EAAW,CAAE,GAAM,EAAG,KAAQ,GAAI,SAAY,IAC9C,IAAI2K,EAAOJ,GAAUO,YAAYkiB,GACtB,MAARriB,IACF3K,EAAShM,GAAK2W,EAAKogB,SACnB/qB,EAAS9E,KAAOyP,EAAKq6B,YAPd,IAUHlL,GAAa95B,GAAY,CAAE85B,SAAU,KAArCA,SACNxtC,KAAKg7B,SAAS,CACbtnB,SAAUA,EACV85B,SAAUA,GAAY,KAEvBxtC,KAAKi7D,YAAcvnD,EAAS9E,KAAKrQ,OAASmV,EAAS9E,KAAO5O,KAAKi7D,YAGhExqD,GAAK3M,eAAe9D,KAAKi7D,cAG1BlvB,kBAAmB,WAClB15B,GAAcvS,kBAAkBE,KAAKw7D,WACrCxlC,GAAkBl2B,kBAAkBE,KAAKgkE,qBAGtCvzD,GAAK7O,cAAcyQ,GAAcyB,0BAA0B9T,KAAKo7B,MAAM1nB,SAAShM,MAEjFgY,GAAYC,mBAAmB,kBAAmB,CAAC3f,KAAKo7B,MAAM1nB,SAAShM,MAIzEk0D,qBAAsB,WACrBvpD,GAAcnS,qBAAqBF,KAAKw7D,WACxCxlC,GAAkB91B,qBAAqBF,KAAKgkE,sBAG7CxI,UAAW,WACV,IAAIh7C,EAASnO,GAAcC,YAE3B,GAAGkO,GAAUpjB,GAAO0N,GAAG,CAAC,IACjB0iC,GAAan7B,GAAcQ,YAAY7S,KAAKo7B,MAAM1nB,SAAShM,KAAO,CAAE8lC,SAAU,KAA9EA,SACNxtC,KAAKg7B,SAAS,CACbsM,WAAW,EACXkG,SAAUA,GAAY,KAEvBhwC,GAAO2iB,QAAQ,2BAGPK,GAAUpjB,GAAO4L,QACzBhJ,KAAKg7B,SAAS,CAACsM,WAAW,IAGlB9mB,GAAUpjB,GAAO2N,QAEzB/K,KAAKg7B,SAAS,CACbsM,WAAW,IAGZ9pC,GAAO4iB,MAAM,gCAIf4jD,oBAAqB,WACpB,IAAIxjD,EAASwV,GAAkB1jB,UAAUlC,GAAQ7D,sBAE9CiU,GAAUpjB,GAAO0N,IACnB9K,KAAKg7B,SAAS,CAAE6oC,cAAc,EAAOC,eAAe,EAAOC,aAAa,EAAOH,WAAY,KAC3FpmE,GAAO2iB,QAAQ,kBAGPK,GAAUpjB,GAAO4L,QACzBhJ,KAAKg7B,SAAS,CAAE6oC,cAAc,IAGtBrjD,GAAUpjB,GAAO2N,QACzB/K,KAAKg7B,SAAS,CAAE6oC,cAAc,IAC9BrmE,GAAO4iB,MAAM,2BAIf6jD,gBAAiB,WACZjkE,KAAKo7B,MAAMkM,WAActnC,KAAKo7B,MAAMyoC,cAEvCnkD,GAAYC,mBAAmB,kBAAmB,CAAC3f,KAAKo7B,MAAM1nB,SAAShM,MAIzEw8D,gBAAiB,WAChBlkE,KAAKg7B,SAAS,CAAC8oC,eAAe,KAG/BK,iBAAkB,SAASr8B,GAC1BA,EAAMC,iBACN/nC,KAAKg7B,SAAS,CAAC8oC,eAAe,KAG/BM,kBAAmB,SAASt8B,GAE3B,OADA9nC,KAAKo7B,MAAMwoC,WAAa97B,EAAMM,OAAOhiC,MAC9BpG,KAAKg7B,SAAS,CAAC4oC,WAAY5jE,KAAKo7B,MAAMwoC,WAAYG,YAAa/jE,KAAKqkE,wBAG5EA,mBAAoB,WACnB,IAAI5G,GAAc,EAMlB,OAJIz9D,KAAKo7B,MAAMwoC,WAAWrlE,SACzBk/D,GAAc,GAGRA,GAGR6G,WAAY,SAASx8B,GAGpB,GAFAA,EAAMC,kBAEF/nC,KAAKo7B,MAAMkM,YAActnC,KAAKo7B,MAAMyoC,aAAa,CAEpD,IAAI7jE,KAAKqkE,qBAER,YADA7mE,GAAO4iB,MAAM,4BAKdV,GAAYyD,mBAAmBnjB,KAAKo7B,MAAM1nB,SAAShM,GAAI1H,KAAKo7B,MAAMwoC,cAIpEr3B,OAAQ,WAEP,OACC,6BACC,4BAAQhhC,UAAU,yBAAyBk8B,QAASznC,KAAKikE,gBAAiB7rB,SAAUp4C,KAAKo7B,MAAMkM,WAAatnC,KAAKo7B,MAAMyoC,cAAc,uBAAGt4D,UAAW,uBAAyBvL,KAAKo7B,MAAMkM,UAAY,WAAa,OAEhN,yBAAK/7B,UAAU,UAAU67B,KAAK,SAC7B,kBAAC20B,EAAA,EAAD,CAAMxwD,UAAW,4BAA8BvL,KAAKo7B,MAAMkM,UAAY,YAAc,IAAKF,KAAK,SAASmR,GAAI,IAAMv4C,KAAK26B,MAAMglC,MAAMC,OAAOO,KAAO,IAAMngE,KAAKo7B,MAAM1nB,SAAShM,IAAI,uBAAG6D,UAAU,qBAA3L,YAA2N,6CAC3N,4BAAQA,UAAU,2BAA2Bk8B,QAASznC,KAAKkkE,gBAAiB9rB,SAAUp4C,KAAKo7B,MAAMkM,WAAatnC,KAAKo7B,MAAMyoC,cAAc,uBAAGt4D,UAAU,eAApJ,iBAGD,wBAAIA,UAAU,sBAAd,YACA,kBAAC25C,GAAD,CAAa9hC,QAASpjB,KAAKo7B,MAAMwoC,WAAYn3B,SAAUzsC,KAAKokE,kBAAmBv3B,OAAQ7sC,KAAKskE,WAAYhsB,SAAUt4C,KAAKmkE,iBAAkB78B,UAAWtnC,KAAKo7B,MAAMyoC,aAAcv4D,UAAWtL,KAAKo7B,MAAM0oC,gBAAkB9jE,KAAKo7B,MAAMkM,UAAW6d,QAASnlD,KAAKo7B,MAAM2oC,cAC/P,kBAACve,GAAD,CAAahY,SAAUxtC,KAAKo7B,MAAMoS,SAAUlG,UAAWtnC,KAAKo7B,MAAMkM,gBC1KlE9nB,GAAeriB,EAAQ,IACvB6/B,GAAgB7/B,EAAQ,IACxBC,GAASD,EAAQ,GACjBkT,GAAgBlT,EAAQ,IACxBiT,GAAUjT,EAAQ,IAClB64B,GAAoB74B,EAAQ,IAC5BkV,GAAgBlV,EAAQ,IACxB+6B,GAAe/6B,EAAQ,IACvBuoB,GAAavoB,EAAQ,IACrB8gB,GAAY9gB,EAAQ,IACpB8pC,GAAgB9pC,EAAQ,IACxBqwB,GAASrwB,EAAQ,IACjBwR,GAASxR,EAAQ,IACjBsT,GAAOtT,EAAQ,GACfK,GAASL,EAAQ,IACjBqT,GAAIrT,EAAQ,IAgSDonE,G,kDA7Rd,WAAY5pC,GAAQ,IAAD,8BAClB,cAAMA,IA0EP6gC,UAAY,WAEX,IAAIY,EAAgBpmC,GAAkB1jB,UAAU,EAAK+pD,mBACjDC,EAAwBtmC,GAAkBM,kBAAkB,EAAK+lC,mBACjEE,EAA4BvmC,GAAkBI,sBAAsB,EAAKimC,mBAG7E,GAAGD,GAAiBh/D,GAAO4L,QAAQ,CAClC,IAAIwzD,EAAuB,UAC3B,GAA4B,MAAzBF,EACF,IAAI,IAAItjD,KAAUsjD,EACjB,GAAGA,EAAsBtjD,IAAW5b,GAAO4L,QAAQ,CAClDwzD,EAAuBxjD,EACvB,MAKH,EAAKgiB,SAAS,CACbsM,WAAW,EACXm1B,0BAA0B,EAC1BF,0BAA2BA,EAC3BG,2BAA4B,EAAKC,qBAAqBH,GAAwB,KAAOr7D,KAAKsE,MAAM82D,GAA6B,YAkB9H,EAAKvhC,SAAS,CACbsM,WAAW,EACXm1B,0BAA0B,EAC1BF,0BAA2BA,EAC3BG,2BAA4B,aAAev7D,KAAKsE,MAAM82D,GAA6B,KACnFiI,aAAc,EAAKC,wBAIpB5hB,WAAW,EAAK+Z,0BAA2B,KAUd,MAA1B,EAAKP,mBAAgF,MAAnD,EAAKQ,mBAAmB,EAAKR,qBAC9DD,GAAiBh/D,GAAO0N,GAC1BtN,GAAO2iB,QAAQ,EAAK08C,mBAAmB,EAAKR,mBAAmBj/D,GAAO0N,KAC9DsxD,GAAiBh/D,GAAO2N,MAChCvN,GAAO4iB,MAAM,EAAKy8C,mBAAmB,EAAKR,mBAAmBj/D,GAAO2N,QAC5DqxD,GAAiBh/D,GAAO4N,SAChCxN,GAAOmxB,QAAQ,EAAKkuC,mBAAmB,EAAKR,mBAAmBj/D,GAAO4N,YA5IvD,EAkJnBy5D,oBAAsB,WACrB,IAAID,EAAe,GAGnB,IAAI71D,GAAOK,IAAIwe,GAAOlQ,yBAA2B3O,GAAOK,IAAIwe,GAAOnQ,sBAAsB,CACxF,IAAIqnD,EAAoBryD,GAAcmB,0BAA4B,EAC9DmxD,EAAmBzsC,GAAaK,yBAA2B,EAE/D,IAAImsC,IAAqBC,EAAgB,CASxCH,EAAe,aAPXE,GAAqBC,EAEfD,EAGM,cAFA,eAFA,4BAM4B,4EAI9C,OAAOF,GAvKW,EA0KnBt0C,iBAAmB,SAAC4X,GAKnB,GAJY,MAATA,GACFA,EAAMC,kBAGH,EAAK3M,MAAMkM,UAAU,CACxB,EAAK+0B,kBAAoBjsD,GAAQ1C,cAIjC,IAAImG,EAAiBrD,GAAEyf,MAAM5d,GAAcuB,iBAAkBqK,GAAUS,qBAAsBgH,GAAWsE,uBAIxGxK,GAAa0Q,iBAAiBgI,GAAazZ,iBAAkByZ,GAAaC,qBAAsBzS,GAAWsB,2BAA4BtB,GAAWuB,+BAAgCpT,KAxLjK,EA4LnB0c,0BAA4B,WAE1B,EAAK8rC,kBAAoBjsD,GAAQnC,qBAGjCuR,GAAa+Q,6BAjMI,EAqMnB0M,WAAa,SAAC6K,GAKb,GAJY,MAATA,GACFA,EAAMC,kBAGH,EAAK3M,MAAMkM,UAAU,CACxB,EAAK+0B,kBAAoBjsD,GAAQ/B,YAIjC,IAAIwF,EAAiBrD,GAAEyf,MAAM5d,GAAcuB,iBAAkBqK,GAAUS,qBAAsBgH,GAAWsE,uBAIxGgT,GAAcC,WAAW/E,GAAazZ,iBAAkByZ,GAAaC,qBAAsBzS,GAAWsB,2BAA4BtB,GAAWuB,+BAAgCpT,KAnN5J,EAuNnB+oD,0BAA4B,WAC3B,EAAK5hC,SAAS,CAACyhC,0BAA0B,KArNzC,EAAKrhC,MAAQ,CACZkM,WAAW,EACXm1B,0BAA0B,EAC1BF,0BAA2B,EAC3BG,2BAA4B,GAC5B8H,aAAc,IAOf,EAAKnI,kBAAoB,KAEzB,EAAKM,qBAAuB,GAC5B,EAAKA,qBAAL,QAA4C,aAC5C,EAAKA,qBAAqBtsD,GAAcwc,cAAiB,2BACzD,EAAK8vC,qBAAqBtsD,GAAc2c,WAAe,yBACvD,EAAK2vC,qBAAqBtsD,GAAc8c,SAAa,sBACrD,EAAKwvC,qBAAqBtsD,GAAcgd,UAAc,wBACtD,EAAKsvC,qBAAqBtsD,GAAcugB,SAAa,sBACrD,EAAK+rC,qBAAqBtsD,GAAcyhB,UAAc,wBACtD,EAAK6qC,qBAAqBtsD,GAAckc,OAAY,oBACpD,EAAKowC,qBAAqBtsD,GAAc4I,UAAc,uBACtD,EAAK0jD,qBAAqBtsD,GAAc8hB,YAAe,yBACvD,EAAKwqC,qBAAqBtsD,GAAckiB,cAAiB,2BAEzD,EAAKsqC,mBAAqB,GAE1B,EAAKA,mBAAmBzsD,GAAQ1C,eAAiB,GACjD,EAAKmvD,mBAAmBzsD,GAAQ1C,eAAetQ,GAAO0N,IAAM,uBAC5D,EAAK+xD,mBAAmBzsD,GAAQ1C,eAAetQ,GAAO2N,OAAS,+BAC/D,EAAK8xD,mBAAmBzsD,GAAQ1C,eAAetQ,GAAO4N,SAAW,mCAEjE,EAAK6xD,mBAAmBzsD,GAAQnC,sBAAwB,GACxD,EAAK4uD,mBAAmBzsD,GAAQnC,sBAAsB7Q,GAAO0N,IAAM,uBACnE,EAAK+xD,mBAAmBzsD,GAAQnC,sBAAsB7Q,GAAO2N,OAAS,+BACtE,EAAK8xD,mBAAmBzsD,GAAQnC,sBAAsB7Q,GAAO4N,SAAW,mCAExE,EAAK6xD,mBAAmBzsD,GAAQ/B,aAAe,GAC/C,EAAKwuD,mBAAmBzsD,GAAQ/B,aAAajR,GAAO0N,IAAM,iCAC1D,EAAK+xD,mBAAmBzsD,GAAQ/B,aAAajR,GAAO2N,OAAS,yCAC7D,EAAK8xD,mBAAmBzsD,GAAQ/B,aAAajR,GAAO4N,SAAW,6CA7C7C,E,iEAiDlBhL,KAAKi7D,YAAc,WACnBxqD,GAAK3M,eAAe9D,KAAKi7D,e,0CAIzBjlC,GAAkBl2B,kBAAkBE,KAAKw7D,WAGtC7sD,GAAOK,IAAIwe,GAAOlQ,wBAA0B3O,GAAOK,IAAIwe,GAAOnQ,sBAG7D5M,GAAK7O,cAAco0B,GAAkBG,oCAAoC/lB,GAAQnC,wBACnFjO,KAAKuwB,4BAINvwB,KAAKg7B,SAAS,CACbwpC,aAAcxkE,KAAKykE,0B,6CAMrBzuC,GAAkB91B,qBAAqBF,KAAKw7D,a,+BAuJ5C,IAAMuB,EAAkB,CACvBr9D,SAAU,WACV07B,MAAO,CACN4hC,KAAMh9D,KAAK26B,MAAMn7B,SACjBy9D,UAAWj9D,KAAKi7D,cAOlB,OACC,6BACItsD,GAAOK,IAAIwe,GAAOlQ,wBAA0B3O,GAAOK,IAAIwe,GAAOnQ,sBAChE,4BAAQ9R,UAAU,yBAAyBk8B,QAASznC,KAAKuwB,0BAA2B6nB,SAAUp4C,KAAKo7B,MAAMkM,WACxG,uBAAG/7B,UAAW,uBAAyBvL,KAAKo7B,MAAMkM,UAAY,WAAa,OAG5E,yBAAK/7B,UAAU,sCACd,4BAAQA,UAAU,yCAAyC6sC,SAAUp4C,KAAKo7B,MAAMkM,UAAWqB,cAAY,WAAWu0B,gBAAc,OAAOpB,gBAAc,SACpJ,uBAAGvwD,UAAW,uBAAyBvL,KAAKo7B,MAAMkM,UAAY,WAAa,OAE5E,wBAAI/7B,UAAU,iBACb,4BAAI,uBAAGq9B,KAAK,IAAInB,QAASznC,KAAKkwB,iBAAkB3kB,UAAYvL,KAAKo7B,MAAMkM,UAAY,YAAc,IAA7F,kBACJ,4BAAI,uBAAGsB,KAAK,IAAInB,QAASznC,KAAKi9B,WAAY1xB,UAAYvL,KAAKo7B,MAAMkM,UAAY,YAAc,IAAvF,gBACJ,4BAAI,kBAACy0B,EAAA,EAAD,CAAMxjB,GAAIwkB,EAAiBxxD,UAAYvL,KAAKo7B,MAAMkM,UAAY,YAAc,IAA5E,mBAKLtnC,KAAKo7B,MAAMopC,aAAajmE,OACzB,yBAAKgN,UAAU,mBAAmB67B,KAAK,SAAQ,0BAAM1jC,MAAO,CAACgiD,WAAY,aAAc1lD,KAAKo7B,MAAMopC,eAA6B,KAE9HxkE,KAAKo7B,MAAMqhC,yBACZ,kBAAC,GAAD,CACCpmC,WAAYr2B,KAAKo7B,MAAMmhC,0BACvBh1B,YAAavnC,KAAKo7B,MAAMshC,2BACxB74D,MAAM,mBACNyjC,UAAWtnC,KAAKo7B,MAAMkM,YAClB,KAEN,yBAAK/7B,UAAU,wCAAwC7H,MAAO,CAACumC,UAAW,IACzE,kBAAC8xB,EAAA,EAAD,CAAMxjB,GAAG,gBAAgBhtC,UAAU,mBAClC,wBAAIA,UAAU,2BAA0B,uBAAGA,UAAU,wBAArD,cACA,uBAAGA,UAAU,wBAAb,mCAED,kBAACwwD,EAAA,EAAD,CAAMxjB,GAAG,kBAAkBhtC,UAAU,mBACpC,wBAAIA,UAAU,2BAA0B,uBAAGA,UAAU,kBAArD,aACA,uBAAGA,UAAU,wBAAb,mBAECoD,GAAOK,IAAIwe,GAAOvQ,qBACnB,kBAAC8+C,EAAA,EAAD,CAAMxjB,GAAG,mBAAmBhtC,UAAU,mBACrC,wBAAIA,UAAU,2BAA0B,uBAAGA,UAAU,gBAArD,cACA,uBAAGA,UAAU,wBAAb,oBACS,W,GAtRQowB,IAAMC,WCjB1Bpc,GAAeriB,EAAQ,IACvBC,GAASD,EAAQ,GACjBkV,GAAgBlV,EAAQ,IACxBuoB,GAAavoB,EAAQ,IACrBwoD,GAAYxoD,EAAQ,KACpBsT,GAAOtT,EAAQ,GACfK,GAASL,EAAQ,IACjBqwB,GAASrwB,EAAQ,IACjBwR,GAASxR,EAAQ,IAyHNynE,G,kDAtHd,WAAYjqC,GAAQ,IAAD,8BAClB,cAAMA,IA8BP6gC,UAAY,WACX,IAAIh7C,EAASkF,GAAWpT,YAErBkO,GAAUpjB,GAAO0N,IACnBtN,GAAO2iB,QAAQ,SAAW,EAAK0kD,uBAAyB,IAAM,IAAM,cACpE,EAAK7pC,SAAS,CACbsM,WAAW,EACXlc,OAAQ1F,GAAWgB,cAGpB,EAAKo+C,yCAGGtkD,GAAUpjB,GAAO4L,QACzB,EAAKgyB,SAAS,CAACsM,WAAW,IAGlB9mB,GAAUpjB,GAAO2N,OACzBvN,GAAO4iB,MAAM,0BAA4B,EAAKykD,uBAAyB,IAAM,KAC7E,EAAK7pC,SAAS,CACbsM,WAAW,EACXlc,OAAQ1F,GAAWgB,eAIZlG,GAAUpjB,GAAO4N,UACzBxN,GAAOmxB,QAAQ,+BACf,EAAKqM,SAAS,CACbsM,WAAW,EACXlc,OAAQ1F,GAAWgB,cAGpB,EAAKo+C,0CA/DY,EAmEnBv2C,aAAe,WAA4B,IAA3Bw2C,EAA0B,uDAAP,GAClC,IAAI,EAAK3pC,MAAMkM,UAAU,CAEpBr4B,MAAMC,QAAQ61D,KAAqBA,EAAmB,IAC1D,IAAIz2C,EAAsB5I,GAAWkE,oBAAoBm7C,GAEzD,IAAIz2C,EAAoB/vB,OAEvB,YADAf,GAAO2iB,QAAQ,uBAIhB,EAAK0kD,uBAA0Bv2C,EAAoB/vB,OAAS,EAE5DihB,GAAa6O,2BAA2BC,EAAqBjc,GAAcgE,4BAhF1D,EAqFnByuD,sCAAwC,WACvC,IAAIx2C,EAAsB5I,GAAWkE,sBAErC,EAAKoR,SAAS,CACbgqC,eAAiB12C,EAAoB/vB,OAAS,KAtF/C,EAAK68B,MAAQ,CACZhQ,OAAQ1F,GAAWgB,YACnB4gB,WAAW,EACX09B,gBAAgB,GANC,E,iEAWlBv0D,GAAK3M,eAAe,e,0CAIpB4hB,GAAW5lB,kBAAkBE,KAAKw7D,WAGlCx7D,KAAK8kE,wCAJc,IAONG,EAAkBjlE,KAAK26B,MAAMn7B,SAApC47B,MACH6pC,GAAiBA,EAAc12C,cAAgB02C,EAAc12C,aAAahwB,QAC5EyB,KAAKuuB,aAAa02C,EAAc12C,gB,6CAKjC7I,GAAWxlB,qBAAqBF,KAAKw7D,a,+BAoErC,OACC,6BACC,4BAAQjwD,UAAU,wBAAwB7H,MAAO,CAACw/C,MAAO,OAAQzb,QAASznC,KAAKuuB,aAAc6pB,SAAUp4C,KAAKo7B,MAAMkM,WAAW,uBAAG/7B,UAAU,uBAA0BvL,KAAKo7B,MAAM4pC,eAAiB,uBAAGz5D,UAAU,4BAAiC,MAE9O,yBAAKA,UAAU,UAAU67B,KAAK,SAC7B,kBAAC20B,EAAA,EAAD,CAAMxwD,UAAW,4BAA8BvL,KAAKo7B,MAAMkM,UAAY,YAAc,IAAKF,KAAK,SAASmR,GAAG,UAAS,uBAAGhtC,UAAU,qBAAhI,SACA,kBAACwwD,EAAA,EAAD,CAAMxwD,UAAW,4BAA8BvL,KAAKo7B,MAAMkM,UAAY,YAAc,IAAKF,KAAK,SAASmR,GAAG,sBAAqB,uBAAGhtC,UAAU,kBAA5I,gBACA,kBAACwwD,EAAA,EAAD,CAAMxwD,UAAW,4BAA8BvL,KAAKo7B,MAAMkM,UAAY,YAAc,IAAKF,KAAK,SAASmR,GAAI,qBAAqB,uBAAGhtC,UAAU,eAA7I,gBAGEvL,KAAKo7B,MAAMkM,WAAa34B,GAAO8N,eAAiB+Q,GAAO/P,aAAezd,KAAKo7B,MAAM4pC,gBACpF,yBAAKz5D,UAAU,mBAAmB7H,MAAO,CAACisC,OAAQ,eAAgBvI,KAAK,SACtE,4BAAQ77B,UAAU,6BAA6B7H,MAAO,CAACk1C,WAAY,WAAYnR,QAASznC,KAAKuuB,aAAc6pB,SAAUp4C,KAAKo7B,MAAMkM,WAAW,uBAAG/7B,UAAU,kBACxJ,0BAAM7H,MAAO,CAACgiD,WAAY,aAAc,0FAGzC,kBAACC,GAAD,CAAWv6B,OAAQprB,KAAKo7B,MAAMhQ,OAAQkc,UAAWtnC,KAAKo7B,MAAMkM,iB,GAjHvC3L,IAAMC,W,SCV3BxrB,GAAUjT,EAAQ,IAClBqiB,GAAeriB,EAAQ,IACvBuiB,GAAcviB,EAAQ,IACtBC,GAASD,EAAQ,GACjB6nB,GAAgB7nB,EAAQ,KACxBuoB,GAAavoB,EAAQ,IACrB6oD,GAAY7oD,EAAQ,KACpB0qD,GAAgB1qD,EAAQ,KACxBkV,GAAgBlV,EAAQ,IACxBkyC,GAAqBlyC,EAAQ,KAC7B+6B,GAAe/6B,EAAQ,IACvB4qD,GAAoB5qD,EAAQ,KAC5Bu5B,GAAgBv5B,EAAQ,IACxBoT,GAAcpT,EAAQ,IACtBqqC,GAAcrqC,EAAQ,IACtBqwB,GAASrwB,EAAQ,IACjBwR,GAASxR,EAAQ,IACjBsT,GAAOtT,EAAQ,GACfK,GAASL,EAAQ,IAqnBN+nE,G,kDAlnBd,WAAYvqC,GAAQ,IAAD,uBAClB,cAAMA,IAoFP6gC,UAAY,WACX,EAAKxgC,SAAS,CAAE9iB,MAAOwN,GAAWmB,SAAS,EAAKuU,MAAMljB,MAAMxQ,MAGzDiH,GAAOK,IAAIwe,GAAOlQ,yBAA2B3O,GAAOK,IAAIwe,GAAOjQ,8BAKjE9M,GAAK3I,uCAAuCsI,GAAQjE,iBAApD,gBAA4E,6BAC5EsE,GAAK3I,uCAAuCsI,GAAQzC,WAApD,gBAAsE,8BAGtE,EAAKw3D,6BAlGY,EAwGnBC,gCAAkC,WAEjC,IAAIC,EAAehzD,GAAcC,UAAU3D,GAAOK,IAAIwe,GAAOlQ,uBAAyBlN,GAAQnE,wBAA0BmE,GAAQpE,wBAC5H6K,EAAalI,GAAOK,IAAIwe,GAAOlQ,uBAAyB/M,GAAYuG,OAASvG,GAAYkqB,MAoC7F,GAjCG4qC,GAAgBjoE,GAAO0N,GACzB,EAAKkwB,SAAS,CACbujC,yBAAyB,EACzBN,mBAAoB5rD,GAAc0E,cAAcF,GAChDqnD,mBAAoB7rD,GAAc2E,cAAcH,GAChDsnD,uBAAwB9rD,GAAc4E,kBAAkBJ,GACxDunD,oBAAqB/rD,GAAc6E,eAAeL,GAClDwnD,yBAA0BhsD,GAAc8E,oBAAoBN,GAC5DynD,sBAAuBjsD,GAAcuE,iBAAiBC,KAK/CwuD,GAAgBjoE,GAAO4L,QAC/B,EAAKgyB,SAAS,CACbujC,yBAAyB,EACzBN,mBAAoB5rD,GAAc0E,cAAcF,GAChDqnD,mBAAoB7rD,GAAc2E,cAAcH,KAIzCwuD,GAAgBjoE,GAAO2N,OAC/B,EAAKiwB,SAAS,CACbujC,yBAAyB,EACzBN,mBAAoB5rD,GAAc0E,cAAcF,GAChDqnD,mBAAoB7rD,GAAc2E,cAAcH,KAQX,MAApC,EAAKyuD,4BAAoC,CAC3C,IAAIlJ,EAAgB/pD,GAAcC,YAGlC,GAAG8pD,GAAiBh/D,GAAO0N,IAAMsxD,GAAiBh/D,GAAO4N,QAAQ,CAChE,IAAIu6D,EAAmBlzD,GAAcQ,YAAY,EAAKyyD,6BAG/B,MAApBC,IAIF,EAAKvqC,SAAS,CAAE8sB,kBAAkD,MAA9Byd,EAAiBryD,UAAoBqyD,EAAiBryD,UAAY,KACtG,EAAK+nD,YAAcsK,EAAiB32D,KACpC6B,GAAK3M,eAAe,EAAKm3D,aACzB,EAAKuK,2BAA0B,GAC/BhoE,GAAO2iB,QAAQ,iCAIRi8C,GAAiBh/D,GAAO2N,OAChCvN,GAAO4iB,MAAM,mCAGXg8C,GAAiBh/D,GAAO4L,UAC1B,EAAKs8D,4BAA8B,MAGpC,EAAKtqC,SAAS,CAAEyqC,2BAA6BrJ,GAAiBh/D,GAAO4L,YA3KpD,EA+KnB08D,0BAA4B,WAI3B,EAAK1qC,SAAS,CACb2qC,4BAA4B,EAC5B1H,mBAAoB,GACpBC,mBAAoB,EACpBG,yBAA0B,KAC1BC,sBAAuB,MAxLN,EA6LnBkH,0BAA4B,SAACI,GAC5BA,EAAuD,MAA5BA,GAA0CA,EAErE,EAAK5qC,SAAS,CAAC2qC,4BAA4B,IAExCC,IAA6B,EAAKC,oBACpC,EAAKz3C,eAnMY,EAuMnBU,gBAAkB,SAACnU,EAAYC,GAE7B4E,GAAasP,gBAAgBnU,EAAYC,EAAY,IAzMpC,EA6MnBkrD,eAAiB,SAACpyD,GACjB,IAAI,EAAK0nB,MAAMmjC,wBACd,GAAsC,GAAnC7qD,EAASg8B,uBAA4B,CAMvC,GAAG/gC,GAAOK,IAAIwe,GAAOlQ,yBAA2B3O,GAAOK,IAAIwe,GAAOjQ,6BAEjE,EAAK+nD,4BAA8B5xD,EAAShM,GAC5CgY,GAAYoD,gBAAgBpP,EAAShM,IAAI,EAAO,CAAC,EAAK0zB,MAAMljB,MAAMxQ,SAM9D,CACJ,IAAI69D,EAAmBlzD,GAAcQ,YAAYa,EAAShM,IAGnC,MAApB69D,IAED,EAAKQ,yBAAyBR,GAC9B,EAAKC,2BAA0B,GAE/BhoE,GAAO2iB,QAAQ,4BAalBX,GAAaiP,cAAc/a,EAAShM,SAGpClK,GAAOmxB,QAAQ,kDAvPC,EA+PnBo3C,yBAA2B,SAACryD,GAE3B,EAAK0nB,MAAMljB,MAAMgE,YAAcxI,EAAShM,GACxC,EAAK0zB,MAAMljB,MAAMgU,cAAgBxY,EAAS9E,KAG1C,EAAKwsB,MAAMljB,MAAM8Q,cAA+C,MAA9BtV,EAASyY,kBAA8B1b,GAAKnP,wBAAuD,MAA7BoS,EAASyY,kBAA4B,KAE7I,EAAKiP,MAAMljB,MAAM2Q,iBAAyD,MAArC,EAAKuS,MAAMljB,MAAM2Q,kBAAqD,MAAzBnV,EAAS0Y,aAAwB1Y,EAAS0Y,aAAe,EAAKgP,MAAMljB,MAAM2Q,iBAI5J,IAAIiD,EAAcpG,GAAWyF,qBAAqBzX,EAASsY,qBAC3D,EAAKoP,MAAMljB,MAAM0Q,YAAckD,EAAYpkB,GAC3C,EAAK0zB,MAAMljB,MAAMmU,sBAAwBP,EAAYld,KACrD,EAAKwsB,MAAMljB,MAAMoU,wBAA0BR,EAAYtF,OAGvD,EAAK4U,MAAMljB,MAAMmR,oBAAsB,EACvC,EAAK+R,MAAMljB,MAAMoR,qBAAuB,EAExC9J,GAAa2O,UAAU,EAAKiN,MAAMljB,OAElC,EAAK8iB,SAAS,CAAE8sB,kBAA0C,MAAtBp0C,EAASR,UAAoBQ,EAASR,UAAY,KAEtF,EAAK+nD,YAAcvnD,EAAS9E,KAC5B6B,GAAK3M,eAAe,EAAKm3D,cAzRP,EA6RnB+K,4BAA8B,WAC7B,GAAG,EAAKH,mBAAmB,CAC1B,IAAIN,EAAmBlzD,GAAcQ,YAAY,EAAKuoB,MAAMljB,MAAMgE,aAC3C,MAApBqpD,GACF,EAAKvqC,SAAS,CAAE8sB,kBAAkD,MAA9Byd,EAAiBryD,UAAoBqyD,EAAiBryD,UAAY,OAjStF,EAuSnB+yD,wBAA0B,WACtB,EAAKJ,oBACPrmD,GAAaiP,cAAc,EAAK2M,MAAMljB,MAAMgE,cAzS3B,EA+SnBgqD,uBAAyB,WAExB,IAAI1lD,EAAS0X,GAAa5lB,UAAU3D,GAAOK,IAAIwe,GAAOnQ,sBAAwBjN,GAAQrC,uBAAyBqC,GAAQtC,uBACnH+I,EAAalI,GAAOK,IAAIwe,GAAOnQ,sBAAwB9M,GAAYuG,OAASvG,GAAYkqB,MAGzFja,GAAUpjB,GAAO0N,GACnB,EAAKkwB,SAAS,CACbmrC,wBAAwB,EACxBC,kBAAmBluC,GAAanhB,cAAcF,GAC9CwvD,kBAAmBnuC,GAAalhB,cAAcH,GAC9CyvD,sBAAuBpuC,GAAajhB,kBAAkBJ,GACtD0vD,qBAAsBruC,GAAac,iBAAiBniB,GACpD2vD,mBAAoBtuC,GAAahhB,eAAeL,GAChD4vD,wBAAyBvuC,GAAa/gB,oBAAoBN,GAC1D6vD,qBAAsBxuC,GAAathB,iBAAiBC,KAK7C2J,GAAUpjB,GAAO4L,QACzB,EAAKgyB,SAAS,CACbmrC,wBAAwB,EACxBC,kBAAmBluC,GAAanhB,cAAcF,GAC9CwvD,kBAAmBnuC,GAAalhB,cAAcH,GAC9C0vD,qBAAsBruC,GAAac,iBAAiBniB,KAI7C2J,GAAUpjB,GAAO2N,OACzB,EAAKiwB,SAAS,CACbmrC,wBAAwB,EACxBC,kBAAmBluC,GAAanhB,cAAcF,GAC9CwvD,kBAAmBnuC,GAAalhB,cAAcH,GAC9C0vD,qBAAsBruC,GAAac,iBAAiBniB,MAjVpC,EA4WnB+wC,yBAA2B,WAK1B,IAAI2e,EAAuB,EAAKnrC,MAAMmrC,qBACtC,GAAG,EAAKV,mBAAmB,CACNxzD,GAAcQ,YAAY,EAAKuoB,MAAMljB,MAAMgE,cAC/DqqD,EAAuBA,GAAwB,IAG1B92C,iBAAmBiH,GAAckK,IAIvD,EAAK5F,SAAS,CACb2rC,2BAA2B,EAC3BP,kBAAmB,GACnBC,kBAAmB,EACnBE,qBAAsBA,EACtBE,wBAAyB,KACzBC,qBAAsB,MAjYL,EAqYnBE,yBAA2B,WAC1B,EAAK5rC,SAAS,CAAC2rC,2BAA2B,KAtYxB,EAyYnB13C,eAAiB,SAACtU,EAAYC,EAAYsU,GAKxC1P,GAAayP,eAAetU,EAAYC,EAAY,KAAMsU,EAAe,EAAKkM,MAAMljB,MAAMgE,cA9YzE,EAkZnB2qD,eAAiB,SAACjwC,GACjB,IAAI,EAAKwE,MAAM+qC,uBAAuB,CAcrC,IAAIW,GAA4B,EAEhC,IAAK,IAAIl5C,KAAagJ,EACK,MAAvBA,EAAShJ,KACX,EAAKm5C,aAAanwC,EAAShJ,IAC3Bk5C,GAA4B,EAC5BtpE,GAAO2iB,QAAQyW,EAAShJ,GAAWhf,KAAO,oBAIzCk4D,GACFtnD,GAAa2O,UAAU,EAAKiN,MAAMljB,OAInC,EAAK0uD,6BAhbY,EAubnBG,aAAe,SAACl5C,GACf,IAAIhG,EAAoB,CACvB,MAAS,EACT,aAAgB,QAEQ,MAAtBgG,EAAQ0M,aACV1S,EAAoBpX,GAAK/J,eAAemnB,EAAQ0M,aAGjD,EAAKa,MAAMljB,MAAMwP,MAAM9U,KAAK,CAG3B,WAAcib,EAAQnmB,GACtB,IAAOmmB,EAAQuM,IACf,KAAQvM,EAAQjf,KAChB,SAAYif,EAAQjG,SACpB,iBAAoBiG,EAAQjG,SAC5B,aAAgBiG,EAAQu4B,aACxB,aAAgBv4B,EAAQy4B,aACxB,aAAgBz4B,EAAQ24B,aACxB,WAAc34B,EAAQ9F,WACtB,aAAgB8F,EAAQxG,aACxB,MAASQ,EAAkBzhB,MAC3B,WAAcyhB,EAAkBzhB,MAChC,cAAiByhB,EAAkBxhB,aAGnC,MAASwhB,EAAkBzhB,MAC3B,cAAiByhB,EAAkBxhB,gBAndlB,EA4dnBw/D,iBAAmB,WAClB,OAAwC,MAAhC,EAAKzqC,MAAMljB,MAAMgE,aAAuB,EAAKkf,MAAMljB,MAAMgE,YAAc,GA7d7D,EAkenBipD,0BAA4B,WAEvB,EAAKU,mBAGgC,MAAhC,EAAKzqC,MAAMljB,MAAM0T,aAAwB,EAAKwP,MAAMljB,MAAM0T,aAClE,EAAKg8B,2BAHL,EAAK8d,6BAreY,EA4enBsB,aAAe,WAEd,IAAI,EAAKnB,mBACR,OAAO,EAOP,IAAIxwD,EADL,GAAG,EAAK+lB,MAAMljB,MAAMwP,MAAMnpB,OAEzB,IAAI8W,EAAI,EAAGA,EAAI,EAAK+lB,MAAMljB,MAAMwP,MAAMnpB,OAAQ8W,IAC7C,GAAgC,MAA7B,EAAK+lB,MAAMljB,MAAMwP,MAAMrS,GACzB,OAAO,EAKV,OAAO,GA9fW,EAkgBnB8Y,UAAY,SAACjW,GACZsH,GAAa2O,UAAUjW,IAngBL,EAsgBnB+uD,WAAa,WAAwB,IAAvBC,EAAsB,wDAC/BC,EAAW,EAAKH,eAGpB,EAAK5rC,MAAMljB,MAAMsI,OAAS2mD,EAAWniD,GAAc+E,OAAS/E,GAAcyB,WAC1EjH,GAAa2O,UAAU,EAAKiN,MAAMljB,OAE/BivD,GAEF3nD,GAAakP,aAAa,EAAK0M,MAAMljB,MAAMgE,aAC3C,EAAK8e,SAAS,CACbosC,eAAe,EACfC,aAA4B,IAAdH,KAGf1pE,GAAO4iB,MAAM,yCArhBI,EAyhBnBknD,oBAAsB,WACrB,EAAKL,YAAW,IA1hBE,EA6hBnB74C,YAAc,WAEb5O,GAAa4O,YAAY,EAAKgN,MAAMljB,MAAMxQ,IAC1C,EAAKszB,SAAS,CAAEosC,eAAe,KAhiBb,EAmiBnBG,kCAAoC,WACnC,EAAKvsC,SAAS,CAAEwsC,kCAAkC,KApiBhC,EAuiBnBC,kCAAoC,WACnC,EAAKzsC,SAAS,CAAEwsC,kCAAkC,KAriBlD,EAAKvM,YAAc,QACnB,EAAKyM,8BAAgC,8CAErC,EAAKpC,4BAA8B,KAEnC,IAAIptD,EAAQ,GACR0O,EAAU+T,EAAMglC,MAAMC,OAAOhzC,IATf,OAUfhG,IAEF1O,EAAQwN,GAAWmB,SAAqB,OAAXD,EAAoB,KAAOA,IAGzD,EAAKwU,MAAQ,CACZljB,MAAOA,EACPqT,aAAc7F,GAAWwE,kBACzBsB,WAAY9F,GAAW6E,gBACvBkB,SAAU/F,GAAWiF,cACrBm9B,kBAAmB,GACnBsf,eAAe,EACfC,aAAa,EACbpJ,mBAAoB,GACpBC,mBAAoB,EACpBC,uBAAwB,KACxBC,oBAAqB,KACrBC,yBAA0B,KAC1BC,sBAAuB,GACvBC,yBAAyB,EACzBkH,4BAA4B,EAC5BE,4BAA4B,EAC5BS,kBAAmB,GACnBC,kBAAmB,EACnBC,sBAAuB,KACvBC,qBAAsB,KACtBC,mBAAoB,KACpBC,wBAAyB,KACzBC,qBAAsB,GACtBP,wBAAwB,EACxBwB,2BAA2B,EAC3BhB,2BAA2B,EAC3Ba,kCAAkC,EAClC93C,WAAYwI,GAAaS,mBA3CR,E,iEAgDf34B,KAAK6lE,qBACP7lE,KAAKi7D,YAAcj7D,KAAKo7B,MAAMljB,MAAMgU,eAErCzb,GAAK3M,eAAe9D,KAAKi7D,e,0CAIzBv1C,GAAW5lB,kBAAkBE,KAAKw7D,WAClCnpD,GAAcvS,kBAAkBE,KAAKolE,iCAErCltC,GAAap4B,kBAAkBE,KAAKkmE,wBAIjCv3D,GAAOK,IAAIwe,GAAOjQ,8BAA+D,OAA/Bvd,KAAK26B,MAAMglC,MAAMC,OAAOhzC,IAI5E5sB,KAAK8lE,eAAe,CACnBp+D,GAAI+I,GAAKrN,mBACTssC,uBAAwB,KAGzB1vC,KAAKgmE,8BACLhmE,KAAKimE,0BACLjmE,KAAKmlE,+B,6CAKNz/C,GAAWxlB,qBAAqBF,KAAKw7D,WACrCnpD,GAAcnS,qBAAqBF,KAAKolE,iCAExCltC,GAAah4B,qBAAqBF,KAAKkmE,0B,+BA2dvC,GAAIlmE,KAAKo7B,MAAMgsC,cAEd,OACC,kBAACnL,EAAA,EAAD,CAAUrpD,MAAI,EAAC2lC,GAAI,CAClB74C,SAAU,gBACV07B,MAAO,CAAE7M,aAAcvuB,KAAKo7B,MAAMisC,YAAc,CAACrnE,KAAKo7B,MAAMljB,MAAMxQ,IAAM,SAK3E,IAAIkgE,EAAmD,MAAhC5nE,KAAKo7B,MAAMljB,MAAMgE,YAExC,OAEC,6BACC,yBAAK3Q,UAAU,UAAU67B,KAAK,SAC7B,kBAAC20B,EAAA,EAAD,CAAMxwD,UAAW,2BAA6BoD,GAAOK,IAAIwe,GAAOpQ,2BAA6B,IAAM,KAAMgqB,KAAK,SAASmR,GAAI,iBAAiB,uBAAGhtC,UAAU,qBAAzJ,UACEoD,GAAOK,IAAIwe,GAAOpQ,2BACnB,4BAAQ7R,UAAU,2BAA2Bk8B,QAASznC,KAAK0lE,2BAA2B,uBAAGn6D,UAAU,eAAnG,IAAuHq8D,EAAkB,SAAW,SAApJ,aAAmL,KACpL,4BAAQr8D,UAAW,2BAA6BoD,GAAOK,IAAIwe,GAAOpQ,2BAA6B,IAAM,KAAMqqB,QAASznC,KAAK4nD,0BAA0B,uBAAGr8C,UAAU,eAAhK,cAGD,wBAAIA,UAAU,sBAAd,SAEEvL,KAAKo7B,MAAMuqC,2BACZ,kBAACt2B,GAAD,CACC10B,WAAY3a,KAAKo7B,MAAM6iC,mBACvBrjD,WAAY5a,KAAKo7B,MAAM8iC,mBACvBrjD,eAAgB7a,KAAKo7B,MAAM+iC,uBAC3BvyB,YAAa5rC,KAAKo7B,MAAMgjC,oBACxBvyB,iBAAkB7rC,KAAKo7B,MAAMijC,yBAC7BvyB,cAAe9rC,KAAKo7B,MAAMkjC,sBAC1BryB,SAAUjsC,KAAK8uB,gBACfuZ,SAAUroC,KAAK8lE,eACfx5B,SAAUtsC,KAAKwlE,0BACfl+B,UAAYtnC,KAAKo7B,MAAMmjC,yBAA2Bv+D,KAAKo7B,MAAMqqC,6BACzD,KAEJzlE,KAAKo7B,MAAMurC,0BACZ,kBAAC5e,GAAD,CACCoC,SAAWyd,EAAkB5nE,KAAKo7B,MAAMljB,MAAMgU,cAAgB,KAC9Dw0B,eAAgB1gD,KAAKo7B,MAAMljB,MAAMoU,wBACjC3R,WAAY3a,KAAKo7B,MAAMgrC,kBACvBxrD,WAAY5a,KAAKo7B,MAAMirC,kBACvBxrD,eAAgB7a,KAAKo7B,MAAMkrC,sBAC3Bp3C,cAAelvB,KAAKo7B,MAAMmrC,qBAC1Bnc,4BAA6Bwd,EAC7Bh8B,YAAa5rC,KAAKo7B,MAAMorC,mBACxB36B,iBAAkB7rC,KAAKo7B,MAAMqrC,wBAC7B36B,cAAe9rC,KAAKo7B,MAAMsrC,qBAC1Bh3C,WAAY1vB,KAAKo7B,MAAM1L,WACvBuc,SAAUjsC,KAAKivB,eACfqd,SAAUtsC,KAAK6mE,eACfv/B,UAAYtnC,KAAKo7B,MAAM+qC,wBAA0BnmE,KAAKo7B,MAAMusC,4BACxD,KAEJ3nE,KAAKo7B,MAAMosC,iCACZ,kBAAChgC,GAAD,CACCD,YAAavnC,KAAK0nE,8BAClBhgC,MAAO1nC,KAAKouB,YACZuZ,KAAM3nC,KAAKynE,oCACP,KAEN,kBAAC5f,GAAD,CAAe3vC,MAAOlY,KAAKo7B,MAAMljB,MAAOqT,aAAcvrB,KAAKo7B,MAAM7P,aAAcC,WAAYxrB,KAAKo7B,MAAM5P,WAAYC,SAAUzrB,KAAKo7B,MAAM3P,SAAUq8B,kBAAmB9nD,KAAKo7B,MAAM0sB,kBAAmBjb,OAAQ7sC,KAAKmuB,YAC/M,kBAAC63B,GAAD,CAAW9tC,MAAOlY,KAAKo7B,MAAMljB,MAAO20B,OAAQ7sC,KAAKmuB,UAAWw5B,QAAS3nD,KAAKinE,WAAYY,iBAAkB7nE,KAAKsnE,oBAAqBhvB,SAAUt4C,KAAKunE,kCAAmCjgB,gBAAiB34C,GAAOK,IAAIwe,GAAOhQ,gC,GA7mBnMme,IAAMC,WCpB1Bpc,GAAeriB,EAAQ,IACvBC,GAASD,EAAQ,GACjBiT,GAAUjT,EAAQ,IAClB64B,GAAoB74B,EAAQ,IAC5BuoB,GAAavoB,EAAQ,IACrBwoD,GAAYxoD,EAAQ,KACpBqwB,GAASrwB,EAAQ,IACjBwR,GAASxR,EAAQ,IACjBsT,GAAOtT,EAAQ,GACfK,GAASL,EAAQ,IAsFN2qE,G,kDAnFd,WAAYntC,GAAQ,IAAD,8BAClB,cAAMA,IA8BP6gC,UAAY,WAEX,IAAIY,EAAgBpmC,GAAkB1jB,UAAUlC,GAAQhC,+BAKrDguD,GAAiBh/D,GAAO4L,QAC1B,EAAKgyB,SAAS,CACbsM,WAAW,KAKZ,EAAKtM,SAAS,CACbsM,WAAW,EACXlc,OAAQ1F,GAAWoB,kBAGjBs1C,GAAiBh/D,GAAO0N,GAC1BtN,GAAO2iB,QAAQ,yBACPi8C,GAAiBh/D,GAAO2N,MAChCvN,GAAO4iB,MAAM,iCACLg8C,GAAiBh/D,GAAO4N,SAChCxN,GAAOmxB,QAAQ,uCAvDC,EA4DnBkE,kBAAoB,WACf,EAAKuI,MAAMkM,WAGd9nB,GAAaiR,wCAAwC/K,GAAWsB,2BAA4BtB,GAAWuB,iCA7DxG,EAAKmU,MAAQ,CACZhQ,OAAQ1F,GAAWoB,gBACnBwgB,WAAW,GALM,E,iEAUlB72B,GAAK3M,eAAe,oB,0CAIpBkyB,GAAkBl2B,kBAAkBE,KAAKw7D,WAGtC7sD,GAAOK,IAAIwe,GAAOlQ,wBAEjB7M,GAAK7O,cAAc8jB,GAAWsB,6BAGhCxH,GAAaiR,wCAAwC/K,GAAWsB,2BAA4BtB,GAAWuB,kC,6CAMzG+O,GAAkB91B,qBAAqBF,KAAKw7D,a,+BAyC5C,OACC,6BACC,4BAAQjwD,UAAU,yBAAyBk8B,QAASznC,KAAK6yB,kBAAmBulB,SAAUp4C,KAAKo7B,MAAMkM,WAAW,uBAAG/7B,UAAW,uBAAyBvL,KAAKo7B,MAAMkM,UAAY,WAAa,OAEvL,yBAAK/7B,UAAU,UAAU67B,KAAK,SAC7B,kBAAC20B,EAAA,EAAD,CAAMxwD,UAAW,4BAA8BvL,KAAKo7B,MAAMkM,UAAY,YAAc,IAAKF,KAAK,SAASmR,GAAG,iBAAgB,uBAAGhtC,UAAU,qBAAvI,YAAuK,8CACvK,kBAACwwD,EAAA,EAAD,CAAMxwD,UAAW,4BAA8BvL,KAAKo7B,MAAMkM,UAAY,YAAc,IAAKF,KAAK,SAASmR,GAAI,qBAAqB,uBAAGhtC,UAAU,eAA7I,eAED,kBAAC,GAAD,CAAW6f,OAAQprB,KAAKo7B,MAAMhQ,OAAQkc,UAAWtnC,KAAKo7B,MAAMkM,iB,GA9EnC3L,IAAMC,WCT/Bpc,GAAeriB,EAAQ,IACvBuoB,GAAavoB,EAAQ,IACrBkV,GAAgBlV,EAAQ,IAExBqtD,GAAgBrtD,EAAQ,KACxB4tD,GAAiB5tD,EAAQ,KAGzBsT,GAAOtT,EAAQ,GACfqT,GAAIrT,EAAQ,IA6JD4qE,G,kDAzJd,WAAYptC,GAAQ,IAAD,uBAClB,cAAMA,IAkCP6gC,UAAY,aAnCO,EAuCnBwM,WAAa,WAMZ,EAAK5sC,MAAM6sC,YAAY/rD,YAAc,EAAKkf,MAAM1nB,SAAShM,GACzD,EAAK0zB,MAAM6sC,YAAY/7C,cAAgB,EAAKkP,MAAM1nB,SAAS9E,KAG3D,EAAKwsB,MAAM6sC,YAAYj/C,cAA0D,MAAzC,EAAKoS,MAAM1nB,SAASyY,kBAA8B1b,GAAKnP,wBAAkE,MAAxC,EAAK85B,MAAM1nB,SAASyY,kBAA4B,KAEzK,EAAKiP,MAAM6sC,YAAYp/C,iBAAwD,MAApC,EAAKuS,MAAMljB,MAAMwyC,iBAA+D,MAApC,EAAKtvB,MAAM1nB,SAAS0Y,aAAwB,EAAKgP,MAAM1nB,SAAS0Y,aAAe7lB,SAAS,EAAK60B,MAAMljB,MAAMwyC,iBAEhM,EAAKtvB,MAAM6sC,YAAY5+C,oBAAsB9iB,SAAS,EAAK60B,MAAMljB,MAAMmR,qBACvE,EAAK+R,MAAM6sC,YAAY3+C,qBAAuB/iB,SAAS,EAAK60B,MAAMljB,MAAMoR,sBAExE,EAAK8R,MAAM6sC,YAAYn/C,WAAaviB,SAAS,EAAK60B,MAAMljB,MAAM4Q,YAC9D,EAAKsS,MAAM6sC,YAAY5gD,aAAe9gB,SAAS,EAAK60B,MAAMljB,MAAMmP,cAMhE,IAAIyE,EAAcpG,GAAWuF,YAAY,EAAKmQ,MAAMljB,MAAMsrB,SAAS97B,IACjD,MAAfokB,IACFA,EAAcpG,GAAWyF,qBAAqB,EAAKiQ,MAAM1nB,SAASsY,sBAEnE,EAAKoP,MAAM6sC,YAAYr/C,YAAckD,EAAYpkB,GACjD,EAAK0zB,MAAM6sC,YAAY57C,sBAAwBP,EAAYld,KAC3D,EAAKwsB,MAAM6sC,YAAY37C,wBAA0BR,EAAYtF,OAI7D,IAAI8kC,EAAsB76C,GAAK/J,eAAe,EAAK00B,MAAMljB,MAAMgR,mBAC3DqiC,EAAoB96C,GAAK/J,eAAe,EAAK00B,MAAMljB,MAAMkR,iBAoB7D,GAhBA,EAAKgS,MAAM6sC,YAAY7/C,WAAgBkjC,EAAoBllD,MAC3D,EAAKg1B,MAAM6sC,YAAYzgB,mBAAqB8D,EAAoBjlD,aAChE,EAAK+0B,MAAM6sC,YAAY5/C,SAAckjC,EAAkBnlD,MACvD,EAAKg1B,MAAM6sC,YAAYxgB,iBAAoB8D,EAAkBllD,aAS7D,EAAK+0B,MAAM6sC,YAAYr8C,aAAc,EAIlCpb,GAAE4pC,KAAK,EAAKhf,MAAMljB,MAAMwP,OAAOnpB,OACjC,IAAK,IAAIkM,KAAO,EAAK2wB,MAAMljB,MAAMwP,MAAM,CACtC,IAAI0/B,EAAO,EAAKhsB,MAAMljB,MAAMwP,MAAMjd,GAE9By9D,EAAwC,MAAd9gB,EAAKz/B,MAAgBlX,GAAK/J,eAAe0gD,EAAKz/B,OAASlX,GAAK5J,qBAAqBugD,EAAK8D,gBAChHid,EAAyB13D,GAAK5J,qBAAqBugD,EAAK1rC,OAE5D,EAAK0f,MAAM6sC,YAAYvgD,MAAM9U,KAAK,CAEjC,WAAcw0C,EAAK39B,WACnB,IAAO29B,EAAK/sB,IACZ,KAAQ+sB,EAAKx4C,KACb,SAAYnI,WAAW2gD,EAAK6D,KAC5B,iBAAoBxkD,WAAW2gD,EAAK6D,KACpC,aAAgBxkD,WAAW2gD,EAAKiC,eAChC,aAAgB5iD,WAAW2gD,EAAKmC,eAChC,aAAgBhjD,SAAS6gD,EAAKqC,kBAC9B,WAAerC,EAAKr/B,WAAa,EACjC,aAAgBq/B,EAAK//B,aACrB,MAAS6gD,EAAuB9hE,MAChC,WAAc8hE,EAAuB9hE,MACrC,cAAiB8hE,EAAuB7hE,aAIxC,MAAS8hE,EAAuB/hE,MAChC,cAAiB+hE,EAAuB9hE,eAK3CmZ,GAAa2O,UAAU,EAAKiN,MAAM6sC,aAClC,EAAKjtC,SAAS,CAAEotC,eAAe,KA3H/B,EAAKnN,YAAc,aAEnB,IAAI/iD,EAAQ,GACRxE,EAAW,GACXkT,EAAU+T,EAAMglC,MAAMC,OAAOhzC,IAPf,OAQfhG,IACF1O,EAAQwN,GAAWqB,aAAaH,GAChClT,EAAWrB,GAAcQ,YAAYqF,EAAMgE,aAC3C,EAAK++C,YAAcvnD,EAAS9E,MAG7B,EAAKwsB,MAAQ,CACZljB,MAAOA,EACPxE,SAAUA,EACV00D,eAAe,EACfH,YAAaviD,GAAWmB,SAAS,OAlBhB,E,iEAwBlBpW,GAAK3M,eAAe9D,KAAKi7D,e,4HA0GzB,OAAIj7D,KAAKo7B,MAAMgtC,cAGb,kBAACnM,EAAA,EAAD,CAAUrpD,MAAI,EAAC2lC,GAAI,iBAAmBv4C,KAAKo7B,MAAM6sC,YAAYvgE,KAK9D,6BACC,yBAAK6D,UAAU,UAAU67B,KAAK,SAC7B,kBAAC20B,EAAA,EAAD,CAAMxwD,UAAU,2BAA2B67B,KAAK,SAASmR,GAAG,sBAAqB,uBAAGhtC,UAAU,qBAA9F,YAA8H,mDAC9H,4BAAQA,UAAU,2BAA2Bk8B,QAASznC,KAAKgoE,YAAY,uBAAGz8D,UAAU,gBAApF,iBAGD,wBAAIA,UAAU,sBAAd,cAEA,kBAACi/C,GAAD,CAAetyC,MAAOlY,KAAKo7B,MAAMljB,QACjC,kBAAC6yC,GAAD,CAAgB7yC,MAAOlY,KAAKo7B,MAAMljB,MAAOuzC,QAASzrD,KAAKgoE,kB,GApJ/BrsC,IAAMC,WCd9BxrB,GAAUjT,EAAQ,IAClBqiB,GAAeriB,EAAQ,IACvBuiB,GAAcviB,EAAQ,IACtBC,GAASD,EAAQ,GACjBoT,GAAcpT,EAAQ,IACtBu5B,GAAgBv5B,EAAQ,IACxB+6B,GAAe/6B,EAAQ,IACvBkV,GAAgBlV,EAAQ,IACxBuoB,GAAavoB,EAAQ,IACrBuuD,GAAcvuD,EAAQ,KACtBkyC,GAAqBlyC,EAAQ,KAC7BqwB,GAASrwB,EAAQ,IACjBwR,GAASxR,EAAQ,IACjBsT,GAAOtT,EAAQ,GACfK,GAASL,EAAQ,IAkfNkrE,G,kDA/ed,WAAY1tC,GAAQ,IAAD,EAUlB,GAVkB,qBAClB,cAAMA,IA6EP6gC,UAAY,WAEX,IAAIh7C,EAAS0X,GAAa5lB,UAAU3D,GAAOK,IAAIwe,GAAOnQ,sBAAwBjN,GAAQrC,uBAAyBqC,GAAQtC,uBACnH+I,EAAalI,GAAOK,IAAIwe,GAAOnQ,sBAAwB9M,GAAYuG,OAASvG,GAAYkqB,MAGzFja,GAAUpjB,GAAO0N,GACnB,EAAKkwB,SAAS,CACbmrC,wBAAwB,EACxBxrD,WAAYud,GAAanhB,cAAcF,GACvC+D,WAAYsd,GAAalhB,cAAcH,GACvCgE,eAAgBqd,GAAajhB,kBAAkBJ,GAC/CqY,cAAegJ,GAAac,iBAAiBniB,GAC7C+0B,YAAa1T,GAAahhB,eAAeL,GACzCg1B,iBAAkB3T,GAAa/gB,oBAAoBN,GACnD+f,SAAUsB,GAAathB,iBAAiBC,KAKjC2J,GAAUpjB,GAAO4L,QACzB,EAAKgyB,SAAS,CACbmrC,wBAAwB,EACxBxrD,WAAYud,GAAanhB,cAAcF,GACvC+D,WAAYsd,GAAalhB,cAAcH,GACvCqY,cAAegJ,GAAac,iBAAiBniB,KAItC2J,GAAUpjB,GAAO2N,OACzB,EAAKiwB,SAAS,CACbmrC,wBAAwB,EACxBxrD,WAAYud,GAAanhB,cAAcF,GACvC+D,WAAYsd,GAAalhB,cAAcH,GACvCqY,cAAegJ,GAAac,iBAAiBniB,MAhH7B,EAsHnBuuD,gCAAkC,WAEjC,IAAIC,EAAehzD,GAAcC,UAAU3D,GAAOK,IAAIwe,GAAOlQ,uBAAyBlN,GAAQnE,wBAA0BmE,GAAQpE,wBAC5H6K,EAAalI,GAAOK,IAAIwe,GAAOlQ,uBAAyB/M,GAAYuG,OAASvG,GAAYkqB,MAoC7F,GAjCG4qC,GAAgBjoE,GAAO0N,GACzB,EAAKkwB,SAAS,CACbujC,yBAAyB,EACzBN,mBAAoB5rD,GAAc0E,cAAcF,GAChDqnD,mBAAoB7rD,GAAc2E,cAAcH,GAChDsnD,uBAAwB9rD,GAAc4E,kBAAkBJ,GACxDunD,oBAAqB/rD,GAAc6E,eAAeL,GAClDwnD,yBAA0BhsD,GAAc8E,oBAAoBN,GAC5DynD,sBAAuBjsD,GAAcuE,iBAAiBC,KAK/CwuD,GAAgBjoE,GAAO4L,QAC/B,EAAKgyB,SAAS,CACbujC,yBAAyB,EACzBN,mBAAoB5rD,GAAc0E,cAAcF,GAChDqnD,mBAAoB7rD,GAAc2E,cAAcH,KAIzCwuD,GAAgBjoE,GAAO2N,OAC/B,EAAKiwB,SAAS,CACbujC,yBAAyB,EACzBN,mBAAoB5rD,GAAc0E,cAAcF,GAChDqnD,mBAAoB7rD,GAAc2E,cAAcH,KAQX,MAApC,EAAKyuD,4BAAoC,CAC3C,IAAIlJ,EAAgB/pD,GAAcC,YAGlC,GAAG8pD,GAAiBh/D,GAAO0N,IAAMsxD,GAAiBh/D,GAAO4N,QAAQ,CAChE,IAAIs9D,EAAmBj2D,GAAcQ,YAAY,EAAKyyD,6BAGtD,GAAuB,MAApBgD,EAAyB,CAI3B,IAAIC,EAA8B,EAAKntC,MAAMljB,MAAMgE,aAAeosD,EAAiB5gE,KAAQiH,GAAOK,IAAIwe,GAAOjQ,6BAQ7G,GAHA,EAAKioD,4BAGF+C,EAA0B,CAE5B,EAAK7nB,eAAiBh7B,GAAWyF,qBAAqBm9C,EAAiBt8C,qBAAqBxF,OAQ5F,IAAI0I,EAAgB,EAAKkM,MAAMlM,eAAiB,GAEhDA,EAAcO,iBAAmBiH,GAAckK,IAM/CnwB,GAAK3I,uCAAuCsI,GAAQjE,iBAApD,gBAA4E,iBAAkB,CAAC,EAAKivB,MAAMzgB,WAAY,EAAGuU,EAAeo5C,EAAiB5gE,YAMnJ00D,GAAiBh/D,GAAO2N,OAChCvN,GAAO4iB,MAAM,mCAGXg8C,GAAiBh/D,GAAO4L,UAC1B,EAAKs8D,4BAA8B,MAEpC,EAAKtqC,SAAS,CAAEyqC,2BAA6BrJ,GAAiBh/D,GAAO4L,YAhNpD,EAoNnBu2D,eAAiB,WAEhB,IAAIC,EAAa95C,GAAWmB,SAAS,EAAKuU,MAAMljB,MAAMxQ,IAErC,MAAd83D,IACFA,EAAa95C,GAAWmB,YAGzB,EAAKmU,SAAS,CACb9iB,MAAOsnD,EACPC,yBAAqD,MAA1BD,EAAWtjD,aAAuBsjD,EAAWtjD,YAAc,KA9NrE,EAkOnB+S,eAAiB,SAACtU,EAAYC,EAAYsU,EAAevc,GAKvDA,OAA8B6E,IAAf7E,EAA2BA,EAAchE,GAAOK,IAAIwe,GAAOjQ,6BAA+B9M,GAAKrN,mBAAqB,EAAKg4B,MAAMljB,MAAMgE,YACpJsD,GAAayP,eAAetU,EAAYC,EAAY,KAAMsU,EAAevc,IAxOxD,EA4OnB61D,8BAAgC,SAAC36C,GAChC,EAAKmN,UAAS,SAASuO,EAAW5O,GAsBjC,IAAK,IAAI/M,KApBNC,EAAQjG,SAAW,GACwB,MAA1C2hB,EAAUkf,iBAAiB56B,EAAQnmB,KACrClK,GAAO2iB,QAAQ0N,EAAQjf,KAAO,mBAG/B26B,EAAUkf,iBAAiB56B,EAAQnmB,IAAMmmB,GAII,MAA1C0b,EAAUkf,iBAAiB56B,EAAQnmB,MACrClK,GAAO2iB,QAAQ0N,EAAQjf,KAAO,uBAC9B26B,EAAUkf,iBAAiB56B,EAAQnmB,SAAM8P,GAO3C+xB,EAAUrxB,MAAMwP,MAAQ,GAEF6hB,EAAUkf,iBAAkB,CACjD,IAAI56B,EAAU0b,EAAUkf,iBAAiB76B,GACzC,GAAc,MAAXC,EAAgB,CAClB,IAAIhG,EAAoB,CACvB,MAAS,EACT,aAAgB,QAEQ,MAAtBgG,EAAQ0M,aACV1S,EAAoBpX,GAAK/J,eAAemnB,EAAQ0M,aAGjDv6B,KAAKo7B,MAAMljB,MAAMwP,MAAM9U,KAAK,CAG3B,WAAcib,EAAQnmB,GACtB,IAAOmmB,EAAQuM,IACf,KAAQvM,EAAQjf,KAChB,SAAYif,EAAQjG,SACpB,iBAAoBiG,EAAQjG,SAC5B,aAAgBiG,EAAQu4B,aACxB,aAAgBv4B,EAAQy4B,aACxB,aAAgBz4B,EAAQ24B,aACxB,WAAc34B,EAAQ9F,WACtB,aAAgB8F,EAAQxG,aACxB,MAASQ,EAAkBzhB,MAC3B,WAAcyhB,EAAkBzhB,MAChC,cAAiByhB,EAAkBxhB,aAGnC,MAASwhB,EAAkBzhB,MAC3B,cAAiByhB,EAAkBxhB,gBAQtC,OAHAmZ,GAAa2O,UAAUnuB,KAAKo7B,MAAMljB,OAG3B,CACNuwC,iBAAkBlf,EAAUkf,iBAC5BvwC,MAAOqxB,EAAUrxB,WA3SD,EAiTnBuwD,eAAiB,WACb95D,GAAOK,IAAIwe,GAAOjQ,6BAGpB,EAAKmrD,uBAAuB,CAC3BhhE,GAAI+I,GAAKrN,mBACTssC,uBAAwB,IAGzB,EAAKg2B,6BA1TY,EA8TnBA,0BAA4B,WAI3B,EAAK1qC,SAAS,CACb2qC,4BAA4B,EAC5B1H,mBAAoB,GACpBC,mBAAoB,EACpBG,yBAA0B,KAC1BC,sBAAuB,MAvUN,EA2UnBkH,0BAA4B,WAC3B,EAAKxqC,SAAS,CAAC2qC,4BAA4B,KA5UzB,EA+UnB72C,gBAAkB,SAACnU,EAAYC,GAE7B4E,GAAasP,gBAAgBnU,EAAYC,EAAY,IAjVpC,EAsVnB8tD,uBAAyB,SAACh1D,GACzB,IAAI,EAAK0nB,MAAMmjC,wBACd,GAAsC,GAAnC7qD,EAASg8B,uBAMX,GAAG/gC,GAAOK,IAAIwe,GAAOlQ,yBAA2B3O,GAAOK,IAAIwe,GAAOjQ,6BACjE,EAAK+nD,4BAA8B5xD,EAAShM,GAC5CgY,GAAYoD,gBAAgBpP,EAAShM,IAAI,EAAO,CAAC,EAAK0zB,MAAMljB,MAAMxQ,SAM9D,CACJ,IAAI4gE,EAAmBj2D,GAAcQ,YAAYa,EAAShM,IAC1D,GAAuB,MAApB4gE,EAAyB,CAG3B,IAAIC,EAA8B,EAAKntC,MAAMljB,MAAMgE,aAAeosD,EAAiB5gE,KAAQiH,GAAOK,IAAIwe,GAAOjQ,6BAG7G,EAAK6d,MAAMljB,MAAMgE,YAAcosD,EAAiB5gE,GAChD,EAAK0zB,MAAMljB,MAAMgU,cAAgBo8C,EAAiB15D,KAGlD,EAAKwsB,MAAMljB,MAAM8Q,cAAuD,MAAtCs/C,EAAiBn8C,kBAA8B1b,GAAKnP,wBAA+D,MAArCgnE,EAAiBn8C,kBAA4B,KAE7J,EAAKiP,MAAMljB,MAAM2Q,iBAAyD,MAArC,EAAKuS,MAAMljB,MAAM2Q,kBAA6D,MAAjCy/C,EAAiBl8C,aAAwBk8C,EAAiBl8C,aAAe,EAAKgP,MAAMljB,MAAM2Q,iBAI5K,IAAIiD,EAAcpG,GAAWyF,qBAAqBm9C,EAAiBt8C,qBAanE,GAZA,EAAKoP,MAAMljB,MAAM0Q,YAAckD,EAAYpkB,GAC3C,EAAK0zB,MAAMljB,MAAMmU,sBAAwBP,EAAYld,KACrD,EAAKwsB,MAAMljB,MAAMoU,wBAA0BR,EAAYtF,OAGvD,EAAK4U,MAAMljB,MAAMmR,oBAAsB,EACvC,EAAK+R,MAAMljB,MAAMoR,qBAAuB,EAExC9J,GAAa2O,UAAU,EAAKiN,MAAMljB,OAClC,EAAKstD,4BAGF+C,EAA0B,CAE5B,EAAK7nB,eAAiB50B,EAAYtF,OASlC,IAAI0I,EAAgB,EAAKkM,MAAMlM,eAAiB,GAEhDA,EAAcO,iBAAmBiH,GAAckK,IAC/C,EAAK3R,eAAe,EAAKmM,MAAMzgB,WAAY,EAAGuU,EAAeo5C,EAAiB5gE,WAMjFlK,GAAOmxB,QAAQ,kDAzZC,EA8ZnBP,YAAc,WAIb,GAHA5O,GAAa4O,YAAY,EAAKgN,MAAMljB,MAAMxQ,KAGtCiH,GAAOK,IAAIwe,GAAOjQ,6BAA6B,CAElD,EAAKmjC,eAAiB,EAAKqF,sBAM3B,IAAI72B,EAAgB,EAAKkM,MAAMlM,cACX,MAAjBA,GAA2D,MAAlCA,EAAcO,mBACzCP,EAAcO,iBAAmBiH,GAAckK,KAEhD,EAAK3R,eAAe,EAAKmM,MAAMzgB,WAAY,EAAGuU,EAAe,QA3a9D,EAAKo2C,4BAA8B,KAGnC,EAAKvf,sBAAwBt1C,GAAK1N,qBAAqByjB,OAEvD,EAAKk6B,eAAiB,EAAKqF,sBAExBp3C,GAAOK,IAAIwe,GAAOjQ,6BAA6B,CACjD,IAAIorD,EAAct2D,GAAcQ,YAAYpC,GAAKrN,oBAC/B,MAAfulE,IACF,EAAKjoB,eAAiBh7B,GAAWyF,qBAAqBw9C,EAAY38C,qBAAqBxF,QAbvE,OAiBlB,EAAK4U,MAAQ,CACZxE,SAAU,GACVjc,WAAY,GACZC,WAAY,EACZC,eAAgB,KAChBqU,cAAe,KACf0c,YAAa,KACbC,iBAAkB,KAClBs6B,wBAAwB,EACxBz2C,WAAYwI,GAAaS,kBAEzB2lC,sBAAuB,GACvBL,mBAAoB,GACpBC,mBAAoB,EACpBC,uBAAwB,KACxBC,oBAAqB,KACrBC,yBAA0B,KAC1BE,yBAAyB,EACzBkH,4BAA4B,EAC5BE,4BAA4B,EAE5BlG,0BAA0B,EAC1BvnD,MAAOwN,GAAWmB,WAClB4hC,iBAAkB,IAxCD,E,iEA6ClBh4C,GAAK3M,eAAe,c,0CAIpBo0B,GAAap4B,kBAAkBE,KAAKw7D,WACpCnpD,GAAcvS,kBAAkBE,KAAKolE,iCACrC1/C,GAAW5lB,kBAAkBE,KAAKu/D,gBAkBlCv/D,KAAKivB,mB,6CAILiJ,GAAah4B,qBAAqBF,KAAKw7D,WACvCnpD,GAAcnS,qBAAqBF,KAAKolE,iCACxC1/C,GAAWxlB,qBAAqBF,KAAKu/D,kB,+BA+WrC,OACC,6BAEEv/D,KAAKo7B,MAAMqkC,yBACX,yBAAKl0D,UAAU,UAAU67B,KAAK,SAC7B,kBAAC20B,EAAA,EAAD,CAAMxwD,UAAW,4BAA8BvL,KAAKo7B,MAAM+qC,uBAAyB,YAAc,IAAK/+B,KAAK,SAASmR,GAAG,UAAS,uBAAGhtC,UAAU,qBAA7I,SACA,kBAACwwD,EAAA,EAAD,CAAMxwD,UAAW,4BAA8BvL,KAAKo7B,MAAM+qC,uBAAyB,YAAc,IAAK/+B,KAAK,SAASmR,GAAI,iBAAmBv4C,KAAKo7B,MAAMljB,MAAMxQ,IAAI,uBAAG6D,UAAU,wBAA7K,qBACA,4BAAQA,UAAU,2BAA2Bk8B,QAASznC,KAAKouB,YAAagqB,SAAUp4C,KAAKo7B,MAAM+qC,wBAAwB,uBAAG56D,UAAU,gBAAlI,kBAGD,yBAAKA,UAAU,UAAU67B,KAAK,SAC7B,kBAAC20B,EAAA,EAAD,CAAMxwD,UAAW,4BAA8BvL,KAAKo7B,MAAM+qC,uBAAyB,YAAc,IAAK/+B,KAAK,SAASmR,GAAG,UAAS,uBAAGhtC,UAAU,qBAA7I,YAA6K,6CAC7K,4BAAQA,UAAU,2BAA2Bk8B,QAASznC,KAAKyoE,eAAgBrwB,SAAUp4C,KAAKo7B,MAAM+qC,wBAAwB,uBAAG56D,UAAU,eAArI,eAIAvL,KAAKo7B,MAAMqkC,yBAA2B,wBAAIl0D,UAAU,sBAAsBvL,KAAKo7B,MAAMljB,MAAMgU,eAAsB,KAEjHlsB,KAAKo7B,MAAMuqC,2BACZ,kBAAC,GAAD,CACChrD,WAAY3a,KAAKo7B,MAAM6iC,mBACvBrjD,WAAY5a,KAAKo7B,MAAM8iC,mBACvBrjD,eAAgB7a,KAAKo7B,MAAM+iC,uBAC3BvyB,YAAa5rC,KAAKo7B,MAAMgjC,oBACxBvyB,iBAAkB7rC,KAAKo7B,MAAMijC,yBAC7BvyB,cAAe9rC,KAAKo7B,MAAMkjC,sBAC1BryB,SAAUjsC,KAAK8uB,gBACfuZ,SAAUroC,KAAK0oE,uBACfp8B,SAAUtsC,KAAKwlE,0BACfl+B,UAAWtnC,KAAKo7B,MAAMmjC,yBAA2Bv+D,KAAKo7B,MAAMqqC,6BACxD,KAEN,kBAAC/Z,GAAD,CACChL,eAAgB1gD,KAAK0gD,eACrB9pB,SAAU52B,KAAKo7B,MAAMxE,SACrB6xB,iBAAkBzoD,KAAKo7B,MAAMqtB,iBAC7B9tC,WAAY3a,KAAKo7B,MAAMzgB,WACvBC,WAAY5a,KAAKo7B,MAAMxgB,WACvBC,eAAgB7a,KAAKo7B,MAAMvgB,eAC3BqU,cAAelvB,KAAKo7B,MAAMlM,cAC1Bk7B,4BAA6BpqD,KAAKo7B,MAAMqkC,0BAA4B9wD,GAAOK,IAAIwe,GAAOjQ,6BACtFquB,YAAa5rC,KAAKo7B,MAAMwQ,YACxBC,iBAAkB7rC,KAAKo7B,MAAMyQ,iBAC7Bnc,WAAY1vB,KAAKo7B,MAAM1L,WACvBuc,SAAUjsC,KAAKivB,eACf08B,wBAAyB3rD,KAAKwoE,8BAC9BlhC,UAAWtnC,KAAKo7B,MAAM+qC,uBACtBva,4BAA6B5rD,KAAKo7B,MAAMqkC,gC,GA1elB9jC,IAAMC,WChB7Bpc,GAAeriB,EAAQ,IACvBC,GAASD,EAAQ,GACjBkT,GAAgBlT,EAAQ,IACxBoT,GAAcpT,EAAQ,IACtBiT,GAAUjT,EAAQ,IAClB64B,GAAoB74B,EAAQ,IAC5BkV,GAAgBlV,EAAQ,IACxBuoB,GAAavoB,EAAQ,IACrB0uD,GAAe1uD,EAAQ,KACvBsuC,GAAsBtuC,EAAQ,KAC9BqwB,GAASrwB,EAAQ,IACjBwR,GAASxR,EAAQ,IACjBsT,GAAOtT,EAAQ,GACfK,GAASL,EAAQ,IA8TNyrE,G,kDA3Td,WAAYjuC,GAAQ,IAAD,8BAClB,cAAMA,IA6CP6gC,UAAY,WAGX,GAAG,EAAKpgC,MAAMqjC,yBAAyB,CAEtC,IAAIoK,EAAqBx2D,GAAcC,UAAUlC,GAAQnE,yBAGtD48D,GAAsBzrE,GAAO0N,GAC/B,EAAKkwB,SAAS,CACb8tC,gCAAgC,EAChCC,0BAA2B12D,GAAc0E,cAAcxG,GAAYuG,QACnEkyD,0BAA2B32D,GAAc2E,cAAczG,GAAYuG,QACnEmyD,8BAA+B52D,GAAc4E,kBAAkB1G,GAAYuG,QAC3EoyD,2BAA4B72D,GAAc6E,eAAe3G,GAAYuG,QACrEqyD,gCAAiC92D,GAAc8E,oBAAoB5G,GAAYuG,QAC/EsyD,6BAA8B/2D,GAAcuE,iBAAiBrG,GAAYuG,UAIlE+xD,GAAsBzrE,GAAO4L,QACrC,EAAKgyB,SAAS,CACb8tC,gCAAgC,EAChCC,0BAA2B12D,GAAc0E,cAAcxG,GAAYuG,QACnEkyD,0BAA2B32D,GAAc2E,cAAczG,GAAYuG,UAI5D+xD,GAAsBzrE,GAAO2N,OACrC,EAAKiwB,SAAS,CACb8tC,gCAAgC,EAChCC,0BAA2B12D,GAAc0E,cAAcxG,GAAYuG,QACnEkyD,0BAA2B32D,GAAc2E,cAAczG,GAAYuG,cAGjE,CAEJ,IAAIuuD,EAAehzD,GAAcC,UAAU3D,GAAOK,IAAIwe,GAAOlQ,uBAAyBlN,GAAQnE,wBAA0BmE,GAAQpE,wBAC5H6K,EAAalI,GAAOK,IAAIwe,GAAOlQ,uBAAyB/M,GAAYuG,OAASvG,GAAYkqB,MAG1F4qC,GAAgBjoE,GAAO0N,GACzB,EAAKkwB,SAAS,CACbujC,yBAAyB,EACzB5jD,WAAYtI,GAAc0E,cAAcF,GACxC+D,WAAYvI,GAAc2E,cAAcH,GACxCgE,eAAgBxI,GAAc4E,kBAAkBJ,GAChD+0B,YAAav5B,GAAc6E,eAAeL,GAC1Cg1B,iBAAkBx5B,GAAc8E,oBAAoBN,GACpDjG,UAAWyB,GAAcuE,iBAAiBC,KAKnCwuD,GAAgBjoE,GAAO4L,QAC/B,EAAKgyB,SAAS,CACbujC,yBAAyB,EACzB5jD,WAAYtI,GAAc0E,cAAcF,GACxC+D,WAAYvI,GAAc2E,cAAcH,KAIjCwuD,GAAgBjoE,GAAO2N,OAC/B,EAAKiwB,SAAS,CACbujC,yBAAyB,EACzB5jD,WAAYtI,GAAc0E,cAAcF,GACxC+D,WAAYvI,GAAc2E,cAAcH,OAhHzB,EAwHnBwyD,+BAAiC,WAEhC,IAAIC,EAAgBtzC,GAAkB1jB,UAAUlC,GAAQlC,yBAGpDqoB,EAAiBP,GAAkBM,kBAAkBlmB,GAAQ1C,eAC7D67D,EAA0C,MAAlBhzC,EAAyBA,EAAelmB,GAAc4I,UAAY,KAG9F,GAAGqwD,GAAiBlsE,GAAO4L,UACvBugE,GAAyBnsE,GAAO0N,GAClCtN,GAAO2iB,QAAQ,kBACPopD,GAAyBnsE,GAAO4N,QACxCxN,GAAOmxB,QAAQ,4BACP46C,GAAyBnsE,GAAO2N,OACxCvN,GAAO4iB,MAAM,+BAIXmpD,GAAyBnsE,GAAO0N,IAAMy+D,GAAyBnsE,GAAO4N,SAAQ,CAChF,IAAIw+D,EAAyBjzC,EAAelmB,GAAc8hB,YACtDs3C,EAAyBlzC,EAAelmB,GAAckiB,cAEvDi3C,GAA0BpsE,GAAO0N,IAAM2+D,GAA0BrsE,GAAO0N,GAC1EtN,GAAO2iB,QAAQ,iCACPqpD,GAA0BpsE,GAAO2N,OAAS0+D,GAA0BrsE,GAAO2N,OAGnFvN,GAAOmxB,QAAQ,2CAKlB,EAAKqM,UAAS,SAACuO,GAAD,MAAgB,CAG7Bi1B,yBAA2B8K,GAAiBlsE,GAAO4L,QAEnD01D,qBAAuBn1B,EAAUm1B,sBAAwB6K,GAAyBnsE,GAAO0N,IAAMy+D,GAAyBnsE,GAAO4N,aA9J9G,EAkKnBu0D,eAAiB,WAChB,IAAIC,EAAa95C,GAAWmB,SAAS,EAAKuU,MAAMljB,MAAMxQ,IACtD,EAAKszB,SAAS,CACb9iB,MAAOsnD,EACPC,yBAAqD,MAA1BD,EAAWtjD,aAAuBsjD,EAAWtjD,YAAc,KAtKrE,EA0KnB4S,gBAAkB,SAACnU,EAAYC,GAG7B4E,GAAasP,gBAAgBnU,EAAYC,IA7KxB,EAiLnBskD,wBAA0B,WACrB,EAAK9jC,MAAMmjC,yBAId,EAAKvjC,SAAS,CACbyjC,0BAA0B,EAC1BsK,0BAA2B,GAC3BC,0BAA2B,EAC3BG,gCAAiC,KACjCC,6BAA8B,MA3Ld,EA+LnBjK,wBAA0B,WACzB,IAAI,EAAK/jC,MAAMmjC,wBAAwB,CACtC,IAAImL,EAA6B,EAAKtuC,MAAMsjC,qBAE5C,EAAK1jC,UAAS,SAACuO,GAAD,MAAgB,CAC7Bk1B,0BAA0B,EAAOC,sBAAsB,MACpD,WACAgL,GACF,EAAK56C,gBAAgB,EAAKsM,MAAMzgB,WAAY,EAAKygB,MAAMxgB,iBAvMxC,EAoNnBiG,wBAA0B,SAAClG,EAAYC,GAErC4E,GAAauP,wBAAwBpU,EAAYC,IAtNhC,EAyNnB0G,gBAAkB,SAAC5N,GACd,EAAK0nB,MAAM0tC,gCAIdtpD,GAAagR,6BAA6B,CAAC9c,EAAShM,MA3NrD,EAAK0zB,MAAQ,CACZxqB,UAAW,GACX+J,WAAY,GACZC,WAAY,EACZC,eAAgB,KAChB+wB,YAAa,KACbC,iBAAkB,KAClB0yB,yBAAyB,EAEzBwK,0BAA2B,GAC3BC,0BAA2B,EAC3BC,8BAA+B,KAC/BC,2BAA4B,KAC5BC,gCAAiC,KACjCC,6BAA8B,GAC9BN,gCAAgC,EAChCtK,0BAA0B,EAC1BC,0BAA0B,EAC1BC,sBAAsB,EAEtBe,0BAA0B,EAC1BvnD,MAAOwN,GAAWmB,YAxBD,E,iEA6BlBpW,GAAK3M,eAAe,e,0CAIpBuO,GAAcvS,kBAAkBE,KAAKw7D,WACrCxlC,GAAkBl2B,kBAAkBE,KAAKqpE,gCACzC3jD,GAAW5lB,kBAAkBE,KAAKu/D,gBAElCv/D,KAAK8uB,oB,6CAILzc,GAAcnS,qBAAqBF,KAAKw7D,WACxCxlC,GAAkB91B,qBAAqBF,KAAKqpE,gCAC5C3jD,GAAWxlB,qBAAqBF,KAAKu/D,kB,+BA4NrC,OAAIv/D,KAAKo7B,MAAMqkC,yBAGb,kBAACxD,EAAA,EAAD,CAAUrpD,MAAI,EAAC2lC,GAAI,iBAAmBv4C,KAAKo7B,MAAMljB,MAAMxQ,KAMxD,6BACGiH,GAAOK,IAAIwe,GAAOlQ,uBACpB,yBAAK/R,UAAU,UAAU67B,KAAK,SAC7B,kBAAC20B,EAAA,EAAD,CAAMxwD,UAAW,4BAA8BvL,KAAKo7B,MAAMmjC,wBAA0B,YAAc,IAAKn3B,KAAK,SAASmR,GAAG,UAAS,uBAAGhtC,UAAU,qBAA9I,IAAsK,yCAAc,8CACpL,kBAACwwD,EAAA,EAAD,CAAMxwD,UAAW,4BAA8BvL,KAAKo7B,MAAMmjC,wBAA0B,YAAc,IAAKn3B,KAAK,SAASmR,GAAG,wBAAuB,uBAAGhtC,UAAU,oBAA5J,IAAmL,gDAGpL,yBAAKA,UAAU,UAAU67B,KAAK,SAC7B,kBAAC20B,EAAA,EAAD,CAAMxwD,UAAW,4BAA8BvL,KAAKo7B,MAAMmjC,wBAA0B,YAAc,IAAKn3B,KAAK,SAASmR,GAAG,UAAS,uBAAGhtC,UAAU,qBAA9I,IAAsK,0BAAM7H,MAAO,CAAC23C,SAAU,SAAxB,WAAyC,8CAC/M,4BAAQ9vC,UAAU,2BAA2Bk8B,QAASznC,KAAKk/D,wBAAyB9mB,SAAUp4C,KAAKo7B,MAAMmjC,yBAAyB,uBAAGhzD,UAAU,oBAA/I,IAAsK,0BAAM7H,MAAO,CAAC23C,SAAU,SAAxB,qBACtK,kBAAC0gB,EAAA,EAAD,CAAMxwD,UAAW,4BAA8BvL,KAAKo7B,MAAMmjC,wBAA0B,YAAc,IAAKn3B,KAAK,SAASmR,GAAG,wBAAuB,uBAAGhtC,UAAU,oBAA5J,IAAmL,0BAAM7H,MAAO,CAAC23C,SAAU,SAAxB,kBAIlLr7C,KAAKo7B,MAAMqjC,yBACZ,kBAAC,GAAD,CACC9jD,WAAY3a,KAAKo7B,MAAM2tC,0BACvBnuD,WAAY5a,KAAKo7B,MAAM4tC,0BACvBnuD,eAAgB7a,KAAKo7B,MAAM6tC,8BAC3Br9B,YAAa5rC,KAAKo7B,MAAM8tC,2BACxBr9B,iBAAkB7rC,KAAKo7B,MAAM+tC,gCAC7Br9B,cAAe9rC,KAAKo7B,MAAMguC,6BAC1Bn9B,SAAUjsC,KAAK6gB,wBACfwrB,UAAWrsC,KAAKshB,gBAChBgrB,SAAUtsC,KAAKm/D,wBACf73B,UAAYtnC,KAAKo7B,MAAM0tC,gCAAkC9oE,KAAKo7B,MAAMojC,2BAChE,KAEN,kBAAC3S,GAAD,CACCj7C,UAAW5Q,KAAKo7B,MAAMxqB,UACtB+J,WAAY3a,KAAKo7B,MAAMzgB,WACvBC,WAAY5a,KAAKo7B,MAAMxgB,WACvBC,eAAgB7a,KAAKo7B,MAAMvgB,eAC3B+wB,YAAa5rC,KAAKo7B,MAAMwQ,YACxBC,iBAAkB7rC,KAAKo7B,MAAMyQ,iBAC7BI,SAAUjsC,KAAK8uB,gBAEfwY,UAAWtnC,KAAKo7B,MAAMmjC,+B,GAtTC5iC,IAAMC,WCf9B+I,GAAexnC,EAAQ,IACvB4/B,GAAiB5/B,EAAQ,KACzBC,GAASD,EAAQ,GACjB0xC,GAAe1xC,EAAQ,KACvBK,GAASL,EAAQ,IACjBsT,GAAOtT,EAAQ,GAuEJwsE,GArEGhuC,IAAM+P,YAAY,CAAC,YAAD,cACnCwR,gBAAiB,WAChB,MAAO,CACNpmB,aAAgB6N,GAAaC,gBAC7BmK,mBAAoBpK,GAAaM,gCACjCqC,WAAW,IAIbg0B,mBAAoB,WACnB7qD,GAAK3M,eAAe,YAGrBioC,kBAAmB,WAClBpH,GAAa7kC,kBAAkBE,KAAKw7D,WAEjC/qD,GAAK7O,cAAc+iC,GAAaa,qBAAqB,YAEvDzI,GAAepd,mBAAmB,mBAGpCi8C,qBAAsB,WACrBj3B,GAAazkC,qBAAqBF,KAAKw7D,YAGxCA,UAAW,WACV,IAAIh7C,EAASmkB,GAAaryB,YAEvBkO,GAAUpjB,GAAO0N,IACnB9K,KAAKg7B,SAAS,CAACsM,WAAW,EAAOxQ,aAAc6N,GAAaC,gBAAiBmK,mBAAoBpK,GAAaM,kCAC9GznC,GAAO2iB,QAAQ,2BAGPK,GAAUpjB,GAAO4L,QACzBhJ,KAAKg7B,SAAS,CAACsM,WAAW,IAGlB9mB,GAAUpjB,GAAO2N,OACzB/K,KAAKg7B,SAAS,CAACsM,WAAW,IAC1B9pC,GAAO4iB,MAAM,mCAGLI,GAAUpjB,GAAO4N,UACzBhL,KAAKg7B,SAAS,CAACsM,WAAW,EAAOxQ,aAAc6N,GAAaC,gBAAiBmK,mBAAoBpK,GAAaM,kCAC9GznC,GAAOmxB,QAAQ,4CAIjB2b,eAAgB,WACXtqC,KAAKo7B,MAAMkM,WAEdvK,GAAepd,mBAAmB,mBAIpC4sB,OAAQ,WAEP,OACC,6BACC,4BAAQhhC,UAAU,yBAAyBk8B,QAASznC,KAAKsqC,eAAgB8N,SAAUp4C,KAAKo7B,MAAMkM,WAAW,uBAAG/7B,UAAW,uBAAyBvL,KAAKo7B,MAAMkM,UAAY,WAAa,OAEpL,yBAAK5jC,MAAO,CAACumC,UAAW,SACvB,kBAAC,GAAD,CAAcnT,aAAc92B,KAAKo7B,MAAMtE,aAAciY,mBAAoB/uC,KAAKo7B,MAAM2T,mBAAoBK,cAAc,SAASN,oBAAqBr+B,GAAKhQ,wBAAyB6mC,UAAWtnC,KAAKo7B,MAAMkM,iBCtEzMhoB,GAAcniB,EAAQ,IACtB6/B,GAAgB7/B,EAAQ,IACxBiT,GAAUjT,EAAQ,IAClBC,GAASD,EAAQ,GACjBI,GAAYJ,EAAQ,IACpB8gB,GAAY9gB,EAAQ,IACpBggC,GAAahgC,EAAQ,IACrB8jC,GAAmB9jC,EAAQ,IAC3BkV,GAAgBlV,EAAQ,IACxB+6B,GAAe/6B,EAAQ,IACvBuoB,GAAavoB,EAAQ,IACrBwnC,GAAexnC,EAAQ,IACvB64B,GAAoB74B,EAAQ,IAC5B2uD,GAAe3uD,EAAQ,KAEvB6uD,GAAc7uD,EAAQ,KACtBsT,GAAOtT,EAAQ,GACfK,GAASL,EAAQ,IAqKNysE,GAnKAjuC,IAAM+P,YAAY,CAAC,YAAD,WAChCwR,gBAAiB,WAChB,MAAO,CACNphB,KAAMv+B,GAAU2+B,UAChB6vB,WAAYxuD,GAAUyW,YACtBszB,WAAW,EACXuiC,4BAA4B,IAI9BvO,mBAAoB,WACnB7qD,GAAK3M,eAAe,mBAGrBioC,kBAAmB,WAClBxuC,GAAUuC,kBAAkBE,KAAKw7D,WACjCxlC,GAAkBl2B,kBAAkBE,KAAK8pE,4BAMtCr5D,GAAK7O,cAAcrE,GAAU0W,4BAC/BqL,GAAY+V,aAAY,IAI1BumC,qBAAsB,WACrBr+D,GAAU2C,qBAAqBF,KAAKw7D,WACpCxlC,GAAkB91B,qBAAqBF,KAAK8pE,6BAG7CtO,UAAW,WACV,GAAGj+D,GAAUqF,UAAU,CACtB,IAAI4d,EAASjjB,GAAU+U,YAEpBkO,GAAUpjB,GAAO0N,IACnB9K,KAAKg7B,SAAS,CACbsM,WAAW,EACXxL,KAAMv+B,GAAU2+B,UAChB6vB,WAAYxuD,GAAUyW,cAEvBxW,GAAO2iB,QAAQ,+BAGPK,GAAUpjB,GAAO4L,QACzBhJ,KAAKg7B,SAAS,CAACsM,WAAW,IAGlB9mB,GAAUpjB,GAAO2N,OACzB/K,KAAKg7B,SAAS,CAACsM,WAAW,IAC1B9pC,GAAO4iB,MAAM,uCAILI,GAAUpjB,GAAO4N,UACzBhL,KAAKg7B,SAAS,CACbsM,WAAW,EACXxL,KAAMv+B,GAAU2+B,UAChB6vB,WAAYxuD,GAAUyW,cAEvBxW,GAAOmxB,QAAQ,6CAKlBm7C,2BAA4B,WAC3B,IAAItpD,EAASwV,GAAkB1jB,UAAUlC,GAAQpC,iBAG9CwS,GAAUpjB,GAAO0N,IACnB9K,KAAKg7B,SAAS,CAAE6uC,4BAA4B,IAC5CrsE,GAAO2iB,QAAQ,uBAGPK,GAAUpjB,GAAO4L,QACzBhJ,KAAKg7B,SAAS,CAAE6uC,4BAA4B,IAGpCrpD,GAAUpjB,GAAO2N,QACzB/K,KAAKg7B,SAAS,CAAE6uC,4BAA4B,IAC5CrsE,GAAO4iB,MAAM,gEAAiE,KAAM,CAAE5d,QAAS,QAIjGunE,gBAAiB,WACZ/pE,KAAKo7B,MAAMkM,WAActnC,KAAKo7B,MAAMyuC,4BAEvCvqD,GAAY+V,YAAY5kB,GAAK7O,cAAcrE,GAAU0W,6BAmCvDipB,cAAe,WACVl9B,KAAKo7B,MAAMkM,WAActnC,KAAKo7B,MAAMyuC,4BAEvC7sC,GAAcE,cAAczsB,GAAK3O,aAAa,gBACzBvE,GAAU6a,aADe,gBAEzB6F,GAAU7F,aAFe,iBAGzB+kB,GAAW/kB,aAHc,uBAIpB6oB,GAAiB7oB,aAJG,oBAKtB/F,GAAc+F,aALQ,mBAMvB8f,GAAa9f,aANU,iBAOzBsN,GAAWtN,aAPc,mBAQvBusB,GAAavsB,aACpC,KAAKxZ,QAAQ,MAAO,SAItB2tC,OAAQ,WAQP,OACC,6BACC,4BAAQhhC,UAAU,yBAAyBk8B,QAASznC,KAAK+pE,gBAAiB3xB,SAAUp4C,KAAKo7B,MAAMkM,WAAatnC,KAAKo7B,MAAMyuC,4BACtH,uBAAGt+D,UAAW,uBAAyBvL,KAAKo7B,MAAMkM,UAAY,WAAa,OAG5E,yBAAK5jC,MAAO,CAACumC,UAAW,SACvB,kBAAC6hB,GAAD,CAAchwB,KAAM97B,KAAKo7B,MAAMU,KAAMiwB,WAAY/rD,KAAKo7B,MAAM2wB,WAAYzkB,UAAWtnC,KAAKo7B,MAAMkM,aAG/F,kBAAC0kB,GAAD,CAAaI,gBAAiBpsD,KAAKk9B,cAAeoK,UAAWtnC,KAAKo7B,MAAMyuC,iCC/KxErqD,GAAeriB,EAAQ,IACvBuiB,GAAcviB,EAAQ,IACtB6/B,GAAgB7/B,EAAQ,IACxBC,GAASD,EAAQ,GACjBkT,GAAgBlT,EAAQ,IACxBiT,GAAUjT,EAAQ,IAClB64B,GAAoB74B,EAAQ,IAC5BkV,GAAgBlV,EAAQ,IACxB+6B,GAAe/6B,EAAQ,IACvBuoB,GAAavoB,EAAQ,IACrB8gB,GAAY9gB,EAAQ,IACpB8pC,GAAgB9pC,EAAQ,IACxBsT,GAAOtT,EAAQ,GACfK,GAASL,EAAQ,IACjBqT,GAAIrT,EAAQ,IAkMD6sE,G,kDA/Ld,WAAYrvC,GAAQ,IAAD,8BAClB,cAAMA,IA0DP6gC,UAAY,WAEX,IAAIY,EAAgBpmC,GAAkB1jB,UAAU,EAAK+pD,mBACjDC,EAAwBtmC,GAAkBM,kBAAkB,EAAK+lC,mBACjEE,EAA4BvmC,GAAkBI,sBAAsB,EAAKimC,mBAG7E,GAAGD,GAAiBh/D,GAAO4L,QAAQ,CAClC,IAAIwzD,EAAuB,UAC3B,GAA4B,MAAzBF,EACF,IAAI,IAAItjD,KAAUsjD,EACjB,GAAGA,EAAsBtjD,IAAW5b,GAAO4L,QAAQ,CAClDwzD,EAAuBxjD,EACvB,MAKH,EAAKgiB,SAAS,CACbsM,WAAW,EACXm1B,0BAA0B,EAC1BF,0BAA2BA,EAC3BG,2BAA4B,EAAKC,qBAAqBH,GAAwB,KAAOr7D,KAAKsE,MAAM82D,GAA6B,YAK9H,EAAKvhC,SAAS,CACbsM,WAAW,EACXm1B,0BAA0B,EAC1BF,0BAA2BA,EAC3BG,2BAA4B,aAAev7D,KAAKsE,MAAM82D,GAA6B,OAIpF1Z,WAAW,EAAK+Z,0BAA2B,KAEd,MAA1B,EAAKP,mBAAgF,MAAnD,EAAKQ,mBAAmB,EAAKR,qBAC9DD,GAAiBh/D,GAAO0N,GAC1BtN,GAAO2iB,QAAQ,EAAK08C,mBAAmB,EAAKR,mBAAmBj/D,GAAO0N,KAC9DsxD,GAAiBh/D,GAAO2N,MAChCvN,GAAO4iB,MAAM,EAAKy8C,mBAAmB,EAAKR,mBAAmBj/D,GAAO2N,QAC5DqxD,GAAiBh/D,GAAO4N,SAChCxN,GAAOmxB,QAAQ,EAAKkuC,mBAAmB,EAAKR,mBAAmBj/D,GAAO4N,YAtGvD,EA4GnBgV,aAAe,WACV,EAAKob,MAAMkM,YACd,EAAK+0B,kBAAoBjsD,GAAQjC,sBAGjCuR,GAAYG,+BAjHK,EAqHnBqQ,iBAAmB,WAClB,IAAI,EAAKkL,MAAMkM,UAAU,CACxB,EAAK+0B,kBAAoBjsD,GAAQ1C,cAIjC,IAAImG,EAAiBrD,GAAEyf,MAAM5d,GAAcuB,iBAAkBqK,GAAUS,qBAAsBgH,GAAWsE,uBAIxGxK,GAAa0Q,iBAAiBgI,GAAazZ,iBAAkByZ,GAAaC,qBAAsBzS,GAAWsB,2BAA4BtB,GAAWuB,+BAAgCpT,KA/HjK,EAmInBopB,WAAa,WACZ,IAAI,EAAK7B,MAAMkM,UAAU,CACxB,EAAK+0B,kBAAoBjsD,GAAQ/B,YAIjC,IAAIwF,EAAiBrD,GAAEyf,MAAM5d,GAAcuB,iBAAkBqK,GAAUS,qBAAsBgH,GAAWsE,uBAIxGgT,GAAcC,WAAW/E,GAAazZ,iBAAkByZ,GAAaC,qBAAsBzS,GAAWsB,2BAA4BtB,GAAWuB,+BAAgCpT,KA7I5J,EAiJnB+oD,0BAA4B,WAC3B,EAAK5hC,SAAS,CAACyhC,0BAA0B,KA/IzC,EAAKrhC,MAAQ,CACZkM,WAAW,EACXm1B,0BAA0B,EAC1BF,0BAA2B,EAC3BG,2BAA4B,IAO7B,EAAKL,kBAAoB,KAEzB,EAAKM,qBAAuB,GAC5B,EAAKA,qBAAL,QAA4C,aAC5C,EAAKA,qBAAqBtsD,GAAcwc,cAAiB,2BACzD,EAAK8vC,qBAAqBtsD,GAAc2c,WAAe,yBACvD,EAAK2vC,qBAAqBtsD,GAAc8c,SAAa,sBACrD,EAAKwvC,qBAAqBtsD,GAAcgd,UAAc,wBACtD,EAAKsvC,qBAAqBtsD,GAAcugB,SAAa,sBACrD,EAAK+rC,qBAAqBtsD,GAAcyhB,UAAc,wBACtD,EAAK6qC,qBAAqBtsD,GAAckc,OAAY,oBACpD,EAAKowC,qBAAqBtsD,GAAc4I,UAAc,uBACtD,EAAK0jD,qBAAqBtsD,GAAc8hB,YAAe,yBACvD,EAAKwqC,qBAAqBtsD,GAAckiB,cAAiB,2BAEzD,EAAKsqC,mBAAqB,GAE1B,EAAKA,mBAAmBzsD,GAAQjC,uBAAyB,GACzD,EAAK0uD,mBAAmBzsD,GAAQjC,uBAAuB/Q,GAAO0N,IAAM,uCACpE,EAAK+xD,mBAAmBzsD,GAAQjC,uBAAuB/Q,GAAO2N,OAAS,+CACvE,EAAK8xD,mBAAmBzsD,GAAQjC,uBAAuB/Q,GAAO4N,SAAW,+CAEzE,EAAK6xD,mBAAmBzsD,GAAQ1C,eAAiB,GACjD,EAAKmvD,mBAAmBzsD,GAAQ1C,eAAetQ,GAAO0N,IAAM,uBAC5D,EAAK+xD,mBAAmBzsD,GAAQ1C,eAAetQ,GAAO2N,OAAS,+BAC/D,EAAK8xD,mBAAmBzsD,GAAQ1C,eAAetQ,GAAO4N,SAAW,mCAEjE,EAAK6xD,mBAAmBzsD,GAAQ/B,aAAe,GAC/C,EAAKwuD,mBAAmBzsD,GAAQ/B,aAAajR,GAAO0N,IAAM,iCAC1D,EAAK+xD,mBAAmBzsD,GAAQ/B,aAAajR,GAAO2N,OAAS,yCAC7D,EAAK8xD,mBAAmBzsD,GAAQ/B,aAAajR,GAAO4N,SAAW,6CA5C7C,E,iEAgDlByF,GAAK3M,eAAe,a,0CAIpBkyB,GAAkBl2B,kBAAkBE,KAAKw7D,a,6CAIzCxlC,GAAkB91B,qBAAqBF,KAAKw7D,a,+BAgG5C,IAAMqC,EAAgB79D,KAAK26B,MAAMn7B,SAAS47B,OAASp7B,KAAK26B,MAAMn7B,SAAS47B,MAAM4hC,KAAQh9D,KAAK26B,MAAMn7B,SAAS47B,MAAM4hC,KAAO,KAClHiN,EAA0C,MAAhBpM,EAE9B,OACC,6BACGoM,EACD,yBAAK1+D,UAAU,UAAU67B,KAAK,SAC7B,kBAAC20B,EAAA,EAAD,CAAMxwD,UAAU,4BAA4B67B,KAAK,SAASmR,GAAIslB,GAC7D,uBAAGtyD,UAAU,qBADd,YAC8C,gCAAUvL,KAAK26B,MAAMn7B,SAAS47B,MAAM6hC,aAE1E,KAERj9D,KAAKo7B,MAAMqhC,yBACZ,kBAAC,GAAD,CACCpmC,WAAYr2B,KAAKo7B,MAAMmhC,0BACvBh1B,YAAavnC,KAAKo7B,MAAMshC,2BACxB74D,MAAM,mBACNyjC,UAAWtnC,KAAKo7B,MAAMkM,YAClB,KAEN,yBAAK/7B,UAAU,+BAA+B7H,MAAO,CAACumC,UAAYggC,EAAyB,OAAS,IACnG,4BAAQxiC,QAASznC,KAAKi9B,WAAY1xB,UAAU,kBAAkB6sC,SAAUp4C,KAAKo7B,MAAMkM,WAClF,wBAAI/7B,UAAU,2BAA0B,uBAAGA,UAAW,iBAAoBvL,KAAKo7B,MAAMkM,WAAatnC,KAAKq8D,mBAAqBjsD,GAAQ/B,YAAe,WAAa,MAAhK,gBACA,uBAAG9C,UAAU,wBAAb,0DAED,4BAAQk8B,QAASznC,KAAKggB,aAAczU,UAAU,kBAAkB6sC,SAAUp4C,KAAKo7B,MAAMkM,WACpF,wBAAI/7B,UAAU,2BAA0B,uBAAGA,UAAW,iBAAoBvL,KAAKo7B,MAAMkM,WAAatnC,KAAKq8D,mBAAqBjsD,GAAQjC,sBAAyB,WAAa,MAA1K,kBACA,uBAAG5C,UAAU,wBAAb,gEAED,4BAAQk8B,QAASznC,KAAKkwB,iBAAkB3kB,UAAU,kBAAkB6sC,SAAUp4C,KAAKo7B,MAAMkM,WACxF,wBAAI/7B,UAAU,2BAA0B,uBAAGA,UAAW,iBAAoBvL,KAAKo7B,MAAMkM,WAAatnC,KAAKq8D,mBAAqBjsD,GAAQ1C,cAAiB,WAAa,MAAlK,uBACA,uBAAGnC,UAAU,wBAAb,uE,GAxLoBowB,IAAMC,W,MCkBhC3C,EAAQxqB,OAaR,IAAIzR,GAAIG,EAAQ,GAEhBF,OAAOD,EAAIC,OAAO24D,OAAS54D,GAE3BG,EAAQ,KASRA,EAAQ,KACRA,EAAQ,KAER,IAAIsT,GAAOtT,EAAQ,GACnBsT,GAAKnO,UAKL,IAAM4nE,GAAe,SAAC,GAAD,IAAG9kB,EAAH,EAAGA,UAAcve,EAAjB,oCACnB,kBAACsjC,EAAA,EAAD,iBAAWtjC,EAAX,CAAiB0F,OAAQ,SAAA5R,GAAK,OAC5BlqB,GAAK9N,aACHg5B,IAAM6b,cAAc4N,EAAWzqB,GAE/B,kBAACshC,EAAA,EAAD,CAAU1jB,GAAI,CACZ74C,SAAU,SACV07B,MAAO,CAAE4hC,KAAMriC,EAAMn7B,kBA+Dd4qE,GAnDH,kBACV,kBAAC,IAAD,CAAQC,SAAUptE,OAAOuC,SAASE,SAASC,MAAM,gBAAgB,GAAK,gBACpE,6BACE,kBAAC,EAAD,MACA,yBAAK4L,UAAU,mBACd,kBAAC++D,EAAA,EAAD,KACC,kBAACH,EAAA,EAAD,CAAOlI,KAAK,SAASsI,OAAK,EAACnlB,UAAWiY,KACtC,kBAAC8M,EAAA,EAAD,CAAOlI,KAAK,uBAAuB7c,UAAW0Y,KAC7C,kBAAC,GAAD,CAAcmE,KAAK,IAAIsI,OAAK,EAACnlB,UAAW+W,IACxC,kBAAC,GAAD,CAAc8F,KAAK,SAASsI,OAAK,EAACnlB,UAAW4Y,KAC5C,kBAAC,GAAD,CAAciE,KAAK,oCAAoCsI,OAAK,EAACnlB,UAAWka,KACvE,kBAAC,GAAD,CAAc2C,KAAK,yCAAyC7c,UAAWgb,KACvE,kBAAC,GAAD,CAAc6B,KAAK,gDAAgD7c,UAAW6b,KAC9E,kBAAC,GAAD,CAAcgB,KAAK,kDAAkD7c,UAAWic,KAChF,kBAAC,GAAD,CAAcY,KAAK,iDAAiD7c,UAAWmc,KACrF,kBAAC,GAAD,CAAcU,KAAK,0CAA0C7c,UAAWse,KACxE,kBAAC,GAAD,CAAczB,KAAK,6CAA6C7c,UAAWue,KACrE,kBAAC,GAAD,CAAc1B,KAAK,oBAAoBsI,OAAK,EAACnlB,UAAWqc,KACvD,kBAAC,GAAD,CAAcQ,KAAK,yBAAyB7c,UAAW2c,KACxD,kBAAC,GAAD,CAAcE,KAAK,yBAAyBsI,OAAK,EAACnlB,UAAWyc,KAClE,kBAAC,GAAD,CAAcI,KAAK,oCAAoC7c,UAAW2c,KACrE,kBAAC,GAAD,CAAcE,KAAK,SAASsI,OAAK,EAACnlB,UAAWmf,KAC5C,kBAAC,GAAD,CAActC,KAAK,gBAAgBsI,OAAK,EAACnlB,UAAWwf,KACnD,kBAAC,GAAD,CAAc3C,KAAK,qBAAqBsI,OAAK,EAACnlB,UAAW0iB,KACxD,kBAAC,GAAD,CAAc7F,KAAK,0BAA0B7c,UAAW2iB,KACzD,kBAAC,GAAD,CAAc9F,KAAK,qBAAqB7c,UAAW8f,KACpD,kBAAC,GAAD,CAAcjD,KAAK,kBAAkBsI,OAAK,EAACnlB,UAAWijB,KACtD,kBAAC,GAAD,CAAcpG,KAAK,mBAAmBsI,OAAK,EAACnlB,UAAWwjB,KAClD,kBAAC,GAAD,CAAc3G,KAAK,WAAW7c,UAAWukB,KACzC,kBAAC,GAAD,CAAc1H,KAAK,QAAQ7c,UAAWolB,KACtC,kBAAC,GAAD,CAAcvI,KAAK,WAAW7c,UAAW4kB,KACzC,kBAAC,GAAD,CAAc5kB,UAAWgY,SCpH9B3sD,GAAOtT,EAAQ,GACfstE,GAActtE,EAAQ,KAEtB09D,GAAgB,CAACpqD,GAAKnQ,UAAY,sBACtCoqE,IAASn+B,OAAO,kBAAC,EAAD,CAAQsuB,cAAeA,KAAmBr3D,SAASC,eAAe,QAElFgnE,GAAYnoE,UAAU62B,OAAM,eAEzB5pB,MAAK,WACP/L,SAASC,eAAe,SAASknE,UAAUC,OAAO,cAClDF,IAASn+B,OAAO,kBAAC,GAAD,MAAS/oC,SAASC,eAAe,a","file":"static/js/main.28ec7642.chunk.js","sourcesContent":["/*eslint-disable eqeqeq*/\n\"use strict\";\n\nconst $ = window.$;\n\nvar Dispatcher = require('./dispatcher/appDispatcher');\nvar Status = require('./constants/actionStatuses');\n\n//We need components to be able to subscribe to util events\n//[currently changes in screen header title]\nvar EventEmitter = require('events').EventEmitter;\nvar assign = require('object-assign');\nvar CHANGE_EVENT = 'change';\nvar DEFAULT_SCREEN_TITLE = 'Retailer Lite';\n\nvar UserStore = require('./stores/userStore');\n\nvar toastr = require('toastr');\n\n/**\n*\n*  Base64 encode / decode\n*  http://www.webtoolkit.info/ \n*  (With modifications and cleanup)\n*\n**/\nvar Base64 = {\n    // private property\n    _keyStr : \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\",\n\n    // public method for encoding\n    encode : function (input) {\n        var output = \"\";\n        var chr1, chr2, chr3, enc1, enc2, enc3, enc4;\n        var i = 0;\n        input = Base64._utf8Encode(input);\n\n        while (i < input.length) {\n            chr1 = input.charCodeAt(i++);\n            chr2 = input.charCodeAt(i++);\n            chr3 = input.charCodeAt(i++);\n\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2)) {\n                enc3 = enc4 = 64;\n            } else if (isNaN(chr3)) {\n                enc4 = 64;\n            }\n\n            output = output +\n            Base64._keyStr.charAt(enc1) + Base64._keyStr.charAt(enc2) +\n            Base64._keyStr.charAt(enc3) + Base64._keyStr.charAt(enc4);\n        }\n\n        return output;\n    },\n\n    // public method for decoding\n    decode : function (input) {\n        var output = \"\";\n        var chr1, chr2, chr3;\n        var enc1, enc2, enc3, enc4;\n        var i = 0;\n\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n        while (i < input.length) {\n            enc1 = Base64._keyStr.indexOf(input.charAt(i++));\n            enc2 = Base64._keyStr.indexOf(input.charAt(i++));\n            enc3 = Base64._keyStr.indexOf(input.charAt(i++));\n            enc4 = Base64._keyStr.indexOf(input.charAt(i++));\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n            output = output + String.fromCharCode(chr1);\n\n            if (enc3 != 64) {\n                output = output + String.fromCharCode(chr2);\n            }\n            if (enc4 != 64) {\n                output = output + String.fromCharCode(chr3);\n            }\n        }\n\n        output = Base64._utf8Decode(output);\n\n        return output;\n    },\n\n    // private method for UTF-8 encoding\n    _utf8Encode : function (string) {\n        string = string.replace(/\\r\\n/g, \"\\n\");\n        var utftext = \"\";\n\n        for (var n = 0; n < string.length; n++) {\n            var c = string.charCodeAt(n);\n            if (c < 128) {\n                utftext += String.fromCharCode(c);\n            } else if((c > 127) && (c < 2048)) {\n                utftext += String.fromCharCode((c >> 6) | 192);\n                utftext += String.fromCharCode((c & 63) | 128);\n            } else {\n                utftext += String.fromCharCode((c >> 12) | 224);\n                utftext += String.fromCharCode(((c >> 6) & 63) | 128);\n                utftext += String.fromCharCode((c & 63) | 128);\n            }\n        }\n\n        return utftext;\n    },\n\n    // private method for UTF-8 decoding\n    _utf8Decode : function (utftext) {\n        var string = \"\";\n        var i = 0;\n        var c = 0;\n        var c1 = 0;\n        var c2 = 0;\n        var c3 = 0;\n\n        while ( i < utftext.length ) {\n            c = utftext.charCodeAt(i);\n\n            if (c < 128) {\n                string += String.fromCharCode(c);\n                i++;\n            } else if((c > 191) && (c < 224)) {\n                c2 = utftext.charCodeAt(i + 1);\n                string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));\n                i += 2;\n            } else {\n                c2 = utftext.charCodeAt(i + 1);\n                c3 = utftext.charCodeAt(i + 2);\n                string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\n                i += 3;\n            }\n        }\n\n        return string;\n    }\n};\n\n/*Morpheus-specific utilities:*/\n\nvar baseUrl = window.location.origin + window.location.pathname.split('mobile-sales')[0];\nvar watchID;\n\nvar appUtil = assign({}, EventEmitter.prototype, {\n\taddChangeListener: function(callback){ this.on(CHANGE_EVENT, callback); },\n\tremoveChangeListener: function(callback){ this.removeListener(CHANGE_EVENT, callback); },\n\temitChange: function(){ this.emit(CHANGE_EVENT); },\n\t\n\tbaseUrl:\tbaseUrl,\t\t\t\t\t\t\t\t\t\t\t//\"http://morpheus.local/\", \"http://localhost/morpheus/\", \"http://home.morpheusmobile.com/acme/\", etc.\n\tassetsUrl:\tbaseUrl + \"protected/modules/mobilesales/assets/\",\t//\"/protected/modules/mobilesales/assets/\"\n\tapiUrl:\t\tbaseUrl + \"api/\",\t\t\t\t\t\t\t\t\t//\"/api/\"\n\tcustomerLibraryCategoryID:\t1,\t\t//Customer top-level parent file library category ('Prep Info')\n\tglobalLibraryCategoryID:\t2,\t\t//Global top-level parent file library category ('Library')\n\t//lastPath: \"/\",\n\t//Save global/util app state data back to localStorage ready for a potential future restore\n\tsaveAppData: function(){\n\t\tvar appData = {\n\t\t\tlocation: appUtil.location\n\t\t\t//lastPath: appUtil.lastPath,\n\t\t\t//serverDomain: appUtil.serverDomain\n\t\t};\n\t\tlocalStorage.app = JSON.stringify(appData);\n\t},\t\n\t/*setLastPath: function(path){\n\t\tif(path == null || path.length == 0){\n\t\t\tpath = \"/\";\n\t\t}\n\t\tappUtil.lastPath = path;\n\t\tappUtil.saveAppData(); //save back to localStorage ready for a future restore\n\t},\n\t//(currently internal) helper function\n\tsetServerDetails: function(domain){\n\t\tappUtil.serverDomain = domain;\n\t\tappUtil.serverUrl = (domain == \"local\") ? \"http://10.0.2.2/morpheus/\" : \"https://\" + appUtil.serverDomain + \".morpheusmobile.com/\"; //[dev settings permissable for now]\n\t\tappUtil.apiUrl = appUtil.serverUrl + \"api/\";\n\t},\n\tsetServerDomain: function(domain){\n\t\tif(domain == null || domain.length == 0){\n\t\t\tdomain = \"\";\n\t\t}\n\t\tappUtil.setServerDetails(domain);\n\t\tappUtil.saveAppData(); //save back to localStorage ready for a future restore\n\t},*/\n\tgetUnixTime: function(date){\n\t\tif(!date){\n\t\t\tdate = new Date();\n\t\t}\n\t\treturn (Math.floor(date.getTime() / 1000)); //convert from ms to s\n\t},\n\tgetUnixTimeStartOfDay: function(date){\n\t\tif(!date){\n\t\t\tdate = new Date();\n\t\t}\t\n\t\t\n\t\t//Start of the day:\n\t\tdate.setHours(0);\n\t\tdate.setMinutes(0);\n\t\tdate.setSeconds(0);\n\t\tdate.setMilliseconds(0); //Math.floor below not necessary in this case\n\t\t\n\t\treturn this.getUnixTime(date); //convert from ms to s\n\t},\n\tgetUnixTimeInMs: function(date){\n\t\tif(!date){\n\t\t\tdate = new Date();\n\t\t}\n\t\treturn (date.getTime()); //keep in ms\n\t},\n\t//Determine whether a unix timestamp is yesterday or before (i.e. day granularity comparison)\n\t//If none is supplied, we return true (treating as equivalent to epoch)\n\tisBeforeToday: function(unixTime){\n\t\treturn (!unixTime || (unixTime < this.getUnixTimeStartOfDay()));\n\t},\n\t//Current call list/audit date (for which we are conducting audits, i.e. answering audit questions)\n\t//[Technically a unix timestamp as at start of day]\n\t//currentCallDate: null,\n\t//setCurrentCallDate: function(date){\n\t//\tappUtil.currentCallDate = this.getUnixTimeStartOfDay(date);\n\t//},\n\tbase64Encode: Base64.encode,\n\tgetHTTPAuthStringForCredentials: function(username, password){\n\t\treturn \"Basic \" + Base64.encode(username + \":\" + password); //or: btoa(USERNAME + \":\" + PASSWORD)\n\t},\n\tgetHTTPAuthString: function(){\n\t\treturn this.getHTTPAuthStringForCredentials(UserStore.getUsername(), UserStore.getPassword());\n\t},\n\t//Currently used for file downloads\n\tgetURLAuthString: function(){\n\t\treturn ('username=' + UserStore.getUsername() + '&password=' + UserStore.getPassword());\n\t},\n\t//Do any necessary initialisation on app start\n\t//[This is currently different to initialisationActions::initApp() (which dispatches the necessary signal to all stores),\n\t//because this util object isn't a store (at least for now)]\n\tinitApp: function(){\n\t\t//Setup any defaults we might need\n\t\ttoastr.options.timeOut = 2000;\n\t\ttoastr.options.extendedTimeOut = 1000;\n\t\t\n\t\t//Restore any utility state (only if available)\n\t\tif(localStorage.app){\n\t\t\tvar appData = JSON.parse(localStorage.app);\n\t\t\tappUtil.location = appData.location ? appData.location : appUtil.location;\n\t\t\t//appUtil.lastPath = appData.lastPath ? appData.lastPath : appUtil.lastPath;\n\t\t\t//if(appData.serverDomain) { appUtil.setServerDetails(appData.serverDomain); }\n\t\t}\n\t},\n\t//Convenience function to check current user login status\n\tisLoggedIn: function(){\n\t\t//We just need to know if we have a current user loaded\n\t\treturn UserStore.hasUser();\n\t},\n\t//Convenience function to obtain current user ID\n\tgetUserID: function(){\n\t\treturn UserStore.getID();\n\t},\n\t//Convenience function to obtain current currency info\n\tgetCompanyCurrency: function(){\n\t\treturn UserStore.getCompanyCurrency();\n\t},\n\t//Convenience function to determine whether price lists should be checked during our operations (based on currently available info)\n\tisPriceListsCheckNeeded: function(){\n\t\treturn UserStore.areCompanyPriceListsEnabled();\n\t},\n\t//Convenience function to determine whether product rules should be checked during our operations (based on currently available info)\n\tisProductRulesCheckNeeded: function(){\n\t\treturn UserStore.doCompanyProductRulesExist();\n\t},\n\t//Convenience function to obtain the customer ID associated with this (B2B) user\n\tgetB2BCustomerID: function(){\n\t\treturn UserStore.getB2BCustomerID();\n\t},\n\t//Central place for setting/updating (if necessary/available) the app background image\n\t//[Currently this is the company background image sent via API. Where none is available (not provided by server or user not logged in), we remove the explicit background styling to revert to default background.\n\t//Note that this is function could be used in conjunction with a UserStore change event subscription.] \n\trefreshBackgroundImage: function(){\n\t\tlet companyBackgroundBase64 = UserStore.getCompanyBackground();\n\t\tif(companyBackgroundBase64 != null && companyBackgroundBase64 != ''){\n\t\t\tdocument.getElementById('appbg').style.backgroundImage = \"url('data:image/png;base64,\" + companyBackgroundBase64 + \"')\";\n\t\t} else {\n\t\t\tdocument.getElementById('appbg').style.backgroundImage = null;\n\t\t}\n\t},\n\tscreenData: {\n\t\ttitle: DEFAULT_SCREEN_TITLE\n\t},\n\t//One of very few util setters, used for view controller components to update a central record of screen name \n\t//[Not an ideal architecture, but an alternative to creating a full util Flux 'store', avoiding extra 'internal' dispatches]\n\tsetScreenTitle: function(title){\n\t\tappUtil.screenData.title = (title != null) ? title : DEFAULT_SCREEN_TITLE;\n\t\tappUtil.emitChange();\n\t},\n\t//Our current (last known) location (if any)\n\tlocation: {\n\t\tlat: null,\n\t\tlng: null,\n\t\tstring: \"\"\n\t},\n\t//Asynchronously refresh our stored location\n\trefreshGeolocation: function(){\n\t\t//navigator.geolocation.getCurrentPosition(function (position) {\n\t\twatchID = navigator.geolocation.watchPosition(function(position){\n\t\t\tnavigator.geolocation.clearWatch(watchID);\n\t\t\tappUtil.location.lat = position.coords.latitude;\n\t\t\tappUtil.location.lng = position.coords.longitude;\n\t\t\tappUtil.location.string = position.coords.latitude + \",\" + position.coords.longitude;\n\t\t\t//console.log(appUtil.location);\n\t\t\t//appUtil.location.lat = 37.785799;\n\t\t\t//appUtil.location.lng = -122.406454;\n\t\t\t//appUtil.location.string = \"37.785799,-122.406454\";\n\t\t\tappUtil.saveAppData(); //save back to localStorage ready for a future restore\n\t\t\t\n\t\t\t//[Not an ideal architecture, but an alternative to creating a full util Flux 'store', avoiding extra 'internal' dispatches,\n\t\t\t//whilst allowing components to subscribe to this event]\n\t\t\tappUtil.emitChange();\n\t\t});\n\t\t//{ enableHighAccuracy: true, timeout: 15000 }\n\t},\n\t//Obtain fraction of localStorage space used \n\t//Estimate based on a 5MB localStorage limit (Android, most browsers), and given JS uses UTF-16, i.e. 2 bytes per stored character\n\tgetLocalStorageUsage: function(){\n\t\treturn ((JSON.stringify(localStorage).length * 2) / 5242880); //2097152 <-- 2MB\n\t},\n\t//Reference: http://stackoverflow.com/questions/27928/calculate-distance-between-two-latitude-longitude-points-haversine-formula\n\tgetDistanceBetweenLatLonPointsInKm: function(lat1,lon1,lat2,lon2) {\n\t\tvar R = 6371; // Radius of the earth in km\n\t\tvar dLat = this.deg2rad(lat2-lat1);\n\t\tvar dLon = this.deg2rad(lon2-lon1); \n\t\tvar a = \n\t\t\tMath.sin(dLat/2) * Math.sin(dLat/2) +\n\t\t\tMath.cos(this.deg2rad(lat1)) * Math.cos(this.deg2rad(lat2)) * \n\t\t\tMath.sin(dLon/2) * Math.sin(dLon/2)\n\t\t\t; \n\t\tvar c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); \n\t\tvar d = R * c; // Distance in km (Use * 0.621371 for distance in miles)\n\t\treturn Math.round(d); //d; [May as well round for display here for now] \n\t},\n\tdeg2rad: function(deg) {\n\t\treturn deg * (Math.PI/180)\n\t},\n\t//Reference: https://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript\n\tuuidv4: function() {\n\t\treturn 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n\t\t\tvar r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\n\t\t\treturn v.toString(16);\n\t\t});\n\t},\n\t\n\t//[Note: for formatInteger(), formatDecimal() and formatCurrency() below, we can consider adding a parameter (or default behaviour) for \n\t//setting displayValue to something on 'blur' (when NO LONGER editing), in the case when it will otherwise be an empty string.]\n\t\n\t//Parse and format a (form) value for storage and display\n\t//[blnEditing: whether we're still editing the (form) value\n\t//blnDefaultEmpty: whether the parsed answer should default to an empty string or numeric 0] \n\tformatInteger: function(rawValue, blnEditing, blnDefaultEmpty) {\n\t\tblnEditing = (blnEditing != null && blnEditing); //defaults to false\n\t\tblnDefaultEmpty = (blnDefaultEmpty != null && blnDefaultEmpty); //defaults to false\n\t\t\n\t\tlet value = blnDefaultEmpty ? '' : 0;\n\t\t//Remove (disallow) anything that's not an integer [string]\n\t\tlet displayValue = rawValue.replace(/[^\\d]/g, '');\n\t\t\n\t\t//If we have something at this point, we can move ahead (we have an integer value of some kind)\n\t\tif(displayValue !== ''){\n\t\t\t//Parse value [number]\n\t\t\tlet parsedValue = parseInt(displayValue);\n\t\t\t\n\t\t\t//[Note: Doesn't make too much difference in the way it's used, but at this point we could \n\t\t\t//parsedValue.toString() on the next line, for consistent string return display value]\n\t\t\t\n\t\t\t//Upon leaving this input (no longer editing), we set the display value to the parsed (actual) value [number]\n\t\t\t//[We can't do this on the regular change event (while typing), or the user would never be able to edit properly!]\n\t\t\tdisplayValue = blnEditing ? displayValue : parsedValue;\n\t\t\t//We need a numeric value for storage (the actual saved value)\n\t\t\tvalue = parsedValue;\n\t\t}\n\t\t\n\t\treturn {\n\t\t\t'value': value,\n\t\t\t'displayValue': displayValue\n\t\t};\n\t},\n\t//Parse and format a (form) value for storage and display\n\t//[blnEditing: whether we're still editing the (form) value\n\t//blnDefaultEmpty: whether the parsed answer should default to an empty string or numeric 0] \n\tformatDecimal: function(rawValue, blnEditing, blnDefaultEmpty) {\n\t\tblnEditing = (blnEditing != null && blnEditing); //defaults to false\n\t\tblnDefaultEmpty = (blnDefaultEmpty != null && blnDefaultEmpty); //defaults to false\n\t\t\n\t\tlet value = blnDefaultEmpty ? '' : 0;\n\t\t//Remove (disallow) anything that's not a digit, or decimal separator [string]\n\t\tlet displayValue = rawValue.replace(/[^\\d.,]/g, '');\n\t\t\n\t\t//If we have something at this point, we can move ahead (we have a decimal value of some kind)\n\t\tif(displayValue !== ''){\n\t\t\t//Convert any , to . and process for decimal parsed value [number]\n\t\t\tlet parsedValue = parseFloat(displayValue.replace(',', '.'));\n\n\t\t\t//[Note: Doesn't make too much difference in the way it's used, but at this point we could \n\t\t\t//parsedValue.toString() on the next line, for consistent string return display value]\n\n\t\t\t//Upon leaving this input (no longer editing), we set the display value to the parsed (actual) value [number]\n\t\t\t//[We can't do this on the regular change event (while typing), or the user would never be able to edit properly!]\n\t\t\tdisplayValue = blnEditing ? displayValue : parsedValue;\n\t\t\t//We need a numeric value for storage (the actual saved value)\n\t\t\tvalue = parsedValue;\n\t\t}\n\t\t\n\t\treturn {\n\t\t\t'value': value,\n\t\t\t'displayValue': displayValue\n\t\t};\n\t},\n\t//Parse and format a (form) value for storage and display\n\t//[blnEditing: whether we're still editing the (form) value\n\t//blnDefaultEmpty: whether the parsed answer should default to an empty string or numeric 0] \n\tformatCurrency: function(rawValue, blnEditing, blnDefaultEmpty) {\n\t\tblnEditing = (blnEditing != null && blnEditing); //defaults to false\n\t\tblnDefaultEmpty = (blnDefaultEmpty != null && blnDefaultEmpty); //defaults to false\n\t\t\n\t\tlet value = blnDefaultEmpty ? '' : 0;\n\t\t//Remove (disallow) anything that's not a digit, or decimal separator [string]\n\t\tlet displayValue = rawValue.replace(/[^\\d.,]/g, '');\n\t\t\n\t\t//If we have something at this point, we can move ahead (we have a currency value of some kind)\n\t\tif(displayValue !== ''){\n\t\t\t//Convert any , to . and process for currency parsed value [string]\n\t\t\t//[Note: toFixed() returns a string]\n\t\t\tlet currencyFormattedValue = parseFloat(displayValue.replace(',', '.')).toFixed(2);\n\t\t\t//Upon leaving this input (no longer editing), we set the display value to the formatted value [string]\n\t\t\t//[We can't do this on the regular change event (while typing), or the user would never be able to edit properly!]\n\t\t\tdisplayValue = blnEditing ? displayValue : currencyFormattedValue;\n\t\t\t//We need to convert to a numeric value for currency value storage (the actual saved value)\n\t\t\tvalue = parseFloat(currencyFormattedValue);\n\t\t}\n\t\t\n\t\treturn {\n\t\t\t'value': value,\n\t\t\t'displayValue': displayValue\n\t\t};\n\t},\n\t//Parse and format a numeric value for storage and display\n\t//[Used for processing numeric (usually calculated) values, rather than form field (string) values]\n\tformatCurrencyNumber: function(rawValue) {\n\t\t//Process for currency parsed value [string]\n\t\t//[Note: toFixed() returns a string]\n\t\tlet displayValue = parseFloat(rawValue).toFixed(2);\n\t\t//We need to convert to a numeric value for currency value storage (the actual saved value)\n\t\tlet value = parseFloat(displayValue);\n\t\t\n\t\treturn {\n\t\t\t'value': value,\n\t\t\t'displayValue': displayValue\n\t\t};\n\t},\n\t\n\t//Ensure a number (integer or float > 0) conforms to the specified parameters\n\t//min: if supplied, number should be >= min\n\t//max: if supplid, number should be <= max\n\t//blnMultipleOfMin: if supplied, number should be a multiple of the min value\n\t//[Note: we only alter the displayNumber string if we were required to alter the number,\n\t//i.e. this utility should be used after any primary number parsing/formatting]\n\trestrictNumber: function(number, displayNumber, min, max, blnMultipleOfMin){\n\t\t//We allow 0 to pass through unchanged\n\t\tif(number > 0){\n\t\t\tif(min != null && min > 0 && number < min){\n\t\t\t\tnumber = min;\n\t\t\t\tdisplayNumber = number.toString();\n\t\t\t}else if(max != null && max > 0 && number > max){\n\t\t\t\tnumber = max;\n\t\t\t\tdisplayNumber = number.toString();\n\t\t\t}else if(blnMultipleOfMin != null && blnMultipleOfMin){\n\t\t\t\tlet remainder = this.fixNumber(number % min);\n\t\t\t\t//We have a remainder to shave off to restrict to multiple\n\t\t\t\tif(remainder > 0){\n\t\t\t\t\t//Due to JS number precision arithmetic problems, we often erroneously have a remainder after modulo operation above, \n\t\t\t\t\t//so we do a check for this error before moving ahead.\n\t\t\t\t\t//[Is it worth also double-checking whether this.fixNumber(number / min) is a whole number,\n\t\t\t\t\t//as an alternative way to identify a precision arithmetic issue and also skip? Assuming the below is enough for now, and we can revisit if not.]\t\t\t\n\t\t\t\t\tif(remainder != min){\n\t\t\t\t\t\tnumber = this.fixNumber(number - remainder);\n\t\t\t\t\t\tdisplayNumber = number.toString();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\t'value': number,\n\t\t\t'displayValue': displayNumber\n\t\t};\n\t},\n\t\n\t//Attempt to avoid JS number precision arithmetic problems (use this to clean up after arithmetic)\n\tfixNumber: function(number){\n\t\treturn parseFloat(number.toFixed(4)); //Let's max at 4 decimal places for now and increase this if needs be\n\t},\n\t\n\t//Determine whether the input value has a particular prefix\n\thasPrefix(value, prefix){\n\t\treturn (value.toString().substr(0, prefix.length) == prefix);\n\t},\n\t//Determine whether the input value is a local ID ('l-' prefix)\n\tisLocalID(id){\n\t\treturn this.hasPrefix(id, 'l-');\n\t},\n\t\n\tsanitiseForSecureURL: function(url){\n\t\treturn url.replace('http://', 'https://');\n\t},\n\t\n\tpostCompletedActionDispatchCallbacks: {},\n\t\n\tsetPostCompletedActionDispatchCallback: function(action, context, callback, args){\n\t\tappUtil.postCompletedActionDispatchCallbacks[action] = {\n\t\t\tcontext: context, \n\t\t\tcallback: callback, \n\t\t\targs: args\n\t\t};\n\t},\n\tclearPostCompletedActionDispatchCallback: function(action){\n\t\tappUtil.postCompletedActionDispatchCallbacks[action] = null;\n\t},\n\t\n\texecutePostCompletedActionDispatchCallback: function(action){\n\t\tif(appUtil.postCompletedActionDispatchCallbacks[action] != null){\n\t\t\tappUtil.postCompletedActionDispatchCallbacks[action].context[appUtil.postCompletedActionDispatchCallbacks[action].callback]\n\t\t\t\t.apply(appUtil.postCompletedActionDispatchCallbacks[action].context, appUtil.postCompletedActionDispatchCallbacks[action].args);\n\t\t\tappUtil.clearPostCompletedActionDispatchCallback(action);\n\t\t}\n\t},\n\t\n\t//Current composite (queue) action type, if any\n\tcurrentQueueAction: null,\n\tsetCurrentQueueAction: function(queueActionType){\n\t\tthis.currentQueueAction = queueActionType;\n\t},\n\tclearCurrentQueueAction: function(){\n\t\tthis.currentQueueAction = null;\n\t},\n\t//Current composite (queue) action percentage complete, if any\n\tcurrentQueuePercentageComplete: null,\n\tsetCurrentPercentageComplete: function(queuePercentageComplete){\n\t\tthis.currentQueuePercentageComplete = queuePercentageComplete;\n\t},\n\tclearCurrentPercentageComplete: function(){\n\t\tthis.currentQueuePercentageComplete = null;\n\t},\n\t\n\t//Helper function that wraps our dispatch function, AND also injects any current encompassing queue action type (group) data, if applicable\n\tdispatch: function(actionPayload){\n\t\t//If the queue action, queue status or queue percentage complete are not explicitly provided, we default them (if we have a current queue action active) \n\t\tif(actionPayload.queueActionType == null && this.currentQueueAction != null){\n\t\t\tactionPayload.queueActionType = this.currentQueueAction;\n\t\t}\n\t\tif(actionPayload.queueActionStatus == null && this.currentQueueAction != null){\n\t\t\tactionPayload.queueActionStatus = Status.PENDING;\n\t\t}\n\t\tif(actionPayload.queuePercentageComplete == null && this.currentQueueAction != null && this.currentQueuePercentageComplete != null){\n\t\t\tactionPayload.queuePercentageComplete = this.currentQueuePercentageComplete;\n\t\t}\n//console.log('DISPATCH:', actionPayload);\t\t\n\t\t//Dispatch the action\n\t\tDispatcher.dispatch(actionPayload);\n\t\t\n\t\t//If the action has completed in some way, perform any specified post-dispatch callback\n\t\t//(Allows chaining functionality that can't run while a dispatch is running, e.g. another dispatch when unachievable through other mechanisms like an action queue)\n\t\t//(Note that this could possibly be expanded in future to make use of a callback queue, instead of a single callback)\n\t\tif(actionPayload.actionStatus != Status.PENDING){\n\t\t\tthis.executePostCompletedActionDispatchCallback(actionPayload.actionType);\n\t\t}\n\t},\n\t\n\t//Execute a queue of asynchronous actions (also providing an encompassing queue action type (group) name \n\t//by which to track this particular queue's status) \n\texecuteActionQueue: function(queue, queueAction){\n\t\tlet returnDeferred = $.Deferred();\n\t\t\n\t\tif(!queue.length){\n\t\t\treturnDeferred.resolve();//reject()?\n\t\t}else{\n\t\t\tlet sumCompletionWeighting = 0;\n\t\t\tappUtil.setCurrentQueueAction(queueAction);\n\t\t\tappUtil.setCurrentPercentageComplete(0);\n\t\t\t\n\t\t\t//Instruct dispatcher to tell all stores that this queue is pending (has begun)\n\t\t\tappUtil.dispatch({\n\t\t\t\tqueueActionType: queueAction,\t\t//not strictly necessary, as current queue action set\n\t\t\t\tqueueActionStatus: Status.PENDING,\t//not strictly necessary, as current queue action set\n\t\t\t\tqueuePercentageComplete: 0,\t\t\t//not strictly necessary, as current queue action and percentage set\n\t\t\t\tresetTracking: true\n\t\t\t});\n\t\t\t\n\t\t\tlet addArgs = {}; //Additional arguments collected during queue execution, and keyed on particular names\n\t\t\t\n\t\t\tlet blnAllSuccessful = true;\n\t\t\tlet blnAllUnsuccessful = true;\n\t\t\t\n\t\t\tlet executeQueueItem = function(queueItem){\n\t\t\t\tqueueItem.args = queueItem.args != null ? queueItem.args.map((arg) => (\n\t\t\t\t\t(typeof arg == 'string' && arg.substr(0,4) == 'add:') ? addArgs[arg.substr(4)] : arg\n\t\t\t\t)) : [];\n\n\t\t\t\t//queueItem.context.setCurrentQueueActionType(queueAction);\n\t\t\t\tqueueItem.context[queueItem.action].apply(queueItem.context, queueItem.args).fail(function(data){\n\t\t\t\t\tblnAllSuccessful = false;\n\t\t\t\t\tif(data != null && data.partial){ //if partial qualifier, also ensure total failure not recorded\n\t\t\t\t\t\tblnAllUnsuccessful = false;\n\t\t\t\t\t}\n\t\t\t\t\tif(queueItem.onFail != null){\n\t\t\t\t\t\tqueueItem.onFail(data);\n\t\t\t\t\t}\n\t\t\t\t\tif(queueItem.stopOnFail){\n\t\t\t\t\t\tqueue = [];\n\t\t\t\t\t}\n\t\t\t\t}).done(function(data){\n\t\t\t\t\tblnAllUnsuccessful = false;\n\t\t\t\t\tif(data != null && data.partial){ //if partial qualifier, also ensure total success not recorded\n\t\t\t\t\t\tblnAllSuccessful = false;\n\t\t\t\t\t}\n\t\t\t\t\tif(queueItem.onDone != null){\n\t\t\t\t\t\tqueueItem.onDone(data);\n\t\t\t\t\t}\n\t\t\t\t\tif(data != null && data.results != null){\n\t\t\t\t\t\t//Add any data passed back via data.results into addArgs, for potential use by subsequent queue items\n\t\t\t\t\t\tfor (var key in data.results){\n\t\t\t\t\t\t\taddArgs[key] = data.results[key];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}).always(function(data){\n\t\t\t\t\t//queueItem.context.clearCurrentQueueActionType();\n\t\t\t\t\tsumCompletionWeighting += queueItem.completionWeighting;\n\t\t\t\t\tappUtil.setCurrentPercentageComplete(parseFloat( sumCompletionWeighting * 100 ));\n\t\t\t\t\t\n\t\t\t\t\t//We still have items to execute\n\t\t\t\t\tif(queue.length > 0){\n\t\t\t\t\t\t//Force queue percentage update? Necessary, or can we wait until next item executed?\n\t\t\t\t\t\t//appUtil.dispatch({});\n\t\t\t\t\t\t\n\t\t\t\t\t\t//Execute the next item (action) in queue\n\t\t\t\t\t\texecuteQueueItem(queue.shift());\n\t\t\t\t\t\t\n\t\t\t\t\t//We've processed all items\n\t\t\t\t\t}else{\n\t\t\t\t\t\tlet queueStatus = (blnAllSuccessful ? Status.OK : (blnAllUnsuccessful ? Status.ERROR : Status.PARTIAL));\n\t\t\t\t\t\t\n\t\t\t\t\t\t//Instruct dispatcher to tell all stores that this queue has completed\n\t\t\t\t\t\tappUtil.dispatch({\n\t\t\t\t\t\t\t//not strictly necessary, as current queue action set\n\t\t\t\t\t\t\tqueueActionType: queueAction,\n\t\t\t\t\t\t\t//We return the aggregated status of the whole operation\n\t\t\t\t\t\t\tqueueActionStatus: queueStatus,\n\t\t\t\t\t\t\t//not strictly necessary, as current queue action and percentage set\n\t\t\t\t\t\t\tqueuePercentageComplete: 100\n\t\t\t\t\t\t});\n\t\t\t\t\t\t\n\t\t\t\t\t\tappUtil.clearCurrentQueueAction();\n\t\t\t\t\t\tappUtil.clearCurrentPercentageComplete();\n\t\t\t\t\t\t\n\t\t\t\t\t\treturnDeferred.resolve();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}; //.bind(this);\n\t\t\t\n\t\t\t//Execute the first queue item (action)\n\t\t\texecuteQueueItem(queue.shift());\n\t\t}\n\t\t\n\t\treturn returnDeferred;\n\t}\n});\n\n//appUtil.setServerDetails('');\n\nmodule.exports = appUtil;","\"use strict\";\n\n//Used for asynchronous requests (AJAX)\n//(Also currently used - whether strictly Flux pattern or not - in view controller components to facilitate\n//awareness of AJAX state for UI considerations)   \n\nvar keyMirror = require('fbjs/lib/keyMirror');\n\nmodule.exports = keyMirror({\n\tPENDING: null,\n\tERROR: null,\n\tPARTIAL: null, //partial success\n\tOK: null\n});","\"use strict\";\n\nimport React from 'react';\n\nconst Spinner = ({ isVisible, style }) => (\n\t<div className={isVisible ? 'cssload-container show' : 'hidden'} style={style}><div className={isVisible ? 'cssload-wheel' : ''}></div></div>\n);\n\nexport default Spinner;","\"use strict\";\n\nvar keyMirror = require('fbjs/lib/keyMirror');\n\nmodule.exports = keyMirror({\n\tINITIALISE: null,\n\tUSER_LOGIN: null,\n\tUSER_LOGOUT: null,\n\tUSER_DELETE_DATA: null,\t\t\t\t//(clear user data if different user logs in)\n\tUSER_PASSWORD_RESET_REQUEST: null,\n\tUSER_REFRESH: null,\n\tLIBRARY_REFRESH: null,\n\tCALLS_REFRESH: null,\n\t//CUSTOMERS_SEARCH: null,\n\tCUSTOMERS_SEARCH_LOCAL: null,\n\tCUSTOMERS_SEARCH_SERVER: null,\n\tCUSTOMER_REQUEST: null,\n\tCUSTOMER_REFRESH: null,\n\t//CUSTOMER_REFRESH_FIELDS: null,\n\tCUSTOMER_ENTER: null,\n\tCUSTOMER_EXIT: null,\n\tCUSTOMER_VISITS_SUBMIT: null,\n\tCUSTOMER_ADD_COMMENT: null,\n\tCUSTOMER_DETAILS_EDIT_SAVE: null,\n\tCUSTOMER_DETAILS_EDIT_COMPLETE: null,\n\tCUSTOMER_DETAILS_EDIT_CANCEL: null,\n\tCUSTOMER_LOCATIONS_EDIT_ADD: null,\n\tCUSTOMER_LOCATIONS_EDIT_SAVE: null,\n\tCUSTOMER_LOCATIONS_EDIT_COMPLETE: null,\n\tCUSTOMER_LOCATIONS_EDIT_CANCEL: null,\n\tCUSTOMER_CONTACTS_EDIT_ADD: null,\n\tCUSTOMER_CONTACTS_EDIT_SAVE: null,\n\tCUSTOMER_CONTACTS_EDIT_COMPLETE: null,\n\tCUSTOMER_CONTACTS_EDIT_CANCEL: null,\n\tCUSTOMER_EDIT_CANCEL: null,\n\tCUSTOMER_EDITS_SUBMIT: null,\n\tADMIN_AUDITS_REFRESH: null,\t\t//Refreshing of the list of admin audits (and customer restrictions)\n\tAUDITS_REFRESH: null,\t\t\t//Refreshing of the actual audits data (pertains to both call and admin audits)\n\tAUDIT_ANSWER_SAVE: null,\n\t//CALL_START: null,\t\t\t\t//see: CUSTOMER_ENTER //(entry) //CALL_AUDITS_START\n\t//CALL_AUDITS_COMPLETE: null,\t//see: CUSTOMER_EXIT //(exit)\n\tCALL_AUDITS_RUN_REPORT: null,\t//not currently used\n\tAUDITS_SUBMIT: null,\n\tSALES_REFRESH: null,\n\tORDER_SAVE: null,\n\tORDER_CANCEL: null,\n\tORDERS_SUBMIT: null,\n\t//PRODUCTS_SEARCH: null,\n\tPRODUCTS_SEARCH_LOCAL: null,\n\tPRODUCTS_SEARCH_SERVER: null,\n\tAPP_DATA_SUBMIT: null,\n\t\n\t//Composite/queue actions:\n\t//SALES_REFRESH: null, \t\t\t//(we're using the same action type as the 'individual' action here: i.e. queueActionType = actionType = SALES_REFRESH)\n\tONLINE_SALES_REFRESH: null,\n\tCUSTOMERS_SALES_REFRESH: null,\n\tCALLS_RELATED_REFRESH: null,\n\tPAST_ORDERS_CUSTOMERS_REFRESH: null,\n\tALL_REFRESH: null,\n\tAUDITS_RELATED_SUBMIT: null,\n\tORDERS_RELATED_SUBMIT: null\n});","import localforage from 'localforage';\n/*import localForageCordovaSQLiteDriver from 'localforage-cordovasqlitedriver';*/\n\n/*export function init(){\n\tlocalforage.config({\n\t\tname: 'Retailer Lite',\n\t\tsize: 52428800, //(applies to WebSQL only)\n\t\tstoreName: 'retailerlitesalesstorage',\n\t\tversion: 1.0 //(currently unused) \n\t});\n}\n\nexport default localforage;*/\n\nconst persistentStorage = {\n\tinit: () => {\n\t\t//[This should be called before any other calls to localForage are made,\n\t\t//so presumably before defineDriver() below] \n\t\tlocalforage.config({\n\t\t\tname: 'Retailer Lite',\n\t\t\tsize: 52428800, //(applies to WebSQL only)\n\t\t\tstoreName: 'retailerlitesalesstorage',\n\t\t\tversion: 1.0 //(currently unused) \n\t\t});\n\t\t\n\t\t/*return localforage.defineDriver(localForageCordovaSQLiteDriver).then(function() {\n\t\t\treturn localforage.setDriver([\n\t\t\t\t//Attempt to set cordovaSQLiteDriver if available\n\t\t\t\tlocalForageCordovaSQLiteDriver._driver,\n\t\t\t\t//Otherwise, use one of the default localforage drivers as fallback\n\t\t\t\t//(This would be the case in a browser context)\n\t\t\t\tlocalforage.INDEXEDDB,\n\t\t\t\tlocalforage.WEBSQL,\n\t\t\t\tlocalforage.LOCALSTORAGE\n\t\t\t]);\n\t\t//}).then(function() {\n\t\t\t//this should display \"cordovaSQLiteDriver\" when in an emulator or a device\n\t\t\t//console.log(localforage.driver());\n\t\t\t//set a value\n\t\t\t//return localforage.setItem('testPromiseKey', 'testPromiseValue');\n\t\t//}).then(function() {\n\t\t\t//return localforage.getItem('testPromiseKey');\n\t\t//}).then(function(value) {\n\t\t\t//alert(value);\n\t\t}).catch(function(err) {\n\t\t\t//console.log(err);\n\t\t});*/\n\t},\n\t\n\tget: (key) => {\n\t\tif(Array.isArray(key)){\n\t\t\t\n\t\t\t//Return a promise that waits on all item's promises,\n\t\t\t//fulfilling when all have fulfilled, and rejecting the batch as a whole if any item rejects\n\t\t\t//[Note that this means all items can be loaded asynchronously in parallel \n\t\t\t//(all at same time), but we only fulfill when all done (or reject on first error)]\n\t\t\t//[Note: We postprocess (when all fulfilled) by returning as multi-dim array paired with the item keys.\n\t\t\t//This is to match the RN AsyncStorage API (better code migration), and the multi form of set() below.\n\t\t\t//The fulfillment value for Promise.all() is an array IN ORDER of individual fulfillment values.\n\t\t\t//We still let any rejection pass through to be handled by a catch (if desired) in calling code]\n\t\t\treturn Promise.all(\n\t\t\t\tkey.map((itemKey) => localforage.getItem(itemKey))\n\t\t\t).then((values) => values.map( (itemValue, i) => [key[i], itemValue] ));\n\t\t\t\n\t\t} else {\n\t\t\treturn localforage.getItem(key);\n\t\t}\n\t},\n\t\n\tset: (key, value) => {\n\t\tif(Array.isArray(key)){\n\t\t\t\n\t\t\t//Items are saved asynchronously in parallel and all comments relating to multi form of get() above apply here too\n\t\t\t//[Note: For now, we pass the same multi-dim parameter back ('key'), since localForage normally passes the stored value back for each item.\n\t\t\t//We could also pass back a fresh array (commented out), but prob not necessary?\n\t\t\t//We could pass back something else entirely in future if needs be]\n\t\t\treturn Promise.all(\n\t\t\t\tkey.map((pair) => localforage.setItem(pair[0], pair[1]))\n\t\t\t).then((values) => key); //.then((values) => values.map( (itemValue, i) => [key[i][0], itemValue] ));\n\t\t\t\n\t\t} else {\n\t\t\treturn localforage.setItem(key, value);\n\t\t}\n\t},\n\t\n\tINDEXEDDB:\t\tlocalforage.INDEXEDDB,\n\tWEBSQL:\t\t\tlocalforage.WEBSQL,\n\tLOCALSTORAGE:\tlocalforage.LOCALSTORAGE,\n\tready: () => localforage.ready(),\n\tdriver: () => localforage.driver(),\n\tdefineDriver: (driver) => localforage.defineDriver(driver),\n\tsetDriver: (driver) => localforage.setDriver(driver)\n\t\n};\n\nexport default persistentStorage;","\"use strict\";\n\nvar Dispatcher = require('../dispatcher/appDispatcher');\nvar Actions = require('../constants/actionTypes');\nvar Status = require('../constants/actionStatuses');\nvar SalesEntities = require('../constants/salesEntities');\nvar SubmissionEntities = require('../constants/submissionEntities');\nvar SearchTypes = require('../constants/searchTypes');\nvar EventEmitter = require('events').EventEmitter;\nvar assign = require('object-assign');\nvar _ = require('lodash');\nvar CHANGE_EVENT = 'change';\nvar util = require('../util.js');\n\n//Customer objects keyed on (customer) ID for fast retrieval\nvar _customers = {};\n\n//Customer meta data objects keyed on customer ID (currently this is used for tracking last refresh timestamp per customer),\n//customer detail field info (including custom), and associated last refresh timestamp,\n//customer location field info (including custom), and associated last refresh timestamp\nvar _customersMeta = {\n\tcustomers: {},\n\t\n\tfields: [\n\t\t//Current non-custom display fields (custom fields will be merged in)\n\t\t{'name':'name', 'label':'Company Name', 'order':-10 },\n\t\t{'name':'unique_code', 'label':'Unique Code', 'order':-9 },\n\t\t{'name':'account_number', 'label':'Account Number', 'order':-8 },\n\t\t{'name':'phone', 'label':'Phone', 'order':-7 }\n\t],\n\tfieldsRefreshed: null,\n\t\n\tlocationFields: [\n\t\t//Current non-custom display fields (custom fields will be merged in)\n\t\t{'name':'description', 'label':'Description', 'order':-10 },\n\t\t{'name':'address_1', 'label':'Address 1', 'order':-9 },\n\t\t{'name':'address_2', 'label':'Address 2', 'order':-8 },\n\t\t{'name':'city', 'label':'City', 'order':-7 },\n\t\t//{'name':'country_id', 'label':'Country', 'order':-6 },\n\t\t{'name':'zip', 'label':'Zip', 'order':-5 },\n\t\t//{'name':'state_id', 'label':'State', 'order':-4 },\n\t\t{'name':'latitude', 'label':'Latitude', 'order':-3 },\n\t\t{'name':'longitude', 'label':'Longitude', 'order':-2 }\n\t],\n\tlocationFieldsRefreshed: null,\n\t\n\tcontactFields: [\n\t\t//Current non-custom display fields (custom fields will be merged in)\n\t\t{'name':'first_name', 'label':'First Name', 'order':-10 },\n\t\t{'name':'last_name', 'label':'Last Name', 'order':-9 },\n\t\t{'name':'email', 'label':'Email', 'order':-8 },\n\t\t{'name':'office_phone', 'label':'Office Phone', 'order':-7 },\n\t\t{'name':'cell_phone', 'label':'Cell Phone', 'order':-6 },\n\t\t{'name':'fax', 'label':'Fax', 'order':-5 },\n\t\t//{'name':'location_id', 'label':'Location', 'order':-4 },\n\t],\n\tcontactFieldsRefreshed: null\n};\n\n//Customer objects representing any unsynced edits, keyed on (customer) ID for fast retrieval\nvar _customerEdits = {};\n//Tracking for last edited location/contact per customer ID [transitory - not stored in localStorage]\nvar _customerLastEdit = {};\n\n//Tracking for the most recently created customer on server (used in view to switch display) [transitory - not stored in localStorage]\nvar _customerLastCreated = null;\n\n//Customer visit objects keyed on visit date and (customer) ID for fast retrieval\nvar _customerVisits = {};\n\n//Track data state\nvar _status = {};\n\n//Customer search results (customer objects)\nvar _localSearchResults = [];\n//Current search term\nvar _localSearchTerm = '';\n//Current search page\nvar _localSearchPage = 1;\n//Current search page size\nvar _localSearchPageSize = 10;\n//Total current search results\nvar _localSearchTotal = null;\n//Total current search pages\nvar _localSearchTotalPages = null;\n\n//Customer search results (customer objects) \nvar _serverSearchResults = [];\n//Current search term\nvar _serverSearchTerm = '';\n//Current search page\nvar _serverSearchPage = 1;\n//Current search page size\nvar _serverSearchPageSize = 10;\n//Total current search results\nvar _serverSearchTotal = null;\n//Total current search pages\nvar _serverSearchTotalPages = null;\n\n//Track current customer request state\nvar _requestMade = false;\n\nvar CustomerStore = assign({}, EventEmitter.prototype, {\n\taddChangeListener: function(callback){ this.on(CHANGE_EVENT, callback); },\n\tremoveChangeListener: function(callback){ this.removeListener(CHANGE_EVENT, callback); },\n\temitChange: function(){ this.emit(CHANGE_EVENT); },\n\t\n\tgetStatus: function(actionType){\n\t\t//This generalised solution needs reworking, as it allows a specific action type's status to \n\t\t//be mis-represented by the default status\n\t\t//return (\n\t\t//\t(actionType != null && _status[actionType] != null) ? _status[actionType] :\n\t\t//\t(_status.default != null ? _status.default : Status.OK) \n\t\t//);\n\t\t//For now, let's be specific:\n\t\t\n\t\tlet returnStatus = Status.OK;\n\t\t\n\t\tswitch(actionType){\n\t\t\tcase Actions.CUSTOMER_REQUEST:\n\t\t\tcase Actions.CUSTOMER_EDITS_SUBMIT:\n\t\t\tcase Actions.CUSTOMERS_SEARCH_LOCAL:\n\t\t\tcase Actions.CUSTOMERS_SEARCH_SERVER:\n\t\t\t\treturnStatus = (_status[actionType] != null ? _status[actionType] : Status.OK);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\treturnStatus = (_status.default != null ? _status.default : Status.OK);\n\t\t}\n\t\t\n\t\treturn returnStatus;\n\t\t/*return (\n\t\t\tactionType == Actions.CUSTOMER_EDITS_SUBMIT ?\n\t\t\t(_status[actionType] != null ? _status[actionType] : Status.OK) :\n\t\t\t(_status.default != null ? _status.default : Status.OK)\n\t\t);*/\n\t},\n\tgetCustomers: function(){\n\t\tvar arrCustomers = [];\n\t\t\n\t\tfor (var customerID in _customers){\n\t\t\tif(_customers[customerID] != null){\n\t\t\t\tarrCustomers.push(_customers[customerID]);\n\t\t\t}\n\t\t}\n\t\t\n\t\t//Do any necessary sorting here\n\t\t\n\t\treturn arrCustomers; \n\t},\n\t//Obtain a stored customer\n\tgetCustomer: function(id){\n\t\treturn _customers[id];\n\t},\n\t//Obtain a locally edited (un-server-synced) customer - a synthetically created representation of: \n\t//- an existing stored customer with local edits merged in, or\n\t//- a new customer from local edits (when a local temp ID is provided)\n\tgetEditedCustomer: function(id){\n\t\tlet returnCustomer = null;\n\t\t\n\t\t//if(id == 'new' || util.isLocalID(id)){ //New\n\t\t//}else{} //Existing\t\n\t\t\t\n\t\tif(id == 'new'){\n\t\t\tid = this.getNewID();\n\t\t}\n\t\t\n\t\t//Existing edit case: first check _customers[id] != null or always return the representation regardless?\n\t\t\t\n\t\treturnCustomer = this.getCustomerDetailsEdits(id); \n\t\treturnCustomer.id = id;\n\t\t\n\t\treturnCustomer.locations = [];\n\t\tlet locations = this.getCustomerLocationsEdits(id);\n\t\tfor (var locID in locations){\n\t\t\tif(locations[locID] != null){\n\t\t\t\treturnCustomer.locations.push(locations[locID]);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturnCustomer.contacts = [];\n\t\tlet contacts = this.getCustomerContactsEdits(id);\n\t\tfor (var conID in contacts){\n\t\t\tif(contacts[conID] != null){\n\t\t\t\treturnCustomer.contacts.push(contacts[conID]);\n\t\t\t}\n\t\t}\n\t\n\t\treturn returnCustomer;\n\t},\n\tgetActiveCustomersCount: function(){\n\t\treturn _.filter(_customers, (customer) => (\n\t\t\t(customer != null && customer.is_active == 1)\n\t\t)).length;\n\t},\n\t//Obtain the currently stored customer IDs (active and inactive, but not deleted)\n\tgetCustomerIDs: function(){\n\t\tvar arrCustomerIDs = [];\n\t\t\n\t\tfor (var customerID in _customers){\n\t\t\tif(_customers[customerID] != null){\n\t\t\t\tarrCustomerIDs.push(parseInt(customerID));\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn arrCustomerIDs; \n\t},\n\t/*getDetailsMetaById: function(id){\n\t\treturn _customersMeta.customers[id];\n\t},*/\n\t//Get the unix timestamp of the last refresh (if any) for a customer ID\n\tgetLastRefreshForCustomer: function(customerID){\n\t\treturn (_customersMeta.customers[customerID] ? _customersMeta.customers[customerID].refreshed : null);\n\t},\n\tgetFields: function(){\n\t\treturn _customersMeta.fields;\n\t},\n\t//Get the unix timestamp of the last refresh (if any) of the customer (custom) fields data\n\tgetLastRefreshForFields: function(){\n\t\treturn _customersMeta.fieldsRefreshed;\n\t},\n\tgetLocationFields: function(){\n\t\treturn _customersMeta.locationFields;\n\t},\n\t//Get the unix timestamp of the last refresh (if any) of the customer location (custom) fields data\n\tgetLastRefreshForLocationFields: function(){\n\t\treturn _customersMeta.locationFieldsRefreshed;\n\t},\n\tgetContactFields: function(){\n\t\treturn _customersMeta.contactFields;\n\t},\n\t//Get the unix timestamp of the last refresh (if any) of the customer location (custom) fields data\n\tgetLastRefreshForContactFields: function(){\n\t\treturn _customersMeta.contactFieldsRefreshed;\n\t},\n\t//Obtain a new unique ID to be used locally\n\tgetNewID: function(){\n\t\treturn 'l-' + util.uuidv4();\n\t},\n\t//Utility function (for convenient use in components)\n\tgetCustomerLocation: function(customerID, locationID){\n\t\tvar returnLocation = null;\n\t\t\n\t\tif(_customers[customerID] != null){\n\t\t\tif(_customers[customerID].locations != null && _customers[customerID].locations.length){\n\t\t\t\treturnLocation = _.find(_customers[customerID].locations, {id: parseInt(locationID)})\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn returnLocation;\n\t},\n\t//Obtain all unsynced edits for a customer (if any), ready for submission\n\tgetCustomerEdits: function(id){\n\t\treturn (\n\t\t\t(_customerEdits[id] != null && (!_.isEmpty(_customerEdits[id].details) || !_.isEmpty(_customerEdits[id].locations) || !_.isEmpty(_customerEdits[id].contacts)) ) ? _customerEdits[id] : null\n\t\t);\n\t},\n\t//Obtain all unsynced details edits for a customer (if any)\n\tgetCustomerDetailsEdits: function(id){\n\t\t//Whether we have details edits of some kind for this customer\n\t\tvar blnHaveEditsForThisCustomer = (_customerEdits[id] != null && _customerEdits[id].details != null);\n\t\t//Regardless of whether we're returning a fresh/existing edits object, we create it anew from current fields data, so we always remain up to date with fields \n\t\tvar detailsEdits = {};\n\t\t\n\t\tfor (var i = 0; i < _customersMeta.fields.length; i++) {\n\t\t\tlet field = _customersMeta.fields[i]; \n\t\t\tdetailsEdits[field.name] = (\n\t\t\t\t//Use the edit value, if we have it, otherwise the current customer field value, if we have the customer (won't in the new customer case), else null (failsafe)\n\t\t\t\t(blnHaveEditsForThisCustomer && _customerEdits[id].details[field.name] != null) ?\n\t\t\t\t_customerEdits[id].details[field.name] :\n\t\t\t\t(_customers[id] != null ? _customers[id][field.name] : null) \n\t\t\t);\n\t\t}\n\t\t\n\t\treturn detailsEdits;\n\t},\n\t//Obtain all unsynced locations edits for a customer (if any)\n\tgetCustomerLocationsEdits: function(id){\n\t\t//Whether we're creating a new (or editing an existing) customer\n\t\tlet blnNewCustomer = util.isLocalID(id);\n\t\t//Whether we have locations edits of some kind for this customer\n\t\tvar blnHaveEditsForThisCustomer = (_customerEdits[id] != null && _customerEdits[id].locations != null);\n\t\t//Regardless of whether we're returning a fresh/existing edits object, we create it anew from current fields data, so we always remain up to date with fields \n\t\tvar locationsEdits = {};\n\t\t\n\t\t//In the existing edit case, check if this customer exists (failsafe)\n\t\tif(blnNewCustomer || _customers[id] != null){\n\t\t\tlet existingLocationIDs = []; //useful tracking\n\t\t\t\n\t\t\t//In the existing edit case only, assemble edits relating to existing locations (if any locations)\n\t\t\tif(!blnNewCustomer && _customers[id].locations != null){ //(failsafe)\n\t\t\t\tfor (var i = 0; i < _customers[id].locations.length; i++) {\n\t\t\t\t\tlet existingLocation = _customers[id].locations[i];\n\t\t\t\t\texistingLocationIDs.push(_customers[id].locations[i].id);\n\t\t\t\t\tlet blnHaveEditsForThisCustomerLocation = (blnHaveEditsForThisCustomer && _customerEdits[id].locations[existingLocation.id] != null);\n\t\t\t\t\tlocationsEdits[existingLocation.id] = {};\n\t\t\t\t\t\n\t\t\t\t\tfor (var j = 0; j < _customersMeta.locationFields.length; j++) {\n\t\t\t\t\t\tlet field = _customersMeta.locationFields[j]; \n\t\t\t\t\t\t\n\t\t\t\t\t\tlocationsEdits[existingLocation.id][field.name] = (\n\t\t\t\t\t\t\t//Use the edit value, if we have it, otherwise the current customer field value, if we have the customer, else null (failsafe)\n\t\t\t\t\t\t\t(blnHaveEditsForThisCustomerLocation && _customerEdits[id].locations[existingLocation.id][field.name] != null) ?\n\t\t\t\t\t\t\t_customerEdits[id].locations[existingLocation.id][field.name] :\n\t\t\t\t\t\t\texistingLocation[field.name] \n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t//In both edit cases, assemble edits relating to newly added locations (if any added locations)\n\t\t\tif(blnHaveEditsForThisCustomer){\n\t\t\t\tfor (var locationID in _customerEdits[id].locations) {\n\t\t\t\t\tif(!_.includes(existingLocationIDs, parseInt(locationID))){\n\t\t\t\t\t\tlocationsEdits[locationID] = _customerEdits[id].locations[locationID];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn locationsEdits;\n\t},\n\tgetCustomerLocationLastEdited: function(customerID){\n\t\treturn (\n\t\t\t(_customerLastEdit[customerID] != null && _customerLastEdit[customerID].location != null) ?\n\t\t\t_customerLastEdit[customerID].location : null\n\t\t);\n\t},\n\t//[Used internally currently]\n\tsetCustomerLocationLastEdited: function(customerID, locationID){\n\t\tif(_customerLastEdit[customerID] == null){\n\t\t\t_customerLastEdit[customerID] = {};\n\t\t}\n\n\t\t_customerLastEdit[customerID].location = locationID;\n\t},\n\t//Obtain a fresh customer location object, with appropriate defaults\n\t//(Intended to be saved at _customerEdits[customerID].locations[locationID])\n\t//[Note that we're currently not needing to store the location ID in the location object]\n\tgetFreshLocationObject: function(){ //providedLocationID){\n\t\treturn {\n\t\t\t//'id': (providedLocationID != null ? providedLocationID : this.getNewID()),\n\t\t\t'description': '',\n\t\t\t'address_1': '',\n\t\t\t'address_2': '',\n\t\t\t'city': '',\n\t\t\t'country_id': 47, //[Not displayed on form, currently defaulted to South Africa for new locations]\n\t\t\t'zip': '',\n\t\t\t//'state_id': null,\n\t\t\t'latitude': '',\n\t\t\t'longitude': ''\n\t\t};\n\t},\n\t//Obtain all unsynced contacts edits for a customer (if any)\n\tgetCustomerContactsEdits: function(id){\n\t\t//Whether we're creating a new (or editing an existing) customer\n\t\tlet blnNewCustomer = util.isLocalID(id);\n\t\t//Whether we have contacts edits of some kind for this customer\n\t\tvar blnHaveEditsForThisCustomer = (_customerEdits[id] != null && _customerEdits[id].contacts != null);\n\t\t//Regardless of whether we're returning a fresh/existing edits object, we create it anew from current fields data, so we always remain up to date with fields \n\t\tvar contactsEdits = {};\n\t\t\n\t\t//In the existing edit case, check if this customer exists (failsafe)\n\t\tif(blnNewCustomer || _customers[id] != null){\n\t\t\tlet existingContactIDs = []; //useful tracking\n\t\t\t\n\t\t\t//In the existing edit case only, assemble edits relating to existing contacts (if any contacts)\n\t\t\tif(!blnNewCustomer && _customers[id].contacts != null){ //(failsafe)\n\t\t\t\tfor (var i = 0; i < _customers[id].contacts.length; i++) {\n\t\t\t\t\tlet existingContact = _customers[id].contacts[i];\n\t\t\t\t\texistingContactIDs.push(_customers[id].contacts[i].id);\n\t\t\t\t\tlet blnHaveEditsForThisCustomerContact = (blnHaveEditsForThisCustomer && _customerEdits[id].contacts[existingContact.id] != null);\n\t\t\t\t\tcontactsEdits[existingContact.id] = {};\n\t\t\t\t\t\n\t\t\t\t\tfor (var j = 0; j < _customersMeta.contactFields.length; j++) {\n\t\t\t\t\t\tlet field = _customersMeta.contactFields[j]; \n\t\t\t\t\t\t\n\t\t\t\t\t\tcontactsEdits[existingContact.id][field.name] = (\n\t\t\t\t\t\t\t//Use the edit value, if we have it, otherwise the current customer field value, if we have the customer, else null (failsafe)\n\t\t\t\t\t\t\t(blnHaveEditsForThisCustomerContact && _customerEdits[id].contacts[existingContact.id][field.name] != null) ?\n\t\t\t\t\t\t\t_customerEdits[id].contacts[existingContact.id][field.name] :\n\t\t\t\t\t\t\texistingContact[field.name] \n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t//In both edit cases, assemble edits relating to newly added contacts (if any added contacts)\n\t\t\tif(blnHaveEditsForThisCustomer){\n\t\t\t\tfor (var contactID in _customerEdits[id].contacts) {\n\t\t\t\t\tif(!_.includes(existingContactIDs, parseInt(contactID))){\n\t\t\t\t\t\tcontactsEdits[contactID] = _customerEdits[id].contacts[contactID];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn contactsEdits;\n\t},\n\tgetCustomerContactLastEdited: function(customerID){\n\t\treturn (\n\t\t\t(_customerLastEdit[customerID] != null && _customerLastEdit[customerID].contact != null) ?\n\t\t\t_customerLastEdit[customerID].contact : null\n\t\t);\n\t},\n\t//[Used internally currently]\n\tsetCustomerContactLastEdited: function(customerID, contactID){\n\t\tif(_customerLastEdit[customerID] == null){\n\t\t\t_customerLastEdit[customerID] = {};\n\t\t}\n\n\t\t_customerLastEdit[customerID].contact = contactID;\n\t},\n\t//Obtain a fresh customer contact object, with appropriate defaults\n\t//(Intended to be saved at _customerEdits[customerID].contacts[contactID])\n\t//[Note that we're currently not needing to store the contact ID in the contact object]\n\tgetFreshContactObject: function(){ //providedContactID){\n\t\treturn {\n\t\t\t//'id': (providedContactID != null ? providedContactID : this.getNewID()),\n\t\t\t'first_name': '',\n\t\t\t'last_name': '',\n\t\t\t'email': '',\n\t\t\t'office_phone': '',\n\t\t\t'cell_phone': '',\n\t\t\t'fax': ''\n\t\t\t//'location_id': null\n\t\t};\n\t},\n\t//Obtain the most recently created customer on server (used in view to switch display from temp local edit record to new legitimate record)\n\tgetCustomerLastCreated: function(){\n\t\treturn _customerLastCreated;\n\t},\n\t//[Used internally currently]\n\tsetCustomerLastCreated: function(customerID){\n\t\t_customerLastCreated = customerID;\n\t},\n\t\n\t//Obtain all valid customer visit logs (ready for server submission)\n\tgetValidCustomerVisits: function(){\n\t\tvar arrVisits = [];\n\t\t\n\t\t//for each visit date\n\t\tfor (var visitDate in _customerVisits) {\n\t\t\tif(_customerVisits[visitDate] != null){\n\t\t\t\t//for each customer on this date\n\t\t\t\tfor (var customerID in _customerVisits[visitDate]) {\n\t\t\t\t\tif(_customerVisits[visitDate][customerID] != null){\n\t\t\t\t\t\tlet visit = _customerVisits[visitDate][customerID];\n\t\t\t\t\t\tif(visit.date != null && visit.end_time != null){ //&& visit.customer_id != null && visit.start_time != null //Minimum test needed for now\n\t\t\t\t\t\t\tarrVisits.push(visit);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\treturn arrVisits;\n\t},\n\t//Whether or not the customer has been visited/entered today (a visit log exists for today)\n\tisCustomerVisited: function(customerID){\n\t\t//Obtain timestamp as at start of today [string key used in storage]\n\t\tvar strEntryDate = util.getUnixTimeStartOfDay() + '';\n\t\treturn (_customerVisits[strEntryDate] != null && _customerVisits[strEntryDate][customerID] != null);\n\t},\n\t\n\tgetSearchResults: function(searchType){\n\t\treturn (searchType == SearchTypes.SERVER ? _serverSearchResults : _localSearchResults);\n\t},\n\tgetSearchTerm: function(searchType){\n\t\treturn (searchType == SearchTypes.SERVER ? _serverSearchTerm : _localSearchTerm);\n\t},\n\tgetSearchPage: function(searchType){\n\t\treturn (searchType == SearchTypes.SERVER ? _serverSearchPage : _localSearchPage);\n\t},\n\tgetSearchPageSize: function(searchType){\n\t\treturn (searchType == SearchTypes.SERVER ? _serverSearchPageSize : _localSearchPageSize);\n\t},\n\tgetSearchTotal: function(searchType){\n\t\treturn (searchType == SearchTypes.SERVER ? _serverSearchTotal : _localSearchTotal);\n\t},\n\tgetSearchTotalPages: function(searchType){\n\t\treturn (searchType == SearchTypes.SERVER ? _serverSearchTotalPages : _localSearchTotalPages);\n\t},\n\t\n\twasRequestSuccessful: function(){ //whether or not there was at least one successful customer request\n\t\treturn _requestMade;\n\t},\n\tresetRequestSuccessful: function(){\n\t\t_requestMade = false;\n\t},\n\t\n\t//Clear all cached data and meta data except for provided customers\n\tpurgeDataExceptForIds: function(arrIDs){\n\t\tfor (var customerID in _customers) {\n\t\t\tif(!_.includes(arrIDs, customerID)){\n\t\t\t\t_customers[customerID] = undefined; //performance boost over delete (and as it happens, node is completely removed by next localStorage save/reload anyway)\n\t\t\t}\n\t\t}\n\t\tfor (var customerID in _customersMeta.customers) {\n\t\t\tif(!_.includes(arrIDs, customerID)){\n\t\t\t\t_customersMeta.customers[customerID] = undefined; //performance boost over delete (and as it happens, node is completely removed by next localStorage save/reload anyway)\n\t\t\t}\n\t\t}\n\t\tfor (var customerID in _customerEdits) {\n\t\t\tif(!_.includes(arrIDs, customerID)){\n\t\t\t\t_customerEdits[customerID] = undefined; //performance boost over delete (and as it happens, node is completely removed by next localStorage save/reload anyway)\n\t\t\t}\n\t\t}\n\t},\n\t//Internal helper function to add/overwrite a customer's record\n\tsaveCustomer: function(customerID, customerData){\n\t\t//add/overwrite this customer's details in customer storage\n\t\tif(!_customers[customerID]){\n\t\t\t_customers[customerID] = {};\n\t\t}\n\t\t_customers[customerID] = customerData;\n\t\t\n\t\t//update meta data (currently just last refresh timestamp)\n\t\tif(!_customersMeta.customers[customerID]){\n\t\t\t_customersMeta.customers[customerID] = {};\n\t\t}\n\t\t_customersMeta.customers[customerID].refreshed = util.getUnixTime();\n\t},\t\n\t//Internal helper function to add/overwrite the customer fields data\n\tsaveCustomerFields: function(customerFieldData){\n\t\t//Add/overwrite the fields meta data\n\t\tfor(var name in customerFieldData){\n\t\t\t//We already have the 'name' field in this store as a 'non-custom' field, but we would like to update the label if necessary\n\t\t\tif(name == 'name'){\n\t\t\t\t_customersMeta.fields[_.findIndex(_customersMeta.fields, {name: 'name'})].label = customerFieldData[name].label;\n\t\t\t//For now, only deal with textual fields\t\n\t\t\t}else if(customerFieldData[name].type == 'varchar'){\n\t\t\t\tvar existingFieldIndex = _.findIndex(_customersMeta.fields, {name: name});\n\t\t\t\tvar updatedFieldData = {'name':name, 'label':customerFieldData[name].label, 'order':parseInt(customerFieldData[name].order) };\n\t\t\t\tif(existingFieldIndex != -1){\n\t\t\t\t\t_customersMeta.fields[existingFieldIndex] = updatedFieldData;\n\t\t\t\t}else{\n\t\t\t\t\t_customersMeta.fields.push(updatedFieldData);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t//Ensure fields are ordered correctly\n\t\t_customersMeta.fields = _.sortBy(_customersMeta.fields, 'order');\n\t\t\n\t\t//update last refresh timestamp\n\t\t_customersMeta.fieldsRefreshed = util.getUnixTime();\n\t},\n\t\n\t//Obtain (relevant) store data for server debug submission\n\texportData: function(){\n\t\t//Explicity set up the valid JSON return string (until this store is restructured to store all keys in an object rather than separate module-level variables)\n\t\treturn '{' + \n\t\t\t'\"customers\":' \t\t+ JSON.stringify(_customers) + \",\" +\n\t\t\t'\"customersMeta\":'\t+ JSON.stringify(_customersMeta) + \",\" +\n\t\t\t'\"customerEdits\":'\t+ JSON.stringify(_customerEdits) + \",\" +\n\t\t\t'\"customerVisits\":' + JSON.stringify(_customerVisits) +\n\t\t'}';\n\t}\n});\n\nDispatcher.register(function(action){\n\tswitch(action.actionType){\n\t\tcase Actions.INITIALISE:\n\t\t\t//Load any potentially previously cached customer or meta data\n\t\t\tif(localStorage.customers){\n\t\t\t\t_customers = JSON.parse(localStorage.customers);\n\t\t\t}\n\t\t\tif(localStorage.customersMeta){\n//--------\n//ORIGINAL CODE (RETAIN):\t\t\t\n//\t\t\t\t_customersMeta = JSON.parse(localStorage.customersMeta);\n//--------\n//TEMP TRANSITIONAL CODE (TO BE REMOVED):\nvar _customersMetaLS = JSON.parse(localStorage.customersMeta);\n//If an older version of the data structure is saved in localstorage\nif(_customersMetaLS['customers'] == null || _customersMetaLS['locationFields'] == null || _customersMetaLS['contactFields'] == null){\n\tlocalStorage.customersMeta = JSON.stringify(_customersMeta); //fresh 'blank' instance meta saved back to LS\n\tconsole.log('Updated legacy customer meta data');\n}else{\n\tconsole.log('Customer meta data up to date');\n\t_customersMeta = JSON.parse(localStorage.customersMeta); //original code\n}\n//--------\n\t\t\t}\n\t\t\tif(localStorage.customerEdits){\n\t\t\t\t_customerEdits = JSON.parse(localStorage.customerEdits);\n\t\t\t}\n\t\t\tif(localStorage.customerVisits){\n\t\t\t\t_customerVisits = JSON.parse(localStorage.customerVisits);\n\t\t\t}\n\t\t\t\n\t\t\tCustomerStore.emitChange();\n\t\t\tbreak;\n\t\t\t\n\t\tcase Actions.CALLS_REFRESH:\n\t\t\tif(action.actionStatus == Status.OK){\n\t\t\t\t//Obtain customer IDs for fresh calls\n\t\t\t\tvar retainCustomerIDs = _.keysIn(action.callsData);\n//***TODO: Add to retainCustomerIDs any customers for which this user has orders\n\t\t\t\t\n\t\t\t\t//Purge associated data and meta data for any old calls (those not in new list), if necessary\n\t\t\t\t//(In normal circumstances, this would be all old IDs (new day refresh) or no IDs (same day refresh))\n\t\t\t\tCustomerStore.purgeDataExceptForIds(retainCustomerIDs);\n\n\t\t\t\t//Additionally cache in localStorage for re-use across multiple sessions (until customers refreshed/updated again)\n\t\t\t\tlocalStorage.customers = JSON.stringify(_customers);\n\t\t\t\tlocalStorage.customersMeta = JSON.stringify(_customersMeta);\n\t\t\t\tlocalStorage.customerEdits = JSON.stringify(_customerEdits);\n\t\t\t}\n\t\t\t//Just housekeeping, so no real change to emit (and no relevant controller views even listening when calls refresh)\n\t\t\t//CustomerStore.emitChange();\n\t\t\tbreak;\n\t\t\t\n\t\t//Refresh a customer and/or the customer fields data\t\n\t\tcase Actions.CUSTOMER_REFRESH:\n\t\t\tif(action.actionStatus == Status.OK || action.actionStatus == Status.PARTIAL){\n\t\t\t\tif(action.customerData != null){\n\t\t\t\t\tCustomerStore.saveCustomer(action.customerID, action.customerData);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(action.customerFieldData != null){\n\t\t\t\t\tCustomerStore.saveCustomerFields(action.customerFieldData);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//Additionally cache in localStorage for re-use across multiple sessions (until customers/fields refreshed again)\n\t\t\t\tlocalStorage.customers = JSON.stringify(_customers);\n\t\t\t\tlocalStorage.customersMeta = JSON.stringify(_customersMeta);\n\t\t\t}\n\t\t\t_status.default = action.actionStatus;\n\t\t\tCustomerStore.emitChange();\n\t\t\tbreak;\n\t\t\n\t\tcase Actions.SALES_REFRESH:\n\t\t\tlet blnChangeToEmit = false;\n\t\t\t\n\t\t\tif(action.entity == SalesEntities.CUSTOMER){\n\t\t\t\t//We have customer(s) (or customer fields data) to save\n\t\t\t\tif(action.batchStatus == Status.OK){\n\t\t\t\t\tif(action.batchFieldData != null){\n\t\t\t\t\t\tCustomerStore.saveCustomerFields(action.batchFieldData);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif(action.batchCustomers != null){\n\t\t\t\t\t\tfor (var i = 0; i < action.batchCustomers.length; i++) {\n\t\t\t\t\t\t\tif(action.batchCustomers[i] != null){\n\t\t\t\t\t\t\t\tCustomerStore.saveCustomer(action.batchCustomers[i].id, action.batchCustomers[i]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t//Don't emit a change until all customers are completed (see below)\n\t\t\t\t\t//blnChangeToEmit = true;\n\t\t\t\t\t//Don't cache in localStorage until the end of our async customer loading (see below)\n\t\t\t\t\t//localStorage.customers = JSON.stringify(_customers);\n\t\t\t\t\t//localStorage.customersMeta = JSON.stringify(_customersMeta);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//We have completed processing of all customer batches (successfully or not)\n\t\t\t\tif(action.entityStatus != Status.PENDING){\n\t\t\t\t\t//Now that we're done dealing with our asynchronous customer saving, let's cache our state in localStorage\n\t\t\t\t\tlocalStorage.customers = JSON.stringify(_customers);\n\t\t\t\t\tlocalStorage.customersMeta = JSON.stringify(_customersMeta);\n\t\t\t\t\t\n\t\t\t\t\t//Let's only emit a change now that all customers are completed\n\t\t\t\t\tblnChangeToEmit = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif(blnChangeToEmit){\n\t\t\t\tCustomerStore.emitChange();\n\t\t\t}\n\t\t\t\n\t\t\tbreak;\n\t\t\n\t\t//[Save and complete are currently identical as we currently reduce our changes on every save (see note below)]\n\t\tcase Actions.CUSTOMER_DETAILS_EDIT_SAVE:\n\t\tcase Actions.CUSTOMER_DETAILS_EDIT_COMPLETE:\n\t\t\t//Whether we're creating a new (or editing an existing) customer\n\t\t\tvar blnNewCustomer = util.isLocalID(action.customerID);\n\t\t\t\n\t\t\t//When editing existing, no point in recording edits for a non-existent customer record (failsafe)\n\t\t\tif(blnNewCustomer || _customers[action.customerID] != null){\n\t\t\t\tif(_customerEdits[action.customerID] == null){\n\t\t\t\t\t_customerEdits[action.customerID] = {};\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//Note: We loop through the fields, only recording the real edit changes, so we're all set for updates submission.\n\t\t\t\t//If performance becomes an issue, given that this happens on every form keystroke (in addition to re-getting this store info afterwards too),\n\t\t\t\t//an alternative to looping and testing would be to just set ALL edit data, like so:\n\t\t\t\t//_customerEdits[action.customerID].details = action.customerDetailsEditData;\n\t\t\t\t//and then compile changes only on edit completion and/or updates submission.\n\t\t\t\t//Note 2: In new customer case, we could also potentially just set all edit data: \n\t\t\t\t//_customerEdits[action.customerID].details = action.customerDetailsEditData;\n\t\t\t\t//but let's only set fields that have been edited and be safe for now and ensure fields are correct\n\t\t\t\t_customerEdits[action.customerID].details = {};\n\t\t\t\tfor (var i = 0; i < _customersMeta.fields.length; i++) {\n\t\t\t\t\tlet field = _customersMeta.fields[i];\n\t\t\t\t\t//When editing new, check for only non-empty edits\n\t\t\t\t\t//When editing existing, check for only real edits\t\n\t\t\t\t\tif(\t(blnNewCustomer && action.customerDetailsEditData[field.name] != null) || \n\t\t\t\t\t\t(!blnNewCustomer && action.customerDetailsEditData[field.name] != _customers[action.customerID][field.name]) ){\n\t\t\t\t\t\t_customerEdits[action.customerID].details[field.name] = action.customerDetailsEditData[field.name];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//Additionally cache in localStorage for re-use across multiple sessions (until updated again)\n\t\t\t\tlocalStorage.customerEdits = JSON.stringify(_customerEdits);\n\t\t\t\t\n\t\t\t\tCustomerStore.emitChange();\n\t\t\t}\n\t\t\tbreak;\n\t\t\n\t\tcase Actions.CUSTOMER_DETAILS_EDIT_CANCEL:\n\t\t\tif(_customerEdits[action.customerID] != null && _customerEdits[action.customerID].details != null){\n\t\t\t\t_customerEdits[action.customerID].details = undefined;\n\n\t\t\t\t//Additionally cache in localStorage for re-use across multiple sessions (until updated again)\n\t\t\t\tlocalStorage.customerEdits = JSON.stringify(_customerEdits);\n\n\t\t\t\tCustomerStore.emitChange();\n\t\t\t}\n\t\t\tbreak;\n\t\t\n\t\tcase Actions.CUSTOMER_LOCATIONS_EDIT_ADD:\n\t\t\t//Whether we're creating a new (or editing an existing) customer\n\t\t\tvar blnNewCustomer = util.isLocalID(action.customerID);\n\t\t\t\n\t\t\t//When editing existing, no point in recording edits for a non-existent customer record (failsafe)\n\t\t\tif(blnNewCustomer || _customers[action.customerID] != null){\n\t\t\t\tif(_customerEdits[action.customerID] == null){\n\t\t\t\t\t_customerEdits[action.customerID] = {};\n\t\t\t\t}\n\t\t\t\tif(_customerEdits[action.customerID].locations == null){\n\t\t\t\t\t_customerEdits[action.customerID].locations = {};\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tlet freshLocationID = CustomerStore.getNewID();\n\t\t\t\t_customerEdits[action.customerID].locations[freshLocationID] = CustomerStore.getFreshLocationObject();\n\t\t\t\t\n\t\t\t\t//Update last edited tracking\n\t\t\t\tCustomerStore.setCustomerLocationLastEdited(action.customerID, freshLocationID);\n\t\t\t\t\n\t\t\t\t//Additionally cache in localStorage for re-use across multiple sessions (until updated again)\n\t\t\t\tlocalStorage.customerEdits = JSON.stringify(_customerEdits);\n\t\t\t\t\n\t\t\t\tCustomerStore.emitChange();\n\t\t\t}\n\t\t\tbreak;\n\t\t\n\t\t//[Save and complete are currently identical as we currently reduce our changes on every save (see note below)]\n\t\tcase Actions.CUSTOMER_LOCATIONS_EDIT_SAVE:\n\t\tcase Actions.CUSTOMER_LOCATIONS_EDIT_COMPLETE:\n\t\t\t//Whether we're creating a new (or editing an existing) customer\n\t\t\tvar blnNewCustomer = util.isLocalID(action.customerID);\n\t\t\t\n\t\t\t//When editing existing, no point in recording edits for a non-existent customer record (failsafe)\n\t\t\tif(blnNewCustomer || _customers[action.customerID] != null){\n\t\t\t\tif(_customerEdits[action.customerID] == null){\n\t\t\t\t\t_customerEdits[action.customerID] = {};\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//Note: We loop through the locations and fields, only recording the real edit changes, so we're all set for updates submission.\n\t\t\t\t//If performance becomes an issue, given that this happens on every form keystroke (in addition to re-getting this store info afterwards too),\n\t\t\t\t//an alternative to looping and testing would be to just set ALL edit data, like so:\n\t\t\t\t//_customerEdits[action.customerID].locations = action.customerLocationsEditData;\n\t\t\t\t//and then compile changes only on edit completion and/or updates submission. \n\t\t\t\t_customerEdits[action.customerID].locations = {};\n\t\t\t\t\n\t\t\t\tlet blnEditsToLocations = false;\n\t\t\t\t\n\t\t\t\tfor (var locationID in action.customerLocationsEditData) {\n\t\t\t\t\tlet locationEdit = action.customerLocationsEditData[locationID];\n\n\t\t\t\t\t//If this is a new location (added), [could also check by seeing whether it exists in customer locations, in existing edit case]\n\t\t\t\t\t//we can update the edits record in entirety\n\t\t\t\t\t//[Note that this is always a new location in the new customer case, hence use of blnNewCustomer failsafe here too]\t\t\t\t\n\t\t\t\t\tif(blnNewCustomer || util.isLocalID(locationID)){\n\t\t\t\t\t\t_customerEdits[action.customerID].locations[locationID] = locationEdit;\n\t\t\t\t\t\tblnEditsToLocations = true;\n\t\t\t\t\t\n\t\t\t\t\t//otherwise we reduce down to just actual changes\n\t\t\t\t\t}else{\n\t\t\t\t\t\tlet actualEdit = {};\n\t\t\t\t\t\tlet blnEditsToLocation = false;\n\t\t\t\t\t\t\n\t\t\t\t\t\t//Obtain the matching location record for comparison (locations are in array format, unlike edits)\n\t\t\t\t\t\tlet locationOrig = _.find(_customers[action.customerID].locations, {id: parseInt(locationID)});\n\t\t\t\t\t\t\n\t\t\t\t\t\tfor (var j = 0; j < _customersMeta.locationFields.length; j++) {\n\t\t\t\t\t\t\tlet field = _customersMeta.locationFields[j]; \n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif(locationEdit[field.name] != locationOrig[field.name]){\n\t\t\t\t\t\t\t\tactualEdit[field.name] = locationEdit[field.name];\n\t\t\t\t\t\t\t\tblnEditsToLocation = true;\n\t\t\t\t\t\t\t\tblnEditsToLocations = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(blnEditsToLocation){\n\t\t\t\t\t\t\t//Only add if any actual changes (prevents empty nodes causing submission issues)\n\t\t\t\t\t\t\t_customerEdits[action.customerID].locations[locationID] = actualEdit;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(!blnEditsToLocations){\n\t\t\t\t\t//Ensure we clear out all traces of editing, if no effective edits need to be recorded\n\t\t\t\t\t//[prevents incorrect submissions indicator display and submission itself]\n\t\t\t\t\t_customerEdits[action.customerID].locations = {};\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//Update last edited tracking (if anything specified)\n\t\t\t\tif(action.lastEditedLocationID != null){\n\t\t\t\t\tCustomerStore.setCustomerLocationLastEdited(action.customerID, action.lastEditedLocationID);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//Additionally cache in localStorage for re-use across multiple sessions (until updated again)\n\t\t\t\tlocalStorage.customerEdits = JSON.stringify(_customerEdits);\n\t\t\t\t\n\t\t\t\tCustomerStore.emitChange();\n\t\t\t}\n\t\t\tbreak;\n\t\t\n\t\tcase Actions.CUSTOMER_LOCATIONS_EDIT_CANCEL:\n\t\t\tif(_customerEdits[action.customerID] != null && _customerEdits[action.customerID].locations != null){\n\t\t\t\t_customerEdits[action.customerID].locations = undefined;\n\t\t\t\t\n\t\t\t\t//Clear last edited tracking\n\t\t\t\tCustomerStore.setCustomerLocationLastEdited(action.customerID, null);\n\n\t\t\t\t//Additionally cache in localStorage for re-use across multiple sessions (until updated again)\n\t\t\t\tlocalStorage.customerEdits = JSON.stringify(_customerEdits);\n\n\t\t\t\tCustomerStore.emitChange();\n\t\t\t}\n\t\t\tbreak;\n\t\t\n\t\tcase Actions.CUSTOMER_CONTACTS_EDIT_ADD:\n\t\t\t//Whether we're creating a new (or editing an existing) customer\n\t\t\tvar blnNewCustomer = util.isLocalID(action.customerID);\n\t\t\t\n\t\t\t//When editing existing, no point in recording edits for a non-existent customer record (failsafe)\n\t\t\tif(blnNewCustomer || _customers[action.customerID] != null){\n\t\t\t\tif(_customerEdits[action.customerID] == null){\n\t\t\t\t\t_customerEdits[action.customerID] = {};\n\t\t\t\t}\n\t\t\t\tif(_customerEdits[action.customerID].contacts == null){\n\t\t\t\t\t_customerEdits[action.customerID].contacts = {};\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tlet freshContactID = CustomerStore.getNewID();\n\t\t\t\t_customerEdits[action.customerID].contacts[freshContactID] = CustomerStore.getFreshContactObject();\n\t\t\t\t\n\t\t\t\t//Update last edited tracking\n\t\t\t\tCustomerStore.setCustomerContactLastEdited(action.customerID, freshContactID);\n\t\t\t\t\n\t\t\t\t//Additionally cache in localStorage for re-use across multiple sessions (until updated again)\n\t\t\t\tlocalStorage.customerEdits = JSON.stringify(_customerEdits);\n\t\t\t\t\n\t\t\t\tCustomerStore.emitChange();\n\t\t\t}\n\t\t\tbreak;\n\t\t\n\t\t//[Save and complete are currently identical as we currently reduce our changes on every save (see note below)]\n\t\tcase Actions.CUSTOMER_CONTACTS_EDIT_SAVE:\n\t\tcase Actions.CUSTOMER_CONTACTS_EDIT_COMPLETE:\n\t\t\t//Whether we're creating a new (or editing an existing) customer\n\t\t\tvar blnNewCustomer = util.isLocalID(action.customerID);\n\t\t\t\n\t\t\t//When editing existing, no point in recording edits for a non-existent customer record (failsafe)\n\t\t\tif(blnNewCustomer || _customers[action.customerID] != null){\n\t\t\t\tif(_customerEdits[action.customerID] == null){\n\t\t\t\t\t_customerEdits[action.customerID] = {};\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//Note: We loop through the contacts and fields, only recording the real edit changes, so we're all set for updates submission.\n\t\t\t\t//If performance becomes an issue, given that this happens on every form keystroke (in addition to re-getting this store info afterwards too),\n\t\t\t\t//an alternative to looping and testing would be to just set ALL edit data, like so:\n\t\t\t\t//_customerEdits[action.customerID].contacts = action.customerContactsEditData;\n\t\t\t\t//and then compile changes only on edit completion and/or updates submission. \n\t\t\t\t_customerEdits[action.customerID].contacts = {};\n\t\t\t\t\n\t\t\t\tlet blnEditsToContacts = false;\n\t\t\t\t\n\t\t\t\tfor (var contactID in action.customerContactsEditData) {\n\t\t\t\t\tlet contactEdit = action.customerContactsEditData[contactID];\n\n\t\t\t\t\t//If this is a new contact (added), [could also check by seeing whether it exists in customer contacts, in existing edit case]\n\t\t\t\t\t//we can update the edits record in entirety\n\t\t\t\t\t//[Note that this is always a new contact in the new customer case, hence use of blnNewCustomer failsafe here too]\t\t\t\t\n\t\t\t\t\tif(blnNewCustomer || util.isLocalID(contactID)){\n\t\t\t\t\t\t_customerEdits[action.customerID].contacts[contactID] = contactEdit;\n\t\t\t\t\t\tblnEditsToContacts = true;\n\t\t\t\t\t\n\t\t\t\t\t//otherwise we reduce down to just actual changes\n\t\t\t\t\t}else{\n\t\t\t\t\t\tlet actualEdit = {};\n\t\t\t\t\t\tlet blnEditsToContact = false;\n\t\t\t\t\t\t\n\t\t\t\t\t\t//Obtain the matching contact record for comparison (contacts are in array format, unlike edits)\n\t\t\t\t\t\tlet contactOrig = _.find(_customers[action.customerID].contacts, {id: parseInt(contactID)});\n\t\t\t\t\t\t\n\t\t\t\t\t\tfor (var j = 0; j < _customersMeta.contactFields.length; j++) {\n\t\t\t\t\t\t\tlet field = _customersMeta.contactFields[j]; \n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif(contactEdit[field.name] != contactOrig[field.name]){\n\t\t\t\t\t\t\t\tactualEdit[field.name] = contactEdit[field.name];\n\t\t\t\t\t\t\t\tblnEditsToContact = true;\n\t\t\t\t\t\t\t\tblnEditsToContacts = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(blnEditsToContact){\n\t\t\t\t\t\t\t//Only add if any actual changes (prevents empty nodes causing submission issues)\n\t\t\t\t\t\t\t_customerEdits[action.customerID].contacts[contactID] = actualEdit;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(!blnEditsToContacts){\n\t\t\t\t\t//Ensure we clear out all traces of editing, if no effective edits need to be recorded\n\t\t\t\t\t//[prevents incorrect submissions indicator display and submission itself]\n\t\t\t\t\t_customerEdits[action.customerID].contacts = {};\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//Update last edited tracking (if anything specified)\n\t\t\t\tif(action.lastEditedContactID != null){\n\t\t\t\t\tCustomerStore.setCustomerContactLastEdited(action.customerID, action.lastEditedContactID);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//Additionally cache in localStorage for re-use across multiple sessions (until updated again)\n\t\t\t\tlocalStorage.customerEdits = JSON.stringify(_customerEdits);\n\t\t\t\t\n\t\t\t\tCustomerStore.emitChange();\n\t\t\t}\n\t\t\tbreak;\n\t\t\n\t\tcase Actions.CUSTOMER_CONTACTS_EDIT_CANCEL:\n\t\t\tif(_customerEdits[action.customerID] != null && _customerEdits[action.customerID].contacts != null){\n\t\t\t\t_customerEdits[action.customerID].contacts = undefined;\n\t\t\t\t\n\t\t\t\t//Clear last edited tracking\n\t\t\t\tCustomerStore.setCustomerContactLastEdited(action.customerID, null);\n\n\t\t\t\t//Additionally cache in localStorage for re-use across multiple sessions (until updated again)\n\t\t\t\tlocalStorage.customerEdits = JSON.stringify(_customerEdits);\n\n\t\t\t\tCustomerStore.emitChange();\n\t\t\t}\n\t\t\tbreak;\n\t\t\n\t\tcase Actions.CUSTOMER_EDIT_CANCEL:\n\t\t\tif(_customerEdits[action.customerID] != null){\n\t\t\t\t_customerEdits[action.customerID] = undefined;\n\t\t\t\t\n\t\t\t\t//Clear last edited tracking\n\t\t\t\tCustomerStore.setCustomerLocationLastEdited(action.customerID, null);\n\t\t\t\tCustomerStore.setCustomerContactLastEdited(action.customerID, null);\n\n\t\t\t\t//Additionally cache in localStorage for re-use across multiple sessions (until updated again)\n\t\t\t\tlocalStorage.customerEdits = JSON.stringify(_customerEdits);\n\n\t\t\t\tCustomerStore.emitChange();\n\t\t\t}\n\t\t\tbreak;\t\n\n\t\t//Submit ALL edits for a customer to server (comprises details and/or locations and/or contacts sub operations)\n\t\tcase Actions.CUSTOMER_EDITS_SUBMIT:\n\t\t\t//Update the main status\n\t\t\t_status[action.actionType] = action.actionStatus;\n\t\t\t\t\n\t\t\t//If this is an update to a sub operation and if successfully submitted, remove our edits for that operation\n\t\t\tif(action.entity != null && (action.entityStatus == Status.OK || action.entityStatus == Status.PARTIAL)){\n\t\t\t\tif(action.entity == SubmissionEntities.CUSTOMER_DETAILS){\n\t\t\t\t\tif(_customerEdits[action.customerID] != null){ \n\t\t\t\t\t\t_customerEdits[action.customerID].details = undefined; \n\t\t\t\t\t}\n\t\t\t\t\t//If this was a successful customer creation on server, additionally update our tracking (used in view to switch display)\n\t\t\t\t\tif(action.newCustomerID != null){\n\t\t\t\t\t\tCustomerStore.setCustomerLastCreated(action.newCustomerID);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}else if(action.entity == SubmissionEntities.CUSTOMER_LOCATIONS){\n\t\t\t\t\tif(_customerEdits[action.customerID] != null){\n\t\t\t\t\t\tif(action.entityStatus == Status.OK){ //All edits successfully submitted\n\t\t\t\t\t\t\t_customerEdits[action.customerID].locations = undefined; \n\t\t\t\t\t\t}else{ //Some edits successfully submitted\n\t\t\t\t\t\t\tfor (var j = 0; j < action.submittedIDs.length; j++) {\n\t\t\t\t\t\t\t\t_customerEdits[action.customerID].locations[action.submittedIDs[j]] = undefined;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} \n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}else if(action.entity == SubmissionEntities.CUSTOMER_CONTACTS){\n\t\t\t\t\tif(_customerEdits[action.customerID] != null){\n\t\t\t\t\t\tif(action.entityStatus == Status.OK){ //All edits successfully submitted\n\t\t\t\t\t\t\t_customerEdits[action.customerID].contacts = undefined; \n\t\t\t\t\t\t}else{ //Some edits successfully submitted\n\t\t\t\t\t\t\tfor (var j = 0; j < action.submittedIDs.length; j++) {\n\t\t\t\t\t\t\t\t_customerEdits[action.customerID].contacts[action.submittedIDs[j]] = undefined;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} \n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//localStorage.customerEdits = JSON.stringify(_customerEdits);\n\t\t\t}\n\t\t\t\n\t\t\t//We have completed processing of all customer edits (successfully or not)\n\t\t\tif(action.actionStatus != Status.PENDING){\n\t\t\t\t//If we've successfully submitted ALL edits, remove all edits for this customer \n\t\t\t\tif(action.actionStatus == Status.OK){\n\t\t\t\t\tif(_customerEdits[action.customerID] != null){ \n\t\t\t\t\t\t_customerEdits[action.customerID] = undefined;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tlocalStorage.customerEdits = JSON.stringify(_customerEdits);\n\t\t\t}\n\t\t\t\n\t\t\tCustomerStore.emitChange();\n\t\t\tbreak;\t\t\t\n\t\t\n\t\tcase Actions.CUSTOMERS_SEARCH_LOCAL:\n\t\t\t_status[action.actionType] = action.actionStatus;\n\t\t\t_localSearchTerm = action.searchTerm;\n\t\t\t_localSearchPage = action.searchPage;\n\t\t\t_localSearchPageSize = action.searchPageSize ? action.searchPageSize : 10;\n\t\t\t\n\t\t\tlet arrSearchTerms = [];\n\t\t\t_.forEach(_localSearchTerm.split(\" \"), (term) => {\n\t\t\t\tlet searchToken = term.trim();\n\t\t\t\tif(searchToken != ''){\n\t\t\t\t\tarrSearchTerms.push(searchToken.toLowerCase());\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\tlet allSearchResults = _.filter(_customers, (customer) => {\n\t\t\t\t//We're only interested in listing active customers\n\t\t\t\tif(customer == null || customer.is_active == 0){\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//[We need to use inverse logic below, but equivalent SQL would be: \n\t\t\t\t//(name LIKE '%searchterm%' OR unique_code LIKE '%searchterm%') AND\n\t\t\t\t//(name LIKE '%othersearchterm%' OR unique_code LIKE '%othersearchterm%') ]\n\t\t\t\tlet name = (customer.name != null) ? customer.name.toLowerCase() : '';\n\t\t\t\tlet uniqueCode = (customer.unique_code != null) ? customer.unique_code.toLowerCase() : '';\n\t\t\t\tfor (var i = 0; i < arrSearchTerms.length; i++) {\n\t\t\t\t\t//[indexOf should be fastest for plain strings, but RexExp alternatives: customer.name.match(/searchterm/i); or /searchterm/i.test(customer.name);]\n\t\t\t\t\tif((name.indexOf(arrSearchTerms[i]) === -1) && (uniqueCode.indexOf(arrSearchTerms[i]) === -1)){\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn true;\n\t\t\t});\n\t\t\t\n\t\t\t_localSearchTotal = allSearchResults.length;\n\t\t\t_localSearchTotalPages = Math.floor(_localSearchTotal / _localSearchPageSize) + ((_localSearchTotal % _localSearchPageSize) > 0 ? 1 : 0);\n\t\t\t_localSearchPage = (_localSearchTotalPages == 0 || _localSearchPage < 1) ? 1 : (_localSearchPage > _localSearchTotalPages ? _localSearchTotalPages : _localSearchPage);\n\t\t\t\n\t\t\tlet searchPageStart = (_localSearchPage - 1) * _localSearchPageSize;\n\t\t\t_localSearchResults = allSearchResults.slice(searchPageStart, (searchPageStart + _localSearchPageSize));\n\t\t\t\n\t\t\tCustomerStore.emitChange();\n\t\t\tbreak;\n\t\t\n\t\tcase Actions.CUSTOMERS_SEARCH_SERVER:\n\t\t\tif(action.actionStatus == Status.OK){\n\t\t\t\t//refresh our results storage\n\t\t\t\t_serverSearchResults = action.resultsData;\n\t\t\t\t_serverSearchTotal = action.total;\n\t\t\t\t_serverSearchTotalPages = action.totalPages;\n\t\t\t}\n\t\t\t\n\t\t\t_status[action.actionType] = action.actionStatus;\n\t\t\t_serverSearchTerm = action.searchTerm;\n\t\t\t_serverSearchPage = action.searchPage;\n\t\t\t_serverSearchPageSize = action.searchPageSize ? action.searchPageSize : 10;\n\t\t\t\n\t\t\tCustomerStore.emitChange();\n\t\t\tbreak;\n\t\t\n\t\tcase Actions.CUSTOMER_REQUEST:\n\t\t\t_status[action.actionType] = action.actionStatus;\n\t\t\t_requestMade = (action.actionStatus == Status.OK ? true : _requestMade);\n\t\t\t\n\t\t\tCustomerStore.emitChange();\n\t\t\tbreak;\n\t\t\n\t\t//Log customer visit start (entry)\n\t\tcase Actions.CUSTOMER_ENTER:\n\t\t\t//Obtain timestamp as at start of day\n\t\t\t//[Apart from rare edge case, value received should be today's date]\n\t\t\t//[Value received is in seconds so needs to be converted to milliseconds for Date() constructor]\n\t\t\tvar entryDate = new Date(action.entryTimestamp * 1000);\n\t\t\tentryDate = util.getUnixTimeStartOfDay(entryDate);\n\t\t\t//Obtain string key version used in storage [for valid JSON data structure]\n\t\t\tvar strEntryDate = entryDate + '';\n\n\t\t\t//We only log this visit start if we don't yet have a visit record for this customer (today) [i.e. log the first only]\n\t\t\tif(!_customerVisits[strEntryDate]){\n\t\t\t\t_customerVisits[strEntryDate] = {};\n\t\t\t}\n\t\t\tif(!_customerVisits[strEntryDate][action.customerID]){\n\t\t\t\t_customerVisits[strEntryDate][action.customerID] = {\n\t\t\t\t\t'customer_id': \taction.customerID,\n\t\t\t\t\t'date':\t\t\tentryDate,\n\t\t\t\t\t'start_time':\taction.entryTimestamp,\n\t\t\t\t\t//We also include end_time on creation to ensure no server error for cases when the user\n\t\t\t\t\t//forgets to explicitly end the visit\n\t\t\t\t\t'end_time':\t\taction.entryTimestamp\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\t//Additionally cache in localStorage\n\t\t\t\tlocalStorage.customerVisits = JSON.stringify(_customerVisits);\n\t\t\t\t\n\t\t\t\t//No need to emit the entry time log - only currently needed within this store\n\t\t\t\t//CustomerStore.emitChange();\n\t\t\t}\n\t\t\t\n\t\t\tbreak;\n\t\t\n\t\t//Log customer visit end (exit)\n\t\tcase Actions.CUSTOMER_EXIT:\n\t\t\t//Obtain timestamp as at start of today\n\t\t\tvar entryDate = util.getUnixTimeStartOfDay();\n\t\t\t//Obtain string key version used in storage [for valid JSON data structure]\n\t\t\tvar strEntryDate = entryDate + '';\n\n\t\t\t//For now, we only log this visit end if we have a visit (start) record for this customer (today)\n\t\t\tif(\t_customerVisits[strEntryDate] != null && \n\t\t\t\t_customerVisits[strEntryDate][action.customerID] != null){\n\t\t\t\t_customerVisits[strEntryDate][action.customerID].end_time = action.exitTimestamp;\n\t\t\t\t\n\t\t\t\t//Additionally cache in localStorage\n\t\t\t\tlocalStorage.customerVisits = JSON.stringify(_customerVisits);\n\t\t\t\t\n\t\t\t\t//No need to emit the entry time log - only currently needed within this store\n\t\t\t\t//CustomerStore.emitChange();\n\t\t\t}\n\t\t\t\n\t\t\tbreak;\n\t\t\n\t\t//Housekeeping after a server recording of the logged customer visits\n\t\tcase Actions.CUSTOMER_VISITS_SUBMIT:\n\t\t\tif(action.actionStatus == Status.OK && action.customerVisitData != null && action.customerVisitData.length){\n\t\t\t\t\n\t\t\t\t//Clean up any successfully submitted customer visit records\n\t\t\t\tfor (var j = 0; j < action.customerVisitData.length; j++) {\n\t\t\t\t\tvar vDate = action.customerVisitData[j].date + ''; //[stringification not essential here?]\n\t\t\t\t\tvar vCustomerID = action.customerVisitData[j].customer_id;\n\t\t\t\t\t\n\t\t\t\t\tif(_customerVisits[vDate] != null && _customerVisits[vDate][vCustomerID] != null){\n\t\t\t\t\t\t_customerVisits[vDate][vCustomerID] = undefined;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//Also clean up any dates no longer containing customer visits (purged)\n\t\t\t\tfor (var visitDate in _customerVisits) {\n\t\t\t\t\tif(_customerVisits[visitDate] != null){\n\t\t\t\t\t\tvar blnDateEmpty = true;\n\t\t\t\t\t\tfor (var customerID in _customerVisits[visitDate]) {\n\t\t\t\t\t\t\tif(_customerVisits[visitDate][customerID] != null){\n\t\t\t\t\t\t\t\tblnDateEmpty = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(blnDateEmpty){\n\t\t\t\t\t\t\t_customerVisits[visitDate] = undefined;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//Update localstorage\n\t\t\t\tlocalStorage.customerVisits = JSON.stringify(_customerVisits);\n\t\t\t}\n\t\t\t\n\t\t\tbreak;\t\n\t\t\n\t\tcase Actions.USER_DELETE_DATA:\n\t\t\t_customers = {};\n\t\t\t_customersMeta = {\n\t\t\t\tcustomers: {},\n\t\t\t\t\n\t\t\t\tfields: [\n\t\t\t\t\t//Current non-custom display fields (custom fields will be merged in)\n\t\t\t\t\t{'name':'name', 'label':'Company Name', 'order':-10 },\n\t\t\t\t\t{'name':'unique_code', 'label':'Unique Code', 'order':-9 },\n\t\t\t\t\t{'name':'account_number', 'label':'Account Number', 'order':-8 },\n\t\t\t\t\t{'name':'phone', 'label':'Phone', 'order':-7 }\n\t\t\t\t],\n\t\t\t\tfieldsRefreshed: null,\n\t\t\t\t\n\t\t\t\tlocationFields: [\n\t\t\t\t\t//Current non-custom display fields (custom fields will be merged in)\n\t\t\t\t\t{'name':'description', 'label':'Description', 'order':-10 },\n\t\t\t\t\t{'name':'address_1', 'label':'Address 1', 'order':-9 },\n\t\t\t\t\t{'name':'address_2', 'label':'Address 2', 'order':-8 },\n\t\t\t\t\t{'name':'city', 'label':'City', 'order':-7 },\n\t\t\t\t\t//{'name':'country_id', 'label':'Country', 'order':-6 },\n\t\t\t\t\t{'name':'zip', 'label':'Zip', 'order':-5 },\n\t\t\t\t\t//{'name':'state_id', 'label':'State', 'order':-4 },\n\t\t\t\t\t{'name':'latitude', 'label':'Latitude', 'order':-3 },\n\t\t\t\t\t{'name':'longitude', 'label':'Longitude', 'order':-2 }\n\t\t\t\t],\n\t\t\t\tlocationFieldsRefreshed: null,\n\t\n\t\t\t\tcontactFields: [\n\t\t\t\t\t//Current non-custom display fields (custom fields will be merged in)\n\t\t\t\t\t{'name':'first_name', 'label':'First Name', 'order':-10 },\n\t\t\t\t\t{'name':'last_name', 'label':'Last Name', 'order':-9 },\n\t\t\t\t\t{'name':'email', 'label':'Email', 'order':-8 },\n\t\t\t\t\t{'name':'office_phone', 'label':'Office Phone', 'order':-7 },\n\t\t\t\t\t{'name':'cell_phone', 'label':'Cell Phone', 'order':-6 },\n\t\t\t\t\t{'name':'fax', 'label':'Fax', 'order':-5 },\n\t\t\t\t\t//{'name':'location_id', 'label':'Location', 'order':-4 },\n\t\t\t\t],\n\t\t\t\tcontactFieldsRefreshed: null\n\t\t\t};\n\t\t\t_customerEdits = {};\n\t\t\t_customerLastEdit = {};\n\t\t\t_customerLastCreated = null;\n\t\t\t_customerVisits = {};\n\t\t\t\n\t\t\t_localSearchResults = [];\n\t\t\t_localSearchTerm = '';\n\t\t\t_localSearchPage = 1;\n\t\t\t_localSearchPageSize = 10;\n\t\t\t_localSearchTotal = null;\n\t\t\t_localSearchTotalPages = null;\n\t\t\t\n\t\t\t_serverSearchResults = [];\n\t\t\t_serverSearchTerm = '';\n\t\t\t_serverSearchPage = 1;\n\t\t\t_serverSearchPageSize = 10;\n\t\t\t_serverSearchTotal = null;\n\t\t\t_serverSearchTotalPages = null;\n\t\t\t\n\t\t\t//Additionally update localStorage cache\n\t\t\tlocalStorage.customers = JSON.stringify(_customers);\n\t\t\tlocalStorage.customersMeta = JSON.stringify(_customersMeta);\n\t\t\tlocalStorage.customerEdits = JSON.stringify(_customerEdits);\n\t\t\tlocalStorage.customerVisits = JSON.stringify(_customerVisits);\n\t\t\t\n\t\t\t//Safeguard: emit a change event (necessary?)\n\t\t\tCustomerStore.emitChange();\n\t\t\t\n\t\t\tbreak;\n\t\t\t\n\t\tdefault:\n\t\t\t//nothing\t\n\t}\n});\n\nmodule.exports = CustomerStore;","var Option = require('./constants/configOptions');\n\n//The specific configuration to be run in this app (the general mode/profile, and more specific UI and functionality options)\nvar appConfig = {\n\t//[Whilst not specifically configuration-related, we include the app version here for reporting (best place for now)]\n\tappVersion: '1.54.0',\n\t\n\t//The default general configuration mode/profile to be used in this app \n\tdefaultActiveProfile: Option.PROFILE_WEB,\n\t//The actual active general app configuration mode/profile (able to be dynamically set)\n\tactiveProfile: '',\n\t//The list of possible profile configurations (see below)\n\tprofiles: {},\n\t\n\t//Allow dynamic switching of profile (based on logged in user)\n\tsetProfile: function(profileOption){\n\t\tappConfig.activeProfile = profileOption;\n\t},\n\t\n\t//Resolve and return the active value for a particular configuration option\n\t//[Specific profile override is used if exists, otherwise we default to the always existing generic base config value]\n\tget: function(configOption){\n\t\treturn (\n\t\t\tappConfig.profiles[appConfig.activeProfile][configOption] != null ? \n\t\t\t\tappConfig.profiles[appConfig.activeProfile][configOption] : \n\t\t\t\tappConfig.profiles[Option.PROFILE_DEFAULT][configOption]\n\t\t);\n\t}\n\t\n\t//Set the active value for a particular configuration option (for the active profile)\n\t//set: function(configOption){}\n};\n\n//Set the active static profile for this app (may be dynamically overridden if necessary using setProfile() - e.g. B2B)\nappConfig.activeProfile = appConfig.defaultActiveProfile; \n\n//The configuration profiles assume the values of the generic base config, unless a specific override exists\n\n//Generic base config, intended to provide sensible defaulting for all other profiles\nappConfig.profiles[Option.PROFILE_DEFAULT] = {};\nappConfig.profiles[Option.PROFILE_DEFAULT][Option.UI_BUTTON_CALL_LIST] = true;\nappConfig.profiles[Option.PROFILE_DEFAULT][Option.UI_BUTTON_LIBRARY] = true;\nappConfig.profiles[Option.PROFILE_DEFAULT][Option.UI_BUTTON_CUSTOMERS] = true;\nappConfig.profiles[Option.PROFILE_DEFAULT][Option.UI_BUTTON_CUSTOMER_FILES] = true;\nappConfig.profiles[Option.PROFILE_DEFAULT][Option.UI_BUTTON_CUSTOMER_COMMENTS] = true;\nappConfig.profiles[Option.PROFILE_DEFAULT][Option.UI_BUTTON_CHANGE_CUSTOMER] = true;\nappConfig.profiles[Option.PROFILE_DEFAULT][Option.FUNC_ONLINE_PRODUCTS] = false;\nappConfig.profiles[Option.PROFILE_DEFAULT][Option.FUNC_ONLINE_CUSTOMERS] = false;\nappConfig.profiles[Option.PROFILE_DEFAULT][Option.FUNC_CUSTOMER_AUTOSELECTION] = false;\nappConfig.profiles[Option.PROFILE_DEFAULT][Option.FUNC_EDIT_ORDER_PRICING] = true;\n\n//Specific/override configs\nappConfig.profiles[Option.PROFILE_WEB] = {};\nappConfig.profiles[Option.PROFILE_WEB][Option.FUNC_ONLINE_PRODUCTS] = true;\nappConfig.profiles[Option.PROFILE_WEB][Option.FUNC_ONLINE_CUSTOMERS] = true;\n\nappConfig.profiles[Option.PROFILE_B2B] = {};\nappConfig.profiles[Option.PROFILE_B2B][Option.UI_BUTTON_CALL_LIST] = false;\nappConfig.profiles[Option.PROFILE_B2B][Option.UI_BUTTON_LIBRARY] = false;\nappConfig.profiles[Option.PROFILE_B2B][Option.UI_BUTTON_CUSTOMERS] = false;\nappConfig.profiles[Option.PROFILE_B2B][Option.UI_BUTTON_CUSTOMER_FILES] = false;\nappConfig.profiles[Option.PROFILE_B2B][Option.UI_BUTTON_CUSTOMER_COMMENTS] = false;\nappConfig.profiles[Option.PROFILE_B2B][Option.UI_BUTTON_CHANGE_CUSTOMER] = false;\nappConfig.profiles[Option.PROFILE_B2B][Option.FUNC_ONLINE_PRODUCTS] = true;\nappConfig.profiles[Option.PROFILE_B2B][Option.FUNC_ONLINE_CUSTOMERS] = true;\nappConfig.profiles[Option.PROFILE_B2B][Option.FUNC_CUSTOMER_AUTOSELECTION] = true;\nappConfig.profiles[Option.PROFILE_B2B][Option.FUNC_EDIT_ORDER_PRICING] = false;\n\nappConfig.profiles[Option.PROFILE_NATIVE] = {};\n\nmodule.exports = appConfig;","\"use strict\";\n\n//App configuration options/switches\nmodule.exports = {\n\t//General app type modes/profiles\n\tPROFILE_DEFAULT:\t\t'profile_default', //(Intended more as a generic base config, providing defaulting for all other profiles)\n\tPROFILE_WEB:\t\t\t'profile_web',\n\tPROFILE_NATIVE:\t\t\t'profile_native',\n\tPROFILE_B2B:\t\t\t'profile_b2b',\n\t\n\t//UI element specific switches\n\tUI_BUTTON_CALL_LIST:\t\t\t'ui_button_call_list',\n\tUI_BUTTON_LIBRARY:\t\t\t\t'ui_button_library',\n\tUI_BUTTON_CUSTOMERS:\t\t\t'ui_button_customers',\n\tUI_BUTTON_CUSTOMER_FILES:\t\t'ui_button_customer_files',\n\tUI_BUTTON_CUSTOMER_COMMENTS:\t'ui_button_customer_comments',\n\tUI_BUTTON_CHANGE_CUSTOMER:\t\t'ui_button_change_customer',\n\tUI_BUTTON_REQUEST_CUSTOMER:\t\t'ui_button_request_customer',\n\t\n\t//Functionality specific switches\n\tFUNC_ONLINE_PRODUCTS:\t\t\t'func_online_products',\n\tFUNC_ONLINE_CUSTOMERS:\t\t\t'func_online_customers',\n\tFUNC_CUSTOMER_AUTOSELECTION:\t'func_customer_autoselection', //(B2B customer)\n\tFUNC_EDIT_ORDER_PRICING:\t\t'func_edit_order_pricing',\n\tFUNC_ORDER_AUTO_SUBMISSION:\t\t'func_order_auto_submission'\n};","/*\n * Copyright (c) 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * AppDispatcher\n * \n * A singleton that operates as the central hub for application updates.\n */\n\nvar Dispatcher = require('flux').Dispatcher;\n\nmodule.exports = new Dispatcher(); ","\"use strict\";\n\nvar Dispatcher = require('../dispatcher/appDispatcher');\nvar Actions = require('../constants/actionTypes');\nvar Status = require('../constants/actionStatuses');\nvar AuditTypes = require('../constants/auditTypes');\nvar EventEmitter = require('events').EventEmitter;\nvar assign = require('object-assign');\nvar _ = require('lodash');\nvar CHANGE_EVENT = 'change';\nvar util = require('../util.js');\n\n//Call objects keyed on (customer) ID for fast retrieval\n//(Can potentially change this to simple array and use lodash to search if needs be) \nvar _calls = {};\n//Call meta data objects keyed on (customer) ID for fast retrieval\n//(For now let's keep this data separate to the calls data retrieved and refreshed from server)\n//This is now also used for tracking last list refresh timestamp \nvar _callsMeta = { refreshed: null };\n//Track data state\nvar _status = Status.OK;\n//Current call cycle date (for which we are conducting audits)\n//[Technically a unix timestamp as at start of day, and ordinarily set via CALLS_REFRESH action]\n//[Ensure it is a string, for comparison purposes]\n//[Can potentially move this and associated getter/setter into util somehow, and share with AuditAnswerStore (but localStorage needed too)]\nvar _currentCallDate = util.getUnixTimeStartOfDay() + '';\n\nvar CallStore = assign({}, EventEmitter.prototype, {\n\taddChangeListener: function(callback){ this.on(CHANGE_EVENT, callback); },\n\tremoveChangeListener: function(callback){ this.removeListener(CHANGE_EVENT, callback); },\n\temitChange: function(){ this.emit(CHANGE_EVENT); },\n\t\n\tgetStatus: function(){\n\t\treturn _status;\n\t},\n\t\n\tgetAllCalls: function(){\n\t\t//[NOTE: completed/submitted statuses in this store are used purely for display purposes in the call list]\n\t\t//Let's return an array, adding call completion/submission statuses, and order by call start times (if times enabled)\n\t\t//The check for call times enabled involves checking any call for presence of 'start_time' property (safe even if empty calls storage)\n\t\treturn ( _.has(_.sample(_calls), 'start_time') ?\n\t\t\t_.sortBy(_.map(_calls, function(call, id){\n\t\t\t\tcall.completed = (_callsMeta[id] != null && _callsMeta[id].completed);\n\t\t\t\tcall.submitted = (_callsMeta[id] != null && _callsMeta[id].submitted);\n\t\t\t\treturn call;\n\t\t\t}), 'start_time')\n\t\t:\n\t\t\t_.map(_calls, function(call, id){\n\t\t\t\tcall.completed = (_callsMeta[id] != null && _callsMeta[id].completed);\n\t\t\t\tcall.submitted = (_callsMeta[id] != null && _callsMeta[id].submitted);\n\t\t\t\treturn call;\n\t\t\t}) \n\t\t);\n\t},\n\t//This in essence returns the customer (call) info\n\tgetCallById: function(id){\n\t\t//return _.find(_calls, {id: id});\n\t\treturn _calls[id];\n\t},\n\t//This returns the customer (call) META info\n\t//With current usage, for now rather have this ability to access info directly by reference, than roll into getCallById(). \n\t//So we avoid merging this data in and returning a COPY (like getAllCalls() does, where we actually want the copy behaviour).\n\t/*getCallMetaById: function(id){\n\t\t//return _.find(_callsMeta, {id: id});\n\t\treturn _callsMeta[id];\n\t},*/\n\t//Get the unix timestamp of the last call list refresh (if any)\n\tgetLastRefresh: function(){\n\t\treturn _callsMeta.refreshed;\n\t},\n\t\n\t//Obtain the customers for which the user has calls\n\tgetCallCustomerIDs: function(){\n\t\t//[Can just use _.keysIn() since we don't have to test for any records set to undefined (they are replaced wholesale on calls refresh)]\n\t\treturn _.keysIn(_calls).map((key) => (parseInt(key)));\n\t},\n\t\n\t//This returns the audit IDs for a customer (call)\n\t/*getAuditIdsForCall: function(id){\n\t\treturn _calls[id].audits;\n\t}*/\n\t//Clear all cached data\n\t//(We only need to purge the meta data, as calls data is overwritten on new day refreshes) \n\tpurgeData: function(){\n\t\t//Clear all data, preserving last refresh timestamp\n\t\t_callsMeta = { refreshed: _callsMeta.refreshed };\n\t},\n\t//Clear cached data for provided customers [currently unused]\n\t//(We only need to purge the meta data, as calls data is overwritten on new day refreshes) \n\tpurgeDataForIds: function(arrIDs){\n\t\tvar l = arrIDs.length;\n\t\tif(l){\n\t\t\tfor (var i = 0; i < l; i++) {\n\t\t\t\t_callsMeta[arrIDs[i]] = undefined; //performance boost over delete (and as it happens, node is completely removed by next localStorage save/reload anyway)\n\t\t\t}\n\t\t}\n\t},\n\t//Clear all cached data except for provided customers [currently unused]\n\t//(We only need to purge the meta data, as calls data is overwritten on new day refreshes)\n\tpurgeDataExceptForIds: function(arrIDs){\n\t\tfor (var customerID in _callsMeta) {\n\t\t\tif(customerID != 'refreshed' && !_.includes(arrIDs, customerID)){ //also ignore 'refreshed' meta data key\n\t\t\t\t_callsMeta[customerID] = undefined; //performance boost over delete (and as it happens, node is completely removed by next localStorage save/reload anyway)\n\t\t\t}\n\t\t}\n\t},\n\t\n\t//Obtain (relevant) store data for server debug submission\n\texportData: function(){\n\t\t//Explicity set up the valid JSON return string (until this store is restructured to store all keys in an object rather than separate module-level variables)\n\t\treturn '{' + \n\t\t\t'\"calls\":' \t\t\t\t+ JSON.stringify(_calls) + \",\" +\n\t\t\t'\"callsMeta\":' \t\t\t+ JSON.stringify(_callsMeta) + \",\" +\n\t\t\t'\"currentCallDate\":' \t+ JSON.stringify(_currentCallDate) +\n\t\t'}';\n\t}\n});\n\nDispatcher.register(function(action){\n\tswitch(action.actionType){\n\t\tcase Actions.INITIALISE:\n\t\t\t//Load any potentially previously cached calls or calls meta data\n\t\t\tif(localStorage.calls){\n\t\t\t\t_calls = JSON.parse(localStorage.calls);\n\t\t\t}\n\t\t\tif(localStorage.callsMeta){\n\t\t\t\t_callsMeta = JSON.parse(localStorage.callsMeta);\n\t\t\t}\n\t\t\t//Also load the current call date (if previously cached)\n\t\t\tif(localStorage.currentCallDate){\n\t\t\t\t_currentCallDate = JSON.parse(localStorage.currentCallDate);\n\t\t\t}\n\t\t\tCallStore.emitChange();\n\t\t\tbreak;\n\t\tcase Actions.CALLS_REFRESH:\n\t\t\tif(action.actionStatus == Status.OK){\n\t\t\t\t//refresh our calls storage\n\t\t\t\t_calls = action.callsData;\n\t\t\t\t_callsMeta.refreshed = util.getUnixTime();\n\t\t\t\t\n\t\t\t\t//If the call date has changed (new day refresh)\n\t\t\t\tif((action.callDate + '') != _currentCallDate){\n\t\t\t\t\t//purge all old call (meta) data\n\t\t\t\t\t//(only used for display purposes, and we are only displaying today's calls so any repeat customers need to appear fresh and uncompleted/unsubmitted)\n\t\t\t\t\tCallStore.purgeData();\n\t\t\t\t\t//update current call date (call list refresh should always be for today)\n\t\t\t\t\t//[ensure it is a string]\n\t\t\t\t\t_currentCallDate = action.callDate + '';\n\t\t\t\t\t//Additionally cache in localStorage for re-use across multiple sessions (until updated again)\n\t\t\t\t\tlocalStorage.currentCallDate = JSON.stringify(_currentCallDate);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//obtain customer IDs for fresh calls\n\t\t\t\t//var newCustomerIDs = _.keysIn(_calls);\n\n\t\t\t\t//AuditStore and AuditAnswerStore data purging is handled by the stores themselves (avoiding circular dependencies)\n\n\t\t\t\t//Additionally cache in localStorage for re-use across multiple sessions (until calls refreshed/updated again)\n\t\t\t\tlocalStorage.calls = JSON.stringify(_calls);\n\t\t\t\tlocalStorage.callsMeta = JSON.stringify(_callsMeta);\n\t\t\t}\n\t\t\t_status = action.actionStatus;\n\t\t\tCallStore.emitChange();\n\t\t\tbreak;\n\t\tcase Actions.CUSTOMER_EXIT: //CALL_AUDITS_COMPLETE\n\t\t\t//We only update the call data in this store if this is an explicit call audits completion scenario\n\t\t\t//(We don't want to CREATE completed call data when not appropriate, e.g. when completing an order or only exiting a customer)\n\t\t\tif(action.callAuditsCompleted){\n\t\t\t\tif(!_callsMeta[action.customerID]){\n\t\t\t\t\t_callsMeta[action.customerID] = {};\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t_callsMeta[action.customerID].completed = true;\n\t\t\t\t//Currently set our entry/exit timestamps at call level in the AuditAnswerStore (only place currently needed),\n\t\t\t\t//but could add in here too/alternatively if needed in future (using callsMeta)\n\t\t\t\t\n\t\t\t\t//Additionally cache in localStorage for re-use across multiple sessions (until updated again)\n\t\t\t\tlocalStorage.callsMeta = JSON.stringify(_callsMeta);\n\t\t\t\t\n\t\t\t\t_status = Status.OK; //due to the way this store is used by call list\n\t\t\t\tCallStore.emitChange();\n\t\t\t}\n\t\t\tbreak;\t\n\t\tcase Actions.AUDITS_SUBMIT:\n\t\t\t//Resolved in some way, either: Status.OK, Status.ERROR or Status.PARTIAL\n\t\t\tif(action.actionStatus != Status.PENDING){\n\t\t\t\t//We're only interested in call audits submissions\n\t\t\t\tif(action.auditsType == AuditTypes.CALL){\n\t\t\t\t\t//update submission flag(s) for the successful customers (calls) for current call cycle date only (only day displayed)\n\t\t\t\t\tif(action.submittedIDs[_currentCallDate] != null) {\n\t\t\t\t\t\tfor (var customerID in action.submittedIDs[_currentCallDate]) {\n\t\t\t\t\t\t\t//Note that a customer ID will appear in submitted AND failed when partial success (successful audits in submitted, unsuccessful in failed)\n\t\t\t\t\t\t\t//Seeing as we only care about customer ID's here, we make sure to still display customer as unsubmitted when some of its audits are still unsubmitted\n\t\t\t\t\t\t\t//We also check that the meta data entry actually even exists, just in case (previously it wouldn't when old non-current call day audits submitted for a customer, but we're inspecting current call date only!)\n\t\t\t\t\t\t\tif((!action.failedIDs[_currentCallDate] || !action.failedIDs[_currentCallDate][customerID]) && (_callsMeta[customerID] != null)){\n\t\t\t\t\t\t\t\t_callsMeta[customerID].submitted = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t//Additionally cache in localStorage for re-use across multiple sessions (until updated again)\n\t\t\t\t\tlocalStorage.callsMeta = JSON.stringify(_callsMeta);\n\t\t\t\t}\n\t\t\t}\n\t\t\t_status = action.actionStatus;\n\t\t\tCallStore.emitChange();\n\t\t\tbreak;\n\t\tcase Actions.USER_DELETE_DATA:\n\t\t\t_calls = {};\n\t\t\t_callsMeta = { refreshed: null };\n\t\t\t//Additionally update localStorage cache\n\t\t\tlocalStorage.calls = JSON.stringify(_calls);\n\t\t\tlocalStorage.callsMeta = JSON.stringify(_callsMeta);\n\t\t\t//Safeguard: emit a change event (necessary?)\n\t\t\tCallStore.emitChange();\n\t\t\tbreak;\n\t\t\t\n\t\tdefault:\n\t\t\t//nothing\t\n\t}\n});\n\nmodule.exports = CallStore;","\"use strict\";\nimport $ from 'jquery';\nwindow.$ = $;\n\nvar Dispatcher = require('../dispatcher/appDispatcher');\nvar Actions = require('../constants/actionTypes');\nvar UserActions = require('./userActions');\nvar AuditActions = require('./auditActions');\nvar SalesActions = require('./salesActions');\nvar Status = require('../constants/actionStatuses');\nvar AuditTypes = require('../constants/auditTypes');\nvar SubmissionEntities = require('../constants/submissionEntities');\nvar _ = require('lodash');\nvar util = require('../util.js');\nvar toastr = require('toastr');\n\nvar customerSearchAJAXRequest = null;\n\n//List our 'action creators' (e.g. refreshCalls, completeCall) that helpfully wrap our actions (payloads {} that are dispatched)\nvar CallActions = {\n\tdoAfterAccessCheck: function(action, args){\n\t\tif(action == 'refreshCalls' || action == 'refreshCallsAndRelatedData'){\n\t\t\t//Instruct dispatcher to tell all stores that this action is pending (ensure any visual indicators updated)\n\t\t\tDispatcher.dispatch({\n\t\t\t\tactionType: Actions.CALLS_REFRESH,\n\t\t\t\tactionStatus: Status.PENDING\n\t\t\t});\n\t\t}else if(action == 'refreshCustomer'){\n\t\t\t//Instruct dispatcher to tell all stores that this action is pending (ensure any visual indicators updated)\n\t\t\tDispatcher.dispatch({\n\t\t\t\tactionType: Actions.CUSTOMER_REFRESH,\n\t\t\t\tactionStatus: Status.PENDING,\n\t\t\t\tcustomerID: (args != null ? args[0] : args) //for completeness\n\t\t\t});\n\t\t}\n\t\t\n\t\t//UserActions.checkAccess(function(){\n\t\t//\tthis[action].apply(null, args);\n\t\t//}.bind(this)); //ensure we have correct 'this' context in callback (namely CallActions)\n\t\tUserActions.checkAccess(this[action], args, this);\n\t},\n\t\n\t//Refresh calls AND any customer sales data or admin audits data (for these call customers)\n\trefreshCallsAndRelatedData: function(blnRefreshAdminAudits){\n\t\t//Default to performing an admin audits (and customer restrictions) refresh once calls refresh has successfully completed\n\t\tif(blnRefreshAdminAudits == null){\n\t\t\tblnRefreshAdminAudits = true;\n\t\t}\n\t\t\n\t\t//TODO: Only add refreshAdminAudits to the queue when blnRefreshAdminAudits flag is true\n\t\t\n\t\tvar refreshQueue = [\n\t\t\t//Refresh the general user/company info (including an access check), so that we have the latest flags (potentially affects e.g. pricelists refresh below)\n\t\t\t//(If it fails, we don't proceed with subsequent refreshes, in case it's an access permissions error)\n\t\t\t{ context: UserActions, action: 'refreshUser', args: null, completionWeighting: 0.05, stopOnFail: true },\n\t\t\t//(If the calls refresh failed, don't proceed with any of the subsequent related refreshes)\n\t\t\t{ context: this, action: 'refreshCalls', args: null, completionWeighting: 0.3, stopOnFail: true },\n\t\t\t//[NOTE: We want to perform the admin audit info refresh here even if we have an empty call list, in case it needs to do anything (e.g. cleanup).]\n\t\t\t{ context: AuditActions, action: 'refreshAdminAudits', args: ['add:callCustomerIDs'], completionWeighting: 0.1 },\n\t\t\t//This is necessary to collate the actual audit/admin audit data to refresh, based off the latest refreshed call list\n\t\t\t{ context: AuditActions, action: 'prepareCustomerAuditData', args: ['add:callCustomerIDs'], completionWeighting: 0 },\n\t\t\t{ context: AuditActions, action: 'refreshAuditsForCustomers', args: ['add:customerAuditIDObjs'], completionWeighting: 0.2 },\n\t\t\t//[NOTE: These sales data refreshes would need to be removed in the non-sales-module version of this app]\n\t\t\t//(If the customer(s) refresh failed, don't proceed with the related sales data refreshes)\n\t\t\t{ context: SalesActions, action: 'refreshCustomers', args: ['add:callCustomerIDs'], completionWeighting: 0.2, stopOnFail: true },\n\t\t\t{ context: SalesActions, action: 'refreshPriceLists', args: ['add:callCustomerIDs'], completionWeighting: 0.075 },\n\t\t\t{ context: SalesActions, action: 'refreshProductRules', args: ['add:callCustomerIDs'], completionWeighting: 0.075 }\n\t\t];\n\t\n\t\treturn util.executeActionQueue(refreshQueue, Actions.CALLS_RELATED_REFRESH);\n\t},\n\t\n\trefreshCalls: function(){\n\t\t//Instruct dispatcher to tell all stores that a call list refresh is pending (has begun)\n\t\tutil.dispatch({\n\t\t\tactionType: Actions.CALLS_REFRESH,\n\t\t\tactionStatus: Status.PENDING\n\t\t});\n\t\t\n\t\t//We return our own deferred object, instead of the one returned by $.ajax, so we can custom handle resolving/rejecting within the 'successful' done AJAX callback below\n\t\t//(We do this to support queue actions)\n\t\tlet returnDeferred = $.Deferred();\n\t\t\n\t\t//Call cycle date (call list refresh is always for today)\n\t\t//[Technically a unix timestamp as at start of day]\n\t\t//[Synchronisation safeguard: This is the authoritative single place of origin for this value as currently more than one store makes use of it]\n\t\tvar callDate = util.getUnixTimeStartOfDay(); /*1438552800*/\n\t\t\n\t\t$.ajax({\n\t\t\t//context: this,\n\t\t\turl: util.apiUrl + 'audit/getUsersCallCycle',\n\t\t\ttype: 'GET',\n\t\t\tdata: {'user_id': util.getUserID(), date: callDate},\n\t\t\t/*beforeSend: function(xhr){\n\t\t\t\txhr.setRequestHeader('Authorization', 'Basic ' + util.base64Encode('admin:123'));\n\t\t\t},*/\n\t\t\t//username: 'admin',\n\t\t\t//password: '123',\n\t\t\theaders: { \"Authorization\": util.getHTTPAuthString() },\n\t\t\tsuccess: function(data){},\n\t\t\terror: function(){},\n\t\t\tcomplete: function(){},\n\t\t\tdataType: 'json'\n\t\t})/*.always(function(){\n\t\t\tconsole.log('always');\n\t\t})*/.fail(function(){\n\t\t\t//Instruct dispatcher to tell all stores that a call list refresh has failed\n\t\t\tutil.dispatch({\n\t\t\t\tactionType: Actions.CALLS_REFRESH,\n\t\t\t\tactionStatus: Status.ERROR,\n\t\t\t\tcallDate: callDate\n\t\t\t});\n\t\t\treturnDeferred.reject();\n\t\t}).done(function(data){\n\t\t\tif(data.status){\n\t\t\t\tlet callsData = _.indexBy(data.results.stores, 'store_id'); //key on customer ID (we only have need for 'stores' node currently)\n\t\t\t\t\n\t\t\t\t//Instruct dispatcher to tell all stores that a call list refresh has completed\n\t\t\t\tutil.dispatch({\n\t\t\t\t\tactionType: Actions.CALLS_REFRESH,\n\t\t\t\t\tactionStatus: Status.OK,\n\t\t\t\t\tcallDate: callDate,\n\t\t\t\t\tcallsData: callsData\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tlet arrCallCustomerIDs = _.keysIn(callsData);\n\t\t\t\t\n\t\t\t\treturnDeferred.resolve({ results: { callCustomerIDs: arrCallCustomerIDs } });\n\t\t\t\t\n\t\t\t}else{\n\t\t\t\t//For now, while the API returns a failure when there are no calls for the day,\n\t\t\t\t//we put this check in to avoid a user error message and allow the list to be cleared\n\t\t\t\t//[Remove this if/when API response changes]\n\t\t\t\tif(data.error.substr(0, 45) == 'The user is not scheduled to visit any stores'){\n\t\t\t\t\t//Instruct dispatcher to tell all stores that a call list refresh has completed\n\t\t\t\t\tutil.dispatch({\n\t\t\t\t\t\tactionType: Actions.CALLS_REFRESH,\n\t\t\t\t\t\tactionStatus: Status.OK,\n\t\t\t\t\t\tcallDate: callDate,\n\t\t\t\t\t\tcallsData: {}\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\t//[NOTE: We want to perform the admin audits refresh at this point even if we have an empty call list, in case it needs to do anything (e.g. cleanup).]\n\t\t\t\t\treturnDeferred.resolve({ results: { callCustomerIDs: [] } });\n\t\t\t\t\n\t\t\t\t}else{\n\t\t\t\t\t//Instruct dispatcher to tell all stores that a call list refresh has failed\n\t\t\t\t\tutil.dispatch({\n\t\t\t\t\t\tactionType: Actions.CALLS_REFRESH,\n\t\t\t\t\t\tactionStatus: Status.ERROR,\n\t\t\t\t\t\tcallDate: callDate\n\t\t\t\t\t});\n\t\t\t\t\treturnDeferred.reject();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t\n\t\treturn returnDeferred;\n\t},\n\t\n\t/*refreshCallsORIG: function(blnRefreshAdminAudits){\n\t\t//Instruct dispatcher to tell all stores that a call list refresh is pending (has begun)\n\t\tDispatcher.dispatch({\n\t\t\tactionType: Actions.CALLS_REFRESH,\n\t\t\tactionStatus: Status.PENDING\n\t\t});\n\t\t\n\t\t//Default to performing an admin audits (and customer restrictions) refresh once this action has successfully completed\n\t\tif(blnRefreshAdminAudits == null){\n\t\t\tblnRefreshAdminAudits = true;\n\t\t}\n\t\t\n\t\t//Call cycle date (call list refresh is always for today)\n\t\t//[Technically a unix timestamp as at start of day]\n\t\t//[Synchronisation safeguard: This is the authoritative single place of origin for this value as currently more than one store makes use of it]\n\t\tvar callDate = util.getUnixTimeStartOfDay(); / *1438552800* /\n\t\t\n\t\t$.ajax({\n\t\t\t//context: this,\n\t\t\turl: util.apiUrl + 'audit/getUsersCallCycle',\n\t\t\ttype: 'GET',\n\t\t\tdata: {'user_id': util.getUserID(), date: callDate},\n\t\t\t/ *beforeSend: function(xhr){\n\t\t\t\txhr.setRequestHeader('Authorization', 'Basic ' + util.base64Encode('admin:123'));\n\t\t\t},* /\n\t\t\t//username: 'admin',\n\t\t\t//password: '123',\n\t\t\theaders: { \"Authorization\": util.getHTTPAuthString() },\n\t\t\tsuccess: function(data){},\n\t\t\terror: function(){},\n\t\t\tcomplete: function(){},\n\t\t\tdataType: 'json'\n\t\t})/ *.always(function(){\n\t\t\tconsole.log('always');\n\t\t})* /.fail(function(){\n\t\t\t//Instruct dispatcher to tell all stores that a call list refresh has failed\n\t\t\tDispatcher.dispatch({\n\t\t\t\tactionType: Actions.CALLS_REFRESH,\n\t\t\t\tactionStatus: Status.ERROR,\n\t\t\t\tcallDate: callDate\n\t\t\t});\n\t\t}).done(function(data){\n\t\t\tif(data.status){\n\t\t\t\tlet callsData = _.indexBy(data.results.stores, 'store_id'); //key on customer ID (we only have need for 'stores' node currently)\n\t\t\t\t\n\t\t\t\t//Instruct dispatcher to tell all stores that a call list refresh has completed\n\t\t\t\tDispatcher.dispatch({\n\t\t\t\t\tactionType: Actions.CALLS_REFRESH,\n\t\t\t\t\tactionStatus: Status.OK,\n\t\t\t\t\tcallDate: callDate,\n\t\t\t\t\tcallsData: callsData\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tlet arrCallCustomerIDs = _.keysIn(callsData);\n\t\t\t\t\n\t\t\t\t//[We need to initiate these follow-up actions here, as we can't initiate them in the view, while technically the previous dispatch is running]\n\t\t\t\t//First we refresh any customer sales data for these call customers (only when we have call customers)\n\t\t\t\t//[NOTE: This sales refresh call would need to be removed in the non-sales-module version of this app]\n\t\t\t\tSalesActions.refreshCustomersAndSalesData(arrCallCustomerIDs).always(function(){\n\t\t\t\t\tif(blnRefreshAdminAudits){\n\t\t\t\t\t\t//Second we refresh the admin audits data for these call customers \n\t\t\t\t\t\tAuditActions.refreshAdminAudits(arrCallCustomerIDs);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}else{\n\t\t\t\t//For now, while the API returns a failure when there are no calls for the day,\n\t\t\t\t//we put this check in to avoid a user error message and allow the list to be cleared\n\t\t\t\t//[Remove this if/when API response changes]\n\t\t\t\tif(data.error.substr(0, 45) == 'The user is not scheduled to visit any stores'){\n\t\t\t\t\t//Instruct dispatcher to tell all stores that a call list refresh has completed\n\t\t\t\t\tDispatcher.dispatch({\n\t\t\t\t\t\tactionType: Actions.CALLS_REFRESH,\n\t\t\t\t\t\tactionStatus: Status.OK,\n\t\t\t\t\t\tcallDate: callDate,\n\t\t\t\t\t\tcallsData: {}\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\tif(blnRefreshAdminAudits){\n\t\t\t\t\t\t//We need to initiate this follow-up action here, as we can't initiate this in the view, while technically the previous dispatch is running\n\t\t\t\t\t\t//We perform the admin audits refresh here even though we have an empty call list, in case it needs to do anything (e.g. cleanup). \n\t\t\t\t\t\tAuditActions.refreshAdminAudits();\n\t\t\t\t\t}\n\t\t\t\t\n\t\t\t\t}else{\n\t\t\t\t\t//Instruct dispatcher to tell all stores that a call list refresh has failed\n\t\t\t\t\tDispatcher.dispatch({\n\t\t\t\t\t\tactionType: Actions.CALLS_REFRESH,\n\t\t\t\t\t\tactionStatus: Status.ERROR,\n\t\t\t\t\t\tcallDate: callDate\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t},*/\n\t\n\t//Removed in favour of more generalised CUSTOMER_ENTER action\n\t/*startCall: function(customerID){\n\t\t//Instruct dispatcher to tell all stores that a call has started (arrival)\n\t\tDispatcher.dispatch({\n\t\t\tactionType: Actions.CALL_START, //CALL_AUDITS_START\n\t\t\tactionStatus: Status.OK,\n\t\t\tcustomerID: customerID,\n\t\t\tentryTimestamp: util.getUnixTime() //(added to provide authoritative single place of origin for this value if more than one store needs to set it) \n\t\t});\n\t},*/\n\t\n\t//Removed in favour of more generalised CUSTOMER_EXIT action\n\t/*completeCall: function(customerID){\n\t\t//Instruct dispatcher to tell all stores that a call (an audit list) has been completed\n\t\tDispatcher.dispatch({\n\t\t\tactionType: Actions.CALL_AUDITS_COMPLETE,\n\t\t\tactionStatus: Status.OK,\n\t\t\tcustomerID: customerID,\n\t\t\texitTimestamp: util.getUnixTime() //(added to provide authoritative single place of origin for this value if more than one store needs to set it) \n\t\t});\n\t\t\n\t\t//Check localStorage usage and warn appropriately (if over 80%)\n\t\t//TODO: possibly move this to a component rather than using toastr here?\n\t\tif(util.getLocalStorageUsage() > 0.8){\n\t\t\ttoastr.warning('Your storage usage is high. Please submit your audits to free up space.');\n\t\t}\n\t},*/\n\t\n\t//Perform a SERVER customer search\n\tsearchCustomersOnServer: function(searchTerm, searchPage, searchPageSize){\n\t\tif(customerSearchAJAXRequest != null){\n\t\t\tcustomerSearchAJAXRequest.abort();\n\t\t}\n\t\t\n\t\tif(searchTerm == null){\n\t\t\tsearchTerm = '';\n\t\t}\n\t\tif(searchPage == null){\n\t\t\tsearchPage = 1;\n\t\t}\n\t\tif(searchPageSize == null){\n\t\t\tsearchPageSize = 5;\n\t\t}\n\t\t\n\t\t//Instruct dispatcher to tell all stores that a customer search is pending (has begun)\n\t\tDispatcher.dispatch({\n\t\t\tactionType: Actions.CUSTOMERS_SEARCH_SERVER,\n\t\t\tactionStatus: Status.PENDING,\n\t\t\tsearchTerm: searchTerm,\n\t\t\tsearchPage: searchPage,\n\t\t\tsearchPageSize: searchPageSize\n\t\t});\n\t\t\n\t\tvar arrSearchTerms = searchTerm.split(\" \");\n\t\tvar strCSVSearchTerms = '';\n\t\tfor (var i = 0; i < arrSearchTerms.length; i++) {\n\t\t\tvar searchToken = arrSearchTerms[i].trim();\n\t\t\tif(searchToken != ''){\n\t\t\t\tstrCSVSearchTerms += (strCSVSearchTerms.length ? ',' : '') + searchToken;\n\t\t\t}\n\t\t}\n\t\t\n\t\tcustomerSearchAJAXRequest = $.ajax({\n\t\t\t//context: this,\n\t\t\turl: util.apiUrl + 'customer/list',\n\t\t\ttype: 'GET',\n\t\t\tdata: {pageSize: searchPageSize, page: searchPage, filters: strCSVSearchTerms},\n\t\t\theaders: { \"Authorization\": util.getHTTPAuthString() },\n\t\t\tdataType: 'json'\n\t\t})/*.always(function(){\n\t\t\tconsole.log('always');\n\t\t})*/.fail(function(){\n\t\t\t//Instruct dispatcher to tell all stores that a customer search has failed\n\t\t\tDispatcher.dispatch({\n\t\t\t\tactionType: Actions.CUSTOMERS_SEARCH_SERVER,\n\t\t\t\tactionStatus: Status.ERROR,\n\t\t\t\tsearchTerm: searchTerm,\n\t\t\t\tsearchPage: searchPage,\n\t\t\t\tsearchPageSize: searchPageSize\n\t\t\t});\n\t\t}).done(function(data){\n\t\t\tif(data.status){\n\t\t\t\t//Instruct dispatcher to tell all stores that a customer search has completed\n\t\t\t\tDispatcher.dispatch({\n\t\t\t\t\tactionType: Actions.CUSTOMERS_SEARCH_SERVER,\n\t\t\t\t\tactionStatus: Status.OK,\n\t\t\t\t\tsearchTerm: searchTerm,\n\t\t\t\t\tsearchPage: parseInt(data.results.currentPage), //OR: searchPage,\n\t\t\t\t\tsearchPageSize: searchPageSize, //OR: parseInt(data.results.pageSize),\n\t\t\t\t\ttotal: parseInt(data.results.totalCount),\n\t\t\t\t\ttotalPages: parseInt(data.results.totalPages),\n\t\t\t\t\tresultsData: (data.results.records != null ? data.results.records : [])\n\t\t\t\t});\n\t\t\t}else{\n\t\t\t\t//Instruct dispatcher to tell all stores that a customer search has failed\n\t\t\t\tDispatcher.dispatch({\n\t\t\t\t\tactionType: Actions.CUSTOMERS_SEARCH_SERVER,\n\t\t\t\t\tactionStatus: Status.ERROR,\n\t\t\t\t\tsearchTerm: searchTerm,\n\t\t\t\t\tsearchPage: searchPage,\n\t\t\t\t\tsearchPageSize: searchPageSize\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t},\n\t\n\trequestCustomer: function(customer){ //customerID\n\t\t//Instruct dispatcher to tell all stores that a customer request is pending (has begun)\n\t\tDispatcher.dispatch({\n\t\t\tactionType: Actions.CUSTOMER_REQUEST,\n\t\t\tactionStatus: Status.PENDING,\n\t\t\tcustomer: customer\n\t\t});\n\t\t\n\t\t//Call cycle date (customer request is always for today)\n\t\t//[Technically a unix timestamp as at start of day]\n\t\tvar callDate = util.getUnixTimeStartOfDay();\n\t\t\n\t\t$.ajax({\n\t\t\t//context: this,\n\t\t\turl: util.apiUrl + 'audit/requestStore',\n\t\t\ttype: 'POST',\n\t\t\tdata: {'user_id': util.getUserID(), 'store_id': customer.id, date: callDate},\n\t\t\theaders: { \"Authorization\": util.getHTTPAuthString() },\n\t\t\tdataType: 'json'\n\t\t}).fail(function(){\n\t\t\t//Instruct dispatcher to tell all stores that a customer request has failed\n\t\t\tDispatcher.dispatch({\n\t\t\t\tactionType: Actions.CUSTOMER_REQUEST,\n\t\t\t\tactionStatus: Status.ERROR,\n\t\t\t\tcustomer: customer\n\t\t\t});\n\t\t}).done(function(data){\n\t\t\tif(data.status){\n\t\t\t\t//Instruct dispatcher to tell all stores that a customer request has completed\n\t\t\t\tDispatcher.dispatch({\n\t\t\t\t\tactionType: Actions.CUSTOMER_REQUEST,\n\t\t\t\t\tactionStatus: Status.OK,\n\t\t\t\t\tcustomer: customer\n\t\t\t\t});\n\t\t\t\ttoastr.success(customer.name + ' added to call list');\n\t\t\t}else{\n\t\t\t\t//We put these checks in for when the API returns certain failures:\n\t\t\t\t//- when there is already an override for this store on this day\n\t\t\t\t//- when this store is already in the call cycle schedule for this day\n\t\t\t\t// to avoid a user error message and provide more info\n\t\t\t\tif((data.error == 'The user is already scheduled to visit this store from a previous override') ||\n\t\t\t\t\t(data.error == 'The user is already scheduled to visit this store from their call cycle')){\n\t\t\t\t\t//Instruct dispatcher to tell all stores that a customer request has completed\n\t\t\t\t\tDispatcher.dispatch({\n\t\t\t\t\t\tactionType: Actions.CUSTOMER_REQUEST,\n\t\t\t\t\t\tactionStatus: Status.OK,\n\t\t\t\t\t\tcustomer: customer,\n\t\t\t\t\t\tinfo: 'This customer is already in your call list'\n\t\t\t\t\t});\n\t\t\t\t\ttoastr.success(customer.name + ' is already in your call list');\n\t\t\t\t}else{\n\t\t\t\t\t//Instruct dispatcher to tell all stores that a customer request has failed\n\t\t\t\t\tDispatcher.dispatch({\n\t\t\t\t\t\tactionType: Actions.CUSTOMER_REQUEST,\n\t\t\t\t\t\tactionStatus: Status.ERROR,\n\t\t\t\t\t\tcustomer: customer\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t},\n\t\n\t//Submit the prepared audit answer data AND any customer visit log data to server\n\tsubmitAuditsAndRelatedData: function(arrCallAudits, arrAdminAudits, arrCustomerVisits){\n\t\tvar submitQueue = [\n\t\t\t//For now, we separate out the call audits and admin audits submissions explicitly in the queue\n\t\t\t{ context: this, action: 'submitAudits', args: [arrCallAudits], completionWeighting: 0.5 },\n\t\t\t{ context: this, action: 'submitAudits', args: [null, arrAdminAudits], completionWeighting: 0.3 },\n\t\t\t{ context: SalesActions, action: 'submitCustomerVisits', args: [arrCustomerVisits], completionWeighting: 0.2 }\n\t\t];\n\t\n\t\treturn util.executeActionQueue(submitQueue, Actions.AUDITS_RELATED_SUBMIT);\n\t},\n\t\n\t//Submit the eligible and prepared audit answer data to server\n\t//[Submission of either or both audit types supported]  \n\tsubmitAudits: function(arrCallAudits, arrAdminAudits){\n\t\tlet returnDeferred = $.Deferred();\n\t\t\n\t\tvar blnCallAudits = (arrCallAudits != null && arrCallAudits.length);\n\t\tvar blnAdminAudits = (arrAdminAudits != null && arrAdminAudits.length);\n\n\t\tif(!blnCallAudits && !blnAdminAudits) {\n\t\t\treturnDeferred.resolve();\n\t\t\treturn returnDeferred;\n\t\t}\n\t\t\n\t\t//Set up current and next audit data lists to process, depending on situation (along with whether admin or call audits)\n\t\tvar blnAdmin = false;\n\t\tvar arrAudits = arrCallAudits;\n\t\tvar arrNextAudits = null;\n\t\t\n\t\tif(blnCallAudits && blnAdminAudits){ //both\n\t\t\tarrNextAudits = arrAdminAudits;\n\t\t}else if (blnAdminAudits){ //admin only\n\t\t\tblnAdmin = true;\n\t\t\tarrAudits = arrAdminAudits;\n\t\t}\n\t\t\n\t\t//Instruct dispatcher to tell all stores that audits submission is pending (has begun)\n\t\tutil.dispatch({\n\t\t\tactionType: Actions.AUDITS_SUBMIT,\n\t\t\tactionStatus: Status.PENDING,\n\t\t\tauditsType: (blnAdmin ? AuditTypes.ADMIN : AuditTypes.CALL)\n\t\t});\n\t\t\n\t\t//Don't need to make a local copy of array for processing \n\t\t//(i.e. can mutate the arrAudits array - it isn't a reference to any internal storage belonging to a store)\n\t\t\n\t\t//For now, let's submit one after the other (we can investigate if/how many parallel AJAX submissions might be feasible)\n\n\t\tvar blnAllSuccessful = true;\n\t\tvar blnAllUnsuccessful = true;\n\t\tvar arrSubmittedIDs = {};\n\t\tvar arrFailedIDs = {};\n\t\t\n\t\tfunction submitAudit(audit){\n\t\t\t$.ajax({\n\t\t\t\t//context: this,\n\t\t\t\turl: util.apiUrl + (blnAdmin ? 'audit/saveAdminAuditAnswers' : 'audit/saveAuditAnswers'),\n\t\t\t\ttype: 'POST',\n\t\t\t\tdata: {'entry': audit.entry, 'exit': audit.exit, 'audit_answers': JSON.stringify(audit.audit_answers)}, //(entry/exit timestamps not technically required for admin audits)\n\t\t\t\theaders: { \"Authorization\": util.getHTTPAuthString() },\n\t\t\t\tdataType: 'json'\n\t\t\t}).fail(function(){\n\t\t\t\tblnAllSuccessful = false;\n\t\t\t\t\n\t\t\t\t//Add this date, customer and audit ID as UNsuccessfully submitted\n\t\t\t\tif(!arrFailedIDs[audit.call_date]){\n\t\t\t\t\tarrFailedIDs[audit.call_date] = {};\n\t\t\t\t}\n\t\t\t\tif(!arrFailedIDs[audit.call_date][audit.customer_id]){\n\t\t\t\t\tarrFailedIDs[audit.call_date][audit.customer_id] = [];\n\t\t\t\t}\n\t\t\t\tarrFailedIDs[audit.call_date][audit.customer_id].push(audit.audit_answers.audit_id + (blnAdmin ? '-' + audit.audit_idx : ''));\n\t\t\t}).done(function(data){\n\t\t\t\tif(data.status){\n\t\t\t\t\tblnAllUnsuccessful = false;\n\t\t\t\t\t\n\t\t\t\t\t//Add this date, customer and audit ID as successfully submitted\n\t\t\t\t\tif(!arrSubmittedIDs[audit.call_date]){\n\t\t\t\t\t\tarrSubmittedIDs[audit.call_date] = {};\n\t\t\t\t\t}\n\t\t\t\t\tif(!arrSubmittedIDs[audit.call_date][audit.customer_id]){\n\t\t\t\t\t\tarrSubmittedIDs[audit.call_date][audit.customer_id] = [];\n\t\t\t\t\t}\n\t\t\t\t\tarrSubmittedIDs[audit.call_date][audit.customer_id].push(audit.audit_answers.audit_id + (blnAdmin ? '-' + audit.audit_idx : ''));\n\t\t\t\t}else{\n\t\t\t\t\tblnAllSuccessful = false;\n\t\t\t\t\t\n\t\t\t\t\t//Add this date, customer and audit ID as UNsuccessfully submitted\n\t\t\t\t\tif(!arrFailedIDs[audit.call_date]){\n\t\t\t\t\t\tarrFailedIDs[audit.call_date] = {};\n\t\t\t\t\t}\n\t\t\t\t\tif(!arrFailedIDs[audit.call_date][audit.customer_id]){\n\t\t\t\t\t\tarrFailedIDs[audit.call_date][audit.customer_id] = [];\n\t\t\t\t\t}\n\t\t\t\t\tarrFailedIDs[audit.call_date][audit.customer_id].push(audit.audit_answers.audit_id + (blnAdmin ? '-' + audit.audit_idx : ''));\n\t\t\t\t}\n\t\t\t}).always(function(){\n\t\t\t\t//We still have audits to process\n\t\t\t\tif(arrAudits.length > 0){\n\t\t\t\t\t//Attempt to submit the next one\n\t\t\t\t\tsubmitAudit(arrAudits.shift());\n\t\t\t\t\t\n\t\t\t\t//We've processed all audits\n\t\t\t\t}else{\n\t\t\t\t\tlet actionStatus = (blnAllSuccessful ? Status.OK : (blnAllUnsuccessful ? Status.ERROR : Status.PARTIAL));\n\t\t\t\t\t\t\n\t\t\t\t\t//Instruct dispatcher to tell all stores that audits submission has either completed successfully,\n\t\t\t\t\t//or failed in some way (partially or completely)\n\t\t\t\t\tutil.dispatch({\n\t\t\t\t\t\tactionType: Actions.AUDITS_SUBMIT,\n\t\t\t\t\t\tactionStatus: actionStatus,\n\t\t\t\t\t\tauditsType: (blnAdmin ? AuditTypes.ADMIN : AuditTypes.CALL),\n\t\t\t\t\t\tsubmittedIDs: arrSubmittedIDs, //successful customers (calls) and audits, per date\n\t\t\t\t\t\tfailedIDs: arrFailedIDs //UNsuccessful customers (calls) and audits, per date\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\tif(actionStatus == Status.ERROR){\n\t\t\t\t\t\treturnDeferred.reject();\n\t\t\t\t\t}else{\n\t\t\t\t\t\treturnDeferred.resolve({ partial: (actionStatus == Status.PARTIAL) });\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t//Note: We resolve/reject above, as that's how we're using this function when queueing it\n\t\t\t\t\t//(i.e. we're separating out the audits and admin audits submits explicitly in our queue). \n\t\t\t\t\t//However, if this is ever not the case, we should modify to return a deferred object also based on \n\t\t\t\t\t//the combined results of doing our second call to this function below.\n\t\t\t\t\t\n\t\t\t\t\tif(arrNextAudits != null){\n\t\t\t\t\t\t//If we have another audit type (admin) list to submit, set up to process these\n\t\t\t\t\t\t//[We need to do this here, as we can't initiate this in the view, while technically the previous dispatch is running] \n\t\t\t\t\t\tCallActions.submitAudits(null, arrNextAudits);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\t\n\t\t//Submit the first audit\n\t\tsubmitAudit(arrAudits.shift());\n\t\t\n\t\treturn returnDeferred;\n\t},\n\t\n\t//Optional blnRefreshFields param to additionally refresh the customer (custom) field information\n\t//Optional arrAddToOrderIDs param to specify any orders to which this customer should be added \n\t//(in addition to the existing ones that will be updated if they are already associated)\n\trefreshCustomer: function(customerID, blnRefreshFields, arrAddToOrderIDs){\n\t\t//Instruct dispatcher to tell all stores that a customer details refresh is pending (has begun)\n\t\tutil.dispatch({\n\t\t\tactionType: Actions.CUSTOMER_REFRESH,\n\t\t\tactionStatus: Status.PENDING,\n\t\t\tcustomerID: customerID,\n\t\t\taddToOrderIDs: arrAddToOrderIDs\n\t\t});\n\t\t\n\t\t$.ajax({\n\t\t\t//context: this,\n\t\t\turl: util.apiUrl + 'customer/detail',\n\t\t\ttype: 'GET',\n\t\t\tdata: {'id': customerID},\n\t\t\theaders: { \"Authorization\": util.getHTTPAuthString() },\n\t\t\tdataType: 'json'\n\t\t}).fail(function(){\n\t\t\t//Instruct dispatcher to tell all stores that a customer details refresh has failed\n\t\t\t//[For now, let's not worry about also doing the fields refresh in this case - i.e. no partial success opportunity here]\n\t\t\tutil.dispatch({\n\t\t\t\tactionType: Actions.CUSTOMER_REFRESH,\n\t\t\t\tactionStatus: Status.ERROR,\n\t\t\t\tcustomerID: customerID,\n\t\t\t\taddToOrderIDs: arrAddToOrderIDs\n\t\t\t});\n\t\t}).done(function(data){\n\t\t\tif(data.status){\n\t\t\t\t//Successful customer refresh, but we also need to refresh the fields data\n\t\t\t\tif(blnRefreshFields){\n\t\t\t\t\t$.ajax({\n\t\t\t\t\t\t//context: this,\n\t\t\t\t\t\turl: util.apiUrl + 'general/getCustomFields',\n\t\t\t\t\t\ttype: 'GET',\n\t\t\t\t\t\tdata: {'table': 'customer'},\n\t\t\t\t\t\theaders: { \"Authorization\": util.getHTTPAuthString() },\n\t\t\t\t\t\tdataType: 'json'\n\t\t\t\t\t}).fail(function(){\n\t\t\t\t\t\t//Instruct dispatcher to tell all stores that a customer details refresh has partially succeeded (fields refresh failed)\n\t\t\t\t\t\tutil.dispatch({\n\t\t\t\t\t\t\tactionType: Actions.CUSTOMER_REFRESH,\n\t\t\t\t\t\t\tactionStatus: Status.PARTIAL,\n\t\t\t\t\t\t\tcustomerID: customerID,\n\t\t\t\t\t\t\tcustomerData: data.results,\n\t\t\t\t\t\t\taddToOrderIDs: arrAddToOrderIDs\n\t\t\t\t\t\t});\n\t\t\t\t\t}).done(function(fieldsData){\n\t\t\t\t\t\tif(fieldsData.status){\n\t\t\t\t\t\t\t//Instruct dispatcher to tell all stores that a customer details (and fields) refresh has completed\n\t\t\t\t\t\t\tutil.dispatch({\n\t\t\t\t\t\t\t\tactionType: Actions.CUSTOMER_REFRESH,\n\t\t\t\t\t\t\t\tactionStatus: Status.OK,\n\t\t\t\t\t\t\t\tcustomerID: customerID,\n\t\t\t\t\t\t\t\tcustomerData: data.results,\n\t\t\t\t\t\t\t\tcustomerFieldData: fieldsData.results,\n\t\t\t\t\t\t\t\taddToOrderIDs: arrAddToOrderIDs\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t//Instruct dispatcher to tell all stores that a customer details refresh has partially succeeded (fields refresh failed)\n\t\t\t\t\t\t\tutil.dispatch({\n\t\t\t\t\t\t\t\tactionType: Actions.CUSTOMER_REFRESH,\n\t\t\t\t\t\t\t\tactionStatus: Status.PARTIAL,\n\t\t\t\t\t\t\t\tcustomerID: customerID,\n\t\t\t\t\t\t\t\tcustomerData: data.results,\n\t\t\t\t\t\t\t\taddToOrderIDs: arrAddToOrderIDs\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t}else{\n\t\t\t\t\t//Instruct dispatcher to tell all stores that a customer details refresh has succeeded\n\t\t\t\t\tutil.dispatch({\n\t\t\t\t\t\tactionType: Actions.CUSTOMER_REFRESH,\n\t\t\t\t\t\tactionStatus: Status.OK,\n\t\t\t\t\t\tcustomerID: customerID,\n\t\t\t\t\t\tcustomerData: data.results,\n\t\t\t\t\t\taddToOrderIDs: arrAddToOrderIDs\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}else{\n\t\t\t\t//Instruct dispatcher to tell all stores that a customer details refresh has failed\n\t\t\t\t//[For now, let's not worry about also doing the fields refresh in this case - i.e. no partial success opportunity here]\n\t\t\t\tutil.dispatch({\n\t\t\t\t\tactionType: Actions.CUSTOMER_REFRESH,\n\t\t\t\t\tactionStatus: Status.ERROR,\n\t\t\t\t\tcustomerID: customerID,\n\t\t\t\t\taddToOrderIDs: arrAddToOrderIDs\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t},\n\t\n\taddCustomerComment: function(customerID, comment){\n\t\t//Instruct dispatcher to tell all stores that a customer comment addition is pending (has begun)\n\t\tDispatcher.dispatch({\n\t\t\tactionType: Actions.CUSTOMER_ADD_COMMENT,\n\t\t\tactionStatus: Status.PENDING,\n\t\t\tcustomerID: customerID,\n\t\t\tcomment: comment\n\t\t});\n\t\t\n\t\t$.ajax({\n\t\t\tcontext: this, //(For refreshCustomer() call below to have the correct CallActions context)\n\t\t\turl: util.apiUrl + 'customer/addComment',\n\t\t\ttype: 'POST',\n\t\t\tdata: {'customer_id': customerID, 'comment': comment, 'date': util.getUnixTime()},\n\t\t\theaders: { \"Authorization\": util.getHTTPAuthString() },\n\t\t\tdataType: 'json'\n\t\t}).fail(function(){\n\t\t\t//Instruct dispatcher to tell all stores that a customer comment addition has failed\n\t\t\tDispatcher.dispatch({\n\t\t\t\tactionType: Actions.CUSTOMER_ADD_COMMENT,\n\t\t\t\tactionStatus: Status.ERROR,\n\t\t\t\tcustomerID: customerID,\n\t\t\t\tcomment: comment\n\t\t\t});\n\t\t}).done(function(data){\n\t\t\tif(data.status){\n\t\t\t\t//Instruct dispatcher to tell all stores that a customer comment addition has completed\n\t\t\t\tDispatcher.dispatch({\n\t\t\t\t\tactionType: Actions.CUSTOMER_ADD_COMMENT,\n\t\t\t\t\tactionStatus: Status.OK,\n\t\t\t\t\tcustomerID: customerID,\n\t\t\t\t\tcomment: comment\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\t//We need to do this here, as we can't initiate this in the view, while technically the previous dispatch is running \n\t\t\t\tthis.refreshCustomer(customerID);\n\t\t\t}else{\n\t\t\t\t//Instruct dispatcher to tell all stores that a customer comment addition has failed\n\t\t\t\tDispatcher.dispatch({\n\t\t\t\t\tactionType: Actions.CUSTOMER_ADD_COMMENT,\n\t\t\t\t\tactionStatus: Status.ERROR,\n\t\t\t\t\tcustomerID: customerID,\n\t\t\t\t\tcomment: comment\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t},\n\t\n\t//Update the edited details for this customer in storage\n\tsaveCustomerDetailsEdit: function(customerID, customerEdits){\n\t\t//Instruct dispatcher to tell all stores that a customer details edit has been saved\n\t\tDispatcher.dispatch({\n\t\t\tactionType: Actions.CUSTOMER_DETAILS_EDIT_SAVE,\n\t\t\tactionStatus: Status.OK,\n\t\t\tcustomerID: customerID,\n\t\t\tcustomerDetailsEditData: customerEdits\n\t\t});\n\t},\n\t\n\t//Finish the customer details edit process (reducing storage of any edits for this customer down to only actual field changes)\n\tcompleteCustomerDetailsEdit: function(customerID, customerEdits){\n\t\t//Instruct dispatcher to tell all stores that a customer details edit has been completed\n\t\tDispatcher.dispatch({\n\t\t\tactionType: Actions.CUSTOMER_DETAILS_EDIT_COMPLETE,\n\t\t\tactionStatus: Status.OK,\n\t\t\tcustomerID: customerID,\n\t\t\tcustomerDetailsEditData: customerEdits\n\t\t});\n\t},\n\t\n\t//Cancel the customer details edit process (removing any details edits for this customer from storage)\n\tcancelCustomerDetailsEdit: function(customerID){\n\t\t//Instruct dispatcher to tell all stores that a customer details edit has been cancelled\n\t\tDispatcher.dispatch({\n\t\t\tactionType: Actions.CUSTOMER_DETAILS_EDIT_CANCEL,\n\t\t\tactionStatus: Status.OK,\n\t\t\tcustomerID: customerID\n\t\t});\n\t},\n\t\n\t//Add a new location to the edited locations for this customer in storage\n\taddCustomerLocation: function(customerID){\n\t\t//Instruct dispatcher to tell all stores that a customer location addition has been saved\n\t\tDispatcher.dispatch({\n\t\t\tactionType: Actions.CUSTOMER_LOCATIONS_EDIT_ADD,\n\t\t\tactionStatus: Status.OK,\n\t\t\tcustomerID: customerID\n\t\t});\n\t},\n\t\n\t//Update the edited locations for this customer in storage\n\tsaveCustomerLocationsEdit: function(customerID, customerEdits, lastEditedID){\n\t\t//Instruct dispatcher to tell all stores that a customer locations edit has been saved\n\t\tDispatcher.dispatch({\n\t\t\tactionType: Actions.CUSTOMER_LOCATIONS_EDIT_SAVE,\n\t\t\tactionStatus: Status.OK,\n\t\t\tcustomerID: customerID,\n\t\t\tcustomerLocationsEditData: customerEdits,\n\t\t\tlastEditedLocationID: (lastEditedID != null ? lastEditedID : null)\n\t\t});\n\t},\n\t\n\t//Finish the customer locations edit process (reducing storage of any edits for this customer down to only actual field changes)\n\tcompleteCustomerLocationsEdit: function(customerID, customerEdits){ //, lastEditedID){\n\t\t//Instruct dispatcher to tell all stores that a customer locations edit has been completed\n\t\tDispatcher.dispatch({\n\t\t\tactionType: Actions.CUSTOMER_LOCATIONS_EDIT_COMPLETE,\n\t\t\tactionStatus: Status.OK,\n\t\t\tcustomerID: customerID,\n\t\t\tcustomerLocationsEditData: customerEdits\n\t\t\t//lastEditedLocationID: (lastEditedID != null ? lastEditedID : null)\n\t\t});\n\t},\n\t\n\t//Cancel the customer locations edit process (removing any locations edits for this customer from storage)\n\tcancelCustomerLocationsEdit: function(customerID){\n\t\t//Instruct dispatcher to tell all stores that a customer locations edit has been cancelled\n\t\tDispatcher.dispatch({\n\t\t\tactionType: Actions.CUSTOMER_LOCATIONS_EDIT_CANCEL,\n\t\t\tactionStatus: Status.OK,\n\t\t\tcustomerID: customerID\n\t\t});\n\t},\n\t\n\t//Add a new contact to the edited contacts for this customer in storage\n\taddCustomerContact: function(customerID){\n\t\t//Instruct dispatcher to tell all stores that a customer contact addition has been saved\n\t\tDispatcher.dispatch({\n\t\t\tactionType: Actions.CUSTOMER_CONTACTS_EDIT_ADD,\n\t\t\tactionStatus: Status.OK,\n\t\t\tcustomerID: customerID\n\t\t});\n\t},\n\t\n\t//Update the edited contacts for this customer in storage\n\tsaveCustomerContactsEdit: function(customerID, customerEdits, lastEditedID){\n\t\t//Instruct dispatcher to tell all stores that a customer contacts edit has been saved\n\t\tDispatcher.dispatch({\n\t\t\tactionType: Actions.CUSTOMER_CONTACTS_EDIT_SAVE,\n\t\t\tactionStatus: Status.OK,\n\t\t\tcustomerID: customerID,\n\t\t\tcustomerContactsEditData: customerEdits,\n\t\t\tlastEditedContactID: (lastEditedID != null ? lastEditedID : null)\n\t\t});\n\t},\n\t\n\t//Finish the customer contacts edit process (reducing storage of any edits for this customer down to only actual field changes)\n\tcompleteCustomerContactsEdit: function(customerID, customerEdits){ //, lastEditedID){\n\t\t//Instruct dispatcher to tell all stores that a customer contacts edit has been completed\n\t\tDispatcher.dispatch({\n\t\t\tactionType: Actions.CUSTOMER_CONTACTS_EDIT_COMPLETE,\n\t\t\tactionStatus: Status.OK,\n\t\t\tcustomerID: customerID,\n\t\t\tcustomerContactsEditData: customerEdits\n\t\t\t//lastEditedContactID: (lastEditedID != null ? lastEditedID : null)\n\t\t});\n\t},\n\t\n\t//Cancel the customer contacts edit process (removing any contacts edits for this customer from storage)\n\tcancelCustomerContactsEdit: function(customerID){\n\t\t//Instruct dispatcher to tell all stores that a customer contacts edit has been cancelled\n\t\tDispatcher.dispatch({\n\t\t\tactionType: Actions.CUSTOMER_CONTACTS_EDIT_CANCEL,\n\t\t\tactionStatus: Status.OK,\n\t\t\tcustomerID: customerID\n\t\t});\n\t},\n\t\n\t//Cancel the whole customer edit process (removing the edit record from storage)\n\t//[Note: this is currently only used for cancelling the customer creation process]\n\tcancelCustomerEdit: function(customerID){\n\t\t//Instruct dispatcher to tell all stores that a customer edit has been cancelled\n\t\tDispatcher.dispatch({\n\t\t\tactionType: Actions.CUSTOMER_EDIT_CANCEL,\n\t\t\tactionStatus: Status.OK,\n\t\t\tcustomerID: customerID\n\t\t});\n\t},\n\t\n\t//Submit ALL edits for a customer to server (details and/or locations and/or contacts)\n\t//Optionally refresh the customer record afterwards (from server)\n\tsubmitCustomerEdits: function(customerID, customerEdits, blnRefreshCustomer){\n\t\tif(_.isEmpty(customerEdits) || (_.isEmpty(customerEdits.details) && _.isEmpty(customerEdits.locations) && _.isEmpty(customerEdits.contacts)) ){\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t//Instruct dispatcher to tell all stores that a customer edits submission is pending (has begun)\n\t\tDispatcher.dispatch({\n\t\t\tactionType: Actions.CUSTOMER_EDITS_SUBMIT,\n\t\t\tactionStatus: Status.PENDING,\n\t\t\tcustomerID: customerID\n\t\t});\n\t\t\n\t\tif(blnRefreshCustomer == null){\n\t\t\tblnRefreshCustomer = true; //default to true\n\t\t}\n\t\t\n\t\tlet submitQueue = [];\n\t\t\n\t\tif(!_.isEmpty(customerEdits.details)){\n\t\t\tsubmitQueue.push({ action: 'submitCustomerDetailsEdits', args: [customerID, customerEdits.details] });\n\t\t}\n\t\tif(!_.isEmpty(customerEdits.locations)){\n\t\t\tsubmitQueue.push({ action: 'submitCustomerLocationsEdits', args: [customerID, customerEdits.locations] });\n\t\t}\n\t\tif(!_.isEmpty(customerEdits.contacts)){\n\t\t\tsubmitQueue.push({ action: 'submitCustomerContactsEdits', args: [customerID, customerEdits.contacts] });\n\t\t}\n\t\t\n\t\t//Whether we're adding a new customer or updating an existing customer\n\t\tlet blnAdd = util.isLocalID(customerID);\n\t\tlet newCustomerID = null;\n\n\t\tlet blnAllSuccessful = true;\n\t\tlet blnAllUnsuccessful = true;\n\t\t\n\t\tlet submitEntity = function(queueItem){\n\t\t\t//Add to the arguments the remote ID belonging to a newly created customer, if appropriate\n\t\t\tif(blnAdd && newCustomerID != null && newCustomerID > 0){\n\t\t\t\tqueueItem.args.push(newCustomerID);\n\t\t\t}\n\t\t\t\n\t\t\tthis[queueItem.action].apply(this, queueItem.args).done(function(blnPartial, newRemoteCustomerID){\n\t\t\t\tblnAllUnsuccessful = false;\n\t\t\t\tif(blnPartial){ //if partial qualifier, also ensure total success not recorded\n\t\t\t\t\tblnAllSuccessful = false;\n\t\t\t\t}\n\t\t\t\t//If a customer has been created on server, record this ID for subsequent use\n\t\t\t\tif(queueItem.action == 'submitCustomerDetailsEdits' && blnAdd && newRemoteCustomerID != null && newRemoteCustomerID > 0){\n\t\t\t\t\tnewCustomerID = newRemoteCustomerID;\n\t\t\t\t}\n\t\t\t}).fail(function(blnPartial){\n\t\t\t\tblnAllSuccessful = false;\n\t\t\t\tif(blnPartial){ //if partial qualifier, also ensure total failure not recorded\n\t\t\t\t\tblnAllUnsuccessful = false;\n\t\t\t\t}\n\t\t\t\t//If customer creation failed on server, don't proceed with the related record additions\n\t\t\t\tif(queueItem.action == 'submitCustomerDetailsEdits' && blnAdd){\n\t\t\t\t\tsubmitQueue = [];\n\t\t\t\t}\n\t\t\t}).always(function(){\n\t\t\t\t//We still have data to submit\n\t\t\t\tif(submitQueue.length > 0){\n\t\t\t\t\t//Execute the next submission in queue\n\t\t\t\t\tsubmitEntity(submitQueue.shift());\n\t\t\t\t\t\n\t\t\t\t//We've processed all items\n\t\t\t\t}else{\n\t\t\t\t\tlet actionStatus = (blnAllSuccessful ? Status.OK : (blnAllUnsuccessful ? Status.ERROR : Status.PARTIAL));\n\t\t\t\t\t\n\t\t\t\t\t//Instruct dispatcher to tell all stores that a customer edits submission has completed\n\t\t\t\t\tDispatcher.dispatch({\n\t\t\t\t\t\tactionType: Actions.CUSTOMER_EDITS_SUBMIT,\n\t\t\t\t\t\tactionStatus: actionStatus,\n\t\t\t\t\t\tcustomerID: customerID,\n\t\t\t\t\t\tnewCustomerID: newCustomerID //[not actually used here currently]\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\t//Additionally server-refresh the customer, if required and if edits submissions were at least partially successful\n\t\t\t\t\tif(blnRefreshCustomer && actionStatus != Status.ERROR){\n\t\t\t\t\t\t//We need to do this here, as we can't initiate this in the view, while technically the previous dispatch is running\n\t\t\t\t\t\t//[Use the remote ID belonging to the newly created customer, if applicable] \n\t\t\t\t\t\tCallActions.refreshCustomer((blnAdd && newCustomerID != null && newCustomerID > 0) ? newCustomerID : customerID);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}.bind(this);\n\t\t\n\t\t//Execute the first entity refresh\n\t\tsubmitEntity(submitQueue.shift());\n\t},\n\t\n\t//Submit a customer's details edits to server\n\t//[Sub action (but individually callable)]\n\tsubmitCustomerDetailsEdits: function(customerID, customerEdits){\n\t\tlet returnDeferred = $.Deferred();\n\t\t\n\t\t//Whether we're adding a new customer or updating an existing customer\n\t\tlet blnAdd = (util.isLocalID(customerID));\n\t\n\t\tif(_.isEmpty(customerEdits)){\n\t\t\t//Instruct dispatcher to tell all stores that a customer details edits submission has succeeded (if updating) or failed (if adding)\n\t\t\tDispatcher.dispatch({\n\t\t\t\tactionType: Actions.CUSTOMER_EDITS_SUBMIT,\n\t\t\t\tactionStatus: Status.PENDING,\n\t\t\t\tcustomerID: customerID,\n\t\t\t\tentity: SubmissionEntities.CUSTOMER_DETAILS,\n\t\t\t\tentityStatus: blnAdd ? Status.ERROR : Status.OK\n\t\t\t});\n\t\t\tif(blnAdd){\n\t\t\t\treturnDeferred.reject();\n\t\t\t}else{\n\t\t\t\treturnDeferred.resolve();\n\t\t\t}\n\t\t\n\t\t}else{\n\t\t\t\n\t\t\t//Instruct dispatcher to tell all stores that customer details edits submission is pending (has begun)\n\t\t\tDispatcher.dispatch({\n\t\t\t\tactionType: Actions.CUSTOMER_EDITS_SUBMIT,\n\t\t\t\tactionStatus: Status.PENDING,\n\t\t\t\tcustomerID: customerID,\n\t\t\t\tentity: SubmissionEntities.CUSTOMER_DETAILS,\n\t\t\t\tentityStatus: Status.PENDING\n\t\t\t});\n\t\t\t\n\t\t\tif(!blnAdd){\n\t\t\t\tcustomerEdits.id = customerID;\n\t\t\t}\n\t\t\t\n\t\t\t$.ajax({\n\t\t\t\t//context: this,\n\t\t\t\turl: util.apiUrl + (blnAdd ? 'customer/add' : 'customer/update'),\n\t\t\t\ttype: 'POST',\n\t\t\t\tdata: customerEdits,\n\t\t\t\theaders: { \"Authorization\": util.getHTTPAuthString() },\n\t\t\t\tdataType: 'json'\n\t\t\t}).fail(function(){\n\t\t\t\t//Instruct dispatcher to tell all stores that customer details edits submission has failed\n\t\t\t\tDispatcher.dispatch({\n\t\t\t\t\tactionType: Actions.CUSTOMER_EDITS_SUBMIT,\n\t\t\t\t\tactionStatus: Status.PENDING,\n\t\t\t\t\tcustomerID: customerID,\n\t\t\t\t\tentity: SubmissionEntities.CUSTOMER_DETAILS,\n\t\t\t\t\tentityStatus: Status.ERROR\n\t\t\t\t});\n\t\t\t\treturnDeferred.reject();\n\t\t\t\t\n\t\t\t}).done(function(data){\n\t\t\t\tif(data.status){\n\t\t\t\t\tlet newCustomerID = blnAdd ? data.results.id : null;\n\t\t\t\t\t\n\t\t\t\t\t//Instruct dispatcher to tell all stores that customer details edits submission has succeeded\n\t\t\t\t\tDispatcher.dispatch({\n\t\t\t\t\t\tactionType: Actions.CUSTOMER_EDITS_SUBMIT,\n\t\t\t\t\t\tactionStatus: Status.PENDING,\n\t\t\t\t\t\tcustomerID: customerID,\n\t\t\t\t\t\tnewCustomerID: newCustomerID,\n\t\t\t\t\t\tentity: SubmissionEntities.CUSTOMER_DETAILS,\n\t\t\t\t\t\tentityStatus: Status.OK\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\treturnDeferred.resolve(false, newCustomerID); //on successful add, additionally supply the new customer ID from server\n\t\t\t\t\t\n\t\t\t\t}else{\n\t\t\t\t\t//Instruct dispatcher to tell all stores that customer details edits submission has failed\n\t\t\t\t\tDispatcher.dispatch({\n\t\t\t\t\t\tactionType: Actions.CUSTOMER_EDITS_SUBMIT,\n\t\t\t\t\t\tactionStatus: Status.PENDING,\n\t\t\t\t\t\tcustomerID: customerID,\n\t\t\t\t\t\tentity: SubmissionEntities.CUSTOMER_DETAILS,\n\t\t\t\t\t\tentityStatus: Status.ERROR\n\t\t\t\t\t});\n\t\t\t\t\treturnDeferred.reject();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\t\n\t\treturn returnDeferred;\n\t},\n\t\n\t//Submit a customer's locations edits to server\n\t//[Sub action (but individually callable)]\n\t//[newCustomerID is an optional remote ID belonging to a newly created customer, whereas customerID refers to local edits, as per normal]\n\tsubmitCustomerLocationsEdits: function(customerID, customerEdits, newCustomerID){\n\t\tlet returnDeferred = $.Deferred();\n\t\n\t\tif(_.isEmpty(customerEdits)){\n\t\t\t//Instruct dispatcher to tell all stores that a customer locations edits submission has succeeded\n\t\t\tDispatcher.dispatch({\n\t\t\t\tactionType: Actions.CUSTOMER_EDITS_SUBMIT,\n\t\t\t\tactionStatus: Status.PENDING,\n\t\t\t\tcustomerID: customerID,\n\t\t\t\tentity: SubmissionEntities.CUSTOMER_LOCATIONS,\n\t\t\t\tentityStatus: Status.OK\n\t\t\t});\n\t\t\treturnDeferred.resolve();\n\t\t\n\t\t}else{\n\t\t\t\n\t\t\t//Instruct dispatcher to tell all stores that customer locations edits submission is pending (has begun)\n\t\t\tDispatcher.dispatch({\n\t\t\t\tactionType: Actions.CUSTOMER_EDITS_SUBMIT,\n\t\t\t\tactionStatus: Status.PENDING,\n\t\t\t\tcustomerID: customerID,\n\t\t\t\tentity: SubmissionEntities.CUSTOMER_LOCATIONS,\n\t\t\t\tentityStatus: Status.PENDING\n\t\t\t});\n\t\t\t\n\t\t\tlet arrLocationIDs = _.keysIn(customerEdits);\n\t\t\tvar blnAllSuccessful = true;\n\t\t\tvar blnAllUnsuccessful = true;\n\t\t\tvar arrSubmittedIDs = [];\n\t\t\tvar arrFailedIDs = [];\n\t\t\t\n\t\t\tlet submitLocationEdit = function(locationID){\n\t\t\t\t//Whether we're adding a new location or updating an existing location\n\t\t\t\tlet blnAdd = (util.isLocalID(locationID));\n\t\t\t\t\n\t\t\t\tif(blnAdd){\n\t\t\t\t\tcustomerEdits[locationID].customer_id = (newCustomerID != null && newCustomerID > 0) ? newCustomerID : customerID;\n\t\t\t\t}else{\n\t\t\t\t\tcustomerEdits[locationID].id = locationID;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t$.ajax({\n\t\t\t\t\t//context: this,\n\t\t\t\t\turl: util.apiUrl + (blnAdd ? 'customer/addAddress' : 'customer/updateAddress'),\n\t\t\t\t\ttype: 'POST',\n\t\t\t\t\tdata: customerEdits[locationID],\n\t\t\t\t\theaders: { \"Authorization\": util.getHTTPAuthString() },\n\t\t\t\t\tdataType: 'json'\n\t\t\t\t}).fail(function(){\n\t\t\t\t\t//Instruct dispatcher to tell all stores that customer locations edits submission has failed\n\t\t\t\t\t/*Dispatcher.dispatch({\n\t\t\t\t\t\tactionType: Actions.CUSTOMER_EDITS_SUBMIT,\n\t\t\t\t\t\tactionStatus: Status.PENDING,\n\t\t\t\t\t\tcustomerID: customerID,\n\t\t\t\t\t\tentity: SubmissionEntities.CUSTOMER_LOCATIONS,\n\t\t\t\t\t\tentityStatus: Status.PENDING,\n\t\t\t\t\t\titemStatus: Status.ERROR,\n\t\t\t\t\t\titemID: locationID\n\t\t\t\t\t});*/\n\t\t\t\t\tblnAllSuccessful = false;\n\t\t\t\t\t//Add this location as UNsuccessfully submitted\n\t\t\t\t\tarrFailedIDs.push(locationID);\n\t\t\t\t\t\n\t\t\t\t}).done(function(data){\n\t\t\t\t\tif(data.status){\n\t\t\t\t\t\t//Instruct dispatcher to tell all stores that customer locations edits submission has succeeded\n\t\t\t\t\t\t/*Dispatcher.dispatch({\n\t\t\t\t\t\t\tactionType: Actions.CUSTOMER_EDITS_SUBMIT,\n\t\t\t\t\t\t\tactionStatus: Status.PENDING,\n\t\t\t\t\t\t\tcustomerID: customerID,\n\t\t\t\t\t\t\tentity: SubmissionEntities.CUSTOMER_LOCATIONS,\n\t\t\t\t\t\t\tentityStatus: Status.PENDING,\n\t\t\t\t\t\t\titemStatus: Status.OK,\n\t\t\t\t\t\t\titemID: locationID\n\t\t\t\t\t\t});*/\n\t\t\t\t\t\tblnAllUnsuccessful = false;\n\t\t\t\t\t\t//Add this location as successfully submitted\n\t\t\t\t\t\tarrSubmittedIDs.push(locationID);\n\t\t\t\t\t\t\n\t\t\t\t\t}else{\n\t\t\t\t\t\t//Instruct dispatcher to tell all stores that customer locations edits submission has failed\n\t\t\t\t\t\t/*Dispatcher.dispatch({\n\t\t\t\t\t\t\tactionType: Actions.CUSTOMER_EDITS_SUBMIT,\n\t\t\t\t\t\t\tactionStatus: Status.PENDING,\n\t\t\t\t\t\t\tcustomerID: customerID,\n\t\t\t\t\t\t\tentity: SubmissionEntities.CUSTOMER_LOCATIONS,\n\t\t\t\t\t\t\tentityStatus: Status.PENDING,\n\t\t\t\t\t\t\titemStatus: Status.ERROR,\n\t\t\t\t\t\t\titemID: locationID\n\t\t\t\t\t\t});*/\n\t\t\t\t\t\tblnAllSuccessful = false;\n\t\t\t\t\t\t//Add this location as UNsuccessfully submitted\n\t\t\t\t\t\tarrFailedIDs.push(locationID);\n\t\t\t\t\t}\n\t\t\t\t}).always(function(){\n\t\t\t\t\t//We still have location edits to submit\n\t\t\t\t\tif(arrLocationIDs.length > 0){\n\t\t\t\t\t\t//Execute the next location edit submission\n\t\t\t\t\t\tsubmitLocationEdit(arrLocationIDs.shift());\n\t\t\t\t\t\t\n\t\t\t\t\t//We've processed all location edits\n\t\t\t\t\t}else{\n\t\t\t\t\t\tlet entityStatus = (blnAllSuccessful ? Status.OK : (blnAllUnsuccessful ? Status.ERROR : Status.PARTIAL));\n\t\t\t\t\t\t\n\t\t\t\t\t\t//Instruct dispatcher to tell all stores that customer locations edits submission has either completed successfully,\n\t\t\t\t\t\t//or failed in some way (partially or completely)\n\t\t\t\t\t\tDispatcher.dispatch({\n\t\t\t\t\t\t\tactionType: Actions.CUSTOMER_EDITS_SUBMIT,\n\t\t\t\t\t\t\tactionStatus: Status.PENDING,\n\t\t\t\t\t\t\tcustomerID: customerID,\n\t\t\t\t\t\t\tentity: SubmissionEntities.CUSTOMER_LOCATIONS,\n\t\t\t\t\t\t\tentityStatus: entityStatus,\n\t\t\t\t\t\t\tsubmittedIDs: arrSubmittedIDs,\n\t\t\t\t\t\t\tfailedIDs: arrFailedIDs\n\t\t\t\t\t\t});\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(entityStatus == Status.ERROR){\n\t\t\t\t\t\t\treturnDeferred.reject();\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t//We pass a 'partial success' flag when resolving the deferred to qualify it \n\t\t\t\t\t\t\t//[and to prevent customerStore cleanup of unsubmitted edits in the partial success case]\n\t\t\t\t\t\t\treturnDeferred.resolve((entityStatus == Status.PARTIAL));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}.bind(this);\n\t\t\t\t\n\t\t\t//Execute the first location edit submission\n\t\t\tsubmitLocationEdit(arrLocationIDs.shift());\n\t\t}\n\t\t\n\t\treturn returnDeferred;\n\t},\n\t\n\t//Submit a customer's contacts edits to server\n\t//[Sub action (but individually callable)]\n\t//[newCustomerID is an optional remote ID belonging to a newly created customer, whereas customerID refers to local edits, as per normal]\n\tsubmitCustomerContactsEdits: function(customerID, customerEdits, newCustomerID){\n\t\tlet returnDeferred = $.Deferred();\n\t\n\t\tif(_.isEmpty(customerEdits)){\n\t\t\t//Instruct dispatcher to tell all stores that a customer contacts edits submission has succeeded\n\t\t\tDispatcher.dispatch({\n\t\t\t\tactionType: Actions.CUSTOMER_EDITS_SUBMIT,\n\t\t\t\tactionStatus: Status.PENDING,\n\t\t\t\tcustomerID: customerID,\n\t\t\t\tentity: SubmissionEntities.CUSTOMER_CONTACTS,\n\t\t\t\tentityStatus: Status.OK\n\t\t\t});\n\t\t\treturnDeferred.resolve();\n\t\t\n\t\t}else{\n\t\t\t\n\t\t\t//Instruct dispatcher to tell all stores that customer contacts edits submission is pending (has begun)\n\t\t\tDispatcher.dispatch({\n\t\t\t\tactionType: Actions.CUSTOMER_EDITS_SUBMIT,\n\t\t\t\tactionStatus: Status.PENDING,\n\t\t\t\tcustomerID: customerID,\n\t\t\t\tentity: SubmissionEntities.CUSTOMER_CONTACTS,\n\t\t\t\tentityStatus: Status.PENDING\n\t\t\t});\n\t\t\t\n\t\t\tlet arrContactIDs = _.keysIn(customerEdits);\n\t\t\tvar blnAllSuccessful = true;\n\t\t\tvar blnAllUnsuccessful = true;\n\t\t\tvar arrSubmittedIDs = [];\n\t\t\tvar arrFailedIDs = [];\n\t\t\t\n\t\t\tlet submitContactEdit = function(contactID){\n\t\t\t\t//Whether we're adding a new contact or updating an existing contact\n\t\t\t\tlet blnAdd = (util.isLocalID(contactID));\n\t\t\t\t\n\t\t\t\tif(blnAdd){\n\t\t\t\t\tcustomerEdits[contactID].customer_id = (newCustomerID != null && newCustomerID > 0) ? newCustomerID : customerID;\n\t\t\t\t}else{\n\t\t\t\t\tcustomerEdits[contactID].id = contactID;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t$.ajax({\n\t\t\t\t\t//context: this,\n\t\t\t\t\turl: util.apiUrl + (blnAdd ? 'customer/addContact' : 'customer/updateContact'),\n\t\t\t\t\ttype: 'POST',\n\t\t\t\t\tdata: customerEdits[contactID],\n\t\t\t\t\theaders: { \"Authorization\": util.getHTTPAuthString() },\n\t\t\t\t\tdataType: 'json'\n\t\t\t\t}).fail(function(){\n\t\t\t\t\t//Instruct dispatcher to tell all stores that customer contacts edits submission has failed\n\t\t\t\t\t/*Dispatcher.dispatch({\n\t\t\t\t\t\tactionType: Actions.CUSTOMER_EDITS_SUBMIT,\n\t\t\t\t\t\tactionStatus: Status.PENDING,\n\t\t\t\t\t\tcustomerID: customerID,\n\t\t\t\t\t\tentity: SubmissionEntities.CUSTOMER_CONTACTS,\n\t\t\t\t\t\tentityStatus: Status.PENDING,\n\t\t\t\t\t\titemStatus: Status.ERROR,\n\t\t\t\t\t\titemID: contactID\n\t\t\t\t\t});*/\n\t\t\t\t\tblnAllSuccessful = false;\n\t\t\t\t\t//Add this contact as UNsuccessfully submitted\n\t\t\t\t\tarrFailedIDs.push(contactID);\n\t\t\t\t\t\n\t\t\t\t}).done(function(data){\n\t\t\t\t\tif(data.status){\n\t\t\t\t\t\t//Instruct dispatcher to tell all stores that customer contacts edits submission has succeeded\n\t\t\t\t\t\t/*Dispatcher.dispatch({\n\t\t\t\t\t\t\tactionType: Actions.CUSTOMER_EDITS_SUBMIT,\n\t\t\t\t\t\t\tactionStatus: Status.PENDING,\n\t\t\t\t\t\t\tcustomerID: customerID,\n\t\t\t\t\t\t\tentity: SubmissionEntities.CUSTOMER_CONTACTS,\n\t\t\t\t\t\t\tentityStatus: Status.PENDING,\n\t\t\t\t\t\t\titemStatus: Status.OK,\n\t\t\t\t\t\t\titemID: contactID\n\t\t\t\t\t\t});*/\n\t\t\t\t\t\tblnAllUnsuccessful = false;\n\t\t\t\t\t\t//Add this contact as successfully submitted\n\t\t\t\t\t\tarrSubmittedIDs.push(contactID);\n\t\t\t\t\t\t\n\t\t\t\t\t}else{\n\t\t\t\t\t\t//Instruct dispatcher to tell all stores that customer contacts edits submission has failed\n\t\t\t\t\t\t/*Dispatcher.dispatch({\n\t\t\t\t\t\t\tactionType: Actions.CUSTOMER_EDITS_SUBMIT,\n\t\t\t\t\t\t\tactionStatus: Status.PENDING,\n\t\t\t\t\t\t\tcustomerID: customerID,\n\t\t\t\t\t\t\tentity: SubmissionEntities.CUSTOMER_CONTACTS,\n\t\t\t\t\t\t\tentityStatus: Status.PENDING,\n\t\t\t\t\t\t\titemStatus: Status.ERROR,\n\t\t\t\t\t\t\titemID: contactID\n\t\t\t\t\t\t});*/\n\t\t\t\t\t\tblnAllSuccessful = false;\n\t\t\t\t\t\t//Add this contact as UNsuccessfully submitted\n\t\t\t\t\t\tarrFailedIDs.push(contactID);\n\t\t\t\t\t}\n\t\t\t\t}).always(function(){\n\t\t\t\t\t//We still have contact edits to submit\n\t\t\t\t\tif(arrContactIDs.length > 0){\n\t\t\t\t\t\t//Execute the next contact edit submission\n\t\t\t\t\t\tsubmitContactEdit(arrContactIDs.shift());\n\t\t\t\t\t\t\n\t\t\t\t\t//We've processed all contact edits\n\t\t\t\t\t}else{\n\t\t\t\t\t\tlet entityStatus = (blnAllSuccessful ? Status.OK : (blnAllUnsuccessful ? Status.ERROR : Status.PARTIAL));\n\t\t\t\t\t\t\n\t\t\t\t\t\t//Instruct dispatcher to tell all stores that customer contacts edits submission has either completed successfully,\n\t\t\t\t\t\t//or failed in some way (partially or completely)\n\t\t\t\t\t\tDispatcher.dispatch({\n\t\t\t\t\t\t\tactionType: Actions.CUSTOMER_EDITS_SUBMIT,\n\t\t\t\t\t\t\tactionStatus: Status.PENDING,\n\t\t\t\t\t\t\tcustomerID: customerID,\n\t\t\t\t\t\t\tentity: SubmissionEntities.CUSTOMER_CONTACTS,\n\t\t\t\t\t\t\tentityStatus: entityStatus,\n\t\t\t\t\t\t\tsubmittedIDs: arrSubmittedIDs,\n\t\t\t\t\t\t\tfailedIDs: arrFailedIDs\n\t\t\t\t\t\t});\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(entityStatus == Status.ERROR){\n\t\t\t\t\t\t\treturnDeferred.reject();\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t//We pass a 'partial success' flag when resolving the deferred to qualify it \n\t\t\t\t\t\t\t//[and to prevent customerStore cleanup of unsubmitted edits in the partial success case]\n\t\t\t\t\t\t\treturnDeferred.resolve((entityStatus == Status.PARTIAL));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}.bind(this);\n\t\t\t\t\n\t\t\t//Execute the first contact edit submission\n\t\t\tsubmitContactEdit(arrContactIDs.shift());\n\t\t}\n\t\t\n\t\treturn returnDeferred;\n\t}\n};\n\nmodule.exports = CallActions;","\"use strict\";\n\nvar Dispatcher = require('../dispatcher/appDispatcher');\nvar Actions = require('../constants/actionTypes');\nvar Status = require('../constants/actionStatuses');\nvar OrderStatuses = require('../constants/orderStatuses');\nvar SalesEntities = require('../constants/salesEntities');\nvar EventEmitter = require('events').EventEmitter;\nvar assign = require('object-assign');\nvar _ = require('lodash');\nvar CHANGE_EVENT = 'change';\nvar util = require('../util.js');\n\n//Order objects keyed on order ID\nvar _orders = {};\n//(Past) order objects keyed on order ID\nvar _pastOrders = {};\n//This is currently used for tracking last past orders refresh timestamp and order IDs to be reattempted next refresh \n//Additional future use: Past order meta data objects keyed on (order) ID?\nvar _pastOrdersMeta = { \n\trefreshed: null,\n\tretryIDs: [] \n};\n\n//payment term objects keyed on payment term ID\nvar _paymentTerms = {};\n//tax class objects keyed on tax class ID\nvar _taxClasses = {};\n//carrier objects keyed on carrier ID\nvar _carriers = {};\n//currency objects keyed on currency ID\nvar _currencies = {};\n\n//Track data state\nvar _status = Status.OK;\n\n//Temporary data (not persistent)\nvar _tempAllOrderIDs = null;\n\nvar OrderStore = assign({}, EventEmitter.prototype, {\n\taddChangeListener: function(callback){ this.on(CHANGE_EVENT, callback); },\n\tremoveChangeListener: function(callback){ this.removeListener(CHANGE_EVENT, callback); },\n\temitChange: function(){ this.emit(CHANGE_EVENT); },\n\t\n\tgetStatus: function(){\n\t\treturn _status;\n\t},\n\t\n\t//Obtain a new unique ID to be used locally\n\t//[only used internally in this store currently]\n\tgetNewID: function(){\n\t\treturn 'l-' + util.uuidv4();\n\t},\n\t\n\t//Obtain a fresh order object, with appropriate meta data defaults\n\t//(Intended to be saved at _orders[orderID])\n\tgetFreshOrderObject: function(providedOrderID){\n\t\t//Obtain default company currency for the fresh object \n\t\t//(later, when we have an associated customer, this could change to a customer-specific currency)\n\t\tlet companyCurrency = util.getCompanyCurrency();\n\t\t\n\t\t//Obtain presets for the 3 'select' fields (that have no empty options available on form)\n\t\tlet defPaymentTerm = this.getDefaultPaymentTerm();\n\t\tlet defPaymentTermID = (defPaymentTerm != null) ? defPaymentTerm.id : null;\n\t\tlet defTaxClass = this.getDefaultTaxClass();\n\t\tlet defTaxClassID = (defTaxClass != null) ? defTaxClass.id : null;\n\t\tlet defCarrier = this.getDefaultCarrier();\n\t\tlet defCarrierID = (defCarrier != null) ? defCarrier.id : null;\n\t\t\n\t\t//ID/hash (unique)\n\t\tlet uniqueOrderID = (providedOrderID != null ? providedOrderID : this.getNewID());\n\t\t\n\t\treturn {\n\t\t\t'id': uniqueOrderID,\n\t\t\t'hash': uniqueOrderID,\n\t\t\t'customer_id': null,\n\t\t\t'customer_name': '',\n\t\t\t'currency_id': companyCurrency.id, //[Not editable by the user]\n\t\t\t'currency_display_name': companyCurrency.name,\n\t\t\t'currency_display_symbol': companyCurrency.symbol,\n\t\t\t'payment_terms_id': defPaymentTermID,\n\t\t\t'carrier_id': defCarrierID, //[could allow to be defaulted on server]\n\t\t\t'po': '', //null, //[optional]\n\t\t\t'expected_date': null, //[optional]\n\t\t\t//'channel': null, //[optional]\n\t\t\t'review': '', //null, //[optional]\n\t\t\t'tax_class_id': defTaxClassID, //[optional, could allow to be defaulted on server]\n\t\t\t//'tax_display': null, //[optional, allow to be defaulted on server for now]\n\t\t\t'billing_location_id': 0, //null, //[optional]\n\t\t\t'shipping_location_id': 0, //null, //[optional]\n\t\t\t'items': [],\n\t\t\t'itemsEdited': false, //[Internal flag for determining whether items have yet been edited (even if all items subsequently removed)]\n/*'items': [\n\t{\n\t\t'product_id': 1\n\t\t'sku': '123', \n\t\t'name': 'My Product', \n\t\t'quantity': 1,\n\t\t'quantity_display': 1,\n\t\t//'uom_id': null //[optional]\n\t\t'is_taxable': true,\n\t\t//tax_class_id: null //[optional, allow to be defaulted on server for now]\n\t\t'price': 0, //[optional override of price per UOM]\n\t\t'price_orig': 0, //[original price per UOM (often calculated by price rules/lists) and used to determine whether price editing/overriding has occurred]\n\t\t'price_display': '0.00',\n\t\t'total': 0, \n\t\t'total_display': '0.00'\n\t}\n],*/\n\t\t\t'subtotal': 0,\n\t\t\t'subtotal_display': '0.00',\n\t\t\t'adjustment': 0, //[TODO: check whether we will use the more advanced adjustment features (fields)]\n\t\t\t'adjustment_display': '0.00',\n\t\t\t'shipping': 0,\n\t\t\t'shipping_display': '0.00',\n\t\t\t'tax': 0,\n\t\t\t'tax_display': '0.00',\n\t\t\t'total': 0,\n\t\t\t'total_display': '0.00',\n\t\t\t'status': OrderStatuses.INCOMPLETE\n\t\t};\n\t},\n\t\n\tgetOrders: function(){\n\t\tvar arrOrders = [];\n\t\t\n\t\tfor (var orderID in _orders){\n\t\t\tif(_orders[orderID] != null){\n\t\t\t\tarrOrders.push(_orders[orderID]);\n\t\t\t}\n\t\t}\n\t\t\n\t\t//Do any necessary sorting here\n\t\t\n\t\treturn arrOrders; \n\t},\n\t\n\tgetOrder: function(orderID){\n\t\t//(place of origin for DISPLAY of fresh order object)\n\t\treturn ((orderID != null) ? _orders[orderID] : this.getFreshOrderObject());\n\t},\n\t\n\tgetPastOrders: function(){\n\t\tvar arrOrders = [];\n\t\t\n\t\tfor (var orderID in _pastOrders){\n\t\t\tif(_pastOrders[orderID] != null){\n\t\t\t\tarrOrders.push(_pastOrders[orderID]);\n\t\t\t}\n\t\t}\n\t\t\n\t\t//Do any necessary sorting here\n\t\t\n\t\treturn arrOrders; \n\t},\n\t\n\tgetPastOrder: function(orderID){\n\t\treturn _pastOrders[orderID];\n\t},\n\t\n\t//Get the unix timestamp of the last past orders refresh (if any)\n\tgetPastOrdersLastRefresh: function(){\n\t\treturn _pastOrdersMeta.refreshed;\n\t},\n\t\n\t//Get the order IDs for past orders that should be reattempted next refresh (if any)\n\tgetPastOrdersRefreshRetryIDs: function(){\n\t\treturn _pastOrdersMeta.retryIDs;\n\t},\n\t\n\t//(Re)Calculate order totals, to ensure integrity\n\t//[Allows us a single authoritative place to do the totalling of the non-editable, dependent/calculated values]\n\tcalculateTotals: function(orderID){ //, blnSkipSubtotalling){\n\t\t//No application for blnSkipSubtotalling anymore - ignore all related code\n\t\t//blnSkipSubtotalling = (blnSkipSubtotalling != null && blnSkipSubtotalling); //defaults to false\n\t\t\n\t\tlet order = _orders[orderID];\n\t\tlet orderTaxClass = this.getTaxClass(order.tax_class_id);\n\t\tlet orderTaxPercent = orderTaxClass != null ? orderTaxClass.percent : 0; //(TODO: confirm default to NO tax instead of VAT) \n\t\t\n\t\torder.subtotal = 0;\n\t\torder.tax = 0;\n\t\t\n\t\tlet j;\n\t\tfor(j = 0; j < order.items.length; j++) {\n\t\t\tif(order.items[j] != null){\n\t\t\t\torder.items[j].total = order.items[j].price * order.items[j].quantity;\n\t\t\t\t\n\t\t\t\tlet formattedCurrency = util.formatCurrencyNumber(order.items[j].total)\n\t\t\t\torder.items[j].total = formattedCurrency.value;\n\t\t\t\torder.items[j].total_display = formattedCurrency.displayValue;\n\t\t\t\t\n\t\t\t\torder.subtotal += order.items[j].total;\n\t\t\t\t\n\t\t\t\tif(order.items[j].is_taxable){\n\t\t\t\t\tlet itemTaxPercent = orderTaxPercent;\n\t\t\t\t\t\n\t\t\t\t\tif(parseInt(order.items[j].tax_class_id) > 0){\n\t\t\t\t\t\tlet itemTaxClass = this.getTaxClass(order.items[j].tax_class_id);\n\t\t\t\t\t\tif(itemTaxClass != null){\n\t\t\t\t\t\t\titemTaxPercent = itemTaxClass.percent;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\torder.tax += (order.items[j].total * (itemTaxPercent / 100));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tlet formattedCurrencySubtotal = util.formatCurrencyNumber(order.subtotal);\n\t\torder.subtotal = formattedCurrencySubtotal.value;\n\t\torder.subtotal_display = formattedCurrencySubtotal.displayValue;\n\t\t\n\t\torder.tax += (order.adjustment * (orderTaxPercent / 100));\n\t\torder.tax += (order.shipping * (orderTaxPercent / 100));\n\t\tlet formattedCurrencyTax = util.formatCurrencyNumber(order.tax);\n\t\torder.tax = formattedCurrencyTax.value;\n\t\torder.tax_display = formattedCurrencyTax.displayValue;\n\t\t\n\t\t//Calculate grand total\n\t\torder.total = order.subtotal + order.adjustment + order.shipping + order.tax;\n\t\tlet formattedCurrencyTotal = util.formatCurrencyNumber(order.total);\n\t\torder.total = formattedCurrencyTotal.value;\n\t\torder.total_display = formattedCurrencyTotal.displayValue;\n\t},\n\t\n\t//Obtain the data for an order, packaged for submission \n\t//[Only used internally currently, hence the assumption of an existing, placed order]\n\tgetOrderSubmission: function(orderID){\n\t\tlet orderSubmission = {\n\t\t\t'id': orderID, //[for internal tracking]\n//--------\n//TEMP MIGRATION CODE (whilst orders potentially exist in local storage without hashes):\t\t\t\n\t\t\t'hash': (_orders[orderID].hash != null ? _orders[orderID].hash : orderID),\n//TO BE REPLACED WITH:\n//\t\t\t'hash': _orders[orderID].hash,\t\t\t\n//--------\t\t\t\n\t\t\t//'isQuote': false, //[this results in quote creation on server ('false' string), so rather allow to default to order]\n\t\t\t'customer_id': _orders[orderID].customer_id,\n\t\t\t'currency_id': _orders[orderID].currency_id,\n\t\t\t'payment_terms_id': _orders[orderID].payment_terms_id,\n\t\t\t'carrier_id': _orders[orderID].carrier_id,\n\t\t\t'tax_class_id': _orders[orderID].tax_class_id\n\t\t\t\n\t\t\t//'tax_display'\n\t\t\t//'channel'\n\t\t};\n\t\t\n\t\t//Add any optional fields\n\t\tif(_orders[orderID].po != null && _orders[orderID].po != ''){\n\t\t\torderSubmission.po = _orders[orderID].po; \n\t\t}\n\t\tif(_orders[orderID].expected_date != null){\n\t\t\torderSubmission.expected_date = _orders[orderID].expected_date; \n\t\t}\n\t\tif(_orders[orderID].review != null && _orders[orderID].review != ''){\n\t\t\torderSubmission.review = _orders[orderID].review; \n\t\t}\n\t\tif(_orders[orderID].adjustment != null && _orders[orderID].adjustment > 0){\n\t\t\torderSubmission.adjustment_amount = _orders[orderID].adjustment;\n\t\t\torderSubmission.adjustment_manual_amount = _orders[orderID].adjustment;\n\t\t}\n\t\tif(_orders[orderID].shipping != null && _orders[orderID].shipping > 0){\n\t\t\torderSubmission.shipping_amount = _orders[orderID].shipping;\n\t\t}\n\t\tif(_orders[orderID].billing_location_id != null && _orders[orderID].billing_location_id > 0){\n\t\t\torderSubmission.billing_location_id = _orders[orderID].billing_location_id;\n\t\t}\n\t\tif(_orders[orderID].shipping_location_id != null && _orders[orderID].shipping_location_id > 0){\n\t\t\torderSubmission.shipping_location_id = _orders[orderID].shipping_location_id;\n\t\t}\n\t\t\n\t\t//Add any order items (should always be)\n\t\tif(_orders[orderID].items.length){\n\t\t\tlet arrOrderSubmissionItems = [];\n\t\t\t\n\t\t\tfor(var j = 0; j < _orders[orderID].items.length; j++) {\n\t\t\t\tif(_orders[orderID].items[j] != null){\n\t\t\t\t\tlet orderItem = {\n\t\t\t\t\t\t'product_id': _orders[orderID].items[j].product_id,\n\t\t\t\t\t\t'qty': _orders[orderID].items[j].quantity,\n\t\t\t\t\t\t'tax_class_id': _orders[orderID].items[j].tax_class_id //[could be 0 (as supplied by server)]\n\t\t\t\t\t\t//'uom_id'\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\t//If the price has been overridden, explicitly provide it to server\n\t\t\t\t\t//[Safeguard: if no original price recorded (old data structure, e.g.), assume override just in case]\n\t\t\t\t\tif(\t_orders[orderID].items[j].price_orig == null ||\n\t\t\t\t\t\t(_orders[orderID].items[j].price_orig != _orders[orderID].items[j].price) ){\n\t\t\t\t\t\torderItem['price'] = _orders[orderID].items[j].price;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tarrOrderSubmissionItems.push(orderItem);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\torderSubmission.order_items = JSON.stringify(arrOrderSubmissionItems);\n\t\t}\n\t\t\n\t\treturn orderSubmission;\n\t},\n\t\n\t//Obtain the specified or currently eligible, placed orders data, packaged for submission\n\tgetOrderSubmissions: function(specifiedIDs = []){\n\t\tvar arrSubmit = [];\n\t\t\n\t\tif(specifiedIDs.length){\n\t\t\tfor (let orderID of specifiedIDs) {\n\t\t\t\tif(_orders[orderID] != null && _orders[orderID].status == OrderStatuses.PLACED){\n\t\t\t\t\tarrSubmit.push(this.getOrderSubmission(orderID));\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t} else {\n\t\t\tfor (var orderID in _orders){\n\t\t\t\tif(_orders[orderID] != null && _orders[orderID].status == OrderStatuses.PLACED){\n\t\t\t\t\tarrSubmit.push(this.getOrderSubmission(orderID));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn arrSubmit;\n\t},\n\t\n\t//Obtain the customers for which the user has orders\n\t//(Optionally include those associated with past orders too)\n\tgetOrderCustomerIDs: function(blnIncludePastOrderCustomers){\n\t\t//(Defaults to true, as we generally use it this way)\n\t\tblnIncludePastOrderCustomers = (blnIncludePastOrderCustomers == null || blnIncludePastOrderCustomers);\n\t\n\t\tvar arrCustomerIDs = [];\n\t\t\n\t\tfor (var orderID in _orders){\n\t\t\tif(_orders[orderID] != null && _orders[orderID].customer_id != null){\n\t\t\t\tarrCustomerIDs.push(parseInt(_orders[orderID].customer_id));\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(blnIncludePastOrderCustomers){\n\t\t\tfor (var orderID in _pastOrders){\n\t\t\t\tif(_pastOrders[orderID] != null && _pastOrders[orderID].customer_id != null){\n\t\t\t\t\tarrCustomerIDs.push(parseInt(_pastOrders[orderID].customer_id));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn arrCustomerIDs; \n\t},\n\t\n\tgetPaymentTerms: function(){\n\t\tvar arrPT = [];\n\t\t\n\t\tfor (var PTID in _paymentTerms){\n\t\t\tif(_paymentTerms[PTID] != null){\n\t\t\t\tarrPT.push(_paymentTerms[PTID]);\n\t\t\t}\n\t\t}\n\t\t\n\t\t//Do any necessary sorting here\n\t\t\n\t\treturn arrPT; \n\t},\n\t\n\tgetPaymentTerm: function(paymentTermID){\n\t\treturn _paymentTerms[paymentTermID];\n\t},\n\t\n\t//Obtain the initial/default payment term\n\t//[Provides a central place to make this decision. For now we just return the first.]\n\tgetDefaultPaymentTerm: function(){\n\t\tfor (var PTID in _paymentTerms){\n\t\t\tif(_paymentTerms[PTID] != null){\n\t\t\t\treturn _paymentTerms[PTID];\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t},\n\t\n\tgetTaxClasses: function(){\n\t\tvar arrTC = [];\n\t\t\n\t\tfor (var TCID in _taxClasses){\n\t\t\tif(_taxClasses[TCID] != null){\n\t\t\t\tarrTC.push(_taxClasses[TCID]);\n\t\t\t}\n\t\t}\n\t\t\n\t\t//Do any necessary sorting here\n\t\t\n\t\treturn arrTC; \n\t},\n\t\n\tgetTaxClass: function(taxClassID){\n\t\treturn _taxClasses[taxClassID];\n\t},\n\t\n\t//Obtain the initial/default tax class\n\t//[Provides a central place to make this decision. For now we just return the first.]\n\tgetDefaultTaxClass: function(){\n\t\tfor (var TCID in _taxClasses){\n\t\t\tif(_taxClasses[TCID] != null){\n\t\t\t\treturn _taxClasses[TCID];\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t},\n\t\n\tgetCarriers: function(){\n\t\tvar arrC = [];\n\t\t\n\t\tfor (var CID in _carriers){\n\t\t\tif(_carriers[CID] != null){\n\t\t\t\tarrC.push(_carriers[CID]);\n\t\t\t}\n\t\t}\n\t\t\n\t\t//Do any necessary sorting here\n\t\t\n\t\treturn arrC; \n\t},\n\t\n\tgetCarrier: function(carrierID){\n\t\treturn _carriers[carrierID];\n\t},\n\t\n\t//Obtain the initial/default carrier\n\t//[Provides a central place to make this decision. For now we just return the first.]\n\tgetDefaultCarrier: function(){\n\t\tfor (var CID in _carriers){\n\t\t\tif(_carriers[CID] != null){\n\t\t\t\treturn _carriers[CID];\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t},\n\t\n\tgetCurrencies: function(){\n\t\tvar arrC = [];\n\t\t\n\t\tfor (var CID in _currencies){\n\t\t\tif(_currencies[CID] != null){\n\t\t\t\tarrC.push(_currencies[CID]);\n\t\t\t}\n\t\t}\n\t\t\n\t\t//Do any necessary sorting here\n\t\t\n\t\treturn arrC; \n\t},\n\t\n\tgetCurrency: function(currencyID){\n\t\treturn _currencies[currencyID];\n\t},\n\t\n\t//getDefaultCurrency: function(){}, //[We're using util.getCompanyCurrency() for defaulting currency app-wide]\n\t\n\t//Convenience function for returning a specific currency object if it exists, otherwise the default instance currency\n\tgetCurrencyOrDefault: function(currencyID){\n\t\treturn (currencyID != null && _currencies[currencyID] != null) ? _currencies[currencyID] : util.getCompanyCurrency();\n\t},\n\t\n\t//Obtain (relevant) store data for server debug submission\n\texportData: function(){\n\t\t//Explicity set up the valid JSON return string (until this store is restructured to store all keys in an object rather than separate module-level variables)\n\t\treturn '{' + \n\t\t\t'\"orders\":' \t\t+ JSON.stringify(_orders) + \",\" +\n\t\t\t'\"pastOrders\":' \t+ JSON.stringify(_pastOrders) + \",\" +\n\t\t\t'\"pastOrdersMeta\":' + JSON.stringify(_pastOrdersMeta) + \",\" +\n\t\t\t'\"paymentTerms\":' \t+ JSON.stringify(_paymentTerms) + \",\" +\n\t\t\t'\"taxClasses\":' \t+ JSON.stringify(_taxClasses) + \",\" +\n\t\t\t'\"carriers\":' \t\t+ JSON.stringify(_carriers) + \",\" +\n\t\t\t'\"currencies\":' \t+ JSON.stringify(_currencies) +\n\t\t'}';\n\t}\n});\n\nDispatcher.register(function(action){\n\tswitch(action.actionType){\n\t\tcase Actions.INITIALISE:\n\t\t\t//Load any potentially previously cached orders data\n\t\t\tif(localStorage.orders){\n\t\t\t\t_orders = JSON.parse(localStorage.orders);\n\t\t\t}\n\t\t\tif(localStorage.pastOrders){\n\t\t\t\t_pastOrders = JSON.parse(localStorage.pastOrders);\n\t\t\t}\n\t\t\tif(localStorage.pastOrdersMeta){\n\t\t\t\t_pastOrdersMeta = JSON.parse(localStorage.pastOrdersMeta);\n\t\t\t}\n\t\t\t\n\t\t\t//Load any potentially previously cached payment terms data\n\t\t\tif(localStorage.paymentTerms){\n\t\t\t\t_paymentTerms = JSON.parse(localStorage.paymentTerms);\n\t\t\t}\n\t\t\t//Load any potentially previously cached tax classes data\n\t\t\tif(localStorage.taxClasses){\n\t\t\t\t_taxClasses = JSON.parse(localStorage.taxClasses);\n\t\t\t}\n\t\t\t//Load any potentially previously cached carriers data\n\t\t\tif(localStorage.carriers){\n\t\t\t\t_carriers = JSON.parse(localStorage.carriers);\n\t\t\t}\n\t\t\t//Load any potentially previously cached currencies data\n\t\t\tif(localStorage.currencies){\n\t\t\t\t_currencies = JSON.parse(localStorage.currencies);\n\t\t\t}\n\t\t\t\n\t\t\tOrderStore.emitChange();\n\t\t\tbreak;\n\t\t\n\t\tcase Actions.ORDER_SAVE:\n\t\t\t\n\t\t\t_orders[action.orderData.id] = action.orderData;\n\t\t\tif(_orders[action.orderData.id].items.length){\n\t\t\t\t//Once we have at least one item (at any stage), we can set this flag (never reset)\n\t\t\t\t_orders[action.orderData.id].itemsEdited = true;\n\t\t\t}\n\t\t\tOrderStore.calculateTotals(action.orderData.id);\n\t\t\t\n\t\t\t//Additionally cache in localStorage for re-use across multiple sessions (until updated again)\n\t\t\tlocalStorage.orders = JSON.stringify(_orders);\n\t\t\t\n\t\t\tOrderStore.emitChange();\n\t\t\tbreak;\n\t\t\n\t\tcase Actions.ORDER_CANCEL:\n\t\t\t_orders[action.orderID] = undefined;\n\t\t\t\n\t\t\t//Additionally cache in localStorage for re-use across multiple sessions (until updated again)\n\t\t\tlocalStorage.orders = JSON.stringify(_orders);\n\t\t\t\n\t\t\tOrderStore.emitChange();\n\t\t\tbreak;\n\t\t\n\t\tcase Actions.ORDERS_SUBMIT:\n\t\t\t//Resolved in some way, either: Status.OK, Status.ERROR or Status.PARTIAL\n\t\t\t//if(action.actionStatus != Status.PENDING){\n\t\t\t//[For now, we're only concerned with clearing any successful submits]\n\t\t\tif(action.actionStatus == Status.OK || action.actionStatus == Status.PARTIAL){\n\t\t\t\tfor (var i = 0, l = action.submittedIDs.length; i < l; i++) {\n\t\t\t\t\t_orders[action.submittedIDs[i]] = undefined;\n\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t//Additionally cache in localStorage for re-use across multiple sessions (until updated again)\n\t\t\t\tlocalStorage.orders = JSON.stringify(_orders);\n\t\t\t}\n\t\t\t\n\t\t\t_status = action.actionStatus;\n\t\t\tOrderStore.emitChange();\n\t\t\tbreak;\t\n\t\t\n\t\tcase Actions.CUSTOMER_REFRESH:\n\t\t\t//We're only interested in some sort of successful action status (only have changes to this store in these cases)\n\t\t\tif(action.actionStatus == Status.OK || action.actionStatus == Status.PARTIAL){\n\t\t\t\t//Whether we have any orders specified to which this customer should be added\n\t\t\t\tlet blnAddToOrders = (action.addToOrderIDs != null && action.addToOrderIDs.length);\n\t\t\t\tlet objCurrency = null;\n\t\t\t\t\n\t\t\t\tif(blnAddToOrders){\n\t\t\t\t\t//Safeguard: if any orders specified do not yet exist, create them\n\t\t\t\t\tlet j;\n\t\t\t\t\tfor(j = 0; j < action.addToOrderIDs.length; j++) {\n\t\t\t\t\t\tlet addToOrderID = action.addToOrderIDs[j];\n\t\t\t\t\t\tif(!_orders[addToOrderID]){\n\t\t\t\t\t\t\t_orders[addToOrderID] = OrderStore.getFreshOrderObject(addToOrderID);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t//Obtain the customer-specific currency for the orders, if the customer-specific currency exists,\n\t\t\t\t\t//otherwise use the default instance currency (an important potential reset during a customer change)\n\t\t\t\t\tobjCurrency = OrderStore.getCurrencyOrDefault(action.customerData.default_currency_id);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfor (var orderID in _orders) {\n\t\t\t\t\t//Safeguard for recently deleted order nodes, which we ignore\n\t\t\t\t\tif(_orders[orderID] != null){\n\t\t\t\t\t\tlet blnAddCustomerToThisOrder = (blnAddToOrders && _.includes(action.addToOrderIDs, orderID)); \n\t\t\t\t\t\t//This is an order to which this customer should be added, or\n\t\t\t\t\t\t//this order is already associated with this customer and should be updated \n\t\t\t\t\t\tif( blnAddCustomerToThisOrder ||\n\t\t\t\t\t\t(_orders[orderID].customer_id == action.customerID) ){\n\t\t\t\t\t\t\t_orders[orderID].customer_id = action.customerData.id;\n\t\t\t\t\t\t\t_orders[orderID].customer_name = action.customerData.name;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t//Some customer fields only apply to the specified order (e.g. we don't want to change expected dates of all orders for this customer)\n\t\t\t\t\t\t\tif(blnAddCustomerToThisOrder){\n\t\t\t\t\t\t\t\t//Set expected date based on 'default_lead_time', if available\n\t\t\t\t\t\t\t\t_orders[orderID].expected_date = (action.customerData.default_lead_time != null) ? (util.getUnixTimeStartOfDay() + action.customerData.default_lead_time * 86400): null;\n\t\t\t\t\t\t\t\t//Set customer-specific payment term, if available and we don't already have one saved\n\t\t\t\t\t\t\t\t_orders[orderID].payment_terms_id = (_orders[orderID].payment_terms_id == null && action.customerData.payment_term != null) ? action.customerData.payment_term : _orders[orderID].payment_terms_id;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t//Set the customer-specific currency for the specified order, if the customer-specific currency exists,\n\t\t\t\t\t\t\t\t//otherwise use the default instance currency (an important potential reset during a customer change)\n\t\t\t\t\t\t\t\t_orders[orderID].currency_id = objCurrency.id;\n\t\t\t\t\t\t\t\t_orders[orderID].currency_display_name = objCurrency.name;\n\t\t\t\t\t\t\t\t_orders[orderID].currency_display_symbol = objCurrency.symbol;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t//Clear the billing and shipping addresses (blank selection, removing any old inapplicable data)\n\t\t\t\t\t\t\t\t_orders[orderID].billing_location_id = 0;\n\t\t\t\t\t\t\t\t_orders[orderID].shipping_location_id = 0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//Additionally cache in localStorage for re-use across multiple sessions (until updated again)\n\t\t\t\tlocalStorage.orders = JSON.stringify(_orders);\n\t\t\t\t\n\t\t\t\tOrderStore.emitChange();\n\t\t\t}\n\t\t\tbreak;\n\t\t\n\t\tcase Actions.SALES_REFRESH:\n\t\t\tlet blnChangeToEmit = false;\n\t\t\t\n\t\t\tif(action.entity == SalesEntities.ORDER){\n\t\t\t\t//We have past order(s) to save\n\t\t\t\tif(action.batchStatus == Status.OK){\n\t\t\t\t\tif(action.batchOrders != null){\n\t\t\t\t\t\tfor (var i = 0; i < action.batchOrders.length; i++) {\n\t\t\t\t\t\t\tif(action.batchOrders[i] != null){\n\t\t\t\t\t\t\t\t//add/overwrite this order's details in past order storage\n\t\t\t\t\t\t\t\t_pastOrders[action.batchOrders[i].id] = action.batchOrders[i];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t//Don't emit a change until all orders are completed (see below)\n\t\t\t\t\t//blnChangeToEmit = true;\n\t\t\t\t\t//Don't cache in localStorage until the end of our async order loading (see below)\n\t\t\t\t\t//localStorage.pastOrders = JSON.stringify(_pastOrders);\n\t\t\t\t\t//localStorage.pastOrdersMeta = JSON.stringify(_pastOrdersMeta);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//We're still refreshing past orders in piecemeal fashion\n\t\t\t\tif(action.entityStatus == Status.PENDING){\n\t\t\t\t\t//We have been provided with a full list of order IDs, for housekeeping purposes\n\t\t\t\t\t//[This currently only happens once at the beginning of the past orders refresh process]\n\t\t\t\t\tif(action.allOrderIDs != null){\n\t\t\t\t\t\tfor (var orderID in _pastOrders){\n\t\t\t\t\t\t\t//Delete any orders no longer present on the server\n\t\t\t\t\t\t\tif(_pastOrders[orderID] != null && !_.includes(action.allOrderIDs, orderID)){\n\t\t\t\t\t\t\t\t_pastOrders[orderID] = undefined;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//Save full server list for later safeguarding (after batch processing)\n\t\t\t\t\t\t_tempAllOrderIDs = action.allOrderIDs;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t//Don't emit a change until all orders are completed (see below)\n\t\t\t\t\t//Don't cache in localStorage until the end of our async order loading (see below)\n\t\t\t\t\n\t\t\t\t//We have completed processing of all past orders (successfully or not)\t\n\t\t\t\t}else{\n\t\t\t\t\t//Now that we're done dealing with our asynchronous order saving, let's cache our state in localStorage\n\t\t\t\t\tlocalStorage.pastOrders = JSON.stringify(_pastOrders);\n\t\t\t\t\n\t\t\t\t\t//We have successfully (or partially successfully) processed all orders (multiple batches)\n\t\t\t\t\t//[In total failure case, we will just redo everything we did this time again, so we're taking the decision to\n\t\t\t\t\t//not update the retry list (too much else could have gone wrong).\n\t\t\t\t\t//Note also that we can never safely update the refreshed timestamp in error case, as we could lose server changes that have happened.\n\t\t\t\t\t//Partial success implies we at least have an updated retry list that can include these changes, to go with the updated timestamp.]\n\t\t\t\t\tif(action.entityStatus != Status.ERROR){\n\t\t\t\t\t\t//_pastOrdersMeta.refreshed = util.getUnixTimeStartOfDay(); //cleaner to use start of day?\n\t\t\t\t\t\t_pastOrdersMeta.refreshed = (action.newLastRefreshTimestamp != null ? action.newLastRefreshTimestamp : util.getUnixTimeStartOfDay());\n\t\t\t\t\t\t_pastOrdersMeta.retryIDs = action.failedOrderIDs;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t//Safeguard: Before we wrap up, if we were successfully provided with a full server order ID list, \n\t\t\t\t\t//let's double check we're not missing any orders, adding them to our next refresh if so.\n\t\t\t\t\tif(_tempAllOrderIDs != null){\n\t\t\t\t\t\t//let currentOrderIDs = _.keysIn(_pastOrders);\n\t\t\t\t\t\tfor(var i = 0; i < _tempAllOrderIDs.length; i++){\n\t\t\t\t\t\t\tlet oid = _tempAllOrderIDs[i];\n\t\t\t\t\t\t\tif( (/*!_.includes(currentOrderIDs, oid) ||*/ _pastOrders[oid] == null) &&\n\t\t\t\t\t\t\t\t!_.includes(_pastOrdersMeta.retryIDs, oid) ){\n\t\t\t\t\t\t\t\t_pastOrdersMeta.retryIDs.push(oid);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//Let's tidy this up as we have no further use for it\n\t\t\t\t\t\t_tempAllOrderIDs = null;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t//Additionally cache in persistent storage for re-use across multiple sessions (until updated again)\n\t\t\t\t\tlocalStorage.pastOrdersMeta = JSON.stringify(_pastOrdersMeta);\n\t\t\t\t\t\n\t\t\t\t\t//Let's only emit a change now that all orders are completed\n\t\t\t\t\tblnChangeToEmit = true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}else if(action.entity == SalesEntities.PAYMENT_TERM){\n\t\t\t\tif(action.entityStatus == Status.OK){\n\t\t\t\t\t_paymentTerms = {};\n\t\t\t\t\tfor(var i = 0; i < action.arrPaymentTerms.length; i++) {\n\t\t\t\t\t\tlet pt = action.arrPaymentTerms[i];\n\t\t\t\t\t\t_paymentTerms[pt.id] = {\n\t\t\t\t\t\t\t'id': pt.id,\n\t\t\t\t\t\t\t'name': pt.name\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\tblnChangeToEmit = true;\n\t\t\t\t\t//Additionally cache in localStorage for re-use across multiple sessions (until updated again)\n\t\t\t\t\tlocalStorage.paymentTerms = JSON.stringify(_paymentTerms);\n\t\t\t\t}\n\t\t\t}else if(action.entity == SalesEntities.TAX_CLASS){\n\t\t\t\tif(action.entityStatus == Status.OK){\n\t\t\t\t\t_taxClasses = {};\n\t\t\t\t\tfor(var i = 0; i < action.arrTaxClasses.length; i++) {\n\t\t\t\t\t\tlet tc = action.arrTaxClasses[i];\n\t\t\t\t\t\t_taxClasses[tc.id] = {\n\t\t\t\t\t\t\t'id': tc.id,\n\t\t\t\t\t\t\t'name': tc.name,\n\t\t\t\t\t\t\t'percent': parseFloat(tc.percent)\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\tblnChangeToEmit = true;\n\t\t\t\t\t//Additionally cache in localStorage for re-use across multiple sessions (until updated again)\n\t\t\t\t\tlocalStorage.taxClasses = JSON.stringify(_taxClasses);\n\t\t\t\t}\n\t\t\t}else if(action.entity == SalesEntities.CARRIER){\n\t\t\t\tif(action.entityStatus == Status.OK){\n\t\t\t\t\t_carriers = {};\n\t\t\t\t\tfor(var i = 0; i < action.arrCarriers.length; i++) {\n\t\t\t\t\t\tlet c = action.arrCarriers[i];\n\t\t\t\t\t\t_carriers[c.id] = {\n\t\t\t\t\t\t\t'id': c.id,\n\t\t\t\t\t\t\t'name': c.name\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\tblnChangeToEmit = true;\n\t\t\t\t\t//Additionally cache in localStorage for re-use across multiple sessions (until updated again)\n\t\t\t\t\tlocalStorage.carriers = JSON.stringify(_carriers);\n\t\t\t\t}\n\t\t\t}else if(action.entity == SalesEntities.CURRENCY){\n\t\t\t\tif(action.entityStatus == Status.OK){\n\t\t\t\t\t_currencies = {};\n\t\t\t\t\tfor(var i = 0; i < action.arrCurrencies.length; i++) {\n\t\t\t\t\t\tlet c = action.arrCurrencies[i];\n\t\t\t\t\t\t_currencies[c.id] = {\n\t\t\t\t\t\t\t'id': c.id, //parseInt(c.id)\n\t\t\t\t\t\t\t'name': c.name,\n\t\t\t\t\t\t\t'symbol': c.symbol,\n\t\t\t\t\t\t\t'code': c.code\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\tblnChangeToEmit = true;\n\t\t\t\t\t//Additionally cache in localStorage for re-use across multiple sessions (until updated again)\n\t\t\t\t\tlocalStorage.currencies = JSON.stringify(_currencies);\n\t\t\t\t}\t\n\t\t\t}\n\t\t\t\n\t\t\tif(blnChangeToEmit){\n\t\t\t\tOrderStore.emitChange();\n\t\t\t}\n\t\t\t\n\t\t\tbreak;\t\n\t\t\t\n\t\tcase Actions.USER_DELETE_DATA:\n\t\t\t_orders = {};\n\t\t\t_pastOrders = {};\n\t\t\t_pastOrdersMeta = { \n\t\t\t\trefreshed: null, //[important to allow full past order list to be refreshed in future (not just changes since last sync)]\n\t\t\t\tretryIDs: [] \n\t\t\t};\n\t\t\t_paymentTerms = {};\n\t\t\t_taxClasses = {};\n\t\t\t_carriers = {};\n\t\t\t_currencies = {};\n\t\t\t//Additionally update localStorage cache\n\t\t\tlocalStorage.orders = JSON.stringify(_orders);\n\t\t\tlocalStorage.pastOrders = JSON.stringify(_pastOrders);\n\t\t\tlocalStorage.pastOrdersMeta = JSON.stringify(_pastOrdersMeta);\n\t\t\tlocalStorage.paymentTerms = JSON.stringify(_paymentTerms);\n\t\t\tlocalStorage.taxClasses = JSON.stringify(_taxClasses);\n\t\t\tlocalStorage.carriers = JSON.stringify(_carriers);\n\t\t\tlocalStorage.currencies = JSON.stringify(_currencies);\n\t\t\t//Safeguard: emit a change event (necessary?)\n\t\t\tOrderStore.emitChange();\n\t\t\tbreak;\t\n\t\t\t\t\n\t\tdefault:\n\t\t\t//nothing\t\n\t}\n});\n\nmodule.exports = OrderStore;","\"use strict\";\nimport $ from 'jquery';\nwindow.$ = $;\n\nvar Dispatcher = require('../dispatcher/appDispatcher');\nvar Actions = require('../constants/actionTypes');\nvar UserActions = require('./userActions');\nvar Status = require('../constants/actionStatuses');\nvar SalesEntities = require('../constants/salesEntities');\nvar option = require('../constants/configOptions.js');\nvar config = require('../config.js');\nvar util = require('../util.js');\nvar _ = require('lodash');\nvar toastr = require('toastr');\n\n\n\nvar customerSearchAJAXRequest = null;\nvar productSearchAJAXRequest = null;\n\n//Private utilities\nvar SalesUtil = {\n\t//Process product detail data (removing unnecessary data for now for space considerations)\n\tprepareProductBatchData: function(productBatch){\n\t\tfor(var productID in productBatch){\n\t\t\tif(productBatch[productID] != null){\n\t\t\t\t//We need the variants array, even when no variants on instance, as we need to use the \n\t\t\t\t//default (only) variant's product ID, rather than main (class) ID\n\t\t\t\t//productBatch[productID].product.variants = [];\n\t\t\t\t//We need product images\n\t\t\t\t//productBatch[productID].product.images = [];\n\t\t\t\tproductBatch[productID].product.files = [];\n\t\t\t\t//We need product categories\n\t\t\t\t//productBatch[productID].categories = [];\n\t\t\t\tproductBatch[productID].variant_options = [];\n\t\t\t\tproductBatch[productID].vendors = [];\n\t\t\t\tproductBatch[productID].inventory = [];\n\t\t\t\tproductBatch[productID].extensions = [];\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn productBatch;\n\t}\n};\n\n//List our 'action creators' that helpfully wrap our actions (payloads {} that are dispatched)\nvar SalesActions = {\n\tdoAfterAccessCheck: function(action, args){\n\t\tif(action == 'submitOrders'){\n\t\t\t//Instruct dispatcher to tell all stores that this action is pending (ensure any visual indicators updated)\n\t\t\tDispatcher.dispatch({\n\t\t\t\tactionType: Actions.ORDERS_SUBMIT,\n\t\t\t\tactionStatus: Status.PENDING\n\t\t\t});\n\t\t}\n\t\t/*if(action == 'refreshPastOrders'){\n\t\t\t//Instruct dispatcher to tell all stores that this action is pending (ensure any visual indicators updated)\n\t\t\tDispatcher.dispatch({\n\t\t\t\tactionType: Actions.PAST_ORDERS_REFRESH,\n\t\t\t\tactionStatus: Status.PENDING\n\t\t\t});\n\t\t}*/\n\n\t\t//UserActions.checkAccess(function(){\n\t\t//\tthis[action].apply(null, args);\n\t\t//}.bind(this)); //ensure we have correct 'this' context in callback (namely SalesActions)\n\t\tUserActions.checkAccess(this[action], args);\n\t},\n\t\n\tsaveOrder: function(order){\n\t\t//Instruct dispatcher to tell all stores that an order has been saved\n\t\tDispatcher.dispatch({\n\t\t\tactionType: Actions.ORDER_SAVE,\n\t\t\tactionStatus: Status.OK,\n\t\t\torderData: order\n\t\t});\n\t},\n\t\n\tcancelOrder: function(orderID){\n\t\t//Instruct dispatcher to tell all stores that an order has been cancelled\n\t\tDispatcher.dispatch({\n\t\t\tactionType: Actions.ORDER_CANCEL,\n\t\t\tactionStatus: Status.OK,\n\t\t\torderID: orderID\n\t\t});\n\t},\n\t\n\t//Submit the prepared order data AND any customer visit log data to server\n\tsubmitOrdersAndRelatedData: function(arrOrderSubmissions, arrCustomerVisits){\n\t\tvar submitQueue = [\n\t\t\t{ context: this, action: 'submitOrders', args: [arrOrderSubmissions], completionWeighting: 0.8 },\n\t\t\t{ context: this, action: 'submitCustomerVisits', args: [arrCustomerVisits], completionWeighting: 0.2 }\n\t\t];\n\t\n\t\treturn util.executeActionQueue(submitQueue, Actions.ORDERS_RELATED_SUBMIT);\n\t},\n\t\n\tsubmitOrders: function(arrOrderSubmissions){\n\t\tlet returnDeferred = $.Deferred();\n\t\t\n\t\tif(arrOrderSubmissions == null || !arrOrderSubmissions.length) {\n\t\t\treturnDeferred.resolve();\n\t\t\treturn returnDeferred;\n\t\t}\n\t\t\n\t\t//Instruct dispatcher to tell all stores that an orders submission is pending (has begun)\n\t\tutil.dispatch({\n\t\t\tactionType: Actions.ORDERS_SUBMIT,\n\t\t\tactionStatus: Status.PENDING\n\t\t});\n\t\t\n\t\tvar blnAllSuccessful = true;\n\t\tvar blnAllUnsuccessful = true;\n\t\tvar arrSubmittedIDs = [];\n\t\tvar arrFailedIDs = [];\n\t\t\n\t\tlet submitOrder = function(orderData){\n\t\t\t$.ajax({\n\t\t\t\t//context: this,\n\t\t\t\turl: util.apiUrl + 'order/createOrder',\n\t\t\t\ttype: 'POST',\n\t\t\t\tdata: orderData,\n\t\t\t\theaders: { \"Authorization\": util.getHTTPAuthString() },\n\t\t\t\tdataType: 'json'\n\t\t\t}).fail(function(){\n\t\t\t\tblnAllSuccessful = false;\n\t\t\t\t//Add this order as UNsuccessfully submitted\n\t\t\t\tarrFailedIDs.push(orderData.id);\n\t\t\t}).done(function(data){\n\t\t\t\tif(data.status){\n\t\t\t\t\tblnAllUnsuccessful = false;\n\t\t\t\t\t//Add this order as successfully submitted\n\t\t\t\t\tarrSubmittedIDs.push(orderData.id);\n\t\t\t\t\t//data.results.orderID\n\t\t\t\t\t\n\t\t\t\t}else{\n\t\t\t\t\tblnAllSuccessful = false;\n\t\t\t\t\t//Add this order as UNsuccessfully submitted\n\t\t\t\t\tarrFailedIDs.push(orderData.id);\n\t\t\t\t}\n\t\t\t}).always(function(){\n\t\t\t\t//We still have orders to submit\n\t\t\t\tif(arrOrderSubmissions.length > 0){\n\t\t\t\t\t//Submit the next order\n\t\t\t\t\tsubmitOrder(arrOrderSubmissions.shift());\n\t\t\t\t\t\n\t\t\t\t//We've processed all orders\n\t\t\t\t}else{\n\t\t\t\t\tlet actionStatus = (blnAllSuccessful ? Status.OK : (blnAllUnsuccessful ? Status.ERROR : Status.PARTIAL));\n\t\t\t\t\t\n\t\t\t\t\t//Instruct dispatcher to tell all stores that an orders submission has either completed successfully,\n\t\t\t\t\t//or failed in some way (partially or completely)\n\t\t\t\t\tutil.dispatch({\n\t\t\t\t\t\tactionType: Actions.ORDERS_SUBMIT,\n\t\t\t\t\t\tactionStatus: actionStatus,\n\t\t\t\t\t\tsubmittedIDs: arrSubmittedIDs, //successful orders\n\t\t\t\t\t\tfailedIDs: arrFailedIDs //UNsuccessful orders\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\tif(actionStatus == Status.ERROR){\n\t\t\t\t\t\treturnDeferred.reject();\n\t\t\t\t\t}else{\n\t\t\t\t\t\treturnDeferred.resolve({ partial: (actionStatus == Status.PARTIAL) });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}.bind(this);\n\t\t\n\t\t//Submit the first order\n\t\tsubmitOrder(arrOrderSubmissions.shift());\n\t\t\n\t\treturn returnDeferred;\n\t},\n\t\n\tenterCustomer: function(customerID){\n\t\t//Instruct dispatcher to tell all stores that a customer entry has occurred\n\t\tDispatcher.dispatch({\n\t\t\tactionType: Actions.CUSTOMER_ENTER,\n\t\t\tactionStatus: Status.OK,\n\t\t\tcustomerID: customerID,\n\t\t\t//(added to provide authoritative single place of origin for this value if more than one store needs to set it)\n\t\t\tentryTimestamp: util.getUnixTime() \n\t\t});\n\t},\n\t\n\texitCustomer: function(customerID, callAuditsCompleted){\n\t\t//Instruct dispatcher to tell all stores that a customer exit has occurred\n\t\tDispatcher.dispatch({\n\t\t\tactionType: Actions.CUSTOMER_EXIT,\n\t\t\tactionStatus: Status.OK,\n\t\t\tcustomerID: customerID,\n\t\t\t//(added to provide authoritative single place of origin for this value if more than one store needs to set it)\n\t\t\texitTimestamp: util.getUnixTime(),\n\t\t\t//flag to specify explicit call audits completion scenario (default not)\n\t\t\tcallAuditsCompleted: (callAuditsCompleted != null && callAuditsCompleted)\n\t\t});\n\t\t\n\t\t//[Moved in from original CallActions.completeCall()]\n\t\t//Check localStorage usage and warn appropriately (if over 80%)\n\t\t//TODO: possibly move this to a component rather than using toastr here?\n\t\tif(util.getLocalStorageUsage() > 0.8){\n\t\t\ttoastr.warning('Your storage usage is high. Please submit your audits or orders to free up space.');\n\t\t}\n\t},\n\t\n\t//Record the logged customer visits (applies to audit calls and/or sales order placement visits)\n\tsubmitCustomerVisits: function(arrCustomerData){\n\t\tlet returnDeferred = $.Deferred();\n\t\t\n\t\tif(arrCustomerData == null || !arrCustomerData.length) {\n\t\t\treturnDeferred.resolve();\n\t\t\treturn returnDeferred;\n\t\t}\n\t\t\n\t\t//Instruct dispatcher to tell all stores that a customer visit log save is pending (has begun)\n\t\tutil.dispatch({\n\t\t\tactionType: Actions.CUSTOMER_VISITS_SUBMIT,\n\t\t\tactionStatus: Status.PENDING\n\t\t});\n\t\t\n\t\t$.ajax({\n\t\t\t//context: this,\n\t\t\turl: util.apiUrl + 'user/recordCustomerVisit',\n\t\t\ttype: 'POST',\n\t\t\tdata: {'data': JSON.stringify(arrCustomerData)},\n\t\t\theaders: { \"Authorization\": util.getHTTPAuthString() },\n\t\t\tdataType: 'json'\n\t\t}).fail(function(){\n\t\t\t//Instruct dispatcher to tell all stores that a customer visit log save has failed\n\t\t\tutil.dispatch({\n\t\t\t\tactionType: Actions.CUSTOMER_VISITS_SUBMIT,\n\t\t\t\tactionStatus: Status.ERROR\n\t\t\t});\n\t\t\treturnDeferred.reject();\n\t\t}).done(function(data){\n\t\t\tif(data.status){\n\t\t\t\t//Instruct dispatcher to tell all stores that a customer visit log save has completed\n\t\t\t\tutil.dispatch({\n\t\t\t\t\tactionType: Actions.CUSTOMER_VISITS_SUBMIT,\n\t\t\t\t\tactionStatus: Status.OK,\n\t\t\t\t\tcustomerVisitData: arrCustomerData\n\t\t\t\t});\n\t\t\t\treturnDeferred.resolve();\n\t\t\t}else{\n\t\t\t\t//Instruct dispatcher to tell all stores that a customer visit log save has failed\n\t\t\t\tutil.dispatch({\n\t\t\t\t\tactionType: Actions.CUSTOMER_VISITS_SUBMIT,\n\t\t\t\t\tactionStatus: Status.ERROR\n\t\t\t\t});\n\t\t\t\treturnDeferred.reject();\n\t\t\t}\n\t\t});\n\t\t\n\t\treturn returnDeferred;\n\t},\n\t\n\t//Perform a LOCAL (offline) customer search, OR\n\t//perform a SERVER customer search (when app configured for online customers - FUNC_ONLINE_CUSTOMERS config setting)\n\tsearchCustomers: function(searchTerm, searchPage, searchPageSize){\n\t\tif(config.get(option.FUNC_ONLINE_CUSTOMERS)){\n\t\t\tthis.searchCustomersRemotely(searchTerm, searchPage, searchPageSize);\n\t\t} else {\n\t\t\tthis.searchCustomersLocally(searchTerm, searchPage, searchPageSize);\n\t\t}\n\t},\n\t\n\t//Perform a LOCAL (offline) customer search\n\tsearchCustomersLocally: function(searchTerm, searchPage, searchPageSize){\n\t\tif(searchTerm == null){\n\t\t\tsearchTerm = '';\n\t\t}\n\t\tif(searchPage == null){\n\t\t\tsearchPage = 1;\n\t\t}\n\t\tif(searchPageSize == null){\n\t\t\tsearchPageSize = 10;\n\t\t}\n\t\t\n\t\t//Instruct dispatcher to tell all stores that a customer search is required\n\t\tDispatcher.dispatch({\n\t\t\tactionType: Actions.CUSTOMERS_SEARCH_LOCAL,\n\t\t\tactionStatus: Status.OK,\n\t\t\tsearchTerm: searchTerm,\n\t\t\tsearchPage: searchPage,\n\t\t\tsearchPageSize: searchPageSize\n\t\t});\n\t},\n\t\n\t//Perform a REMOTE/SERVER (online) customer search\n\tsearchCustomersRemotely: function(searchTerm, searchPage, searchPageSize){\n\t\tif(customerSearchAJAXRequest != null){\n\t\t\tcustomerSearchAJAXRequest.abort();\n\t\t}\n\t\t\n\t\tif(searchTerm == null){\n\t\t\tsearchTerm = '';\n\t\t}\n\t\tif(searchPage == null){\n\t\t\tsearchPage = 1;\n\t\t}\n\t\tif(searchPageSize == null){\n\t\t\tsearchPageSize = 10;\n\t\t}\n\t\t\n\t\t//Instruct dispatcher to tell all stores that a customer search is pending (has begun)\n\t\tDispatcher.dispatch({\n\t\t\tactionType: Actions.CUSTOMERS_SEARCH_SERVER,\n\t\t\tactionStatus: Status.PENDING,\n\t\t\tsearchTerm: searchTerm,\n\t\t\tsearchPage: searchPage,\n\t\t\tsearchPageSize: searchPageSize\n\t\t});\n\t\t\n\t\tvar arrSearchTerms = searchTerm.split(\" \");\n\t\tvar strCSVSearchTerms = '';\n\t\tfor (var i = 0; i < arrSearchTerms.length; i++) {\n\t\t\tvar searchToken = arrSearchTerms[i].trim();\n\t\t\tif(searchToken != ''){\n\t\t\t\tstrCSVSearchTerms += (strCSVSearchTerms.length ? ',' : '') + searchToken;\n\t\t\t}\n\t\t}\n\t\t\n\t\tcustomerSearchAJAXRequest = $.ajax({\n\t\t\t//context: this,\n\t\t\turl: util.apiUrl + 'customer/list',\n\t\t\ttype: 'GET',\n\t\t\tdata: {pageSize: searchPageSize, page: searchPage, filters: strCSVSearchTerms},\n\t\t\theaders: { \"Authorization\": util.getHTTPAuthString() },\n\t\t\tdataType: 'json'\n\t\t})/*.always(function(){\n\t\t\tconsole.log('always');\n\t\t})*/.fail(function(){\n\t\t\t//Instruct dispatcher to tell all stores that a customer search has failed\n\t\t\tDispatcher.dispatch({\n\t\t\t\tactionType: Actions.CUSTOMERS_SEARCH_SERVER,\n\t\t\t\tactionStatus: Status.ERROR,\n\t\t\t\tsearchTerm: searchTerm,\n\t\t\t\tsearchPage: searchPage,\n\t\t\t\tsearchPageSize: searchPageSize\n\t\t\t});\n\t\t}).done(function(data){\n\t\t\tif(data.status){\n\t\t\t\t//Instruct dispatcher to tell all stores that a customer search has completed\n\t\t\t\tDispatcher.dispatch({\n\t\t\t\t\tactionType: Actions.CUSTOMERS_SEARCH_SERVER,\n\t\t\t\t\tactionStatus: Status.OK,\n\t\t\t\t\tsearchTerm: searchTerm,\n\t\t\t\t\tsearchPage: parseInt(data.results.currentPage), //OR: searchPage,\n\t\t\t\t\tsearchPageSize: searchPageSize, //OR: parseInt(data.results.pageSize),\n\t\t\t\t\ttotal: parseInt(data.results.totalCount),\n\t\t\t\t\ttotalPages: parseInt(data.results.totalPages),\n\t\t\t\t\tresultsData: (data.results.records != null ? data.results.records : [])\n\t\t\t\t});\n\t\t\t}else{\n\t\t\t\t//Instruct dispatcher to tell all stores that a customer search has failed\n\t\t\t\tDispatcher.dispatch({\n\t\t\t\t\tactionType: Actions.CUSTOMERS_SEARCH_SERVER,\n\t\t\t\t\tactionStatus: Status.ERROR,\n\t\t\t\t\tsearchTerm: searchTerm,\n\t\t\t\t\tsearchPage: searchPage,\n\t\t\t\t\tsearchPageSize: searchPageSize\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t},\n\t\n\t//Perform a LOCAL (offline) product search, OR\n\t//perform a SERVER product search (when app configured for online products - FUNC_ONLINE_PRODUCTS config setting)\n\tsearchProducts: function(searchTerm, searchPage, searchPageSize, searchFilters, customerID){\n\t\tif(config.get(option.FUNC_ONLINE_PRODUCTS)){\n\t\t\tthis.searchProductsRemotely(searchTerm, searchPage, searchPageSize, searchFilters, customerID);\n\t\t} else {\n\t\t\tthis.searchProductsLocally(searchTerm, searchPage, searchPageSize, searchFilters, customerID);\n\t\t}\n\t},\n\t\n\t//Perform a LOCAL (offline) product search\n\tsearchProductsLocally: function(searchTerm, searchPage, searchPageSize, searchFilters, customerID){\n\t\tif(searchTerm == null){\n\t\t\tsearchTerm = '';\n\t\t}\n\t\tif(searchPage == null){\n\t\t\tsearchPage = 1;\n\t\t}\n\t\tif(searchPageSize == null){\n\t\t\tsearchPageSize = 25;\n\t\t}\n\t\t\n\t\t//Instruct dispatcher to tell all stores that a product search is required\n\t\tDispatcher.dispatch({\n\t\t\tactionType: Actions.PRODUCTS_SEARCH_LOCAL,\n\t\t\tactionStatus: Status.OK,\n\t\t\tsearchTerm: searchTerm,\n\t\t\tsearchPage: searchPage,\n\t\t\tsearchPageSize: searchPageSize,\n\t\t\tsearchFilters: searchFilters,\t//[May be null for unfiltered results]\n\t\t\tcustomerID: customerID\t\t\t//[May be null for unfiltered results]\n\t\t});\n\t},\n\t\n\t//Perform a REMOTE/SERVER (online) product search\n\tsearchProductsRemotely: function(searchTerm, searchPage, searchPageSize, searchFilters, customerID){\n\t\tif(productSearchAJAXRequest != null){\n\t\t\tproductSearchAJAXRequest.abort();\n\t\t}\n\t\t\n\t\tif(searchTerm == null){\n\t\t\tsearchTerm = '';\n\t\t}\n\t\tif(searchPage == null){\n\t\t\tsearchPage = 1;\n\t\t}\n\t\tif(searchPageSize == null){\n\t\t\tsearchPageSize = 25;\n\t\t}\n\t\t\n\t\t//Instruct dispatcher to tell all stores that a product search is pending (has begun)\n\t\tDispatcher.dispatch({\n\t\t\tactionType: Actions.PRODUCTS_SEARCH_SERVER,\n\t\t\tactionStatus: Status.PENDING,\n\t\t\tsearchTerm: searchTerm,\n\t\t\tsearchPage: searchPage,\n\t\t\tsearchPageSize: searchPageSize,\n\t\t\tsearchFilters: searchFilters,\t//[May be null for unfiltered results]\n\t\t\tcustomerID: customerID\t\t\t//[May be null for unfiltered results]\n\t\t});\n\t\t\n\t\tvar arrSearchTerms = searchTerm.split(\" \");\n\t\tvar strCSVSearchTerms = '';\n\t\tfor (var i = 0; i < arrSearchTerms.length; i++) {\n\t\t\tvar searchToken = arrSearchTerms[i].trim();\n\t\t\tif(searchToken != ''){\n\t\t\t\tstrCSVSearchTerms += (strCSVSearchTerms.length ? ',' : '') + searchToken;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlet blnFeaturedFilter = false;\n\t\tlet strRecentFilter = null;\n\t\tlet strCatFilter = null;\n\t\tif(searchFilters != null){\n\t\t\tblnFeaturedFilter = (searchFilters.featured != null && searchFilters.featured);\n\t\t\tstrRecentFilter = (searchFilters.customerProducts != null ? searchFilters.customerProducts : null);\n\t\t\tif(searchFilters.categories != null && searchFilters.categories.length){\n\t\t\t\tstrCatFilter = searchFilters.categories.join();\n\t\t\t}\n\t\t}\n\t\t\n\t\tproductSearchAJAXRequest = $.ajax({\n\t\t\t//context: this,\n\t\t\turl: util.apiUrl + 'product/list',\n\t\t\ttype: 'GET',\n\t\t\tdata: {\n\t\t\t\tpageSize: searchPageSize, \n\t\t\t\tpage: searchPage, \n\t\t\t\tfilters: strCSVSearchTerms,\n\t\t\t\tfeatured: blnFeaturedFilter,\n\t\t\t\tcustomerProducts: strRecentFilter,\n\t\t\t\tcategories: strCatFilter,\n\t\t\t\tcustomerID: customerID,\n\t\t\t\tincludeDetail: true\n\t\t\t},\n\t\t\theaders: { \"Authorization\": util.getHTTPAuthString() },\n\t\t\tdataType: 'json'\n\t\t}).fail(function(){\n\t\t\t//Instruct dispatcher to tell all stores that a product search has failed\n\t\t\tDispatcher.dispatch({\n\t\t\t\tactionType: Actions.PRODUCTS_SEARCH_SERVER,\n\t\t\t\tactionStatus: Status.ERROR,\n\t\t\t\tsearchTerm: searchTerm,\n\t\t\t\tsearchPage: searchPage,\n\t\t\t\tsearchPageSize: searchPageSize,\n\t\t\t\tsearchFilters: searchFilters,\n\t\t\t\tcustomerID: customerID\n\t\t\t});\n\t\t}).done(function(data){\n\t\t\tif(data.status){\n\t\t\t\t//Instruct dispatcher to tell all stores that a product search has completed\n\t\t\t\tDispatcher.dispatch({\n\t\t\t\t\tactionType: Actions.PRODUCTS_SEARCH_SERVER,\n\t\t\t\t\tactionStatus: Status.OK,\n\t\t\t\t\tsearchTerm: searchTerm,\n\t\t\t\t\tsearchPage: parseInt(data.results.currentPage), //OR: searchPage,\n\t\t\t\t\tsearchPageSize: searchPageSize, //OR: parseInt(data.results.pageSize),\n\t\t\t\t\tsearchFilters: searchFilters,\n\t\t\t\t\tcustomerID: customerID,\n\t\t\t\t\ttotal: parseInt(data.results.totalCount),\n\t\t\t\t\ttotalPages: parseInt(data.results.totalPages),\n\t\t\t\t\tresultsData: (data.results.records != null ? data.results.records : [])\n\t\t\t\t});\n\t\t\t}else{\n\t\t\t\t//Instruct dispatcher to tell all stores that a product search has failed\n\t\t\t\tDispatcher.dispatch({\n\t\t\t\t\tactionType: Actions.PRODUCTS_SEARCH_SERVER,\n\t\t\t\t\tactionStatus: Status.ERROR,\n\t\t\t\t\tsearchTerm: searchTerm,\n\t\t\t\t\tsearchPage: searchPage,\n\t\t\t\t\tsearchPageSize: searchPageSize,\n\t\t\t\t\tsearchFilters: searchFilters,\n\t\t\t\t\tcustomerID: customerID\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t},\n\t\n\t//Queueable utility function (returns deferred object) to combine multiple sources of customer IDs to ensure subsequent queue actions are up to date\n\t//Move this to a central area (like util?), if needed in lots of places\n\tcombineCustomers: function(arrCustomers1, arrCustomers2){\n\t\t//Let's sanitise the IDs into a common format first\n\t\tarrCustomers1 = arrCustomers1.map((id) => parseInt(id));\n\t\tarrCustomers2 = arrCustomers2.map((id) => parseInt(id));\n\t\treturn $.Deferred().resolve({ results: { customerIDs: _.union(arrCustomers1, arrCustomers2) } });\n\t},\n\t\n\t//Refresh all data required for sales module\n\t//[Obtain payment terms, tax classes, carriers, customers, products, etc. - for now, due to current usage, we collect all at once]\n\t//[lastProductRefreshTimestamp is currently used by product sync, to determine products changed since last sync]\n\t//[arrCustomerIDs is currently used by customer sync, and should be all customers we've determined are currently needed by app]\n\trefreshSalesData: function(lastProductRefreshTimestamp, retryProductIDs, lastPastOrderRefreshTimestamp, retryPastOrderIDs, arrCustomerIDs){\n\t\tif(arrCustomerIDs == null){\n\t\t\tarrCustomerIDs = [];\n\t\t}\n\t\t\n\t\tvar refreshQueue = [\n\t\t\t//Refresh the general user/company info (including an access check), so that we have the latest flags (potentially affects e.g. pricelists refresh below)\n\t\t\t//(If it fails, we don't proceed with subsequent refreshes, in case it's an access permissions error)\n\t\t\t{ context: UserActions, action: 'refreshUser', args: null, completionWeighting: 0.08, stopOnFail: true },\n\t\t\t{ context: this, action: 'refreshPaymentTerms', args: null, completionWeighting: 0.04 },\n\t\t\t{ context: this, action: 'refreshTaxClasses', args: null, completionWeighting: 0.04 },\n\t\t\t{ context: this, action: 'refreshCarriers', args: null, completionWeighting: 0.04 },\n\t\t\t{ context: this, action: 'refreshCurrencies', args: null, completionWeighting: 0.04 },\n\t\t\t{ context: this, action: 'refreshProducts', args: [lastProductRefreshTimestamp, retryProductIDs], completionWeighting: 0.35 },\n\t\t\t{ context: this, action: 'refreshCategories', args: null, completionWeighting: 0.04 },\n\t\t\t{ context: this, action: 'refreshPastOrders', args: [lastPastOrderRefreshTimestamp, retryPastOrderIDs], completionWeighting: 0.08 },\n\t\t\t//Add any past order customers to customer refresh list\n\t\t\t{ context: this, action: 'combineCustomers', args: [arrCustomerIDs, 'add:pastOrderCustomerIDs'], completionWeighting: 0 },\n\t\t\t{ context: this, action: 'refreshCustomers', args: ['add:customerIDs'], completionWeighting: 0.13 },\n\t\t\t{ context: this, action: 'refreshPriceLists', args: ['add:customerIDs'], completionWeighting: 0.08 },\n\t\t\t{ context: this, action: 'refreshProductRules', args: ['add:customerIDs'], completionWeighting: 0.08 }\n\t\t];\n\t\n\t\treturn util.executeActionQueue(refreshQueue, Actions.SALES_REFRESH); //(we're using the same action type as the 'individual' action here: i.e. queueActionType = actionType = SALES_REFRESH)\n\t},\n\t\n\t//Refresh all data required for sales module in 'online' mode, i.e. just the minimum \n\t//(everything else is obtained on the fly, e.g. customers, products; or not needed, e.g. price lists, product rules) \n\t//[Obtain payment terms, tax classes, carriers, currencies and categories]\n\trefreshSalesDataForOnline: function(){\n\t\tvar refreshQueue = [\n\t\t\t//Refresh the general user/company info (only for access check)\n\t\t\t//(If it fails, we don't proceed with subsequent refreshes, in case it's an access permissions error)\n\t\t\t{ context: UserActions, action: 'refreshUser', args: null, completionWeighting: 0.2, stopOnFail: true },\n\t\t\t{ context: this, action: 'refreshPaymentTerms', args: null, completionWeighting: 0.15},\n\t\t\t{ context: this, action: 'refreshTaxClasses', args: null, completionWeighting: 0.15 },\n\t\t\t{ context: this, action: 'refreshCarriers', args: null, completionWeighting: 0.15 },\n\t\t\t{ context: this, action: 'refreshCurrencies', args: null, completionWeighting: 0.15 },\n\t\t\t{ context: this, action: 'refreshCategories', args: null, completionWeighting: 0.2 }\n\t\t];\n\t\t\n\t\t//In the B2B auto-selected customer case, we want to additionally pre-refresh the B2B customer detail for use on various sales pages\n\t\tif(config.get(option.FUNC_CUSTOMER_AUTOSELECTION)){\n\t\t\trefreshQueue[5].completionWeighting = 0.1;\n\t\t\trefreshQueue.push({ context: this, action: 'refreshCustomers', args: [[util.getB2BCustomerID()]], completionWeighting: 0.1 });\n\t\t}\n\t\n\t\treturn util.executeActionQueue(refreshQueue, Actions.ONLINE_SALES_REFRESH);\n\t},\n\t\n\t//Refresh all data required for sales module\n\t//[Obtain payment terms, tax classes, carriers, customers, products, etc. - for now, due to current usage, we collect all at once]\n\t//[lastRefreshTimestamp is currently used by product sync, to determine products changed since last sync]\n\t//[arrCustomerIDs is currently used by customer sync, and should be all customers we've determined are currently needed by app]\n\t/*refreshSalesDataORIG: function(lastRefreshTimestamp, retryProductIDs, arrCustomerIDs){\n\t\t//Instruct dispatcher to tell all stores that a sales refresh is pending (has begun)\n\t\tutil.dispatch({\n\t\t\tactionType: Actions.SALES_REFRESH,\n\t\t\tactionStatus: Status.PENDING,\n\t\t\tresetTracking: true\n\t\t});\n\t\t\n\t\tif(arrCustomerIDs == null){\n\t\t\tarrCustomerIDs = [];\n\t\t}\n\t\t\n\t\tlet refreshQueue = [\n\t\t\t{ entity: SalesEntities.PAYMENT_TERM, action: 'refreshPaymentTerms', args: null },\n\t\t\t{ entity: SalesEntities.TAX_CLASS, action: 'refreshTaxClasses', args: null },\n\t\t\t{ entity: SalesEntities.CARRIER, action: 'refreshCarriers', args: null },\n\t\t\t{ entity: SalesEntities.CURRENCY, action: 'refreshCurrencies', args: null },\n\t\t\t{ entity: SalesEntities.PRODUCT, action: 'refreshProducts', args: [lastRefreshTimestamp, retryProductIDs] },\n\t\t\t{ entity: SalesEntities.CATEGORY, action: 'refreshCategories', args: null },\n\t\t\t{ entity: SalesEntities.CUSTOMER, action: 'refreshCustomers', args: [arrCustomerIDs] },\n\t\t\t{ entity: SalesEntities.PRICE_LIST, action: 'refreshPriceLists', args: [arrCustomerIDs] },\n\t\t\t{ entity: SalesEntities.PRODUCT_RULE, action: 'refreshProductRules', args: [arrCustomerIDs] }\n\t\t\t//{ entity: SalesEntities.ORDER, action: 'refreshOrders', args: null }\n\t\t];\n\n\t\tlet refreshEntity = function(queueItem){\n\t\t\tthis[queueItem.action].apply(this, queueItem.args).always(function(){\n\t\t\t\t//We still have entities to refresh\n\t\t\t\tif(refreshQueue.length > 0){\n\t\t\t\t\t//Execute the next entity refresh in queue\n\t\t\t\t\trefreshEntity(refreshQueue.shift());\n\t\t\t\t\t\n\t\t\t\t//We've processed all items\n\t\t\t\t}else{\n\t\t\t\t\t//Instruct dispatcher to tell all stores that a sales refresh has completed\n\t\t\t\t\tutil.dispatch({\n\t\t\t\t\t\tactionType: Actions.SALES_REFRESH,\n\t\t\t\t\t\tactionStatus: Status.OK //For now, completion of this over-arching composite action = 'success'\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}.bind(this);\n\t\t\n\t\t//Execute the first entity refresh\n\t\trefreshEntity(refreshQueue.shift());\n\t},*/\n\t\n\t//Refresh specific customer(s) and their related sales data (price lists and product rules)\n\t//[Similar to refreshSalesData() above, and we retain the same action types, etc.]\n\t//[If we require another flavour of sales refresh in future, we could combine with refreshSalesData() instead and \n\t//make its queue configurable]\n\trefreshCustomersAndSalesData: function(arrCustomerIDs){\n\t\tvar refreshQueue = [\n\t\t\t//Refresh the general user/company info (including an access check), so that we have the latest flags (potentially affects e.g. pricelists refresh below)\n\t\t\t//(If it fails, we don't proceed with subsequent refreshes, in case it's an access permissions error)\n\t\t\t{ context: UserActions, action: 'refreshUser', args: null, completionWeighting: 0.1, stopOnFail: true },\n\t\t\t//(If the customer(s) refresh failed, don't proceed with the related sales data refreshes)\n\t\t\t{ context: this, action: 'refreshCustomers', args: [arrCustomerIDs], completionWeighting: 0.4, stopOnFail: true },\n\t\t\t{ context: this, action: 'refreshPriceLists', args: [arrCustomerIDs], completionWeighting: 0.25 },\n\t\t\t{ context: this, action: 'refreshProductRules', args: [arrCustomerIDs], completionWeighting: 0.25 }\n\t\t];\n\t\n\t\treturn util.executeActionQueue(refreshQueue, Actions.CUSTOMERS_SALES_REFRESH);\n\t},\n\t\n\t//Refresh specific customer(s) and their related sales data (price lists and product rules)\n\t//[Similar to refreshSalesData() above, and we retain the same action types, etc.]\n\t//[If we require another flavour of sales refresh in future, we could combine with refreshSalesData() instead and \n\t//make its queue configurable]\n\t/*refreshCustomersAndSalesDataORIG: function(arrCustomerIDs){\n\t\tlet returnDeferred = $.Deferred();\n\t\t\n\t\tif(arrCustomerIDs == null || !arrCustomerIDs.length) {\n\t\t\treturnDeferred.resolve();//reject()?\n\t\t\t\n\t\t}else{\n\t\t\t//Instruct dispatcher to tell all stores that a sales refresh is pending (has begun)\n\t\t\tutil.dispatch({\n\t\t\t\tactionType: Actions.SALES_REFRESH,\n\t\t\t\tactionStatus: Status.PENDING,\n\t\t\t\tresetTracking: true\n\t\t\t});\n\t\t\t\n\t\t\tlet refreshQueue = [\n\t\t\t\t{ entity: SalesEntities.CUSTOMER, action: 'refreshCustomers', args: [arrCustomerIDs] },\n\t\t\t\t{ entity: SalesEntities.PRICE_LIST, action: 'refreshPriceLists', args: [arrCustomerIDs] },\n\t\t\t\t{ entity: SalesEntities.PRODUCT_RULE, action: 'refreshProductRules', args: [arrCustomerIDs] }\n\t\t\t];\n\t\n\t\t\tlet refreshEntity = function(queueItem){\n\t\t\t\tthis[queueItem.action].apply(this, queueItem.args).fail(function(){\n\t\t\t\t\tif(queueItem.action == 'refreshCustomers'){\n\t\t\t\t\t\t//If the customer(s) refresh failed, don't proceed with the related sales data refreshes\n\t\t\t\t\t\trefreshQueue = [];\n\t\t\t\t\t}\n\t\t\t\t}).always(function(){\n\t\t\t\t\t//We still have entities to refresh\n\t\t\t\t\tif(refreshQueue.length > 0){\n\t\t\t\t\t\t//Execute the next entity refresh in queue\n\t\t\t\t\t\trefreshEntity(refreshQueue.shift());\n\t\t\t\t\t\t\n\t\t\t\t\t//We've processed all items\n\t\t\t\t\t}else{\n\t\t\t\t\t\t//Instruct dispatcher to tell all stores that a sales refresh has completed\n\t\t\t\t\t\tutil.dispatch({\n\t\t\t\t\t\t\tactionType: Actions.SALES_REFRESH,\n\t\t\t\t\t\t\t//For now, completion of this over-arching composite action = 'success'\n\t\t\t\t\t\t\t//[but if needed later we can return error, partial, etc.]\n\t\t\t\t\t\t\tactionStatus: Status.OK\n\t\t\t\t\t\t});\n\t\t\t\t\t\t\n\t\t\t\t\t\treturnDeferred.resolve();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}.bind(this);\n\t\t\t\n\t\t\t//Execute the first entity refresh\n\t\t\trefreshEntity(refreshQueue.shift());\n\t\t}\n\t\t\n\t\treturn returnDeferred;\n\t},*/\n\t\n\t//Refresh the past orders AND their related customers\n\t//[In future, provide a means to skip some customer refreshes?]\n\trefreshPastOrdersAndAssociatedCustomers: function(lastPastOrderRefreshTimestamp, retryPastOrderIDs){\n\t\tvar refreshQueue = [\n\t\t\t//Refresh the general user/company info (only for access check)\n\t\t\t//(If it fails, we don't proceed with subsequent refreshes, in case it's an access permissions error)\n\t\t\t{ context: UserActions, action: 'refreshUser', args: null, completionWeighting: 0.2, stopOnFail: true },\n\t\t\t//(If the past orders refresh fails, don't proceed with the related customer refreshes)\n\t\t\t{ context: this, action: 'refreshPastOrders', args: [lastPastOrderRefreshTimestamp, retryPastOrderIDs], completionWeighting: 0.4, stopOnFail: true },\n\t\t\t{ context: this, action: 'refreshCustomers', args: ['add:pastOrderCustomerIDs'], completionWeighting: 0.4 }\n\t\t];\n\t\t\n\t\t//In the offline customer case, we want to additionally refresh the extra offline customer sales detail needed\n\t\tif(!config.get(option.FUNC_ONLINE_CUSTOMERS)){\n\t\t\trefreshQueue[0].completionWeighting = 0.1;\n\t\t\trefreshQueue[1].completionWeighting = 0.3;\n\t\t\trefreshQueue[2].completionWeighting = 0.3;\n\t\t\trefreshQueue[2].stopOnFail = true; //If customers refresh fails, don't proceeed with this related data\n\t\t\t\n\t\t\trefreshQueue.push({ context: this, action: 'refreshPriceLists', args: ['add:pastOrderCustomerIDs'], completionWeighting: 0.15 });\n\t\t\trefreshQueue.push({ context: this, action: 'refreshProductRules', args: ['add:pastOrderCustomerIDs'], completionWeighting: 0.15 });\n\t\t}\n\t\n\t\treturn util.executeActionQueue(refreshQueue, Actions.PAST_ORDERS_CUSTOMERS_REFRESH);\n\t},\n\t\n\t//Sub action (but individually callable)\n\t//[lastRefreshTimestamp is used to determine products changed since last sync]\n\t//[retryProductIDs is used to explicitly specify additional products that should be reattempted]\n\trefreshProducts: function(lastRefreshTimestamp, retryProductIDs){\n\t\t//Instruct dispatcher to tell all stores that a products refresh is pending (has begun)\n\t\tutil.dispatch({\n\t\t\tactionType: Actions.SALES_REFRESH,\n\t\t\tactionStatus: Status.PENDING,\n\t\t\tentity: SalesEntities.PRODUCT,\n\t\t\tentityStatus: Status.PENDING\n\t\t});\n\t\t\n\t\t//If we have no record of a previous refresh, we get updates from the beginning\n\t\tif(lastRefreshTimestamp == null){\n\t\t\tlastRefreshTimestamp = 0;\n\t\t}\n\t\t//Let's specify as early as possible the timestamp to use as the new last refresh marker (an important value for not missing product updates)\n\t\tlet newLastRefreshTimestamp = util.getUnixTime();\n\t\t//We may have no explicitly specified product IDs to reattempt\n\t\tif(retryProductIDs == null){\n\t\t\tretryProductIDs = [];\n\t\t}\n\t\t\n\t\t//We use our own deferred object, so we can resolve/reject within nested AJAX callback architecture (see batch sub action)\n\t\tlet returnDeferred = $.Deferred();\n\t\t\n\t\t$.ajax({\n\t\t\tcontext: this,\n\t\t\turl: util.apiUrl + 'product/getUpdates',\n\t\t\ttype: 'GET',\n\t\t\tdata: {'date': lastRefreshTimestamp},\n\t\t\theaders: { \"Authorization\": util.getHTTPAuthString() },\n\t\t\tdataType: 'json'\n\t\t}).fail(function(){\n\t\t\t//Instruct dispatcher to tell all stores that a products refresh has failed\n\t\t\tutil.dispatch({\n\t\t\t\tactionType: Actions.SALES_REFRESH,\n\t\t\t\tactionStatus: Status.PENDING,\n\t\t\t\tentity: SalesEntities.PRODUCT,\n\t\t\t\tentityStatus: Status.ERROR\n\t\t\t});\n\t\t\treturnDeferred.reject();\n\t\t}).done(function(data){\n\t\t\tif(data.status){\n\t\t\t\tlet allProductIDs = _.uniq(data.results.all); //ALL products on server\n\t\t\t\t\n\t\t\t\t//First do any housekeeping in store, by providing full list of product IDs\n\t\t\t\t//[like deleting any products from store that no longer exist on server]\n\t\t\t\tutil.dispatch({\n\t\t\t\t\tactionType: Actions.SALES_REFRESH,\n\t\t\t\t\tactionStatus: Status.PENDING,\n\t\t\t\t\tentity: SalesEntities.PRODUCT,\n\t\t\t\t\tentityStatus: Status.PENDING,\n\t\t\t\t\tallProductIDs: allProductIDs\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tlet refreshProductIDs = []; //The products to refresh\n\t\t\t\t\n\t\t\t\t//If this is the initial refresh, we don't mess around and just grab all IDs\n\t\t\t\tif(lastRefreshTimestamp == 0){\n\t\t\t\t\trefreshProductIDs = allProductIDs;\n\t\t\t\t\n\t\t\t\t//Otherwise, we grab any updated IDs AND any specific retry IDs\t\n\t\t\t\t}else{\n\t\t\t\t\t//First, if necessary, do a safety check against all server products and remove any deleted products from the retryIDs\n\t\t\t\t\tif(allProductIDs.length > 0 && retryProductIDs.length > 0){\n\t\t\t\t\t\tretryProductIDs = _.filter(retryProductIDs, (pid) => (_.includes(allProductIDs, pid)));\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\trefreshProductIDs = _.union(data.results.changed, retryProductIDs);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//Proceed with batch fetching of the necessary products (returns its own deferred object)\n\t\t\t\tthis.refreshProductsBatched(refreshProductIDs, newLastRefreshTimestamp).fail(function(){\n\t\t\t\t\treturnDeferred.reject();\n\t\t\t\t}).done(function(data){\n\t\t\t\t\treturnDeferred.resolve(data);\n\t\t\t\t});\n\t\t\t}else{\n\t\t\t\t//Instruct dispatcher to tell all stores that a products refresh has failed\n\t\t\t\tutil.dispatch({\n\t\t\t\t\tactionType: Actions.SALES_REFRESH,\n\t\t\t\t\tactionStatus: Status.PENDING,\n\t\t\t\t\tentity: SalesEntities.PRODUCT,\n\t\t\t\t\tentityStatus: Status.ERROR\n\t\t\t\t});\n\t\t\t\treturnDeferred.reject();\n\t\t\t}\n\t\t});\n\t\t\n\t\treturn returnDeferred;\n\t},\n\t\n\t//Sub action (but individually callable)\n\t//[optionally specify the timestamp to use as the new last refresh marker (an important value for not missing product updates)]\n\trefreshProductsBatched: function(arrProductIDs, newLastRefreshTimestamp){\n\t\tlet returnDeferred = $.Deferred();\n\t\tlet numProducts = arrProductIDs.length;\n\t\t\n\t\tlet failedProductIDs = [];\n\t\t\n\t\tif(newLastRefreshTimestamp == null){\n\t\t\tnewLastRefreshTimestamp = util.getUnixTime();\n\t\t}\n\t\t\n\t\t//No products to refresh\n\t\tif(!numProducts){\n\t\t\t//Instruct dispatcher to tell all stores that a products batched refresh has succeeded\n\t\t\tutil.dispatch({\n\t\t\t\tactionType: Actions.SALES_REFRESH,\n\t\t\t\tactionStatus: Status.PENDING,\n\t\t\t\tentity: SalesEntities.PRODUCT,\n\t\t\t\tentityStatus: Status.OK,\n\t\t\t\tfailedProductIDs: failedProductIDs,\n\t\t\t\tnewLastRefreshTimestamp: newLastRefreshTimestamp\n\t\t\t});\n\t\t\treturnDeferred.resolve();\n\t\t\n\t\t//Recursively refresh the products in batches\t\n\t\t}else{\n\t\t\t//Instruct dispatcher to tell all stores that a products batched refresh is pending (has begun) [necessary?]\n\t\t\tutil.dispatch({\n\t\t\t\tactionType: Actions.SALES_REFRESH,\n\t\t\t\tactionStatus: Status.PENDING,\n\t\t\t\tentity: SalesEntities.PRODUCT,\n\t\t\t\tentityStatus: Status.PENDING\n\t\t\t});\n\t\t\t\n\t\t\tlet blnAllSuccessful = true;\n\t\t\tlet blnAllUnsuccessful = true;\n\t\t\t\n\t\t\tlet batchSize = 10;\n\t\t\tlet batchStart = 0;\n\t\t\tlet batchEnd = (batchStart + batchSize) > numProducts ? numProducts : (batchStart + batchSize);\n\t\t\t\n\t\t\tlet refreshProductBatch = function(arrProductIDBatch){\n\t\t\t\t$.ajax({\n\t\t\t\t\t//context: this,\n\t\t\t\t\turl: util.apiUrl + 'product/detailBatch',\n\t\t\t\t\ttype: 'GET',\n\t\t\t\t\tdata: {'ids': arrProductIDBatch.join()},\n\t\t\t\t\theaders: { \"Authorization\": util.getHTTPAuthString() },\n\t\t\t\t\tdataType: 'json'\n\t\t\t\t}).fail(function(){\n\t\t\t\t\tblnAllSuccessful = false;\n\t\t\t\t\tfailedProductIDs = _.union(failedProductIDs, arrProductIDBatch);\n\t\t\t\t}).done(function(data){\n\t\t\t\t\tif(data.status){\n\t\t\t\t\t\t//[We dispatch this data to store here, in a batched approach, \n\t\t\t\t\t\t//rather than in one huge collected list once all batches processed in always() below.\n\t\t\t\t\t\t//We note any products that don't exist, or other issues (i.e. those in data.results.failures), \n\t\t\t\t\t\t//and we only bother to send a dispatch for this batch if we actually have products to be stored.]\n\t\t\t\t\t\tif(!_.isEmpty(data.results.successes)){\n\t\t\t\t\t\t\tblnAllUnsuccessful = false;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t//Let's check our batch IDs against the successes, in case any need to be retried\n\t\t\t\t\t\t\t//let successfulProductBatchIDs = _.keysIn(data.results.successes);\n\t\t\t\t\t\t\tfor(var i = 0; i < arrProductIDBatch.length; i++){\n\t\t\t\t\t\t\t\tlet pid = arrProductIDBatch[i];\n\t\t\t\t\t\t\t\tif(/*!_.includes(successfulProductBatchIDs, pid) ||*/ data.results.successes[pid] == null){\n\t\t\t\t\t\t\t\t\tfailedProductIDs.push(pid);\n\t\t\t\t\t\t\t\t\tblnAllSuccessful = false;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tutil.dispatch({\n\t\t\t\t\t\t\t\tactionType: Actions.SALES_REFRESH,\n\t\t\t\t\t\t\t\tactionStatus: Status.PENDING,\n\t\t\t\t\t\t\t\tentity: SalesEntities.PRODUCT,\n\t\t\t\t\t\t\t\tentityStatus: Status.PENDING,\n\t\t\t\t\t\t\t\tbatchStatus: Status.OK,\n\t\t\t\t\t\t\t\tbatchItems: SalesUtil.prepareProductBatchData(data.results.successes),\n\t\t\t\t\t\t\t\tpercentageComplete: parseFloat( (batchEnd / numProducts) * 100 )\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\tblnAllSuccessful = false;\n\t\t\t\t\t\t\tfailedProductIDs = _.union(failedProductIDs, arrProductIDBatch);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t}else{\n\t\t\t\t\t\tblnAllSuccessful = false;\n\t\t\t\t\t\tfailedProductIDs = _.union(failedProductIDs, arrProductIDBatch);\n\t\t\t\t\t}\n\t\t\t\t}).always(function(){\n\t\t\t\t\t//We still have products to refresh\n\t\t\t\t\tif(batchEnd < numProducts){\n\t\t\t\t\t\tbatchStart = batchEnd;\n\t\t\t\t\t\tbatchEnd = (batchStart + batchSize) > numProducts ? numProducts : (batchStart + batchSize);\n\t\t\t\t\t\t//Execute the next product batch refresh\n\t\t\t\t\t\trefreshProductBatch(arrProductIDs.slice(batchStart, batchEnd));\n\t\t\t\t\t\t\n\t\t\t\t\t//We've processed all products\n\t\t\t\t\t}else{\n\t\t\t\t\t\tlet entityStatus = (blnAllSuccessful ? Status.OK : (blnAllUnsuccessful ? Status.ERROR : Status.PARTIAL));\n\t\t\t\t\t\t\n\t\t\t\t\t\t//Instruct dispatcher to tell all stores that a products batched refresh has either completed successfully,\n\t\t\t\t\t\t//or failed in some way (partially or completely)\n\t\t\t\t\t\tutil.dispatch({\n\t\t\t\t\t\t\tactionType: Actions.SALES_REFRESH,\n\t\t\t\t\t\t\tactionStatus: Status.PENDING,\n\t\t\t\t\t\t\tentity: SalesEntities.PRODUCT,\n\t\t\t\t\t\t\tentityStatus: entityStatus,\n\t\t\t\t\t\t\tfailedProductIDs: failedProductIDs,\n\t\t\t\t\t\t\tnewLastRefreshTimestamp: newLastRefreshTimestamp\n\t\t\t\t\t\t});\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(entityStatus == Status.ERROR){\n\t\t\t\t\t\t\treturnDeferred.reject();\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\treturnDeferred.resolve({ partial: (entityStatus == Status.PARTIAL) });\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}.bind(this);\n\t\t\t\n\t\t\t//Execute the first product batch refresh\n\t\t\trefreshProductBatch(arrProductIDs.slice(batchStart, batchEnd));\n\t\t}\n\t\t\n\t\treturn returnDeferred;\n\t},\n\t\n\t//Sub action (but individually callable)\n\trefreshCategories: function(){\n\t\t//Instruct dispatcher to tell all stores that a categories refresh is pending (has begun)\n\t\tutil.dispatch({\n\t\t\tactionType: Actions.SALES_REFRESH,\n\t\t\tactionStatus: Status.PENDING,\n\t\t\tentity: SalesEntities.CATEGORY,\n\t\t\tentityStatus: Status.PENDING\n\t\t});\n\t\t\n\t\t//We return our own deferred object, instead of the one returned by $.ajax, so we can also reject within the 'successful' done AJAX callback below if necessary\n\t\t//(We do this so queue actions can obtain accurate success/failure)\n\t\tlet returnDeferred = $.Deferred();\n\t\t\n\t\t$.ajax({\n\t\t\t//context: this,\n\t\t\turl: util.apiUrl + 'category/tree',\n\t\t\ttype: 'GET',\n\t\t\theaders: { \"Authorization\": util.getHTTPAuthString() },\n\t\t\tdataType: 'json'\n\t\t}).fail(function(){\n\t\t\t//Instruct dispatcher to tell all stores that a categories refresh has failed\n\t\t\tutil.dispatch({\n\t\t\t\tactionType: Actions.SALES_REFRESH,\n\t\t\t\tactionStatus: Status.PENDING,\n\t\t\t\tentity: SalesEntities.CATEGORY,\n\t\t\t\tentityStatus: Status.ERROR\n\t\t\t});\n\t\t\treturnDeferred.reject();\n\t\t}).done(function(data){\n\t\t\tif(data.status){\n\t\t\t\t//Instruct dispatcher to tell all stores that a categories refresh has succeeded\n\t\t\t\tutil.dispatch({\n\t\t\t\t\tactionType: Actions.SALES_REFRESH,\n\t\t\t\t\tactionStatus: Status.PENDING,\n\t\t\t\t\tentity: SalesEntities.CATEGORY,\n\t\t\t\t\tentityStatus: Status.OK,\n\t\t\t\t\tarrCategoryTree: data.results\n\t\t\t\t});\n\t\t\t\treturnDeferred.resolve();\n\t\t\t\t\n\t\t\t}else{\n\t\t\t\t//Instruct dispatcher to tell all stores that a categories refresh has failed\n\t\t\t\tutil.dispatch({\n\t\t\t\t\tactionType: Actions.SALES_REFRESH,\n\t\t\t\t\tactionStatus: Status.PENDING,\n\t\t\t\t\tentity: SalesEntities.CATEGORY,\n\t\t\t\t\tentityStatus: Status.ERROR\n\t\t\t\t});\n\t\t\t\treturnDeferred.reject();\n\t\t\t}\n\t\t});\n\t\t\n\t\treturn returnDeferred;\n\t},\n\t\n\t//Sub action (but individually callable)\n\t//[Note: this is similar to CallActions::refreshCustomer(), but used in a different context here \n\t//(so both could potentially be combined at a later stage if necessary)]\n\trefreshCustomers: function(arrCustomerIDs){\n\t\tarrCustomerIDs = arrCustomerIDs.slice(); //make a copy (since we're modifying it internally here and it's used in other functions too)\n\t\tlet returnDeferred = $.Deferred();\n\t\tlet numCustomers = arrCustomerIDs.length;\n\t\tlet blnAllSuccessful = true;\n\t\tlet blnAllUnsuccessful = true;\n\t\t\n\t\t//Let's initially always refresh the customer custom fields data (and include it as part of the entire 'batch' operation)\n\t\t$.ajax({\n\t\t\t//context: this,\n\t\t\turl: util.apiUrl + 'general/getCustomFields',\n\t\t\ttype: 'GET',\n\t\t\tdata: {'table': 'customer'},\n\t\t\theaders: { \"Authorization\": util.getHTTPAuthString() },\n\t\t\tdataType: 'json'\n\t\t}).fail(function(){\n\t\t\tblnAllSuccessful = false;\n\t\t}).done(function(fieldsData){\n\t\t\tif(fieldsData.status){\n\t\t\t\tblnAllUnsuccessful = false;\n\t\t\t\t//[We dispatch this data to store here (piecemeal approach)\n\t\t\t\tutil.dispatch({\n\t\t\t\t\tactionType: Actions.SALES_REFRESH,\n\t\t\t\t\tactionStatus: Status.PENDING,\n\t\t\t\t\tentity: SalesEntities.CUSTOMER,\n\t\t\t\t\tentityStatus: Status.PENDING,\n\t\t\t\t\t//Using batch nomenclature for now\n\t\t\t\t\tbatchStatus: Status.OK,\n\t\t\t\t\tbatchFieldData: fieldsData.results,\n\t\t\t\t\t//[Add 1 'customer' to processing total, for this call]\n\t\t\t\t\tpercentageComplete: parseFloat( (1 / (numCustomers + 1)) * 100 )\n\t\t\t\t});\n\t\t\t\t\n\t\t\t}else{\n\t\t\t\tblnAllSuccessful = false;\n\t\t\t}\n\t\t\n\t\t//Now we can go ahead with the main operation\t\n\t\t}).always(function(){\n\t\t\t//No customers to refresh\n\t\t\tif(!numCustomers){\n\t\t\t\t//[Since this dispatch is for a 'successful' processing of the customers (even though there were none), \n\t\t\t\t//we send a partial success if the fields refresh above failed, otherwise success]\n\t\t\t\tlet entityStatus = (blnAllSuccessful ? Status.OK : Status.PARTIAL);\n\t\t\t\t\n\t\t\t\t//Instruct dispatcher to tell all stores that a customers refresh has completed\n\t\t\t\tutil.dispatch({\n\t\t\t\t\tactionType: Actions.SALES_REFRESH,\n\t\t\t\t\tactionStatus: Status.PENDING,\n\t\t\t\t\tentity: SalesEntities.CUSTOMER,\n\t\t\t\t\tentityStatus: entityStatus //Status.OK\n\t\t\t\t});\n\t\t\t\t//returnDeferred.resolve();\n\t\t\t\treturnDeferred.resolve({ partial: (entityStatus == Status.PARTIAL) });\n\t\t\t\n\t\t\t//Recursively refresh the customers\t\n\t\t\t}else{\n\t\t\t\t//Instruct dispatcher to tell all stores that a customers refresh is pending (has begun) [necessary?]\n\t\t\t\t/*util.dispatch({\n\t\t\t\t\tactionType: Actions.SALES_REFRESH,\n\t\t\t\t\tactionStatus: Status.PENDING,\n\t\t\t\t\tentity: SalesEntities.CUSTOMER,\n\t\t\t\t\tentityStatus: Status.PENDING\n\t\t\t\t});*/\n\t\t\t\t\n\t\t\t\tlet refreshCustomer = function(customerID){\n\t\t\t\t\t$.ajax({\n\t\t\t\t\t\t//context: this,\n\t\t\t\t\t\turl: util.apiUrl + 'customer/detail',\n\t\t\t\t\t\ttype: 'GET',\n\t\t\t\t\t\tdata: {'id': customerID},\n\t\t\t\t\t\theaders: { \"Authorization\": util.getHTTPAuthString() },\n\t\t\t\t\t\tdataType: 'json'\n\t\t\t\t\t}).fail(function(){\n\t\t\t\t\t\tblnAllSuccessful = false;\n\t\t\t\t\t}).done(function(data){\n\t\t\t\t\t\tif(data.status){\n\t\t\t\t\t\t\tblnAllUnsuccessful = false;\n\t\t\t\t\t\t\t//[We dispatch this data to store here, in a piecemeal approach, \n\t\t\t\t\t\t\t//rather than in one huge collected list once all customers processed in always() below.\n\t\t\t\t\t\t\tutil.dispatch({\n\t\t\t\t\t\t\t\tactionType: Actions.SALES_REFRESH,\n\t\t\t\t\t\t\t\tactionStatus: Status.PENDING,\n\t\t\t\t\t\t\t\tentity: SalesEntities.CUSTOMER,\n\t\t\t\t\t\t\t\tentityStatus: Status.PENDING,\n\t\t\t\t\t\t\t\t//Using batch nomenclature for now\n\t\t\t\t\t\t\t\tbatchStatus: Status.OK,\n\t\t\t\t\t\t\t\tbatchCustomers: [data.results],\n\t\t\t\t\t\t\t\t//[1 'customer' added to processing total, for fields call above]\n\t\t\t\t\t\t\t\tpercentageComplete: parseFloat( ((numCustomers - arrCustomerIDs.length + 1) / (numCustomers + 1)) * 100 )\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\tblnAllSuccessful = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}).always(function(){\n\t\t\t\t\t\t//We still have customers to refresh\n\t\t\t\t\t\tif(arrCustomerIDs.length > 0){\n\t\t\t\t\t\t\t//Execute the next customer refresh\n\t\t\t\t\t\t\trefreshCustomer(arrCustomerIDs.shift());\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t//We've processed all customers\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\tlet entityStatus = (blnAllSuccessful ? Status.OK : (blnAllUnsuccessful ? Status.ERROR : Status.PARTIAL));\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t//Instruct dispatcher to tell all stores that a customers refresh has either completed successfully,\n\t\t\t\t\t\t\t//or failed in some way (partially or completely)\n\t\t\t\t\t\t\tutil.dispatch({\n\t\t\t\t\t\t\t\tactionType: Actions.SALES_REFRESH,\n\t\t\t\t\t\t\t\tactionStatus: Status.PENDING,\n\t\t\t\t\t\t\t\tentity: SalesEntities.CUSTOMER,\n\t\t\t\t\t\t\t\tentityStatus: entityStatus\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif(entityStatus == Status.ERROR){\n\t\t\t\t\t\t\t\treturnDeferred.reject();\n\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\treturnDeferred.resolve({ partial: (entityStatus == Status.PARTIAL) });\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}.bind(this);\n\t\t\t\t\n\t\t\t\t//Execute the first customer refresh\n\t\t\t\trefreshCustomer(arrCustomerIDs.shift());\n\t\t\t}\t\t\t\n\t\t});\n\t\t\n\t\treturn returnDeferred;\n\t},\n\t\n\t//Sub action (but individually callable)\n\trefreshPriceLists: function(arrCustomerIDs){\n\t\tlet returnDeferred = $.Deferred();\n\t\tlet numCustomers = arrCustomerIDs.length;\n\t\t\n\t\t//Price lists are not enabled on server (so no check needed) OR no customers for which to refresh price lists\n\t\tif(!util.isPriceListsCheckNeeded() || !numCustomers){\n\t\t\t//Instruct dispatcher to tell all stores that a price lists batched refresh has succeeded\n\t\t\tutil.dispatch({\n\t\t\t\tactionType: Actions.SALES_REFRESH,\n\t\t\t\tactionStatus: Status.PENDING,\n\t\t\t\tentity: SalesEntities.PRICE_LIST,\n\t\t\t\tentityStatus: Status.OK\n\t\t\t});\n\t\t\treturnDeferred.resolve();\n\t\t\n\t\t//Recursively refresh the price lists in customer ID batches\t\n\t\t}else{\n\t\t\t//Instruct dispatcher to tell all stores that a price lists batched refresh is pending (has begun) [necessary?]\n\t\t\tutil.dispatch({\n\t\t\t\tactionType: Actions.SALES_REFRESH,\n\t\t\t\tactionStatus: Status.PENDING,\n\t\t\t\tentity: SalesEntities.PRICE_LIST,\n\t\t\t\tentityStatus: Status.PENDING\n\t\t\t});\n\t\t\t\n\t\t\tlet blnAllSuccessful = true;\n\t\t\tlet blnAllUnsuccessful = true;\n\t\t\t\n\t\t\tlet batchSize = 10;\n\t\t\tlet batchStart = 0;\n\t\t\tlet batchEnd = (batchStart + batchSize) > numCustomers ? numCustomers : (batchStart + batchSize);\n\t\t\t\n\t\t\tlet refreshPriceListBatch = function(arrCustomerIDBatch){\n\t\t\t\t$.ajax({\n\t\t\t\t\t//context: this,\n\t\t\t\t\turl: util.apiUrl + 'pricelist/pricelistBatch',\n\t\t\t\t\ttype: 'GET',\n\t\t\t\t\tdata: {'ids': arrCustomerIDBatch.join()},\n\t\t\t\t\theaders: { \"Authorization\": util.getHTTPAuthString() },\n\t\t\t\t\tdataType: 'json'\n\t\t\t\t}).fail(function(){\n\t\t\t\t\tblnAllSuccessful = false;\n\t\t\t\t}).done(function(data){\n\t\t\t\t\tif(data.status){\n\t\t\t\t\t\tblnAllUnsuccessful = false;\n\t\t\t\t\t\t//[We dispatch this data to store here, in a batched approach, \n\t\t\t\t\t\t//rather than in one huge collected list once all batches processed in always() below.\n\t\t\t\t\t\t//We ignore any price lists that don't exist, or other issues (i.e. those in data.results.failures), \n\t\t\t\t\t\t//and we only bother to send a dispatch for this batch if we actually have price lists to be stored.]\n\t\t\t\t\t\tif(!_.isEmpty(data.results.successes)){\n\t\t\t\t\t\t\tutil.dispatch({\n\t\t\t\t\t\t\t\tactionType: Actions.SALES_REFRESH,\n\t\t\t\t\t\t\t\tactionStatus: Status.PENDING,\n\t\t\t\t\t\t\t\tentity: SalesEntities.PRICE_LIST,\n\t\t\t\t\t\t\t\tentityStatus: Status.PENDING,\n\t\t\t\t\t\t\t\tbatchStatus: Status.OK,\n\t\t\t\t\t\t\t\tbatchItems: data.results.successes,\n\t\t\t\t\t\t\t\tpercentageComplete: parseFloat( (batchEnd / numCustomers) * 100 )\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t}else{\n\t\t\t\t\t\tblnAllSuccessful = false;\n\t\t\t\t\t}\n\t\t\t\t}).always(function(){\n\t\t\t\t\t//We still have customers for which to refresh price lists\n\t\t\t\t\tif(batchEnd < numCustomers){\n\t\t\t\t\t\tbatchStart = batchEnd;\n\t\t\t\t\t\tbatchEnd = (batchStart + batchSize) > numCustomers ? numCustomers : (batchStart + batchSize);\n\t\t\t\t\t\t//Execute the next price lists batch refresh\n\t\t\t\t\t\trefreshPriceListBatch(arrCustomerIDs.slice(batchStart, batchEnd));\n\t\t\t\t\t\t\n\t\t\t\t\t//We've processed all customers\n\t\t\t\t\t}else{\n\t\t\t\t\t\tlet entityStatus = (blnAllSuccessful ? Status.OK : (blnAllUnsuccessful ? Status.ERROR : Status.PARTIAL));\n\t\t\t\t\t\t\n\t\t\t\t\t\t//Instruct dispatcher to tell all stores that a price lists batched refresh has either completed successfully,\n\t\t\t\t\t\t//or failed in some way (partially or completely)\n\t\t\t\t\t\tutil.dispatch({\n\t\t\t\t\t\t\tactionType: Actions.SALES_REFRESH,\n\t\t\t\t\t\t\tactionStatus: Status.PENDING,\n\t\t\t\t\t\t\tentity: SalesEntities.PRICE_LIST,\n\t\t\t\t\t\t\tentityStatus: entityStatus\n\t\t\t\t\t\t});\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(entityStatus == Status.ERROR){\n\t\t\t\t\t\t\treturnDeferred.reject();\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\treturnDeferred.resolve({ partial: (entityStatus == Status.PARTIAL) });\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}.bind(this);\n\t\t\t\n\t\t\t//Execute the first price lists batch refresh\n\t\t\trefreshPriceListBatch(arrCustomerIDs.slice(batchStart, batchEnd));\n\t\t}\n\t\t\n\t\treturn returnDeferred;\n\t},\n\t\n\t//Sub action (but individually callable)\n\trefreshProductRules: function(arrCustomerIDs){\n\t\tlet returnDeferred = $.Deferred();\n\t\tlet numCustomers = arrCustomerIDs.length;\n\t\t\n\t\t//No product rules have been created on server (so no check needed) OR no customers for which to refresh product rules\n\t\tif(!util.isProductRulesCheckNeeded() || !numCustomers){\n\t\t\t//Instruct dispatcher to tell all stores that a product rules batched refresh has succeeded\n\t\t\tutil.dispatch({\n\t\t\t\tactionType: Actions.SALES_REFRESH,\n\t\t\t\tactionStatus: Status.PENDING,\n\t\t\t\tentity: SalesEntities.PRODUCT_RULE,\n\t\t\t\tentityStatus: Status.OK\n\t\t\t});\n\t\t\treturnDeferred.resolve();\n\t\t\n\t\t//Recursively refresh the product rules in customer ID batches\t\n\t\t}else{\n\t\t\t//Instruct dispatcher to tell all stores that a product rules batched refresh is pending (has begun) [necessary?]\n\t\t\tutil.dispatch({\n\t\t\t\tactionType: Actions.SALES_REFRESH,\n\t\t\t\tactionStatus: Status.PENDING,\n\t\t\t\tentity: SalesEntities.PRODUCT_RULE,\n\t\t\t\tentityStatus: Status.PENDING\n\t\t\t});\n\t\t\t\n\t\t\tlet blnAllSuccessful = true;\n\t\t\tlet blnAllUnsuccessful = true;\n\t\t\t\n\t\t\tlet batchSize = 10;\n\t\t\tlet batchStart = 0;\n\t\t\tlet batchEnd = (batchStart + batchSize) > numCustomers ? numCustomers : (batchStart + batchSize);\n\t\t\t\n\t\t\tlet refreshProductRuleBatch = function(arrCustomerIDBatch){\n\t\t\t\t$.ajax({\n\t\t\t\t\t//context: this,\n\t\t\t\t\turl: util.apiUrl + 'productrule/productruleBatch',\n\t\t\t\t\ttype: 'GET',\n\t\t\t\t\tdata: {'ids': arrCustomerIDBatch.join()},\n\t\t\t\t\theaders: { \"Authorization\": util.getHTTPAuthString() },\n\t\t\t\t\tdataType: 'json'\n\t\t\t\t}).fail(function(){\n\t\t\t\t\tblnAllSuccessful = false;\n\t\t\t\t}).done(function(data){\n\t\t\t\t\tif(data.status){\n\t\t\t\t\t\tblnAllUnsuccessful = false;\n\t\t\t\t\t\t//[We dispatch this data to store here, in a batched approach, \n\t\t\t\t\t\t//rather than in one huge collected list once all batches processed in always() below.\n\t\t\t\t\t\t//We ignore any product rules that don't exist, or other issues (i.e. those in data.results.failures), \n\t\t\t\t\t\t//and we only bother to send a dispatch for this batch if we actually have product rules to be stored.]\n\t\t\t\t\t\tif(!_.isEmpty(data.results.successes)){\n\t\t\t\t\t\t\tutil.dispatch({\n\t\t\t\t\t\t\t\tactionType: Actions.SALES_REFRESH,\n\t\t\t\t\t\t\t\tactionStatus: Status.PENDING,\n\t\t\t\t\t\t\t\tentity: SalesEntities.PRODUCT_RULE,\n\t\t\t\t\t\t\t\tentityStatus: Status.PENDING,\n\t\t\t\t\t\t\t\tbatchStatus: Status.OK,\n\t\t\t\t\t\t\t\tbatchItems: data.results.successes,\n\t\t\t\t\t\t\t\tpercentageComplete: parseFloat( (batchEnd / numCustomers) * 100 )\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t}else{\n\t\t\t\t\t\tblnAllSuccessful = false;\n\t\t\t\t\t}\n\t\t\t\t}).always(function(){\n\t\t\t\t\t//We still have customers for which to refresh product rules\n\t\t\t\t\tif(batchEnd < numCustomers){\n\t\t\t\t\t\tbatchStart = batchEnd;\n\t\t\t\t\t\tbatchEnd = (batchStart + batchSize) > numCustomers ? numCustomers : (batchStart + batchSize);\n\t\t\t\t\t\t//Execute the next product rules batch refresh\n\t\t\t\t\t\trefreshProductRuleBatch(arrCustomerIDs.slice(batchStart, batchEnd));\n\t\t\t\t\t\t\n\t\t\t\t\t//We've processed all customers\n\t\t\t\t\t}else{\n\t\t\t\t\t\tlet entityStatus = (blnAllSuccessful ? Status.OK : (blnAllUnsuccessful ? Status.ERROR : Status.PARTIAL));\n\t\t\t\t\t\t\n\t\t\t\t\t\t//Instruct dispatcher to tell all stores that a product rules batched refresh has either completed successfully,\n\t\t\t\t\t\t//or failed in some way (partially or completely)\n\t\t\t\t\t\tutil.dispatch({\n\t\t\t\t\t\t\tactionType: Actions.SALES_REFRESH,\n\t\t\t\t\t\t\tactionStatus: Status.PENDING,\n\t\t\t\t\t\t\tentity: SalesEntities.PRODUCT_RULE,\n\t\t\t\t\t\t\tentityStatus: entityStatus\n\t\t\t\t\t\t});\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(entityStatus == Status.ERROR){\n\t\t\t\t\t\t\treturnDeferred.reject();\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\treturnDeferred.resolve({ partial: (entityStatus == Status.PARTIAL) });\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}.bind(this);\n\t\t\t\n\t\t\t//Execute the first product rules batch refresh\n\t\t\trefreshProductRuleBatch(arrCustomerIDs.slice(batchStart, batchEnd));\n\t\t}\n\t\t\n\t\treturn returnDeferred;\n\t},\n\t\n\t//Sub action (but individually callable)\n\trefreshPaymentTerms: function(){\n\t\t//Instruct dispatcher to tell all stores that a payment terms refresh is pending (has begun)\n\t\tutil.dispatch({\n\t\t\tactionType: Actions.SALES_REFRESH,\n\t\t\tactionStatus: Status.PENDING,\n\t\t\tentity: SalesEntities.PAYMENT_TERM,\n\t\t\tentityStatus: Status.PENDING\n\t\t});\n\t\t\n\t\t//We return our own deferred object, instead of the one returned by $.ajax, so we can also reject within the 'successful' done AJAX callback below if necessary\n\t\t//(We do this so queue actions can obtain accurate success/failure)\n\t\tlet returnDeferred = $.Deferred();\n\t\t\n\t\t$.ajax({\n\t\t\t//context: this,\n\t\t\turl: util.apiUrl + 'admin/paymentTerms',\n\t\t\ttype: 'GET',\n\t\t\tdata: {'company_id': 1},\n\t\t\theaders: { \"Authorization\": util.getHTTPAuthString() },\n\t\t\tdataType: 'json'\n\t\t}).fail(function(){\n\t\t\t//Instruct dispatcher to tell all stores that a payment terms refresh has failed\n\t\t\tutil.dispatch({\n\t\t\t\tactionType: Actions.SALES_REFRESH,\n\t\t\t\tactionStatus: Status.PENDING,\n\t\t\t\tentity: SalesEntities.PAYMENT_TERM,\n\t\t\t\tentityStatus: Status.ERROR\n\t\t\t});\n\t\t\treturnDeferred.reject();\n\t\t}).done(function(data){\n\t\t\tif(data.status){\n\t\t\t\t//Instruct dispatcher to tell all stores that a payment terms refresh has succeeded\n\t\t\t\tutil.dispatch({\n\t\t\t\t\tactionType: Actions.SALES_REFRESH,\n\t\t\t\t\tactionStatus: Status.PENDING,\n\t\t\t\t\tentity: SalesEntities.PAYMENT_TERM,\n\t\t\t\t\tentityStatus: Status.OK,\n\t\t\t\t\tarrPaymentTerms: data.results\n\t\t\t\t});\n\t\t\t\treturnDeferred.resolve();\n\t\t\t}else{\n\t\t\t\t//Instruct dispatcher to tell all stores that a payment terms refresh has failed\n\t\t\t\tutil.dispatch({\n\t\t\t\t\tactionType: Actions.SALES_REFRESH,\n\t\t\t\t\tactionStatus: Status.PENDING,\n\t\t\t\t\tentity: SalesEntities.PAYMENT_TERM,\n\t\t\t\t\tentityStatus: Status.ERROR\n\t\t\t\t});\n\t\t\t\treturnDeferred.reject();\n\t\t\t}\n\t\t});\n\t\t\n\t\treturn returnDeferred;\n\t},\n\t\n\t//Sub action (but individually callable)\n\trefreshTaxClasses: function(){\n\t\t//Instruct dispatcher to tell all stores that a tax classes refresh is pending (has begun)\n\t\tutil.dispatch({\n\t\t\tactionType: Actions.SALES_REFRESH,\n\t\t\tactionStatus: Status.PENDING,\n\t\t\tentity: SalesEntities.TAX_CLASS,\n\t\t\tentityStatus: Status.PENDING\n\t\t});\n\t\t\n\t\t//We return our own deferred object, instead of the one returned by $.ajax, so we can also reject within the 'successful' done AJAX callback below if necessary\n\t\t//(We do this so queue actions can obtain accurate success/failure)\n\t\tlet returnDeferred = $.Deferred();\n\t\t\n\t\t$.ajax({\n\t\t\t//context: this,\n\t\t\turl: util.apiUrl + 'admin/taxClasses',\n\t\t\ttype: 'GET',\n\t\t\tdata: {'company_id': 1},\n\t\t\theaders: { \"Authorization\": util.getHTTPAuthString() },\n\t\t\tdataType: 'json'\n\t\t}).fail(function(){\n\t\t\t//Instruct dispatcher to tell all stores that a tax classes refresh has failed\n\t\t\tutil.dispatch({\n\t\t\t\tactionType: Actions.SALES_REFRESH,\n\t\t\t\tactionStatus: Status.PENDING,\n\t\t\t\tentity: SalesEntities.TAX_CLASS,\n\t\t\t\tentityStatus: Status.ERROR\n\t\t\t});\n\t\t\treturnDeferred.reject();\n\t\t}).done(function(data){\n\t\t\tif(data.status){\n\t\t\t\t//Instruct dispatcher to tell all stores that a tax classes refresh has succeeded\n\t\t\t\tutil.dispatch({\n\t\t\t\t\tactionType: Actions.SALES_REFRESH,\n\t\t\t\t\tactionStatus: Status.PENDING,\n\t\t\t\t\tentity: SalesEntities.TAX_CLASS,\n\t\t\t\t\tentityStatus: Status.OK,\n\t\t\t\t\tarrTaxClasses: data.results\n\t\t\t\t});\n\t\t\t\treturnDeferred.resolve();\n\t\t\t\t\n\t\t\t}else{\n\t\t\t\t//Instruct dispatcher to tell all stores that a tax classes refresh has failed\n\t\t\t\tutil.dispatch({\n\t\t\t\t\tactionType: Actions.SALES_REFRESH,\n\t\t\t\t\tactionStatus: Status.PENDING,\n\t\t\t\t\tentity: SalesEntities.TAX_CLASS,\n\t\t\t\t\tentityStatus: Status.ERROR\n\t\t\t\t});\n\t\t\t\treturnDeferred.reject();\n\t\t\t}\n\t\t});\n\t\t\n\t\treturn returnDeferred;\n\t},\n\t\n\t//Sub action (but individually callable)\n\trefreshCarriers: function(){\n\t\t//Instruct dispatcher to tell all stores that a carriers refresh is pending (has begun)\n\t\tutil.dispatch({\n\t\t\tactionType: Actions.SALES_REFRESH,\n\t\t\tactionStatus: Status.PENDING,\n\t\t\tentity: SalesEntities.CARRIER,\n\t\t\tentityStatus: Status.PENDING\n\t\t});\n\t\t\n\t\t//We return our own deferred object, instead of the one returned by $.ajax, so we can also reject within the 'successful' done AJAX callback below if necessary\n\t\t//(We do this so queue actions can obtain accurate success/failure)\n\t\tlet returnDeferred = $.Deferred();\n\t\t\n\t\t$.ajax({\n\t\t\t//context: this,\n\t\t\turl: util.apiUrl + 'admin/carriers',\n\t\t\ttype: 'GET',\n\t\t\theaders: { \"Authorization\": util.getHTTPAuthString() },\n\t\t\tdataType: 'json'\n\t\t}).fail(function(){\n\t\t\t//Instruct dispatcher to tell all stores that a carriers refresh has failed\n\t\t\tutil.dispatch({\n\t\t\t\tactionType: Actions.SALES_REFRESH,\n\t\t\t\tactionStatus: Status.PENDING,\n\t\t\t\tentity: SalesEntities.CARRIER,\n\t\t\t\tentityStatus: Status.ERROR\n\t\t\t});\n\t\t\treturnDeferred.reject();\n\t\t}).done(function(data){\n\t\t\tif(data.status){\n\t\t\t\t//Instruct dispatcher to tell all stores that a carriers refresh has succeeded\n\t\t\t\tutil.dispatch({\n\t\t\t\t\tactionType: Actions.SALES_REFRESH,\n\t\t\t\t\tactionStatus: Status.PENDING,\n\t\t\t\t\tentity: SalesEntities.CARRIER,\n\t\t\t\t\tentityStatus: Status.OK,\n\t\t\t\t\tarrCarriers: data.results\n\t\t\t\t});\n\t\t\t\treturnDeferred.resolve();\n\t\t\t\t\n\t\t\t}else{\n\t\t\t\t//Instruct dispatcher to tell all stores that a carriers refresh has failed\n\t\t\t\tutil.dispatch({\n\t\t\t\t\tactionType: Actions.SALES_REFRESH,\n\t\t\t\t\tactionStatus: Status.PENDING,\n\t\t\t\t\tentity: SalesEntities.CARRIER,\n\t\t\t\t\tentityStatus: Status.ERROR\n\t\t\t\t});\n\t\t\t\treturnDeferred.reject();\n\t\t\t}\n\t\t});\n\t\t\n\t\treturn returnDeferred;\n\t},\n\t\n\t//Sub action (but individually callable)\n\trefreshCurrencies: function(){\n\t\t//Instruct dispatcher to tell all stores that a currencies refresh is pending (has begun)\n\t\tutil.dispatch({\n\t\t\tactionType: Actions.SALES_REFRESH,\n\t\t\tactionStatus: Status.PENDING,\n\t\t\tentity: SalesEntities.CURRENCY,\n\t\t\tentityStatus: Status.PENDING\n\t\t});\n\t\t\n\t\t//We return our own deferred object, instead of the one returned by $.ajax, so we can also reject within the 'successful' done AJAX callback below if necessary\n\t\t//(We do this so queue actions can obtain accurate success/failure)\n\t\tlet returnDeferred = $.Deferred();\n\t\t\n\t\t$.ajax({\n\t\t\t//context: this,\n\t\t\turl: util.apiUrl + 'admin/currencies',\n\t\t\ttype: 'GET',\n\t\t\theaders: { \"Authorization\": util.getHTTPAuthString() },\n\t\t\tdataType: 'json'\n\t\t}).fail(function(){\n\t\t\t//Instruct dispatcher to tell all stores that a currencies refresh has failed\n\t\t\tutil.dispatch({\n\t\t\t\tactionType: Actions.SALES_REFRESH,\n\t\t\t\tactionStatus: Status.PENDING,\n\t\t\t\tentity: SalesEntities.CURRENCY,\n\t\t\t\tentityStatus: Status.ERROR\n\t\t\t});\n\t\t\treturnDeferred.reject();\n\t\t}).done(function(data){\n\t\t\tif(data.status){\n\t\t\t\t//Instruct dispatcher to tell all stores that a currencies refresh has succeeded\n\t\t\t\tutil.dispatch({\n\t\t\t\t\tactionType: Actions.SALES_REFRESH,\n\t\t\t\t\tactionStatus: Status.PENDING,\n\t\t\t\t\tentity: SalesEntities.CURRENCY,\n\t\t\t\t\tentityStatus: Status.OK,\n\t\t\t\t\tarrCurrencies: data.results\n\t\t\t\t});\n\t\t\t\treturnDeferred.resolve();\n\t\t\t\t\n\t\t\t}else{\n\t\t\t\t//Instruct dispatcher to tell all stores that a currencies refresh has failed\n\t\t\t\tutil.dispatch({\n\t\t\t\t\tactionType: Actions.SALES_REFRESH,\n\t\t\t\t\tactionStatus: Status.PENDING,\n\t\t\t\t\tentity: SalesEntities.CURRENCY,\n\t\t\t\t\tentityStatus: Status.ERROR\n\t\t\t\t});\n\t\t\t\treturnDeferred.reject();\n\t\t\t}\n\t\t});\n\t\t\n\t\treturn returnDeferred;\n\t},\n\t\n\t//Sub action (but individually callable)\n\t//[lastRefreshTimestamp is used to determine orders changed since last sync]\n\t//[retryOrderIDs is used to explicitly specify additional orders that should be reattempted]\n\trefreshPastOrders: function(lastRefreshTimestamp, retryOrderIDs){\n\t\t//Instruct dispatcher to tell all stores that an orders refresh is pending (has begun)\n\t\tutil.dispatch({\n\t\t\tactionType: Actions.SALES_REFRESH,\n\t\t\tactionStatus: Status.PENDING,\n\t\t\tentity: SalesEntities.ORDER,\n\t\t\tentityStatus: Status.PENDING\n\t\t});\n\t\t\n\t\t//If we have no record of a previous refresh, we get updates from the beginning\n\t\tif(lastRefreshTimestamp == null){\n\t\t\tlastRefreshTimestamp = 0;\n\t\t}\n\t\t//Let's specify as early as possible the timestamp to use as the new last refresh marker (an important value for not missing order updates)\n\t\tlet newLastRefreshTimestamp = util.getUnixTime();\n\t\t//We may have no explicitly specified order IDs to reattempt\n\t\tif(retryOrderIDs == null){\n\t\t\tretryOrderIDs = [];\n\t\t}\n\t\t\n\t\t//We use our own deferred object, so we can resolve/reject within nested AJAX callback architecture (see specified sub action)\n\t\tlet returnDeferred = $.Deferred();\n\t\t\n\t\t$.ajax({\n\t\t\tcontext: this,\n\t\t\turl: util.apiUrl + 'order/getUpdates',\n\t\t\ttype: 'GET',\n\t\t\tdata: {'date': lastRefreshTimestamp, 'user_id': util.getUserID()},\n\t\t\theaders: { \"Authorization\": util.getHTTPAuthString() },\n\t\t\tdataType: 'json'\n\t\t}).fail(function(){\n\t\t\t//Instruct dispatcher to tell all stores that an orders refresh has failed\n\t\t\tutil.dispatch({\n\t\t\t\tactionType: Actions.SALES_REFRESH,\n\t\t\t\tactionStatus: Status.PENDING,\n\t\t\t\tentity: SalesEntities.ORDER,\n\t\t\t\tentityStatus: Status.ERROR\n\t\t\t});\n\t\t\treturnDeferred.reject();\n\t\t}).done(function(data){\n\t\t\tif(data.status){\n\t\t\t\tlet allOrderIDs = _.uniq(data.results.all); //ALL orders on server (although limited by 'api_order_history_days' server setting)\n\t\t\t\t\n\t\t\t\t//First do any housekeeping in store, by providing full list of order IDs\n\t\t\t\t//[like deleting any orders from store that no longer exist on server]\n\t\t\t\tutil.dispatch({\n\t\t\t\t\tactionType: Actions.SALES_REFRESH,\n\t\t\t\t\tactionStatus: Status.PENDING,\n\t\t\t\t\tentity: SalesEntities.ORDER,\n\t\t\t\t\tentityStatus: Status.PENDING,\n\t\t\t\t\tallOrderIDs: allOrderIDs\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tlet refreshOrderIDs = []; //The orders to refresh\n\t\t\t\t\n\t\t\t\t//If this is the initial refresh, we don't mess around and just grab all IDs\n\t\t\t\tif(lastRefreshTimestamp == 0){\n\t\t\t\t\trefreshOrderIDs = allOrderIDs;\n\t\t\t\t\n\t\t\t\t//Otherwise, we grab any updated IDs AND any specific retry IDs\t\n\t\t\t\t}else{\n\t\t\t\t\t//First, if necessary, do a safety check against all server orders and remove any deleted orders from the retryIDs\n\t\t\t\t\tif(allOrderIDs.length > 0 && retryOrderIDs.length > 0){\n\t\t\t\t\t\tretryOrderIDs = _.filter(retryOrderIDs, (oid) => (_.includes(allOrderIDs, oid)));\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\trefreshOrderIDs = _.union(data.results.changed, retryOrderIDs);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//Proceed with batch fetching of the necessary orders (returns its own deferred object)\n\t\t\t\tSalesActions.refreshPastOrdersSpecified(refreshOrderIDs, newLastRefreshTimestamp).fail(function(){\n\t\t\t\t\treturnDeferred.reject();\n\t\t\t\t}).done(function(data){\n\t\t\t\t\treturnDeferred.resolve(data);\n\t\t\t\t});\n\t\t\t}else{\n\t\t\t\t//Instruct dispatcher to tell all stores that an orders refresh has failed\n\t\t\t\tutil.dispatch({\n\t\t\t\t\tactionType: Actions.SALES_REFRESH,\n\t\t\t\t\tactionStatus: Status.PENDING,\n\t\t\t\t\tentity: SalesEntities.ORDER,\n\t\t\t\t\tentityStatus: Status.ERROR\n\t\t\t\t});\n\t\t\t\treturnDeferred.reject();\n\t\t\t}\n\t\t});\n\t\t\n\t\treturn returnDeferred;\n\t},\n\t\n\t//Sub action (but individually callable)\n\t//[optionally specify the timestamp to use as the new last refresh marker (an important value for not missing order updates)]\n\trefreshPastOrdersSpecified: function(arrOrderIDs, newLastRefreshTimestamp){\n\t\tarrOrderIDs = arrOrderIDs.slice(); //make a copy (since we're modifying it internally here - in case it's used in other functions too)\n\t\tlet returnDeferred = $.Deferred();\n\t\tlet numOrders = arrOrderIDs.length;\n\t\t\n\t\tlet failedOrderIDs = [];\n\t\t\n\t\tif(newLastRefreshTimestamp == null){\n\t\t\tnewLastRefreshTimestamp = util.getUnixTime();\n\t\t}\n\t\t\n\t\t//No orders to refresh\n\t\tif(!numOrders){\n\t\t\t//Instruct dispatcher to tell all stores that an orders refresh has succeeded\n\t\t\tutil.dispatch({\n\t\t\t\tactionType: Actions.SALES_REFRESH,\n\t\t\t\tactionStatus: Status.PENDING,\n\t\t\t\tentity: SalesEntities.ORDER,\n\t\t\t\tentityStatus: Status.OK,\n\t\t\t\tfailedOrderIDs: failedOrderIDs,\n\t\t\t\tnewLastRefreshTimestamp: newLastRefreshTimestamp\n\t\t\t});\n\t\t\treturnDeferred.resolve({ results: { pastOrderCustomerIDs: [] } });\n\t\t\n\t\t//Recursively refresh the orders\t\n\t\t}else{\n\t\t\t//Instruct dispatcher to tell all stores that an orders refresh is pending (has begun) [necessary?]\n\t\t\tutil.dispatch({\n\t\t\t\tactionType: Actions.SALES_REFRESH,\n\t\t\t\tactionStatus: Status.PENDING,\n\t\t\t\tentity: SalesEntities.ORDER,\n\t\t\t\tentityStatus: Status.PENDING\n\t\t\t});\n\t\t\t\n\t\t\tlet arrPastOrderCustomerIDs = [];\n\t\t\t\n\t\t\tlet blnAllSuccessful = true;\n\t\t\tlet blnAllUnsuccessful = true;\n\t\t\t\n\t\t\tlet refreshPastOrder = function(orderID){\n\t\t\t\t$.ajax({\n\t\t\t\t\t//context: this,\n\t\t\t\t\turl: util.apiUrl + 'order/getOrder',\n\t\t\t\t\ttype: 'GET',\n\t\t\t\t\tdata: {'id': orderID},\n\t\t\t\t\theaders: { \"Authorization\": util.getHTTPAuthString() },\n\t\t\t\t\tdataType: 'json'\n\t\t\t\t}).fail(function(){\n\t\t\t\t\tblnAllSuccessful = false;\n\t\t\t\t\tfailedOrderIDs.push(orderID); //failedOrderIDs = _.union(failedOrderIDs, [orderID]);\n\t\t\t\t}).done(function(data){\n\t\t\t\t\tif(data.status){\n\t\t\t\t\t\tblnAllUnsuccessful = false;\n\t\t\t\t\t\tdata.results.id = orderID; //[Add in the ID, as it isn't returned by the server]\n\t\t\t\t\t\tarrPastOrderCustomerIDs.push(parseInt(data.results.customer_id)); //[Record the associated customer for later use in subsequent refresh queue items]\n\t\t\t\t\t\t\n\t\t\t\t\t\t//[We dispatch this data to store here, in a piecemeal approach, \n\t\t\t\t\t\t//rather than in one huge collected list once all orders processed in always() below.\n\t\t\t\t\t\tutil.dispatch({\n\t\t\t\t\t\t\tactionType: Actions.SALES_REFRESH,\n\t\t\t\t\t\t\tactionStatus: Status.PENDING,\n\t\t\t\t\t\t\tentity: SalesEntities.ORDER,\n\t\t\t\t\t\t\tentityStatus: Status.PENDING,\n\t\t\t\t\t\t\t//Using batch nomenclature for now\n\t\t\t\t\t\t\tbatchStatus: Status.OK,\n\t\t\t\t\t\t\tbatchOrders: [data.results], //SalesUtil.prepareOrderBatchData(\n\t\t\t\t\t\t\tpercentageComplete: parseFloat( ((numOrders - arrOrderIDs.length) / numOrders) * 100 )\n\t\t\t\t\t\t});\n\t\t\t\t\t\t\n\t\t\t\t\t}else{\n\t\t\t\t\t\tblnAllSuccessful = false;\n\t\t\t\t\t\tfailedOrderIDs.push(orderID); //failedOrderIDs = _.union(failedOrderIDs, [orderID]);\n\t\t\t\t\t}\n\t\t\t\t}).always(function(){\n\t\t\t\t\t//We still have orders to refresh\n\t\t\t\t\tif(arrOrderIDs.length > 0){\n\t\t\t\t\t\t//Execute the next order refresh\n\t\t\t\t\t\trefreshPastOrder(arrOrderIDs.shift());\n\t\t\t\t\t\t\n\t\t\t\t\t//We've processed all orders\n\t\t\t\t\t}else{\n\t\t\t\t\t\tlet entityStatus = (blnAllSuccessful ? Status.OK : (blnAllUnsuccessful ? Status.ERROR : Status.PARTIAL));\n\t\t\t\t\t\t\n\t\t\t\t\t\t//Instruct dispatcher to tell all stores that an orders refresh has either completed successfully,\n\t\t\t\t\t\t//or failed in some way (partially or completely)\n\t\t\t\t\t\tutil.dispatch({\n\t\t\t\t\t\t\tactionType: Actions.SALES_REFRESH,\n\t\t\t\t\t\t\tactionStatus: Status.PENDING,\n\t\t\t\t\t\t\tentity: SalesEntities.ORDER,\n\t\t\t\t\t\t\tentityStatus: entityStatus,\n\t\t\t\t\t\t\tfailedOrderIDs: failedOrderIDs,\n\t\t\t\t\t\t\tnewLastRefreshTimestamp: newLastRefreshTimestamp\n\t\t\t\t\t\t});\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(entityStatus == Status.ERROR){\n\t\t\t\t\t\t\treturnDeferred.reject();\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\treturnDeferred.resolve({ \n\t\t\t\t\t\t\t\tpartial: (entityStatus == Status.PARTIAL),\n\t\t\t\t\t\t\t\tresults: { pastOrderCustomerIDs: _.uniq(arrPastOrderCustomerIDs) }\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}.bind(this);\n\t\t\t\n\t\t\t//Execute the first order refresh\n\t\t\trefreshPastOrder(arrOrderIDs.shift());\n\t\t}\n\t\t\n\t\treturn returnDeferred;\n\t}\n};\n\nmodule.exports = SalesActions;","\"use strict\";\n\nimport React from 'react';\n\nconst SearchResultsInfo = ({ isVisible, info }) => {\n\n\tif(info.page == null || info.page <= 0){\n\t\tinfo.page = 1;\n\t\tisVisible = false;\n\t}\n\tif(info.pageSize == null || info.pageSize <= 0){\n\t\tinfo.pageSize = 1;\n\t\tisVisible = false;\n\t}\n\tif(info.total == null || info.total <= 0){\n\t\tinfo.total = 0;\n\t\tisVisible = false;\n\t}\n\tif(info.totalPages == null || info.totalPages <= 0){\n\t\tinfo.totalPages = 1;\n\t\tisVisible = false;\n\t}\n\t\n\tlet firstItem = ((info.page - 1) * info.pageSize) + 1;\n\tlet lastItem = (info.page == info.totalPages) ? info.total : (info.page * info.pageSize);\n\n\t//For now, we always show the 'boxed' version (search-results-info-box)\n\treturn (\n\t\t<div className={\"search-results-info \" + (isVisible ? 'show' : 'hidden')}>\n\t\t\t<div className=\"search-results-info-box\">\n\t\t\t\t{(firstItem == lastItem) ? firstItem : firstItem + '-' + lastItem} / <span className=\"text-primary\">{info.total}</span>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default SearchResultsInfo;","\"use strict\";\n\n//Entities involved in sales module (for now, just those requiring syncing with server)\nmodule.exports = {\n\tORDER:\t\t\t'order',\n\tCUSTOMER:\t\t'customer',\n\tPRODUCT:\t\t'product',\n\tCATEGORY:\t\t'category',\n\tPAYMENT_TERM:\t'payment_term',\n\tTAX_CLASS:\t\t'tax_class',\n\tCARRIER:\t\t'carrier',\n\tCURRENCY:\t\t'currency',\n\tPRICE_LIST:\t\t'price_list',\n\tPRODUCT_RULE:\t'product_rule'\n};","\"use strict\";\n\nconst initialisationWatcher = {\n\t//Array of app initialisation promises for which to wait\n\treadyPromises: [],\n\t//Obtain a master promise that will resolve once all stores (or other objects) that have async setup are initialised\n\t//(if they've even added themselves as things to care about) \n\tgetReady: function(){\n\t\treturn (this.readyPromises.length ? Promise.all(this.readyPromises) : Promise.resolve());\n\t},\n\t//Add a promise to the set that getReady() will wait for - making sure that it only resolves (not rejects) for our current usage\n\tsetReady: function(promise){\n\t\tthis.readyPromises.push(promise);\n\t},\n\tresetReady: function(){ //not needed since readyPromises only used once - during app initialisation\n\t\tthis.readyPromises = [];\n\t}\n};\n\nexport default initialisationWatcher;","\"use strict\";\nimport $ from 'jquery';\nwindow.$ = $;\nvar Dispatcher = require('../dispatcher/appDispatcher');\nvar Actions = require('../constants/actionTypes');\nvar Status = require('../constants/actionStatuses');\nvar option = require('../constants/configOptions.js');\nvar config = require('../config.js');\nvar util = require('../util.js');\nvar toastr = require('toastr');\n\n//Private utilities\nvar UserUtil = {\n\tprepareUserData: function(userData){\n\t\t//Remove any data we don't need for now, e.g. userData.company.logo image (space considerations)\n\t\tif(userData.company != null){\n\t\t\tif(userData.company.logo != null){ \n\t\t\t\tuserData.company.logo = undefined; \n\t\t\t}\n\t\t}\n\t\tif(userData.licensing != null){ \n\t\t\tuserData.licensing = undefined; \n\t\t}\n\t\t\n\t\t//Add any data we need\n\t\tuserData.fullName = ((userData.first_name != null && userData.first_name.length && userData.last_name != null && userData.last_name.length) ? userData.first_name + \" \" + userData.last_name : userData.name);\n\t\t\n\t\treturn userData;\n\t},\n\tcheckIsLicensed: function(userInfo){\n\t\treturn (\n\t\t\t//Is this the Morpheus diagnostic/'admin/admin' account?\n\t\t\t(userInfo.email == 'admin' && userInfo.id == 1) || \n\t\t\t//Or is the user otherwise licensed to use the app? (Whether B2B user or not)\n\t\t\t( userInfo.is_b2b_user == 0 && userInfo.licensing.web_app != null && (userInfo.licensing.web_app.permanent > 0 || userInfo.licensing.web_app.expires > util.getUnixTime()) ) ||\n\t\t\t( userInfo.is_b2b_user == 1 && userInfo.licensing.b2b != null && (userInfo.licensing.b2b.permanent > 0 || userInfo.licensing.b2b.expires > util.getUnixTime()) )\n\t\t);\n\t},\n\tcheckConfigProfile: function(userInfo){\n\t\t//Currently this is only used for dynamically switching B2B users to the B2B-restricted active profile\n\t\tconfig.setProfile((userInfo.is_b2b_user == 1 ? option.PROFILE_B2B : config.defaultActiveProfile));\n\t}\n};\n\n//List our 'action creators' (e.g. login) that helpfully wrap our actions (payloads {} that are dispatched)\nvar UserActions = {\n\tlogin: function(loginInfo, deleteUserData){\n\t\t//Instruct dispatcher to tell all stores that a user login is pending (has begun)\n\t\tDispatcher.dispatch({\n\t\t\tactionType: Actions.USER_LOGIN,\n\t\t\tactionStatus: Status.PENDING\n\t\t});\n\t\t\n\t\t$.ajax({\n\t\t\t//context: this,\n\t\t\turl: util.apiUrl + 'general/getUserInfo',\n\t\t\ttype: 'GET',\n\t\t\t//data: {},\n\t\t\theaders: { \"Authorization\": util.getHTTPAuthStringForCredentials(loginInfo.username, loginInfo.password) },\n\t\t\tdataType: 'json',\n\t\t\ttimeout: 30000 //Add a 30 second timeout to login request\n\t\t}).fail(function(jqXHR, status){\n\t\t\t//Instruct dispatcher to tell all stores that a user login has failed\n\t\t\tDispatcher.dispatch({\n\t\t\t\tactionType: Actions.USER_LOGIN,\n\t\t\t\tactionStatus: Status.ERROR, //[Potentially create a specialised Status.TIMEOUT when status == 'timeout'?]\n\t\t\t\tloginError: (status == 'timeout' ? 'Login timed out. Please try again.' : 'Unable to login. Please check your connection and try again.')\n\t\t\t});\n\t\t}).done(function(data){\n\t\t\tif(data.status){\n\t\t\t\t//Check licensing permissions\n\t\t\t\tif(UserUtil.checkIsLicensed(data.results)){\n\t\t\t\t\t//Check/sanitise the current app mode for this user (B2B)\n\t\t\t\t\tUserUtil.checkConfigProfile(data.results);\n\t\t\t\t\t\n\t\t\t\t\t//Add auth data (unfortunately this is stored textually for now due to current API requirements)\n\t\t\t\t\tdata.results.username = loginInfo.username; //data.results.email\n\t\t\t\t\tdata.results.password = loginInfo.password;\n\t\t\t\t\n\t\t\t\t\t//Instruct dispatcher to tell all stores that a user login has succeeded\n\t\t\t\t\tDispatcher.dispatch({\n\t\t\t\t\t\tactionType: Actions.USER_LOGIN,\n\t\t\t\t\t\tactionStatus: Status.OK,\n\t\t\t\t\t\tuserData: UserUtil.prepareUserData(data.results)\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\tif(deleteUserData){\n\t\t\t\t\t\t//Instruct dispatcher to tell all stores that current user data needs to be deleted\n\t\t\t\t\t\tDispatcher.dispatch({\n\t\t\t\t\t\t\tactionType: Actions.USER_DELETE_DATA,\n\t\t\t\t\t\t\tactionStatus: Status.OK\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}else{\n\t\t\t\t\t//Instruct dispatcher to tell all stores that a user login has failed due to insufficient permissions\n\t\t\t\t\tDispatcher.dispatch({\n\t\t\t\t\t\tactionType: Actions.USER_LOGIN,\n\t\t\t\t\t\tactionStatus: Status.ERROR,\n\t\t\t\t\t\tloginError: 'You do not have permission to access this app'\n\t\t\t\t\t});\n\t\t\t\t} \n\t\t\t\t\n\t\t\t}else{\n\t\t\t\t//Instruct dispatcher to tell all stores that a user login has failed\n\t\t\t\tDispatcher.dispatch({\n\t\t\t\t\tactionType: Actions.USER_LOGIN,\n\t\t\t\t\tactionStatus: Status.ERROR,\n\t\t\t\t\t//Let's not just pass through the server error string as is\n\t\t\t\t\tloginError: ((data.error == 'Invalid username' || data.error == 'Invalid password' || data.error == 'Password expired') ? data.error : 'Unable to login')\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t},\n\t\n\tlogout: function(){\n\t\t//Instruct dispatcher to tell all stores that a user logout has commenced\n\t\tDispatcher.dispatch({\n\t\t\tactionType: Actions.USER_LOGOUT,\n\t\t\tactionStatus: Status.OK\n\t\t});\n\t},\n\t\n\t//Note that this is currently similar to the login action (uses same API call and also refreshes user), \n\t//but we retain separation of concerns, which will allow the internal implementation details to be changed if necessary.\n\t//We don't need to run an access check before this, and instead build it in, as once again this makes use of the same API call (see checkAccess below).\n\t//Optional blnRefreshFields param to additionally refresh the user (custom) field information\n\trefreshUser: function(blnRefreshFields){\n\t\t//Instruct dispatcher to tell all stores that a user refresh is pending (has begun)\n\t\tutil.dispatch({\n\t\t\tactionType: Actions.USER_REFRESH,\n\t\t\tactionStatus: Status.PENDING\n\t\t});\n\t\t\n\t\t//We return our own deferred object, instead of the one returned by $.ajax, so we can custom handle resolving/rejecting within the 'successful' done AJAX callback below\n\t\t//(We do this to support queue actions)\n\t\tlet returnDeferred = $.Deferred();\n\t\t\n\t\t$.ajax({\n\t\t\tcontext: this,\n\t\t\turl: util.apiUrl + 'general/getUserInfo',\n\t\t\ttype: 'GET',\n\t\t\theaders: { \"Authorization\": util.getHTTPAuthString() },\n\t\t\tdataType: 'json'\n\t\t}).fail(function(jqXHR, status){\n\t\t\t//Instruct dispatcher to tell all stores that a user refresh has failed\n\t\t\t//[For now, let's not worry about also doing the fields refresh in this case - i.e. no partial success opportunity here]\n\t\t\tutil.dispatch({\n\t\t\t\tactionType: Actions.USER_REFRESH,\n\t\t\t\tactionStatus: Status.ERROR\n\t\t\t});\n\t\t\treturnDeferred.reject();\n\t\t}).done(function(data){\n\t\t\tif(data.status){\n\t\t\t\t//Check licensing permissions\n\t\t\t\tif(UserUtil.checkIsLicensed(data.results)){\n\t\t\t\t\t\n\t\t\t\t\t//Check/sanitise the current app mode for this user (B2B) [May as well?]\n\t\t\t\t\tUserUtil.checkConfigProfile(data.results);\n\t\t\t\t\t\n\t\t\t\t\t//Successful user refresh, but we also need to refresh the fields data\n\t\t\t\t\tif(blnRefreshFields){\n\t\t\t\t\t\t$.ajax({\n\t\t\t\t\t\t\t//context: this,\n\t\t\t\t\t\t\turl: util.apiUrl + 'general/getCustomFields',\n\t\t\t\t\t\t\ttype: 'GET',\n\t\t\t\t\t\t\tdata: {'table': 'user'},\n\t\t\t\t\t\t\theaders: { \"Authorization\": util.getHTTPAuthString() },\n\t\t\t\t\t\t\tdataType: 'json'\n\t\t\t\t\t\t}).fail(function(){\n\t\t\t\t\t\t\t//Instruct dispatcher to tell all stores that a user refresh has partially succeeded (fields refresh failed)\n\t\t\t\t\t\t\tutil.dispatch({\n\t\t\t\t\t\t\t\tactionType: Actions.USER_REFRESH,\n\t\t\t\t\t\t\t\tactionStatus: Status.PARTIAL,\n\t\t\t\t\t\t\t\tuserData: UserUtil.prepareUserData(data.results)\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\treturnDeferred.resolve({partial: true});\n\t\t\t\t\t\t}).done(function(fieldsData){\n\t\t\t\t\t\t\tif(fieldsData.status){\n\t\t\t\t\t\t\t\t//Instruct dispatcher to tell all stores that a user (and fields) refresh has completed\n\t\t\t\t\t\t\t\tutil.dispatch({\n\t\t\t\t\t\t\t\t\tactionType: Actions.USER_REFRESH,\n\t\t\t\t\t\t\t\t\tactionStatus: Status.OK,\n\t\t\t\t\t\t\t\t\tuserData: UserUtil.prepareUserData(data.results),\n\t\t\t\t\t\t\t\t\tuserFieldData: fieldsData.results,\n\t\t\t\t\t\t\t\t\tuserFieldDataTS: util.getUnixTime() //[need this: see usage note in userStore]\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\treturnDeferred.resolve();\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t//Instruct dispatcher to tell all stores that a user refresh has partially succeeded (fields refresh failed)\n\t\t\t\t\t\t\t\t//[For now, let's not worry about also doing the fields refresh in this case - i.e. no partial success opportunity here]\n\t\t\t\t\t\t\t\tutil.dispatch({\n\t\t\t\t\t\t\t\t\tactionType: Actions.USER_REFRESH,\n\t\t\t\t\t\t\t\t\tactionStatus: Status.PARTIAL,\n\t\t\t\t\t\t\t\t\tuserData: UserUtil.prepareUserData(data.results)\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\treturnDeferred.resolve({partial: true});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\t\n\t\t\t\t\t}else{\n\t\t\t\t\t\t//Instruct dispatcher to tell all stores that a user refresh has succeeded\n\t\t\t\t\t\tutil.dispatch({\n\t\t\t\t\t\t\tactionType: Actions.USER_REFRESH,\n\t\t\t\t\t\t\tactionStatus: Status.OK,\n\t\t\t\t\t\t\tuserData: UserUtil.prepareUserData(data.results)\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturnDeferred.resolve();\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}else{\n\t\t\t\t\t//Instruct dispatcher to tell all stores that a user refresh has failed due to insufficient permissions\n\t\t\t\t\tutil.dispatch({\n\t\t\t\t\t\tactionType: Actions.USER_REFRESH,\n\t\t\t\t\t\tactionStatus: Status.ERROR\n\t\t\t\t\t});\n\t\t\t\t\treturnDeferred.reject();\n\t\t\t\t\t//[We run toastr from here for the time being, but could potentially move to view (using a userStore message variable, as with login).\n\t\t\t\t\t//For now though, this is a secondary function of this action, and also we want to handle it consistently with checkAccess() below]\n\t\t\t\t\ttoastr.error('You do not have permission to access this app');\n\t\t\t\t\tthis.logout();\n\t\t\t\t} \n\t\t\t\t\n\t\t\t}else{\n\t\t\t\t//Instruct dispatcher to tell all stores that a user refresh has failed\n\t\t\t\t//[For now, let's not worry about also doing the fields refresh in this case - i.e. no partial success opportunity here]\n\t\t\t\tutil.dispatch({\n\t\t\t\t\tactionType: Actions.USER_REFRESH,\n\t\t\t\t\tactionStatus: Status.ERROR\n\t\t\t\t});\n\t\t\t\treturnDeferred.reject();\n\t\t\t}\n\t\t});\n\t\t\n\t\treturn returnDeferred;\n\t},\n\t\n\t//Stubs for future use:\n\t//saveUser: function(userInfo){},\n\t\n\t//Check this user's licensing permissions, executing callback if still authorised to use the app \n\t//[similar to login and refreshUser above]\n\tcheckAccess: function(successCallback, successCallbackArgs, successCallbackContext){\n\t\t//Instruct dispatcher to tell all stores that a user access check is pending (has begun)\n\t\t//[Not currently in use]\n\t\t//Dispatcher.dispatch({\n\t\t//\tactionType: Actions.USER_ACCESS_CHECK,\n\t\t//\tactionStatus: Status.PENDING\n\t\t//});\n\t\tif(successCallbackContext == null){\n\t\t\tsuccessCallbackContext = null; //sanitise the context if missing\n\t\t}\n\t\t\n\t\t$.ajax({\n\t\t\tcontext: this,\n\t\t\turl: util.apiUrl + 'general/getUserInfo',\n\t\t\ttype: 'GET',\n\t\t\t//data: {},\n\t\t\theaders: { \"Authorization\": util.getHTTPAuthString() },\n\t\t\tdataType: 'json',\n\t\t\ttimeout: 20000 //Add a 20 second timeout to request\n\t\t}).fail(function(jqXHR, status){\n\t\t\t//Instruct dispatcher to tell all stores that a user access check has failed\n\t\t\t//[Not currently in use]\n\t\t\t//Dispatcher.dispatch({\n\t\t\t//\tactionType: Actions.USER_ACCESS_CHECK,\n\t\t\t//\tactionStatus: Status.ERROR, //[Potentially create a specialised Status.TIMEOUT when status == 'timeout'?]\n\t\t\t//\taccessCheckError: (status == 'timeout' ? 'Access check timed out.' : 'Unable to check access.')\n\t\t\t//});\n\t\t\t\n\t\t\t//For now, we allow the callback to run and postpone this check to a future check, rather than eagerly booting the user out of the app.\n\t\t\t//Also, this is almost definitely a network error, which means any network-dependent callback will also fail anyway when called.\n\t\t\t//successCallback.call(null);\n\t\t\tsuccessCallback.apply(successCallbackContext, successCallbackArgs);\n\t\t\t\n\t\t}).done(function(data){\n\t\t\tif(data.status){\n\t\t\t\t//Check licensing permissions\n\t\t\t\tif(UserUtil.checkIsLicensed(data.results)){\n\t\t\t\t\t//Check/sanitise the current app mode for this user (B2B) [May as well?]\n\t\t\t\t\tUserUtil.checkConfigProfile(data.results);\n\t\t\t\t\t\n\t\t\t\t\t//Instruct dispatcher to tell all stores that a user access check has succeeded\n\t\t\t\t\t//[Not currently in use]\n\t\t\t\t\t\n\t\t\t\t\t//Run callback\n\t\t\t\t\t//successCallback.call(null);\n\t\t\t\t\tsuccessCallback.apply(successCallbackContext, successCallbackArgs);\n\t\t\t\t\t\n\t\t\t\t}else{\n\t\t\t\t\t//Instruct dispatcher to tell all stores that a user access check has failed (insufficient permissions)\n\t\t\t\t\t//[Not currently in use]\n\t\t\t\t\t//Dispatcher.dispatch({\n\t\t\t\t\t//\tactionType: Actions.USER_ACCESS_CHECK,\n\t\t\t\t\t//\tactionStatus: Status.ERROR,\n\t\t\t\t\t//\taccessCheckError: 'You do not have permission to access this app'\n\t\t\t\t\t//});\n\t\t\t\t\t\n\t\t\t\t\t//[We run toastr from here for the time being, but could potentially move to view (using another userStore message variable)]\n\t\t\t\t\ttoastr.error('You do not have permission to access this app');\n\t\t\t\t\tthis.logout();\n\t\t\t\t} \n\t\t\t\t\n\t\t\t}else{\n\t\t\t\t//Instruct dispatcher to tell all stores that a user access check has failed\n\t\t\t\t//[Not currently in use]\n\t\t\t\t//Dispatcher.dispatch({\n\t\t\t\t//\tactionType: Actions.USER_ACCESS_CHECK,\n\t\t\t\t//\tactionStatus: Status.ERROR,\n\t\t\t\t//\taccessCheckError: 'Unable to check access. Please login again.')\n\t\t\t\t//});\n\t\t\t\t\n\t\t\t\t//This should never be the case (i.e. that current login credentials no longer work)\n\t\t\t\t//But for now, for security reasons, we deny access\n\t\t\t\t//[We run toastr from here for the time being, but could potentially move to view (using another userStore message variable)]\n\t\t\t\ttoastr.error('You do not have permission to access this app');\n\t\t\t\tthis.logout();\n\t\t\t}\n\t\t});\n\t},\n\t\n\trequestPasswordReset: function(email){\n\t\tif(email == null || !email.length) {\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t//Instruct dispatcher to tell all stores that a password reset request is pending (has begun)\n\t\tDispatcher.dispatch({\n\t\t\tactionType: Actions.USER_PASSWORD_RESET_REQUEST,\n\t\t\tactionStatus: Status.PENDING,\n\t\t\temail: email\n\t\t});\n\t\t\n\t\t$.ajax({\n\t\t\t//context: this,\n\t\t\turl: util.apiUrl + 'public/requestAdminPasswordReset',\n\t\t\ttype: 'POST',\n\t\t\tdata: {'email': email},\n\t\t\theaders: { \"Authorization\": util.getHTTPAuthString() },\n\t\t\tdataType: 'json'\n\t\t}).fail(function(){\n\t\t\t//Instruct dispatcher to tell all stores that a password reset request has failed\n\t\t\tDispatcher.dispatch({\n\t\t\t\tactionType: Actions.USER_PASSWORD_RESET_REQUEST,\n\t\t\t\tactionStatus: Status.ERROR,\n\t\t\t\temail: email\n\t\t\t});\n\t\t}).done(function(data){\n\t\t\tif(data.status){\n\t\t\t\t//Instruct dispatcher to tell all stores that a password reset request has succeeded\n\t\t\t\tDispatcher.dispatch({\n\t\t\t\t\tactionType: Actions.USER_PASSWORD_RESET_REQUEST,\n\t\t\t\t\tactionStatus: Status.OK,\n\t\t\t\t\temail: email\n\t\t\t\t});\n\t\t\t\t\n\t\t\t}else{\n\t\t\t\t//Instruct dispatcher to tell all stores that a password reset request has failed\n\t\t\t\tDispatcher.dispatch({\n\t\t\t\t\tactionType: Actions.USER_PASSWORD_RESET_REQUEST,\n\t\t\t\t\tactionStatus: Status.ERROR,\n\t\t\t\t\temail: email\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n};\n\nmodule.exports = UserActions;","\"use strict\";\n\n/*\nStore to allow views to subscribe to and track miscellaneous actions not catered for by conventional stores (e.g. certain network requests).\n(It's likely these actions are transient and temporary and so are unlikely to require localStorage persistence.)\n*/\n\nvar Dispatcher = require('../dispatcher/appDispatcher');\nvar Actions = require('../constants/actionTypes');\nvar Status = require('../constants/actionStatuses');\nvar SalesEntities = require('../constants/salesEntities');\nvar EventEmitter = require('events').EventEmitter;\nvar assign = require('object-assign');\nvar CHANGE_EVENT = 'change';\nvar option = require('../constants/configOptions.js');\nvar config = require('../config.js');\nvar util = require('../util.js');\n\n//Action objects keyed on action type ID\n//[For now, these are tracked in memory only, and there can be at most one object per action type]\nvar _actions = {};\n//Action meta data objects keyed on action type ID\n//Currently this is used for tracking last modification timestamps\nvar _actionsMeta = {};\n\n//Flexible data structure for recording current percentage completion (keyed on action type ID, and potentially also sub action type ID)\nvar _percentageComplete = {};\n//Let's tweak the relative weightings of the entity operation percentages (products refresh takes a long time)\n//NOTE: These are now less relevant with the new queueing system, as the queue manages the weightings, BUT for now we're making a copy\n//here of any weightings related to BATCH operations so we can calculate fine-grained percentages per operation within this store\n//(At the moment, these operations are representing entirely by 'entities' - which is the old nomenclature, that could be renamed to full actions in future, \n//removing the old sales refresh action in favour of just a sales refresh queue action)\n//[This system is still not perfect, as the percentages totalling is currently essentially split between this store and the util queue manager]\nlet _relativeWeightings = {};\n_relativeWeightings[Actions.SALES_REFRESH] = {};\n_relativeWeightings[Actions.SALES_REFRESH][SalesEntities.PAYMENT_TERM]\t= 0.04;\n_relativeWeightings[Actions.SALES_REFRESH][SalesEntities.TAX_CLASS]\t\t= 0.04;\n_relativeWeightings[Actions.SALES_REFRESH][SalesEntities.CARRIER]\t\t= 0.04;\n_relativeWeightings[Actions.SALES_REFRESH][SalesEntities.CURRENCY]\t\t= 0.04;\n_relativeWeightings[Actions.SALES_REFRESH][SalesEntities.PRODUCT]\t\t= 0.35;\n_relativeWeightings[Actions.SALES_REFRESH][SalesEntities.CATEGORY]\t\t= 0.04;\n_relativeWeightings[Actions.SALES_REFRESH][SalesEntities.ORDER]\t\t\t= 0.08;\n_relativeWeightings[Actions.SALES_REFRESH][SalesEntities.CUSTOMER]\t\t= 0.13;\n_relativeWeightings[Actions.SALES_REFRESH][SalesEntities.PRICE_LIST]\t= 0.08;\n_relativeWeightings[Actions.SALES_REFRESH][SalesEntities.PRODUCT_RULE]\t= 0.08;\n\n_relativeWeightings[Actions.ONLINE_SALES_REFRESH] = {};\n_relativeWeightings[Actions.ONLINE_SALES_REFRESH][SalesEntities.PAYMENT_TERM]\t= 0.15;\n_relativeWeightings[Actions.ONLINE_SALES_REFRESH][SalesEntities.TAX_CLASS]\t\t= 0.15;\n_relativeWeightings[Actions.ONLINE_SALES_REFRESH][SalesEntities.CARRIER]\t\t= 0.15;\n_relativeWeightings[Actions.ONLINE_SALES_REFRESH][SalesEntities.CURRENCY]\t\t= 0.15;\n_relativeWeightings[Actions.ONLINE_SALES_REFRESH][SalesEntities.CATEGORY]\t\t= 0.2; //TODO: config.get(option.FUNC_CUSTOMER_AUTOSELECTION) to modify this?\n//TODO: Check whether we need SalesEntities.CUSTOMER\n\n_relativeWeightings[Actions.CUSTOMERS_SALES_REFRESH] = {};\n_relativeWeightings[Actions.CUSTOMERS_SALES_REFRESH][SalesEntities.CUSTOMER]\t\t= 0.4;\n_relativeWeightings[Actions.CUSTOMERS_SALES_REFRESH][SalesEntities.PRICE_LIST]\t\t= 0.25;\n_relativeWeightings[Actions.CUSTOMERS_SALES_REFRESH][SalesEntities.PRODUCT_RULE]\t= 0.25;\n\n_relativeWeightings[Actions.CALLS_RELATED_REFRESH] = {};\n_relativeWeightings[Actions.CALLS_RELATED_REFRESH][SalesEntities.CUSTOMER]\t\t\t= 0.2;\n_relativeWeightings[Actions.CALLS_RELATED_REFRESH][SalesEntities.PRICE_LIST]\t\t= 0.075;\n_relativeWeightings[Actions.CALLS_RELATED_REFRESH][SalesEntities.PRODUCT_RULE]\t\t= 0.075;\n\n_relativeWeightings[Actions.PAST_ORDERS_CUSTOMERS_REFRESH] = {};\n_relativeWeightings[Actions.PAST_ORDERS_CUSTOMERS_REFRESH][SalesEntities.ORDER]\t\t\t= config.get(option.FUNC_ONLINE_CUSTOMERS) ? 0.4 : 0.3;\n_relativeWeightings[Actions.PAST_ORDERS_CUSTOMERS_REFRESH][SalesEntities.CUSTOMER]\t\t= config.get(option.FUNC_ONLINE_CUSTOMERS) ? 0.4 : 0.3;\n_relativeWeightings[Actions.PAST_ORDERS_CUSTOMERS_REFRESH][SalesEntities.PRICE_LIST]\t= 0.15;\n_relativeWeightings[Actions.PAST_ORDERS_CUSTOMERS_REFRESH][SalesEntities.PRODUCT_RULE]\t= 0.15;\n\n_relativeWeightings[Actions.ALL_REFRESH] = {};\n_relativeWeightings[Actions.ALL_REFRESH][SalesEntities.PRODUCT]\t\t\t\t\t\t= 0.3;\n_relativeWeightings[Actions.ALL_REFRESH][SalesEntities.ORDER]\t\t\t\t\t\t= 0.03;\n_relativeWeightings[Actions.ALL_REFRESH][SalesEntities.CUSTOMER]\t\t\t\t\t= 0.09;\n_relativeWeightings[Actions.ALL_REFRESH][SalesEntities.PRICE_LIST]\t\t\t\t\t= 0.03;\n_relativeWeightings[Actions.ALL_REFRESH][SalesEntities.PRODUCT_RULE]\t\t\t\t= 0.03;\n//TODO: Check whether we need other SalesEntities here \n\nvar ActionStatusStore = assign({}, EventEmitter.prototype, {\n\taddChangeListener: function(callback){ this.on(CHANGE_EVENT, callback); },\n\tremoveChangeListener: function(callback){ this.removeListener(CHANGE_EVENT, callback); },\n\temitChange: function(){ this.emit(CHANGE_EVENT); },\n\t\n\t//For now, these are what we are exposing to view controllers:\n\t\n\tgetStatus: function(actionType){\n\t\treturn (_actions[actionType] ? _actions[actionType].actionStatus : null);\n\t},\n\tgetLastTimestampForAction: function(actionType){\n\t\treturn (_actionsMeta[actionType] ? _actionsMeta[actionType].modified : null);\n\t},\n\tgetLastTimestampForSuccessfulAction: function(actionType){ //[Currently just used in composite actions]\n\t\treturn (_actionsMeta[actionType] ? _actionsMeta[actionType][Status.OK] : null);\n\t},\n\tgetPercentageComplete: function(actionType){\n\t\treturn (_percentageComplete[actionType] ? _percentageComplete[actionType].percentage : null);\n\t},\n\tgetEntityStatuses: function(actionType){\n\t\t//Let's return all at once\n\t\treturn (_actions[actionType] ? _actions[actionType].entityStatuses : null);\n\t},\n\t\n\t//Used to reset the status/percentage tracking structures for a particular action\n\tresetTracking: function(actionType){\n\t\t_actions[actionType] = {};\n\t\t_actionsMeta[actionType] = {}; //not really necessary\n\t\t_percentageComplete[actionType] = {};\n\t}\n});\n\nDispatcher.register(function(action){\n\t//For now, this facilitates the storage of any additional fine-grained batch percentage to be added to total percentage\n\tlet salesEntityBatchPercentage = 0;\n\t\n\tswitch(action.actionType){\n\t\tcase Actions.APP_DATA_SUBMIT:\n\t\tcase Actions.USER_PASSWORD_RESET_REQUEST:\n\t\tcase Actions.CUSTOMER_ADD_COMMENT:\n\t\t\t//add/overwrite this action's details\n\t\t\t_actions[action.actionType] = action;\n\t\t\t\n\t\t\t//update meta data (currently just last modified timestamp)\n\t\t\tif(!_actionsMeta[action.actionType]){\n\t\t\t\t_actionsMeta[action.actionType] = {};\n\t\t\t}\n\t\t\t_actionsMeta[action.actionType].modified = util.getUnixTimeInMs(); //precision needed here\n\t\t\t\n\t\t\tActionStatusStore.emitChange();\n\t\t\tbreak;\n\t\t\n\t\tcase Actions.SALES_REFRESH:\n\t\t\t//If necessary, reset our status/percentage tracking structures at the start of a new sales refresh operation\n\t\t\tif(action.resetTracking){\n\t\t\t\tActionStatusStore.resetTracking(action.actionType);\n//console.log('=============================================================');\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t//add/overwrite this action's details (just what we track)\n\t\t\tif(!_actions[action.actionType]){\n\t\t\t\t_actions[action.actionType] = {};\n\t\t\t}\n\t\t\t_actions[action.actionType].actionType = action.actionType;\n\t\t\t_actions[action.actionType].actionStatus = action.actionStatus;\n\t\t\t\n\t\t\t//update meta data (currently just last modified timestamp)\n\t\t\tif(!_actionsMeta[action.actionType]){\n\t\t\t\t_actionsMeta[action.actionType] = {};\n\t\t\t}\n\t\t\t_actionsMeta[action.actionType].modified = util.getUnixTimeInMs(); //precision needed here\n\t\t\t\n\t\t\tif(!_actions[action.actionType].entityStatuses){\n\t\t\t\t_actions[action.actionType].entityStatuses = {};\n\t\t\t}\n\t\t\tif(!_percentageComplete[action.actionType]){\n\t\t\t\t_percentageComplete[action.actionType] = {};\n\t\t\t}\n\t\t\tif(!_percentageComplete[action.actionType].entityPercentages){\n\t\t\t\t_percentageComplete[action.actionType].entityPercentages = {};\n\t\t\t}\n\t\t\t\n\t\t\t//Update entity statuses and percentage completion (which only applies to the entities in a sales refresh)\n\t\t\tif(action.entity != null){\n\t\t\t\n\t\t\t\t_actions[action.actionType].entityStatuses[action.entity] = action.entityStatus;\n\t\t\t\t\n\t\t\t\t//Set the particular entity's percentage\n\t\t\t\t\n\t\t\t\tif( action.entity == SalesEntities.PRODUCT || action.entity == SalesEntities.ORDER || action.entity == SalesEntities.CUSTOMER ||\n\t\t\t\t\taction.entity == SalesEntities.PRICE_LIST || action.entity == SalesEntities.PRODUCT_RULE ){\n\t\t\t\t\t//Batches are being processed\n\t\t\t\t\tif(action.entityStatus == Status.PENDING){\n\t\t\t\t\t\t//We only update our percentage when we have data to hand \n\t\t\t\t\t\tif(action.percentageComplete != null){\n\t\t\t\t\t\t\t_percentageComplete[action.actionType].entityPercentages[action.entity] = action.percentageComplete;\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t_percentageComplete[action.actionType].entityPercentages[action.entity] = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t//Batches are complete in some way\n\t\t\t\t\t}else{\n\t\t\t\t\t\t_percentageComplete[action.actionType].entityPercentages[action.entity] = 100;\n\t\t\t\t\t}\n\t\t\t\t}else{\n\t\t\t\t\t_percentageComplete[action.actionType].entityPercentages[action.entity] = (action.entityStatus == Status.PENDING ? 0 : 100);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t//Set the percentage for the entire sales refresh operation\n\t\t\t\n\t\t\tif(action.actionStatus == Status.PENDING){\n\t\t\t\t_percentageComplete[action.actionType].percentage = 0;\n\t\t\t\t\n\t\t\t\tfor(var entity in _percentageComplete[action.actionType].entityPercentages){\n\t\t\t\t\t_percentageComplete[action.actionType].percentage += (_relativeWeightings[action.actionType][entity] * _percentageComplete[action.actionType].entityPercentages[entity]);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}else{\n\t\t\t\t_percentageComplete[action.actionType].percentage = 100;\n\t\t\t}\n/*console.log('---------------------');\nconsole.log('STATUS:', _actions[action.actionType].actionStatus);\nconsole.log('STATUS (payment term):', _actions[action.actionType].entityStatuses[SalesEntities.PAYMENT_TERM]);\nconsole.log('STATUS (tax class):', _actions[action.actionType].entityStatuses[SalesEntities.TAX_CLASS]);\nconsole.log('STATUS (carrier):', _actions[action.actionType].entityStatuses[SalesEntities.CARRIER]);\nconsole.log('STATUS (currency):', _actions[action.actionType].entityStatuses[SalesEntities.CURRENCY]);\nconsole.log('STATUS (product):', _actions[action.actionType].entityStatuses[SalesEntities.PRODUCT]);\nconsole.log('STATUS (category):', _actions[action.actionType].entityStatuses[SalesEntities.CATEGORY]);\nconsole.log('STATUS (order):', _actions[action.actionType].entityStatuses[SalesEntities.ORDER]);\nconsole.log('STATUS (customer):', _actions[action.actionType].entityStatuses[SalesEntities.CUSTOMER]);\nconsole.log('STATUS (price list):', _actions[action.actionType].entityStatuses[SalesEntities.PRICE_LIST]);\nconsole.log('STATUS (product rule):', _actions[action.actionType].entityStatuses[SalesEntities.PRODUCT_RULE]);\nconsole.log('MODIFIED:', _actionsMeta[action.actionType].modified);\nconsole.log('%:', _percentageComplete[action.actionType].percentage);\nconsole.log('% (payment term):', _percentageComplete[action.actionType].entityPercentages[SalesEntities.PAYMENT_TERM]);\nconsole.log('% (tax class):', _percentageComplete[action.actionType].entityPercentages[SalesEntities.TAX_CLASS]);\nconsole.log('% (carrier):', _percentageComplete[action.actionType].entityPercentages[SalesEntities.CARRIER]);\nconsole.log('% (currency):', _percentageComplete[action.actionType].entityPercentages[SalesEntities.CURRENCY]);\nconsole.log('% (product):', _percentageComplete[action.actionType].entityPercentages[SalesEntities.PRODUCT]);\nconsole.log('% (category):', _percentageComplete[action.actionType].entityPercentages[SalesEntities.CATEGORY]);\nconsole.log('% (order):', _percentageComplete[action.actionType].entityPercentages[SalesEntities.ORDER]);\nconsole.log('% (customer):', _percentageComplete[action.actionType].entityPercentages[SalesEntities.CUSTOMER]);\nconsole.log('% (price list):', _percentageComplete[action.actionType].entityPercentages[SalesEntities.PRICE_LIST]);\nconsole.log('% (product rule):', _percentageComplete[action.actionType].entityPercentages[SalesEntities.PRODUCT_RULE]);\nconsole.log('---------------------');*/\n\n\t\t\t//------------------------------------------------------------------------------------\n\t\t\t//We're also going to track the sales entity data, if any, against the current queue operation, if any:\n\t\t\t//(Currently some repetition of above and further below, for this particular situation)\n\t\t\tif(action.queueActionType != null && action.entity != null){\n\t\t\t\t//If necessary, reset our status/percentage tracking structures at the start of a new sales refresh operation\n\t\t\t\tif(action.resetTracking){\n\t\t\t\t\tActionStatusStore.resetTracking(action.queueActionType);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//add/overwrite this action's details (just what we track)\n\t\t\t\tif(!_actions[action.queueActionType]){\n\t\t\t\t\t_actions[action.queueActionType] = {};\n\t\t\t\t}\n\t\t\t\t_actions[action.queueActionType].actionType = action.queueActionType;\n\t\t\t\t_actions[action.queueActionType].actionStatus = action.queueActionStatus;\n\t\t\t\t\n\t\t\t\t//update meta data (currently just last modified timestamp)\n\t\t\t\tif(!_actionsMeta[action.queueActionType]){\n\t\t\t\t\t_actionsMeta[action.queueActionType] = {};\n\t\t\t\t}\n\t\t\t\t_actionsMeta[action.queueActionType].modified = util.getUnixTimeInMs(); //precision needed here\n\t\t\t\t\n\t\t\t\tif(!_actions[action.queueActionType].entityStatuses){\n\t\t\t\t\t_actions[action.queueActionType].entityStatuses = {};\n\t\t\t\t}\n\t\t\t\tif(!_percentageComplete[action.queueActionType]){\n\t\t\t\t\t_percentageComplete[action.queueActionType] = {};\n\t\t\t\t}\n\t\t\t\tif(!_percentageComplete[action.queueActionType].entityPercentages){\n\t\t\t\t\t_percentageComplete[action.queueActionType].entityPercentages = {};\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//Update entity status\n\t\t\t\t_actions[action.queueActionType].entityStatuses[action.entity] = action.entityStatus;\n\t\t\t\t\n\t\t\t\t//Update entity percentage completion (we really care about logging the batch fine-grained percentages, as that's the whole point of this section)\n\t\t\t\t/*if( action.entity == SalesEntities.PRODUCT || action.entity == SalesEntities.ORDER || action.entity == SalesEntities.CUSTOMER ||\n\t\t\t\t\taction.entity == SalesEntities.PRICE_LIST || action.entity == SalesEntities.PRODUCT_RULE ){\n\t\t\t\t\t//Batches are being processed\n\t\t\t\t\tif(action.entityStatus == Status.PENDING){\n\t\t\t\t\t\t//We only update our percentage when we have data to hand \n\t\t\t\t\t\tif(action.percentageComplete != null){\n\t\t\t\t\t\t\t_percentageComplete[action.queueActionType].entityPercentages[action.entity] = action.percentageComplete;\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t_percentageComplete[action.queueActionType].entityPercentages[action.entity] = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t//Batches are complete in some way\n\t\t\t\t\t}else{\n\t\t\t\t\t\t_percentageComplete[action.queueActionType].entityPercentages[action.entity] = 100;\n\t\t\t\t\t}\n\t\t\t\t}else{\n\t\t\t\t\t_percentageComplete[action.queueActionType].entityPercentages[action.entity] = (action.entityStatus == Status.PENDING ? 0 : 100);\n\t\t\t\t}*/\n\t\t\t\t\n\t\t\t\t//The percentage for the entire queue operation is set further below in queue actions logic (and will take into account any fine-grained percentages)\n\t\t\t\t\n\t\t\t\t//Update entity percentage completion (we really care about logging the batch fine-grained percentages, as that's the whole point of this section)\n\t\t\t\tif( action.entity == SalesEntities.PRODUCT || action.entity == SalesEntities.ORDER || action.entity == SalesEntities.CUSTOMER ||\n\t\t\t\t\taction.entity == SalesEntities.PRICE_LIST || action.entity == SalesEntities.PRODUCT_RULE ){\n\t\t\t\t\t//Batches are being processed we have percentage data to hand \n\t\t\t\t\tif(action.entityStatus == Status.PENDING && action.percentageComplete != null){\n\t\t\t\t\t\tsalesEntityBatchPercentage = action.percentageComplete * _relativeWeightings[action.queueActionType][action.entity];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t//------------------------------------------------------------------------------------\n\t\t\t\n\t\t\tActionStatusStore.emitChange();\n\t\t\tbreak;\n\t\t\t\n\t\t//For completeness (and to ensure user login change results in fresh records)\n\t\tcase Actions.USER_DELETE_DATA:\n\t\t\t_actions = {};\n\t\t\t_actionsMeta = {};\n\t\t\t_percentageComplete = {};\n\t\t\tbreak;\n\t\t\t\n\t\tdefault:\n\t\t\t//nothing\n\t}\n\t\n\t//Composite actions\n\tswitch(action.queueActionType){\n\t\t\n\t\tcase Actions.ALL_REFRESH:\n\t\tcase Actions.SALES_REFRESH:\n\t\tcase Actions.ONLINE_SALES_REFRESH:\n\t\tcase Actions.CUSTOMERS_SALES_REFRESH:\n\t\tcase Actions.CALLS_RELATED_REFRESH:\n\t\tcase Actions.PAST_ORDERS_CUSTOMERS_REFRESH:\n\t\t\t//If necessary, reset our status/percentage tracking structures at the start of a new sales refresh operation\n\t\t\tif(action.resetTracking){\n\t\t\t\tActionStatusStore.resetTracking(action.queueActionType);\n\t\t\t}\n\t\t\t\n\t\t\t//add/overwrite this action's details\n\t\t\t//_actions[action.queueActionType] = action;\n\t\t\t\n\t\t\t//add/overwrite this action's details (just what we track)\n\t\t\tif(!_actions[action.queueActionType]){\n\t\t\t\t_actions[action.queueActionType] = {};\n\t\t\t}\n\t\t\t_actions[action.queueActionType].actionType = action.queueActionType;\n\t\t\t_actions[action.queueActionType].actionStatus = action.queueActionStatus;\n\t\t\t\n\t\t\t//update meta data (currently just last modified timestamp)\n\t\t\tif(!_actionsMeta[action.queueActionType]){\n\t\t\t\t_actionsMeta[action.queueActionType] = {};\n\t\t\t}\n\t\t\t_actionsMeta[action.queueActionType].modified = util.getUnixTimeInMs(); //precision needed here\n\t\t\t\n\t\t\t//Sub action statuses (multi-dim)? \n\t\t\t//if(!_actions[action.queueActionType].subActionStatuses){\n\t\t\t//\t_actions[action.queueActionType].subActionStatuses = {};\n\t\t\t//}\n\t\t\t\n\t\t\t//Set the percentage for the entire operation\n\t\t\tif(!_percentageComplete[action.queueActionType]){\n\t\t\t\t_percentageComplete[action.queueActionType] = {};\n\t\t\t}\n\t\t\tif(action.queueActionStatus == Status.PENDING){\n\t\t\t\t_percentageComplete[action.queueActionType].percentage = (action.queuePercentageComplete != null) ? action.queuePercentageComplete : 0;\n\t\t\t\t\n\t\t\t\t//Add any fine-grained sales batch related percentage to the main percentage, if applicable and currently underway\n\t\t\t\tif(salesEntityBatchPercentage > 0){\n\t\t\t\t\t_percentageComplete[action.queueActionType].percentage += salesEntityBatchPercentage;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}else{\n\t\t\t\t_percentageComplete[action.queueActionType].percentage = 100;\n\t\t\t\t\n\t\t\t\tif(action.queueActionStatus == Status.OK){\n\t\t\t\t\t//[Currently we're also recording a success timestamp for composite actions]\n\t\t\t\t\t_actionsMeta[action.queueActionType][Status.OK] = util.getUnixTimeInMs(); //precision needed here\n\t\t\t\t}\n\t\t\t}\n\t\t\t\t\t\t\n/*console.log('---------------------');\nconsole.log('STATUS:', _actions[action.queueActionType].actionStatus);\nconsole.log('MODIFIED:', _actionsMeta[action.queueActionType].modified);\nconsole.log('%:', _percentageComplete[action.queueActionType].percentage);\nconsole.log('---------------------');*/\n\t\t\t\n\t\t\tActionStatusStore.emitChange();\n\t\t\tbreak;\n\t\t\t\n\t\tdefault:\n\t\t\t//nothing\n\t}\t\n});\n\nmodule.exports = ActionStatusStore;","\"use strict\";\nimport storage from './persistentStorage';\nimport initWatcher from '../initialisationWatcher';\nvar Dispatcher = require('../dispatcher/appDispatcher');\nvar Actions = require('../constants/actionTypes');\nvar Status = require('../constants/actionStatuses');\nvar SalesEntities = require('../constants/salesEntities');\nvar SearchFilters = require('../constants/searchFilters');\nvar SearchTypes = require('../constants/searchTypes');\nvar EventEmitter = require('events').EventEmitter;\nvar assign = require('object-assign');\nvar _ = require('lodash');\nvar option = require('../constants/configOptions.js');\nvar config = require('../config.js');\nvar util = require('../util.js');\nvar CHANGE_EVENT = 'change';\n\n\nconst _store = {\n\t//Product objects keyed on product ID\n\tproducts: {},\n\t//This is currently used for tracking last products refresh timestamp and product IDs to be reattempted next refresh \n\t//Additional future use: Product meta data objects keyed on (product) ID\n\tproductsMeta: { \n\t\trefreshed: null,\n\t\tretryIDs: [] \n\t},\n\t\n\t//Category objects keyed on category ID (for easy retrieval)\n\tcategories: {},\n\t//Category tree multi-dim array (for easy tree display)\n\tcategoryTree: [],\n\t\n\t//Price list objects keyed on price list ID\n\tpriceLists: {},\n\t//Index of price list in use, if any, per customer (i.e. keyed on customer ID)\n\t//[It's easier to store this here for now (where it's currently used), rather than in the customer store]\n\tcustomerToPriceList: {},\n\t//Product rules (excluded product list) per customer (i.e. keyed on customer ID)\n\tproductRules: {},\n\t\n\t//Recent products (IDs) per customer (i.e. keyed on customer ID)\n\trecentProducts: {},\n\t\n\t//Track data state\n\tstatus: {}, //Status.OK,\n\t\n\t//Product search results (product objects)\n\tlocalSearchResults: [],\n\t//Current search term\n\tlocalSearchTerm: '',\n\t//Current search page\n\tlocalSearchPage: 1,\n\t//Current search page size\n\tlocalSearchPageSize: 25,\n\t//Current search filters\n\tlocalSearchFilters: null,\n\t//Total current search results\n\tlocalSearchTotal: null,\n\t//Total current search pages\n\tlocalSearchTotalPages: null,\n\t\n\t//Product search results (product objects)\n\tserverSearchResults: [],\n\t//Current search term\n\tserverSearchTerm: '',\n\t//Current search page\n\tserverSearchPage: 1,\n\t//Current search page size\n\tserverSearchPageSize: 25,\n\t//Current search filters\n\tserverSearchFilters: null,\n\t//Total current search results\n\tserverSearchTotal: null,\n\t//Total current search pages\n\tserverSearchTotalPages: null\n};\n\n//Temporary staging area\nlet _tempStore = {\n\tallProductIDs: null,\n\tpriceLists: {},\n\tcustomerToPriceList: {},\n\tproductRules: {}\n};\n\nconst ProductStore = assign({}, EventEmitter.prototype, {\n\taddChangeListener: function(callback){ this.on(CHANGE_EVENT, callback); },\n\tremoveChangeListener: function(callback){ this.removeListener(CHANGE_EVENT, callback); },\n\temitChange: function(){ this.emit(CHANGE_EVENT); },\n\t\n\tgetStatus: function(actionType){\n\t\t//This generalised solution needs reworking, as it allows a specific action type's status to \n\t\t//be mis-represented by the default status\n\t\t//return (\n\t\t//\t(actionType != null && _store.status[actionType] != null) ? _store.status[actionType] :\n\t\t//\t(_store.status.default != null ? _store.status.default : Status.OK) \n\t\t//);\n\t\t//For now, let's be specific:\n\t\t\n\t\tlet returnStatus = Status.OK;\n\t\t\n\t\tswitch(actionType){\n\t\t\tcase Actions.PRODUCTS_SEARCH_LOCAL:\n\t\t\tcase Actions.PRODUCTS_SEARCH_SERVER:\n\t\t\t\treturnStatus = (_store.status[actionType] != null ? _store.status[actionType] : Status.OK);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\treturnStatus = (_store.status.default != null ? _store.status.default : Status.OK);\n\t\t}\n\t\t\n\t\treturn returnStatus;\n\t\t/*return (\n\t\t\tactionType == Actions.SOMETHING ?\n\t\t\t(_store.status[actionType] != null ? _store.status[actionType] : Status.OK) :\n\t\t\t(_store.status.default != null ? _store.status.default : Status.OK)\n\t\t);*/\n\t},\n\t\n\t//Get the unix timestamp of the last products refresh (if any)\n\tgetLastRefresh: function(){\n\t\treturn _store.productsMeta.refreshed;\n\t},\n\t\n\t//Get the product IDs for products that should be reattempted next refresh (if any)\n\tgetRefreshRetryIDs: function(){\n\t\treturn _store.productsMeta.retryIDs;\n\t},\n\t\n\tgetProducts: function(){\n\t\tvar arrProducts = [];\n\t\t\n\t\tfor (var productID in _store.products){\n\t\t\tif(_store.products[productID] != null){\n\t\t\t\tarrProducts.push(_store.products[productID]);\n\t\t\t}\n\t\t}\n\t\t\n\t\t//Do any necesssary sorting here\n\t\t\n\t\treturn arrProducts; \n\t},\n\t\n\tgetProduct: function(productID){\n\t\treturn _store.products[productID];\n\t},\n\t\n\tgetActiveProductsCount: function(){\n\t\treturn _.filter(_store.products, (product) => (\n\t\t\t(product != null && product.product.is_active == 1 && product.product.is_disabled == 0)\n\t\t)).length;\n\t},\n\t\n\tgetCategory: function(categoryID){\n\t\treturn _store.categories[categoryID];\n\t},\n\tgetCategoryTree: function(){\n\t\treturn _store.categoryTree;\n\t},\n\t//Used internally to build the category index from the multi-dim tree data\n\tpopulateCategoriesFromTree: function(arrTree){\n\t\tfor (var i = 0; i < arrTree.length; i++) {\n\t\t\t_store.categories[arrTree[i].id] = {\n\t\t\t\tid: \t\tarrTree[i].id,\n\t\t\t\tparent_id: \tarrTree[i].parent_id,\n\t\t\t\tname: \t\tarrTree[i].name\n\t\t\t};\n\t\t\t \n\t\t\tif(arrTree[i].children != null){\n\t\t\t\tthis.populateCategoriesFromTree(arrTree[i].children);\n\t\t\t}\n\t\t}\n\t},\n\t\n\tgetSearchResults: function(searchType){\n\t\treturn (searchType == SearchTypes.SERVER ? _store.serverSearchResults : _store.localSearchResults);\n\t},\n\tgetSearchTerm: function(searchType){\n\t\treturn (searchType == SearchTypes.SERVER ? _store.serverSearchTerm : _store.localSearchTerm);\n\t},\n\tgetSearchPage: function(searchType){\n\t\treturn (searchType == SearchTypes.SERVER ? _store.serverSearchPage : _store.localSearchPage);\n\t},\n\tgetSearchPageSize: function(searchType){\n\t\treturn (searchType == SearchTypes.SERVER ? _store.serverSearchPageSize : _store.localSearchPageSize);\n\t},\n\tgetSearchFilters: function(searchType){\n\t\treturn (searchType == SearchTypes.SERVER ? _store.serverSearchFilters : _store.localSearchFilters);\n\t},\n\tgetSearchTotal: function(searchType){\n\t\treturn (searchType == SearchTypes.SERVER ? _store.serverSearchTotal : _store.localSearchTotal);\n\t},\n\tgetSearchTotalPages: function(searchType){\n\t\treturn (searchType == SearchTypes.SERVER ? _store.serverSearchTotalPages : _store.localSearchTotalPages);\n\t},\n\t\n\t//Obtain (relevant) store data for server debug submission\n\texportData: function(){\n\t\tlet arrExport = ['products', 'productsMeta', 'categories', 'categoryTree', 'priceLists', 'customerToPriceList', 'productRules', 'recentProducts'];\n\t\t//Ensure we return valid JSON\n\t\treturn '{' + arrExport.map((key) => '\"' + key + '\":' + JSON.stringify(_store[key])).join() + '}';\n\t}\n});\n\nDispatcher.register(function(action){\n\tswitch(action.actionType){\n\t\tcase Actions.INITIALISE:\n\n//--------\n//TEMP MIGRATION CODE (TO BE REMOVED):\n\n//If we have legacy data storage\nif(localStorage.products){\n\t//Populate from legacy storage\n\t_store.products = JSON.parse(localStorage.products);\n\tif(localStorage.productsMeta){\n\t\t_store.productsMeta = JSON.parse(localStorage.productsMeta);\n\t}\n\t\n\t//Save ALL to new persistent storage, removing legacy storage items if successful\n\tstorage.set([['products', _store.products], ['productsMeta', _store.productsMeta]]).then(() => {\n\t\tlocalStorage.removeItem('products');\n\t\tlocalStorage.removeItem('productsMeta');\n\t\tconsole.log('Successfully migrated product data from legacy storage');\n\t}).catch((err) => {\n\t\tconsole.log('Unsuccessfully migrated product data from legacy storage: ', err);\n\t});\n\t\n\t//Emit a change event without waiting for migration operation \n\tProductStore.emitChange();\n\tinitWatcher.setReady(Promise.resolve());\n\t\n} else {\n//--------\n\t\t\n\t\t\t//Load any potentially previously cached data (products, meta, pricelist, category, etc.)\n\t\t\tinitWatcher.setReady(\n\t\t\t\tstorage.get(['products', 'productsMeta', 'categories', 'categoryTree', 'priceLists', 'customerToPriceList', 'productRules', 'recentProducts']).then((values) => {\n\t\t\t\t\tvalues.forEach((pair) => { \n\t\t\t\t\t\tif(pair[1] != null){ _store[pair[0]] = pair[1] }\n\t\t\t\t\t});\n\t\t\t\t}).catch((err) => {\n\t\t\t\t\t//Silently fail\n\t\t\t\t\t//console.error('ProductStore Error: ', err);\n\t\t\t\t}).then(() => {\n\t\t\t\t\t//Emit a change event regardless of success/failure\n\t\t\t\t\tProductStore.emitChange();\n//console.log(_store);\t\t\t\t\t\n\t\t\t\t})\n\t\t\t);\n\n//--------\n}\n//--------\t\t\t\n\t\t\t\n\t\t\tbreak;\n\t\t\n//As in CustomerStore, we could purge our customer-specific data\n//although recentProducts doesn't take much space, and the others are overwritten during a SALES_REFRESH\n/*\t\n\t\tcase Actions.CALLS_REFRESH:\n\t\t\tif(action.actionStatus == Status.OK){\n\t\t\t\t//Obtain customer IDs for fresh calls\n\t\t\t\tvar retainCustomerIDs = _.keysIn(action.callsData);\n//***TODO: Add to retainCustomerIDs any customers for which this user has orders\n\t\t\t\t\n\t\t\t\t//Purge associated data and meta data for any old calls (those not in new list), if necessary\n\t\t\t\t//(In normal circumstances, this would be all old IDs (new day refresh) or no IDs (same day refresh))\n\t\t\t\tProductStore.purgeCustomerDataExceptForIds(retainCustomerIDs);\n\n\t\t\t\t//Additionally cache our recent products state in persistent storage\n\t\t\t\t//Don't need all of these as they're overwritten with new data\n\t\t\t\t//storage.set([\n\t\t\t\t//\t['priceLists', _store.priceLists], \n\t\t\t\t//\t['customerToPriceList', _store.customerToPriceList],\n\t\t\t\t//\t['productRules', _store.productRules],\n\t\t\t\t//\t['recentProducts', _store.recentProducts],\n\t\t\t\t//]).catch((err) => {});\n\t\t\t\tstorage.set('recentProducts', _store.recentProducts).catch((err) => {});\n\t\t\t}\n\t\t\t//Just housekeeping, so no real change to emit (and no relevant controller views even listening when calls refresh)\n\t\t\t//ProductStore.emitChange();\n\t\t\tbreak;\n*/\t\t\t\n\t\t\n\t\tcase Actions.CUSTOMER_REFRESH:\n\t\t\t//We only need to store recent products in the 'offline' case\n\t\t\t//(They are only used in a LOCAL (offline) product search. In the 'online' case this is handled by the server during product searching.)\n\t\t\tif(!config.get(option.FUNC_ONLINE_CUSTOMERS)){\n\t\t\t\tif(action.actionStatus == Status.OK || action.actionStatus == Status.PARTIAL){\n\t\t\t\t\tif(action.customerData != null){\n\t\t\t\t\t\t//action.customerID\n\t\t\t\t\t\t_store.recentProducts[action.customerData.id] = action.customerData.products.map((id) => parseInt(id));\n\t\t\t\t\t\t//Additionally cache our recent products state in persistent storage\n\t\t\t\t\t\tstorage.set('recentProducts', _store.recentProducts).catch((err) => {});\n\t\t\t\t\t\tProductStore.emitChange();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\t\n\t\tcase Actions.SALES_REFRESH:\n\t\t\tlet blnChangeToEmit = false;\n\t\t\t\n\t\t\tif(action.entity == SalesEntities.PRODUCT){\n\t\t\t\t//We have a batch of products to save\n\t\t\t\tif(action.batchStatus == Status.OK){\n\t\t\t\t\tfor(var productID in action.batchItems){\n\t\t\t\t\t\tif(action.batchItems[productID] != null){\n\t\t\t\t\t\t\t_store.products[action.batchItems[productID].product.id] = action.batchItems[productID];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t//Don't emit a change until all batches are completed (see below)\n\t\t\t\t\t//blnChangeToEmit = true;\n\t\t\t\t\t//Don't cache in persistent storage until the end of our async batch loading (see below)\n\t\t\t\t\t//storage.set('products', _store.products).catch((err) => {});\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//We're still refreshing products in batches\n\t\t\t\tif(action.entityStatus == Status.PENDING){\n\t\t\t\t\t//We have been provided with a full list of product IDs, for housekeeping purposes\n\t\t\t\t\t//[This currently only happens once at the beginning of the products refresh process]\n\t\t\t\t\tif(action.allProductIDs != null){\n\t\t\t\t\t\tfor (var productID in _store.products){\n\t\t\t\t\t\t\t//Delete any products no longer present on the server\n\t\t\t\t\t\t\tif(_store.products[productID] != null && !_.includes(action.allProductIDs, productID)){\n\t\t\t\t\t\t\t\t//_store.products[productID] = undefined;\n\t\t\t\t\t\t\t\tdelete _store.products[productID]; //use delete since won't be auto-removed as localStorage not used in this store\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//Save full server list for later safeguarding (after batch processing)\n\t\t\t\t\t\t_tempStore.allProductIDs = action.allProductIDs;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t//Don't emit a change until all batches are completed (see below)\n\t\t\t\t\t//Don't cache in persistent storage until the end of our async batch loading (see below)\n\t\t\t\t\n\t\t\t\t//We have completed processing of all product batches (successfully or not)\t\n\t\t\t\t}else{\n\t\t\t\t\t//Now that we're done dealing with our asynchronous batch saving, let's cache our products state in persistent storage\n\t\t\t\t\tstorage.set('products', _store.products).catch((err) => {});\n\t\t\t\t\n\t\t\t\t\t//We have successfully (or partially successfuly) processed all products (multiple batches)\n\t\t\t\t\t//[In total failure case, we will just redo everything we did this time again, so we're taking the decision to\n\t\t\t\t\t//not update the retry list (too much else could have gone wrong).\n\t\t\t\t\t//Note also that we can never safely update the refreshed timestamp in error case, as we could lose server changes that have happened.\n\t\t\t\t\t//Partial success implies we at least have an updated retry list that can include these changes, to go with the updated timestamp.]\n\t\t\t\t\tif(action.entityStatus != Status.ERROR){\n\t\t\t\t\t\t//_store.productsMeta.refreshed = util.getUnixTimeStartOfDay(); //cleaner to use start of day?\n\t\t\t\t\t\t_store.productsMeta.refreshed = (action.newLastRefreshTimestamp != null ? action.newLastRefreshTimestamp : util.getUnixTimeStartOfDay());\n\t\t\t\t\t\t_store.productsMeta.retryIDs = action.failedProductIDs;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t//Safeguard: Before we wrap up, if we were successfully provided with a full server product ID list, \n\t\t\t\t\t//let's double check we're not missing any products, adding them to our next refresh if so.\n\t\t\t\t\tif(_tempStore.allProductIDs != null){\n\t\t\t\t\t\t//let currentProductIDs = _.keysIn(_store.products);\n\t\t\t\t\t\tfor(var i = 0; i < _tempStore.allProductIDs.length; i++){\n\t\t\t\t\t\t\tlet pid = _tempStore.allProductIDs[i];\n\t\t\t\t\t\t\tif( (/*!_.includes(currentProductIDs, pid) ||*/ _store.products[pid] == null) &&\n\t\t\t\t\t\t\t\t!_.includes(_store.productsMeta.retryIDs, pid) ){\n\t\t\t\t\t\t\t\t_store.productsMeta.retryIDs.push(pid);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//Let's tidy this up as we have no further use for it\n\t\t\t\t\t\t_tempStore.allProductIDs = null;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t//Additionally cache in persistent storage for re-use across multiple sessions (until updated again)\n\t\t\t\t\tstorage.set('productsMeta', _store.productsMeta).catch((err) => {});\n\t\t\t\t\t\n\t\t\t\t\t//Let's only emit a change now that all batches are completed\n\t\t\t\t\tblnChangeToEmit = true;\n\t\t\t\t}\n\t\t\t}else if(action.entity == SalesEntities.PRICE_LIST){\n\t\t\t\t//We have a batch of price lists to save\n\t\t\t\tif(action.batchStatus == Status.OK){\n\t\t\t\t\tfor(var i = 0; i < action.batchItems.length; i++) {\n\t\t\t\t\t\tlet pl = action.batchItems[i];\n\t\t\t\t\t\t\n\t\t\t\t\t\t//We already have this pricelist stored (but merge in new customer IDs) \n\t\t\t\t\t\tif(_tempStore.priceLists[pl.id] != null){\n\t\t\t\t\t\t\t_tempStore.priceLists[pl.id].customer_ids = _.union(_tempStore.priceLists[pl.id].customer_ids, pl.customer_ids);\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t_tempStore.priceLists[pl.id] = pl;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t//Save the indexing information (customer -> price list)\n\t\t\t\t\t\tfor(var j = 0; j < pl.customer_ids.length; j++) {\n\t\t\t\t\t\t\t_tempStore.customerToPriceList[pl.customer_ids[j]] = pl.id;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t//Don't emit a change until all batches are completed (see below)\n\t\t\t\t\t//Also don't cache in persistent storage, etc. until the end of our async batch loading (see below)\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//We have completed processing of all price list batches (successfully or not)\n\t\t\t\t//[Note this also applies to the case when we have no customers in the app at all - and thus no applicable price lists]\n\t\t\t\tif(action.entityStatus != Status.PENDING){\n\t\t\t\t\t//Processing was successful (or partially successful)\n\t\t\t\t\tif(action.entityStatus != Status.ERROR){\n\t\t\t\t\t\t//Overwrite our storage (using our staging data)\n\t\t\t\t\t\t_store.priceLists = _tempStore.priceLists;\n\t\t\t\t\t\t_store.customerToPriceList = _tempStore.customerToPriceList;\n\t\t\t\t\t\t\n\t\t\t\t\t\t//Now that we're done dealing with our asynchronous batch saving, let's cache our price lists state in persistent storage\n\t\t\t\t\t\tstorage.set([['priceLists', _store.priceLists], ['customerToPriceList', _store.customerToPriceList]]).catch((err) => {});\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t//Reset staging area\n\t\t\t\t\t_tempStore.priceLists = {};\n\t\t\t\t\t_tempStore.customerToPriceList = {};\n\t\t\t\t\t\n\t\t\t\t\t//Let's only emit a change now that all batches are completed\n\t\t\t\t\tblnChangeToEmit = true;\n\t\t\t\t}\n\t\t\t}else if(action.entity == SalesEntities.PRODUCT_RULE){\n\t\t\t\t//We have a batch of product rules to save\n\t\t\t\tif(action.batchStatus == Status.OK){\n\t\t\t\t\tfor(var i = 0; i < action.batchItems.length; i++) {\n\t\t\t\t\t\tlet pr = action.batchItems[i];\n\t\t\t\t\t\t\n\t\t\t\t\t\t//Save the indexing/product restriction information (customer -> product exclusions) - if we have valid info\n\t\t\t\t\t\t//[Note that customer_ids should only contain a single customer ID, but we loop for safety]\n\t\t\t\t\t\tif(pr.products != null && pr.products != \"\") {\n\t\t\t\t\t\t\tfor(var j = 0; j < pr.customer_ids.length; j++) {\n\t\t\t\t\t\t\t\t_tempStore.productRules[pr.customer_ids[j]] = pr.products.split(\",\").map((id) => parseInt(id));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t//Don't emit a change until all batches are completed (see below)\n\t\t\t\t\t//Also don't cache in persistent storage, etc. until the end of our async batch loading (see below)\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//We have completed processing of all product rule batches (successfully or not)\n\t\t\t\t//[Note this also applies to the case when we have no customers in the app at all - and thus no rules]\n\t\t\t\tif(action.entityStatus != Status.PENDING){\n\t\t\t\t\t//Processing was successful (or partially successful)\n\t\t\t\t\tif(action.entityStatus != Status.ERROR){\n\t\t\t\t\t\t//Overwrite our storage (using our staging data)\n\t\t\t\t\t\t_store.productRules = _tempStore.productRules;\n\t\t\t\t\t\t\n\t\t\t\t\t\t//Now that we're done dealing with our asynchronous batch saving, let's cache our product rules state in persistent storage\n\t\t\t\t\t\tstorage.set('productRules', _store.productRules).catch((err) => {});\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t//Reset staging area\n\t\t\t\t\t_tempStore.productRules = {};\n\t\t\t\t\t\n\t\t\t\t\t//Let's only emit a change now that all batches are completed\n\t\t\t\t\tblnChangeToEmit = true;\n\t\t\t\t}\n\t\t\t}else if(action.entity == SalesEntities.CUSTOMER){\n\t\t\t\t//We have customer(s) to save\n\t\t\t\tif(action.batchStatus == Status.OK){\n\t\t\t\t\tif(action.batchCustomers != null){\n\t\t\t\t\t\tfor (var i = 0; i < action.batchCustomers.length; i++) {\n\t\t\t\t\t\t\tif(action.batchCustomers[i] != null){\n\t\t\t\t\t\t\t\t_store.recentProducts[action.batchCustomers[i].id] = action.batchCustomers[i].products.map((id) => parseInt(id));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t//Don't emit a change until all customers are completed (see below)\n\t\t\t\t\t//Don't cache in persistent storage until the end of our async customer loading (see below)\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//We have completed processing of all customer batches (successfully or not)\n\t\t\t\tif(action.entityStatus != Status.PENDING){\n\t\t\t\t\t//Now that we're done dealing with our asynchronous customer saving, let's cache our recent products state in persistent storage\n\t\t\t\t\tstorage.set('recentProducts', _store.recentProducts).catch((err) => {});\n\t\t\t\t\t\n\t\t\t\t\t//Let's only emit a change now that all customers are completed\n\t\t\t\t\tblnChangeToEmit = true;\n\t\t\t\t}\n\t\t\t}else if(action.entity == SalesEntities.CATEGORY){\n\t\t\t\t//(This is just a once off rather than batched refresh, as with other entities above)\n\t\t\t\tif(action.entityStatus == Status.OK){\n\t\t\t\t\t_store.categoryTree = action.arrCategoryTree;\n\t\t\t\t\tProductStore.populateCategoriesFromTree(_store.categoryTree); //[populate _store.categories]\n\t\t\t\t\t\n\t\t\t\t\t//Cache our category state in persistent storage\n\t\t\t\t\tstorage.set([['categories', _store.categories], ['categoryTree', _store.categoryTree]]).catch((err) => {});\n\t\t\t\t\t\t\n\t\t\t\t\tblnChangeToEmit = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif(blnChangeToEmit){\n\t\t\t\tProductStore.emitChange();\n\t\t\t}\n\t\t\t\n\t\t\tbreak;\n\t\t\n\t\tcase Actions.PRODUCTS_SEARCH_LOCAL:\n\t\t\t_store.status[action.actionType] = action.actionStatus;\n\t\t\t_store.localSearchTerm = action.searchTerm;\n\t\t\t_store.localSearchPage = action.searchPage;\n\t\t\t_store.localSearchPageSize = action.searchPageSize ? action.searchPageSize : 25;\n\t\t\t_store.localSearchFilters = action.searchFilters;\n\t\t\t\n\t\t\tlet arrSearchTerms = [];\n\t\t\t_.forEach(_store.localSearchTerm.split(\" \"), (term) => {\n\t\t\t\tlet searchToken = term.trim();\n\t\t\t\tif(searchToken != ''){\n\t\t\t\t\tarrSearchTerms.push(searchToken.toLowerCase());\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\tlet applicablePriceListProducts = null;\n\t\t\tlet applicableProductExclusions = [];\n\t\t\tlet blnHaveFilters = (_store.localSearchFilters != null);\n\t\t\tlet filterForFeaturedProducts = false;\n\t\t\tlet filterForRecentProducts = null;\n\t\t\tlet filterForCategories = null;\n\t\t\t\n\t\t\t//We have a customer ID supplied, so let's check for applicable price lists/product rules (if any)\n\t\t\tif(action.customerID != null && action.customerID > 0){\n\t\t\t\tlet priceListID = _store.customerToPriceList[action.customerID];\n\t\t\t\tif(priceListID != null){\n\t\t\t\t\tapplicablePriceListProducts = _store.priceLists[priceListID] != null ? _store.priceLists[priceListID].products : null;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tapplicableProductExclusions = _store.productRules[action.customerID] != null ? _store.productRules[action.customerID] : [];\n\t\t\t\t\n\t\t\t\t//(Recent products filter only has meaning per customer)\n\t\t\t\tif(blnHaveFilters && _store.localSearchFilters.customerProducts == SearchFilters.RECENT){\n\t\t\t\t\t//If the recent filter is active, and we have no recent product data for this customer, we need to default to no products (empty array)\n\t\t\t\t\tfilterForRecentProducts = _store.recentProducts[action.customerID] != null ? _store.recentProducts[action.customerID] : [];\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif(blnHaveFilters){\n\t\t\t\t//If we're doing featured products filtering \n\t\t\t\tif(_store.localSearchFilters.featured != null && _store.localSearchFilters.featured){\n\t\t\t\t\tfilterForFeaturedProducts = true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//If we're doing category filtering \n\t\t\t\tif(_store.localSearchFilters.categories != null && _store.localSearchFilters.categories.length){\n\t\t\t\t\tfilterForCategories = _store.localSearchFilters.categories; //.map((id) => parseInt(id)); //[moved to component]\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t//let allSearchResults = _.filter(_store.products, ({ product }) => { //[we only require product.product BUT we have to test for product != null]\n\t\t\tlet allSearchResults = _.filter(_store.products, (product) => {\n\t\t\t\t//We may have deleted products in storage\n\t\t\t\tif(product == null){\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tlet categories = product.categories;\n\t\t\t\tproduct = product.product;\n\t\t\t\t\n\t\t\t\t//We're only interested in listing active products\n\t\t\t\tif(product.is_active == 0 || product.is_disabled == 1){\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//If we're filtering for featured products only, we exclude the rest\n\t\t\t\tif(filterForFeaturedProducts && (product.is_featured == null || product.is_featured != 1)){\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//We need to use the product's default (only) VARIANT ID for filtering with recent products, price lists and product rules (as it can be different to the main product (class) ID)\n\t\t\t\t//[We add an availability check safeguard, but should always exist]\n\t\t\t\t//[If/when we actually support variants we'll need to do more checking than simply using the first (only) variant]\n\t\t\t\tlet productID = (product.variants != null && product.variants.length > 0 ? product.variants[0].id : product.id); \n\t\t\t\t\n\t\t\t\t//If we're filtering for recent products only (for this customer), we exclude the rest\n\t\t\t\tif(filterForRecentProducts != null && !_.includes(filterForRecentProducts, productID)){\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//If we're filtering for category(ies), we exclude the rest\n\t\t\t\tif(filterForCategories != null){\n\t\t\t\t\t//This product has no categories, so no match!\n\t\t\t\t\tif(!categories.length){\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}else{\n\t\t\t\t\t\tlet blnCatMatch = false;\n\t\t\t\t\t\tfor (var j = 0; j < categories.length; j++) {\n\t\t\t\t\t\t\tif(_.includes(filterForCategories, categories[j].id)){\n\t\t\t\t\t\t\t\tblnCatMatch = true;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(!blnCatMatch){\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//[We need to use inverse logic below, but equivalent SQL would be: \n\t\t\t\t//(name LIKE '%searchterm%' OR sku LIKE '%searchterm%') AND\n\t\t\t\t//(name LIKE '%othersearchterm%' OR sku LIKE '%othersearchterm%') ]\n\t\t\t\tlet name = (product.name != null) ? product.name.toLowerCase() : '';\n\t\t\t\tlet sku = (product.SKU != null) ? product.SKU.toLowerCase() : '';\n\t\t\t\tfor (var i = 0; i < arrSearchTerms.length; i++) {\n\t\t\t\t\t//[indexOf should be fastest for plain strings, but RexExp alternatives: product.name.match(/searchterm/i); or /searchterm/i.test(product.name);]\n\t\t\t\t\tif((name.indexOf(arrSearchTerms[i]) === -1) && (sku.indexOf(arrSearchTerms[i]) === -1)){\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//We exclude any products not in the customer's price list (if one is applicable)\n\t\t\t\tif(applicablePriceListProducts != null && applicablePriceListProducts[productID] == null){\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//We exclude any products excluded for this customer (if any, if applicable)\n\t\t\t\tif(_.includes(applicableProductExclusions, productID)){\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn true;\n\t\t\t});\n\t\t\t\n\t\t\t_store.localSearchTotal = allSearchResults.length;\n\t\t\t_store.localSearchTotalPages = Math.floor(_store.localSearchTotal / _store.localSearchPageSize) + ((_store.localSearchTotal % _store.localSearchPageSize) > 0 ? 1 : 0);\n\t\t\t_store.localSearchPage = (_store.localSearchTotalPages == 0 || _store.localSearchPage < 1) ? 1 : (_store.localSearchPage > _store.localSearchTotalPages ? _store.localSearchTotalPages : _store.localSearchPage);\n\t\t\t\n\t\t\tlet searchPageStart = (_store.localSearchPage - 1) * _store.localSearchPageSize;\n\t\t\t_store.localSearchResults = allSearchResults.slice(searchPageStart, (searchPageStart + _store.localSearchPageSize)); //pagination\n\t\t\t\n\t\t\t//Modify product prices if pricelist applicable\n\t\t\t/*if(applicablePriceListProducts != null){\n\t\t\t\t_store.localSearchResults = _store.localSearchResults.map((p) => {\n\t\t\t\t\t//[Note we don't strictly need to parseFloat, as these prices are converted back to strings by the list component presentation,\n\t\t\t\t\t//BUT we could do it for consistent data (avoiding any problems if the search data is used differently in future)]\n\t\t\t\t\t//p.product.base_price = parseFloat(applicablePriceListProducts[p.product.id]);\n\t\t\t\t\tp.product.base_price = applicablePriceListProducts[p.product.id];\n\t\t\t\t\treturn p;\n\t\t\t\t});\n\t\t\t}*/\n\t\t\t//NOTE: The above code has the effect of changing the stored pricing rather than just the search results (because regardless of \n\t\t\t//the use of _.filter() and slice() above, the results objects deeper within are still references to internal storage). \n\t\t\t//- We could do deep copying of just the product objects and fields we need and return these product copies instead (perhaps in map() function below), OR:\n\t\t\t//- We can do as we're doing for now below, which is to keep everything as references to internal storage, and use and modify an extra price field, \n\t\t\t//  always changing it according to current search criteria, but leaving the original base_price intact.\n\t\t\t_store.localSearchResults = _store.localSearchResults.map((p) => {\n\t\t\t\t//We need to use the product's default (only) VARIANT ID for price lists (as it can be different to the main product (class) ID)\n\t\t\t\t//[We add an availability check safeguard, but should always exist]\n\t\t\t\t//[If/when we actually support variants we'll need to do more checking than simply using the first (only) variant]\n\t\t\t\tlet productID = (p.product.variants != null && p.product.variants.length > 0 ? p.product.variants[0].id : p.product.id);\n\t\t\t\t\n\t\t\t\t//Modify product prices if pricelist applicable, otherwise explicity provide default base price\n\t\t\t\t//[Note we don't strictly need to parseFloat, as these prices are converted back to strings by the list component presentation,\n\t\t\t\t//BUT we could do it for consistent data (avoiding any problems if the search data is used differently in future)]\n\t\t\t\t//p.product.calc_price = parseFloat(applicablePriceListProducts != null ? applicablePriceListProducts[productID] : p.product.base_price);\n\t\t\t\tp.product.calc_price = (applicablePriceListProducts != null ? applicablePriceListProducts[productID] : p.product.base_price);\n\t\t\t\treturn p;\n\t\t\t});\n\t\t\t\n\t\t\tProductStore.emitChange();\n\t\t\tbreak;\n\t\t\t\n\t\tcase Actions.PRODUCTS_SEARCH_SERVER:\n\t\t\tif(action.actionStatus == Status.OK){\n\t\t\t\t//refresh our results storage\n\t\t\t\t_store.serverSearchResults = action.resultsData;\n\t\t\t\t_store.serverSearchTotal = action.total;\n\t\t\t\t_store.serverSearchTotalPages = action.totalPages;\n\t\t\t}\n\t\t\t\n\t\t\t_store.status[action.actionType] = action.actionStatus;\n\t\t\t_store.serverSearchTerm = action.searchTerm;\n\t\t\t_store.serverSearchPage = action.searchPage;\n\t\t\t_store.serverSearchPageSize = action.searchPageSize ? action.searchPageSize : 25;\n\t\t\t_store.serverSearchFilters = action.searchFilters;\n\t\t\t\n\t\t\tProductStore.emitChange();\n\t\t\tbreak;\t\t\t\n\t\t\t\n\t\tcase Actions.USER_DELETE_DATA:\n\t\t\t_store.products = {};\n\t\t\t_store.productsMeta = { \n\t\t\t\trefreshed: null, //[important to allow full product list to be refreshed in future (not just changes since last sync)]\n\t\t\t\tretryIDs: [] \n\t\t\t};\n\t\t\t\n\t\t\t_store.categories = {};\n\t\t\t_store.categoryTree = [];\n\t\t\t\n\t\t\t_store.priceLists = {};\n\t\t\t_store.customerToPriceList = {};\n\t\t\t_store.productRules = {};\n\t\t\t\n\t\t\t_store.recentProducts = {};\n\t\t\t\n\t\t\t_store.localSearchResults = [];\n\t\t\t_store.localSearchTerm = '';\n\t\t\t_store.localSearchPage = 1;\n\t\t\t_store.localSearchPageSize = 25;\n\t\t\t_store.localSearchFilters = null;\n\t\t\t_store.localSearchTotal = null;\n\t\t\t_store.localSearchTotalPages = null;\n\t\t\t\n\t\t\t_store.serverSearchResults = [];\n\t\t\t_store.serverSearchTerm = '';\n\t\t\t_store.serverSearchPage = 1;\n\t\t\t_store.serverSearchPageSize = 25;\n\t\t\t_store.serverSearchFilters = null;\n\t\t\t_store.serverSearchTotal = null;\n\t\t\t_store.serverSearchTotalPages = null;\n\t\t\t\n\t\t\t//Additionally update persistent storage cache (without needing to wait on it)\n\t\t\tstorage.set([['products', _store.products], ['productsMeta', _store.productsMeta]]).catch((err) => {});\n\t\t\t\n\t\t\t//Safeguard: emit a change event (necessary?)\n\t\t\tProductStore.emitChange();\n\t\t\t\n\t\t\tbreak;\t\n\t\t\t\t\n\t\tdefault:\n\t\t\t//nothing\t\n\t}\n});\n\nmodule.exports = ProductStore;","\"use strict\";\n\nmodule.exports = {\n\tCALL:\t\"call\",\n\tADMIN:\t\"admin\"\n};","\"use strict\";\n\nmodule.exports = {\n\tLOCAL:\t\"local\",\n\tSERVER:\t\"server\"\n};","import React from 'react';\nimport Spinner from './spinner';\nvar util = require('../../util.js');\n\n//[This may need to be reworked slightly]\nclass LazyImage extends React.Component {\n\tstatic propTypes = {\n\t\tsrc: React.PropTypes.string.isRequired,\t\t//image we want to display\n\t\tplaceholderSrc: React.PropTypes.string,\t\t//image to display until actual image is loaded (or on load error)\n\t\tplaceholderSpinner: React.PropTypes.bool,\t//whether to use a spinner when loading instead of an image\n\t\tvisible: React.PropTypes.bool\t\t\t\t//easy way to show/hide this component completely (while still having the image preloaded)\n\t};\n\t\n\tstatic defaultProps = {\n\t\tplaceholderSrc: (util.assetsUrl + \"img/morpheus-m.png\"),\n\t\tplaceholderSpinner: false,\n\t\tvisible: true\n\t};\n\t\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tloaded: false,\n\t\t\terror: false\n\t\t};\n\t}\n\t\n\tcomponentDidMount() {\n\t\tthis.preloadImage();\n\t}\n\n\tcomponentWillReceiveProps(nextProps) {\n\t\t//When a new image src is passed via props to this component, \n\t\t//reset the loaded/error state and do a fresh image 'preload'\n\t\tif(this.props.src != nextProps.src){\t\t\n\t\t\tthis.setState({\n\t\t\t\tloaded: false,\n\t\t\t\terror: false\n\t\t\t});\n\t\t\tthis.preloadImage();\n\t\t}\n\t}\n\t\n\tpreloadImage = () => {\n\t\tconst img = new Image();\n\t\timg.onload = () => {\n\t\t\t//console.log(this.props.src + \" loaded\");\n\t\t\tthis.setState({ loaded: true });\n\t\t};\n\t\timg.onerror = () => {\n\t\t\t//console.log(this.props.src + \" failed to load\");\n\t\t\tthis.setState({ error: true });\n\t\t};\n\t\timg.src = this.props.src;\n\t}\n\t\n\trender() {\n\t\tif (!this.props.visible) {\n\t\t\treturn null;\n\t\t} else if (!this.state.loaded || this.state.error) {\n\t\t\treturn (\n\t\t\t\t(this.props.placeholderSpinner && !this.state.loaded) ?\n\t\t\t\t<Spinner style={this.props.placeholderSpinnerStyle} isVisible={true} /> :\n\t\t\t\t<img className={this.props.placeholderClassName || 'placeholder'} style={this.props.style} src={this.props.placeholderSrc} />\n\t\t\t);\n\t\t} \n    \n\t\treturn (\n\t\t\t<img className={this.props.className} style={this.props.style} src={this.props.src} />\n\t\t);\n\t}\n}\n\nexport default LazyImage;","\"use strict\";\n\nimport storage from './persistentStorage';\nimport initWatcher from '../initialisationWatcher';\nvar Dispatcher = require('../dispatcher/appDispatcher');\nvar Actions = require('../constants/actionTypes');\nvar Status = require('../constants/actionStatuses');\nvar EventEmitter = require('events').EventEmitter;\nvar assign = require('object-assign');\nvar _ = require('lodash');\nvar option = require('../constants/configOptions.js');\nvar config = require('../config.js');\nvar CHANGE_EVENT = 'change';\n\n\nconst _store = {\n\tuser: {},\n\t//Track last logged in user \n\t//AND user (display) field info (including custom), and associated last refresh timestamp\n\tuserMeta: { \n\t\tlastUser: null,\n\t\tfields: [\n\t\t\t//Current non-custom display fields (custom fields will be merged in)\n\t\t\t//{'name':'name', 'label':'Name', 'order':-10 }, //already in custom fields\n\t\t\t//{'name':'password', 'label':'Password', 'order':-8 },\n\t\t\t//{'name':'manager', 'label':'Manager', 'order':-8 },\n\t\t\t//{'name':'default_warehouse', 'label':'Default Warehouse', 'order':-8 },\n\t\t\t//cellphone, home phone, office phone\n\t\t\t{'name':'email', 'label':'Email', 'order':8 }, //After 'name' custom field\n\t\t\t{'name':'role', 'label':'Role', 'order':9 }\n\t\t],\n\t\tfieldsRefreshed: null\n\t},\n\t//Track data state\n\tstatus: Status.OK,\n\tloginError: ''\n};\n\nvar UserStore = assign({}, EventEmitter.prototype, {\n\taddChangeListener: function(callback){ this.on(CHANGE_EVENT, callback); },\n\tremoveChangeListener: function(callback){ this.removeListener(CHANGE_EVENT, callback); },\n\temitChange: function(){ this.emit(CHANGE_EVENT); },\n\t\n\tgetStatus: function(){\n\t\treturn _store.status;\n\t},\n\tgetLoginError: function(){\n\t\treturn _store.loginError;\n\t},\n\t//Whether or not we have a current user loaded (i.e. logged in user)\n\thasUser: function(){\n\t\treturn (_store.user.id != null); //As good a check as any\n\t},\n\t//Obtain details on the logged-in user\n\tgetUser: function(){\n\t\treturn _store.user;\n\t},\n\tgetID: function(){\n\t\treturn (_store.user ? _store.user.id : 0);\n\t},\n\tgetUsername: function(){\n\t\treturn (_store.user ? _store.user.username : '');\n\t},\n\tgetPassword: function(){\n\t\treturn (_store.user ? _store.user.password : '');\n\t},\n\tgetName: function(){\n\t\treturn (_store.user ? _store.user.name : '');\n\t},\n\tgetFullName: function(){\n\t\treturn (_store.user ? _store.user.fullName : '');\n\t},\n\tgetEmail: function(){\n\t\treturn (_store.user ? _store.user.email : '');\n\t},\n\tgetCompanyLogo: function(){\n\t\treturn (_store.user && _store.user.company && _store.user.company.app_logo ? _store.user.company.app_logo : '');\n\t},\n\tgetCompanyBackground: function(){\n\t\treturn (_store.user && _store.user.company && _store.user.company.app_background ? _store.user.company.app_background : '');\n\t},\n\tgetCompanyCurrency: function(){\n\t\t//For now, this is where we default the company currency information if it doesn't exist (shouldn't be the case)\n\t\t//TODO: Confirm currency ID across all instances\n\t\treturn (_store.user && _store.user.company ? _store.user.company.default_currency : {'id': '10', 'name': 'South African Rand', 'symbol': 'R', 'code': 'ZAR'});\n\t},\n\t//Determine whether price lists are enabled on server (based on a server config setting, and if enabled, we should check them during our operations)\n\tareCompanyPriceListsEnabled: function(){\n\t\treturn (_store.user && _store.user.company && _store.user.company.pricelist_enabled && (_store.user.company.pricelist_enabled == 1));\n\t},\n\t//Determine whether any product rules have been created on server (always enabled on server, so if any have been created, we should check them during our operations)\n\tdoCompanyProductRulesExist: function(){\n\t\treturn (_store.user && _store.user.company && _store.user.company.product_rules_exist && (_store.user.company.product_rules_exist == 1));\n\t},\n\tgetB2BCustomerID: function(){\n\t\treturn ((_store.user && _store.user.b2b_customer_id != null) ? _store.user.b2b_customer_id : null);\n\t},\n\t//Whether or not this is the same user as the last logged in user\n\tisLastUser: function(username){\n\t\treturn ((_store.userMeta.lastUser != null) ? (_store.userMeta.lastUser.username == username) : false); //For now we compare username only (as used in login check)\n\t},\n\tgetLastUser: function(){\n\t\treturn _store.userMeta.lastUser;\n\t},\n\tgetFields: function(){\n\t\treturn _store.userMeta.fields;\n\t},\n\t//Get the unix timestamp of the last refresh (if any) of the user (custom) fields data\n\tgetLastRefreshForFields: function(){\n\t\treturn _store.userMeta.fieldsRefreshed;\n\t},\n\t\n\t//Obtain (relevant) store data for server debug submission\n\texportData: function(){\n\t\t//Explicity set up the valid JSON return string\n\t\treturn '{' + \n\t\t\t'\"user\":' \t\t+ JSON.stringify(_store.user) + \",\" +\n\t\t\t'\"userMeta\":' \t+ JSON.stringify(_store.userMeta) +\n\t\t'}';\n\t}\n});\n\nDispatcher.register(function(action){\n\tswitch(action.actionType){\n\t\tcase Actions.INITIALISE:\n\n\t\t\t//--------\n\t\t\t//TEMP MIGRATION CODE (TO BE REMOVED):\n\t\t\t\n\t\t\t//If we have legacy data storage\n\t\t\tif(localStorage.user){\n\t\t\t\t//Populate from legacy storage\n\t\t\t\t_store.user = JSON.parse(localStorage.user);\n\t\t\t\tif(localStorage.userMeta){\n\t\t\t\t\t_store.userMeta = JSON.parse(localStorage.userMeta);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//Apply any dynamic active profile override to static config (if necessary - currently only B2B)\n\t\t\t\tif(_store.user.is_b2b_user != null && _store.user.is_b2b_user == 1){\n\t\t\t\t\tconfig.setProfile(option.PROFILE_B2B);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//Save ALL to new persistent storage, removing legacy storage items if successful\n\t\t\t\tstorage.set([['user', _store.user], ['userMeta', _store.userMeta]]).then(() => {\n\t\t\t\t\tlocalStorage.removeItem('user');\n\t\t\t\t\tlocalStorage.removeItem('userMeta');\n\t\t\t\t\tconsole.log('Successfully migrated user data from legacy storage');\n\t\t\t\t}).catch((err) => {\n\t\t\t\t\tconsole.log('Unsuccessfully migrated user data from legacy storage: ', err);\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\t//Emit a change event without waiting for migration operation \n\t\t\t\tUserStore.emitChange();\n\t\t\t\tinitWatcher.setReady(Promise.resolve());\n\t\t\t\t\n\t\t\t} else {\n\t\t\t//--------\n\t\t\t\t\n\t\t\t\t//Load any potentially previously cached data (user, meta)\n\t\t\t\tinitWatcher.setReady(\n\t\t\t\t\tstorage.get(['user', 'userMeta']).then((values) => {\n\t\t\t\t\t\tvalues.forEach((pair) => { \n\t\t\t\t\t\t\tif(pair[1] != null){ _store[pair[0]] = pair[1] }\n\t\t\t\t\t\t});\n\t\t\t\t\t}).catch((err) => {\n\t\t\t\t\t\t//Silently fail\n\t\t\t\t\t\t//console.error('UserStore Error: ', err);\n\t\t\t\t\t}).then(() => {\n\t\t\t\t\t\t//Apply any dynamic active profile override to static config (if necessary - currently only B2B)\n\t\t\t\t\t\tif(_store.user.is_b2b_user != null && _store.user.is_b2b_user == 1){\n\t\t\t\t\t\t\tconfig.setProfile(option.PROFILE_B2B);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t//Emit a change event regardless of success/failure\n\t\t\t\t\t\tUserStore.emitChange();\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t\n\t\t\t//--------\n\t\t\t}\n\t\t\t//--------\n\n\t\t\tbreak;\n\t\tcase Actions.USER_LOGIN:\n\t\t\tif((action.actionStatus == Status.OK) || (action.actionStatus == Status.ERROR)){\n\t\t\t\t//overwrite user storage\n\t\t\t\t_store.user = (action.actionStatus == Status.OK) ? action.userData : {};\n\t\t\t\t_store.loginError = (action.actionStatus == Status.OK) ? '' : action.loginError;\n\t\t\t\t\n\t\t\t\tif(action.actionStatus == Status.OK){\n\t\t\t\t\t//Save last logged in user for future reference (could alternatively set this on logout?)\n\t\t\t\t\t_store.userMeta.lastUser = { 'id': action.userData.id, 'username': action.userData.username };\t\t\t\t\t\n\t\t\t\t\t//Additionally cache in persistent storage for re-use across multiple sessions (until a new login)\n\t\t\t\t\tstorage.set('userMeta', _store.userMeta).catch((err) => {});\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//Additionally cache in persistent storage for re-use across multiple sessions (until a new login)\n\t\t\t\tstorage.set('user', _store.user).catch((err) => {});\n\t\t\t}\n\t\t\t_store.status = action.actionStatus;\n\t\t\tUserStore.emitChange();\n\t\t\tbreak;\n\t\t\n\t\tcase Actions.USER_REFRESH:\n\t\t\tif(action.actionStatus == Status.OK){\n\t\t\t\t//overwrite user storage, but maintaining (merging in) our stored username and password \n\t\t\t\t//(unfortunately added during login process - see userActions.login)\n\t\t\t\t_store.user = _.assign(action.userData, { username: UserStore.getUsername(), password: UserStore.getPassword() });\n\t\t\t\t\n\t\t\t\t//Ensure last logged in user details are up to date (could alternatively leave this if set on logout?)\n\t\t\t\t_store.userMeta.lastUser = { 'id': action.userData.id, 'username': action.userData.username };\t\t\t\t\t\n\t\t\t\t\n\t\t\t\tif(action.userFieldData != null){\n\t\t\t\t\t//Add/overwrite the fields meta data\n\t\t\t\t\tfor(var name in action.userFieldData){\n\t\t\t\t\t\t//For now, only deal with textual and date fields\t\n\t\t\t\t\t\tif(action.userFieldData[name].type == 'varchar' || action.userFieldData[name].type == 'date'){\n\t\t\t\t\t\t\tvar existingFieldIndex = _.findIndex(_store.userMeta.fields, {name: name});\n\t\t\t\t\t\t\tvar updatedFieldData = {'name':name, 'label':action.userFieldData[name].label, 'order':parseInt(action.userFieldData[name].order) };\n\t\t\t\t\t\t\tif(existingFieldIndex != -1){\n\t\t\t\t\t\t\t\t_store.userMeta.fields[existingFieldIndex] = updatedFieldData;\n\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t_store.userMeta.fields.push(updatedFieldData);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t//Ensure fields are ordered correctly\n\t\t\t\t\t_store.userMeta.fields = _.sortBy(_store.userMeta.fields, 'order');\n\t\t\t\t\t\n\t\t\t\t\t//update last refresh timestamp\n\t\t\t\t\t//[We need to use this passed in timestamp as we can't use util.getUnixTime() (util already imports userStore - so avoid recursive import!)]\n\t\t\t\t\t_store.userMeta.fieldsRefreshed = action.userFieldDataTS;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//Additionally cache in persistent storage for re-use across multiple sessions (until a new login/refresh)\n\t\t\t\tstorage.set([['user', _store.user], ['userMeta', _store.userMeta]]).catch((err) => {});\n\t\t\t}\n\t\t\t_store.status = action.actionStatus;\n\t\t\tUserStore.emitChange();\n\t\t\tbreak;\t\n\t\t\n\t\tcase Actions.USER_LOGOUT:\n\t\t\t//overwrite user storage\n\t\t\t_store.user = {};\n\t\t\t\n\t\t\t//Additionally cache in persistent storage\n\t\t\tstorage.set('user', _store.user).catch((err) => {});\n\t\t\t\t\n\t\t\t_store.status = action.actionStatus;\n\t\t\tUserStore.emitChange();\n\t\t\tbreak;\n\t\t\n\t\tcase Actions.USER_DELETE_DATA:\n\t\t\t//Let's reset the fields data when clearing a previous user's data\n\t\t\t_store.userMeta = { \n\t\t\t\tlastUser: _store.userMeta.lastUser,\n\t\t\t\tfields: [\n\t\t\t\t\t{'name':'email', 'label':'Email', 'order':8 },\n\t\t\t\t\t{'name':'role', 'label':'Role', 'order':9 }\n\t\t\t\t],\n\t\t\t\tfieldsRefreshed: null\n\t\t\t};\n\n\t\t\t//Additionally cache in persistent storage\n\t\t\tstorage.set('userMeta', _store.userMeta).catch((err) => {});\n\n\t\t\t//Safeguard: emit a change event (necessary?)\n\t\t\tUserStore.emitChange();\n\t\t\tbreak;\n\t\t\t\t\n\t\tdefault:\n\t\t\t//nothing\t\n\t}\n});\n\nmodule.exports = UserStore;","\"use strict\";\nimport $ from 'jquery';\nwindow.$ = $;\n\nvar Dispatcher = require('../dispatcher/appDispatcher');\nvar Actions = require('../constants/actionTypes');\nvar UserActions = require('./userActions');\nvar SalesActions = require('./salesActions');\nvar CallActions = require('./callActions');\nvar AuditActions = require('./auditActions');\nvar LibraryActions = require('./libraryActions');\nvar Status = require('../constants/actionStatuses');\n//var SalesEntities = require('../constants/salesEntities');\nvar option = require('../constants/configOptions.js');\nvar config = require('../config.js');\nvar util = require('../util.js');\nvar _ = require('lodash');\n\n//List our 'action creators' that helpfully wrap our actions (payloads {} that are dispatched)\nvar CommonActions = {\n\t/*doAfterAccessCheck: function(action, args){\n\t\tif(action == 'refreshAll'){\n\t\t\t//Instruct dispatcher to tell all stores that this action is pending (ensure any visual indicators updated)\n\t\t\tDispatcher.dispatch({\n\t\t\t\tactionType: Actions.SOMETHING,\n\t\t\t\tactionStatus: Status.PENDING\n\t\t\t});\n\t\t}\n\n\t\t//UserActions.checkAccess(function(){\n\t\t//\tthis[action].apply(null, args);\n\t\t//}.bind(this)); //ensure we have correct 'this' context in callback (namely SalesActions)\n\t\tUserActions.checkAccess(this[action], args);\n\t},*/\n\t\n\t//Refresh all data required for sales and calls modules\n\t//[Note: this is currently a combo of SalesActions.refreshSalesData and CallActions.refreshCallsAndRelatedData]\n\trefreshAll: function(lastProductRefreshTimestamp, retryProductIDs, lastPastOrderRefreshTimestamp, retryPastOrderIDs, arrCustomerIDs){\n\t\tif(arrCustomerIDs == null){\n\t\t\tarrCustomerIDs = [];\n\t\t}\n\t\t\n\t\tvar refreshQueue = [\n\t\t\t//Refresh the general user/company info (including an access check), so that we have the latest flags (potentially affects e.g. pricelists refresh below)\n\t\t\t//(If it fails, we don't proceed with subsequent refreshes, in case it's an access permissions error)\n\t\t\t{ context: UserActions, action: 'refreshUser', args: null, completionWeighting: 0.03, stopOnFail: true },\n\t\t\t//(If the calls refresh failed, don't proceed with any of the subsequent refreshes)\n\t\t\t{ context: CallActions, action: 'refreshCalls', args: null, completionWeighting: 0.1, stopOnFail: true },\n\t\t\t//[NOTE: We want to perform the admin audit info refresh here even if we have an empty call list, in case it needs to do anything (e.g. cleanup).]\n\t\t\t{ context: AuditActions, action: 'refreshAdminAudits', args: ['add:callCustomerIDs'], completionWeighting: 0.025 },\n\t\t\t//This is necessary to collate the actual audit/admin audit data to refresh, based off the latest refreshed call list\n\t\t\t{ context: AuditActions, action: 'prepareCustomerAuditData', args: ['add:callCustomerIDs'], completionWeighting: 0 },\n\t\t\t{ context: AuditActions, action: 'refreshAuditsForCustomers', args: ['add:customerAuditIDObjs'], completionWeighting: 0.15 },\n\t\t\t{ context: this, action: 'combineCustomers', args: [arrCustomerIDs, 'add:callCustomerIDs'], completionWeighting: 0 },\n\t\t\t{ context: SalesActions, action: 'refreshPaymentTerms', args: null, completionWeighting: 0.025 },\n\t\t\t{ context: SalesActions, action: 'refreshTaxClasses', args: null, completionWeighting: 0.025 },\n\t\t\t{ context: SalesActions, action: 'refreshCarriers', args: null, completionWeighting: 0.025 },\n\t\t\t{ context: SalesActions, action: 'refreshCurrencies', args: null, completionWeighting: 0.025 },\n\t\t\t{ context: SalesActions, action: 'refreshProducts', args: [lastProductRefreshTimestamp, retryProductIDs], completionWeighting: 0.3 },\n\t\t\t{ context: SalesActions, action: 'refreshCategories', args: null, completionWeighting: 0.035 },\n\t\t\t{ context: SalesActions, action: 'refreshPastOrders', args: [lastPastOrderRefreshTimestamp, retryPastOrderIDs], completionWeighting: 0.03 },\n\t\t\t//Add any past order customers into customer refresh list (effectively updating 'customerIDs' key after last use of combineCustomers action)\n\t\t\t{ context: this, action: 'combineCustomers', args: ['add:customerIDs', 'add:pastOrderCustomerIDs'], completionWeighting: 0 },\n\t\t\t{ context: LibraryActions, action: 'refreshLibraryForCustomers', args: ['add:customerIDs'], completionWeighting: 0.08 },\n\t\t\t//(If the customer(s) refresh failed, don't proceed with the related sales data refreshes)\n\t\t\t{ context: SalesActions, action: 'refreshCustomers', args: ['add:customerIDs'], completionWeighting: 0.09, stopOnFail: true },\n\t\t\t{ context: SalesActions, action: 'refreshPriceLists', args: ['add:customerIDs'], completionWeighting: 0.03 },\n\t\t\t{ context: SalesActions, action: 'refreshProductRules', args: ['add:customerIDs'], completionWeighting: 0.03 }\n\t\t];\n\t\n\t\treturn util.executeActionQueue(refreshQueue, Actions.ALL_REFRESH);\n\t},\n\t\n\t//Queueable utility function (returns deferred object) to combine multiple sources of customer IDs to ensure subsequent queue actions are up to date\n\tcombineCustomers: function(arrCustomers1, arrCustomers2){\n\t\t//Let's sanitise the IDs into a common format first\n\t\tarrCustomers1 = arrCustomers1.map((id) => parseInt(id));\n\t\tarrCustomers2 = arrCustomers2.map((id) => parseInt(id));\n\t\treturn $.Deferred().resolve({ results: { customerIDs: _.union(arrCustomers1, arrCustomers2) } });\n\t},\n\t\n\t//Submit the app database/store data dumps to server for debugging purposes\n\tsubmitAppData: function(data){\n\t\tlet returnDeferred = $.Deferred();\n\t\t\n\t\tif(data == null) {\n\t\t\treturnDeferred.resolve();\n\t\t\treturn returnDeferred;\n\t\t}\n\t\t\n\t\t//Instruct dispatcher to tell all stores that an app store data submission is pending (has begun)\n\t\tutil.dispatch({\n\t\t\tactionType: Actions.APP_DATA_SUBMIT,\n\t\t\tactionStatus: Status.PENDING\n\t\t});\n\t\t\n\t\tlet activeProfile = config.activeProfile == option.PROFILE_NATIVE ? 'Native' : (config.activeProfile == option.PROFILE_B2B ? 'B2B' : 'Web');\n\t\tlet appVersion = config.appVersion;\n\t\t\n\t\t$.ajax({\n\t\t\t//context: this,\n\t\t\turl: util.apiUrl + 'general/submitDb',\n\t\t\ttype: 'POST',\n\t\t\tdata: {\n\t\t\t\t'device_type': 'Generic device',\n\t\t\t\t'additional_parameters': JSON.stringify({'Device Type': 'Generic device'}), //Add any other extra, relevant key/value pairs here\n\t\t\t\t'app_version': `Morpheus Retailer Lite (${activeProfile} Profile) ${appVersion}`,\n\t\t\t\t'db_version': '1',\n\t\t\t\t'db_file': data\n\t\t\t},\n\t\t\theaders: { \"Authorization\": util.getHTTPAuthString() },\n\t\t\tdataType: 'json'\n\t\t}).fail(function(){\n\t\t\t//Instruct dispatcher to tell all stores that an app store data submission has failed\n\t\t\tutil.dispatch({\n\t\t\t\tactionType: Actions.APP_DATA_SUBMIT,\n\t\t\t\tactionStatus: Status.ERROR\n\t\t\t});\n\t\t\treturnDeferred.reject();\n\t\t}).done(function(data){\n\t\t\tif(data.status){\n\t\t\t\t//Instruct dispatcher to tell all stores that an app store data submission has completed\n\t\t\t\tutil.dispatch({\n\t\t\t\t\tactionType: Actions.APP_DATA_SUBMIT,\n\t\t\t\t\tactionStatus: Status.OK\n\t\t\t\t});\n\t\t\t\treturnDeferred.resolve();\n\t\t\t}else{\n\t\t\t\t//Instruct dispatcher to tell all stores that an app store data submission has failed\n\t\t\t\tutil.dispatch({\n\t\t\t\t\tactionType: Actions.APP_DATA_SUBMIT,\n\t\t\t\t\tactionStatus: Status.ERROR\n\t\t\t\t});\n\t\t\t\treturnDeferred.reject();\n\t\t\t}\n\t\t});\n\t\t\n\t\treturn returnDeferred;\n\t}\n};\n\nmodule.exports = CommonActions;","\"use strict\";\n\nvar Dispatcher = require('../dispatcher/appDispatcher');\nvar Actions = require('../constants/actionTypes');\nvar UserActions = require('./userActions');\nvar Status = require('../constants/actionStatuses');\nvar AuditTypes = require('../constants/auditTypes');\nvar CallStore = require('../stores/callStore');\t\t//used by prepareCustomerAuditData() - see note\nvar AuditStore = require('../stores/auditStore');\t//used by prepareCustomerAuditData() - see note\nvar util = require('../util.js');\nvar _ = require('lodash');\n\nconst $ = window.$;\n//List our 'action creators' (e.g. refreshAudits, saveAuditAnswer) that helpfully wrap our actions (payloads {} that are dispatched)\nvar AuditActions = {\n\tdoAfterAccessCheck: function(action, args){\n\t\tif(action == 'refreshAudits'){\n\t\t\t//Instruct dispatcher to tell all stores that this action is pending (ensure any visual indicators updated)\n\t\t\t//ONLY if we have audit ID's (see refreshAudits() below) - but still use this opportunity to perform access check regardless\n\t\t\tif(args != null && args[1] && args[1].length){\n\t\t\t\tDispatcher.dispatch({\n\t\t\t\t\tactionType: Actions.AUDITS_REFRESH,\n\t\t\t\t\tactionStatus: Status.PENDING,\n\t\t\t\t\tcustomerID: (args != null ? args[0] : args) //for completeness\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t//UserActions.checkAccess(function(){\n\t\t//\tthis[action].apply(null, args);\n\t\t//}.bind(this)); //ensure we have correct 'this' context in callback (namely AuditActions)\n\t\tUserActions.checkAccess(this[action], args);\n\t},\n\t\n\t//Refresh the list of admin audits (and customer restrictions)\n\t//[Pertains to admin audits]\n\trefreshAdminAudits: function(arrLimitCustomerIDs){\n\t\tif(arrLimitCustomerIDs == null){\n\t\t\tarrLimitCustomerIDs = [];\n\t\t}\n\t\t\n\t\t//We return our own deferred object, instead of the one returned by $.ajax, so we can custom handle resolving/rejecting within the 'successful' done AJAX callback below\n\t\t//(We do this to support queue actions)\n\t\tlet returnDeferred = $.Deferred();\n\t\t\n\t\t//Unix timestamp as at start of today (as with CallActions.refreshCalls())\n\t\t//[Synchronisation safeguard: This is the authoritative single place of origin for this value in case more than one store needs it]\n\t\tvar requestDate = util.getUnixTimeStartOfDay();\n\n\t\t//[For now, if we have no supplied customer IDs (i.e. an empty call list), we send a successful dispatch containing no admin audit data,\n\t\t//without even contacting the server.\n\t\t//This is because currently admin audits can only be performed within a call context (and there are no calls!) so we want to trigger\n\t\t//the internal housekeeping cleanup of the stored audit data to save maximum space.]\t\t\n\t\tif(arrLimitCustomerIDs.length == 0){\n\t\t\t//Instruct dispatcher to tell all stores that an admin audits refresh has succeeded\n\t\t\tutil.dispatch({\n\t\t\t\tactionType: Actions.ADMIN_AUDITS_REFRESH,\n\t\t\t\tactionStatus: Status.OK,\n\t\t\t\tcustomerIDs: arrLimitCustomerIDs,\n\t\t\t\tdate: requestDate,\n\t\t\t\tadminAuditsCustomersData: {}\n\t\t\t});\n\t\t\treturnDeferred.resolve();\n\t\t\t\n\t\t}else{\n\t\t\t//Instruct dispatcher to tell all stores that an admin audits refresh is pending (has begun)\n\t\t\tutil.dispatch({\n\t\t\t\tactionType: Actions.ADMIN_AUDITS_REFRESH,\n\t\t\t\tactionStatus: Status.PENDING,\n\t\t\t\tcustomerIDs: arrLimitCustomerIDs,\n\t\t\t\tdate: requestDate\n\t\t\t});\n\t\t\t\n\t\t\t$.ajax({\n\t\t\t\t//context: this,\n\t\t\t\turl: util.apiUrl + 'audit/getAdminAudits',\n\t\t\t\ttype: 'GET',\n\t\t\t\tdata: {'date': requestDate, 'limit_to_stores': JSON.stringify(arrLimitCustomerIDs)},\n\t\t\t\theaders: { \"Authorization\": util.getHTTPAuthString() },\n\t\t\t\tdataType: 'json'\n\t\t\t}).fail(function(){\n\t\t\t\t//Instruct dispatcher to tell all stores that an admin audits refresh has failed\n\t\t\t\tutil.dispatch({\n\t\t\t\t\tactionType: Actions.ADMIN_AUDITS_REFRESH,\n\t\t\t\t\tactionStatus: Status.ERROR,\n\t\t\t\t\tcustomerIDs: arrLimitCustomerIDs,\n\t\t\t\t\tdate: requestDate\n\t\t\t\t});\n\t\t\t\treturnDeferred.reject();\n\t\t\t}).done(function(data){\n\t\t\t\tif(data.status){\n\t\t\t\t\tlet adminAuditsCustomersData = {};\n\t\t\t\t\tif(data.results && data.results.length){\n\t\t\t\t\t\tvar i;\n\t\t\t\t\t\tfor(i = 0; i < data.results.length; i++){\n\t\t\t\t\t\t\tadminAuditsCustomersData[data.results[i].audit_id] = data.results[i].limit_to_stores;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t//Instruct dispatcher to tell all stores that an admin audits refresh has succeeded\n\t\t\t\t\tutil.dispatch({\n\t\t\t\t\t\tactionType: Actions.ADMIN_AUDITS_REFRESH,\n\t\t\t\t\t\tactionStatus: Status.OK,\n\t\t\t\t\t\tcustomerIDs: arrLimitCustomerIDs,\n\t\t\t\t\t\tdate: requestDate,\n\t\t\t\t\t\tadminAuditsCustomersData: adminAuditsCustomersData\n\t\t\t\t\t});\n\t\t\t\t\treturnDeferred.resolve();\n\t\t\t\t\t\n\t\t\t\t}else{\n\t\t\t\t\t//Instruct dispatcher to tell all stores that an admin audits refresh has failed\n\t\t\t\t\tutil.dispatch({\n\t\t\t\t\t\tactionType: Actions.ADMIN_AUDITS_REFRESH,\n\t\t\t\t\t\tactionStatus: Status.ERROR,\n\t\t\t\t\t\tcustomerIDs: arrLimitCustomerIDs,\n\t\t\t\t\t\tdate: requestDate\n\t\t\t\t\t});\n\t\t\t\t\treturnDeferred.reject();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\treturn returnDeferred;\n\t},\n\t\n\t//Refresh the list of admin audits (and customer restrictions)\n\t//[Pertains to admin audits]\n\t/*refreshAdminAuditsORIG: function(arrLimitCustomerIDs){\n\t\tif(arrLimitCustomerIDs == null){\n\t\t\tarrLimitCustomerIDs = [];\n\t\t}\n\t\t\n\t\t//Unix timestamp as at start of today (as with CallActions.refreshCalls())\n\t\t//[Synchronisation safeguard: This is the authoritative single place of origin for this value in case more than one store needs it]\n\t\tvar requestDate = util.getUnixTimeStartOfDay();\n\n\t//=======================================================\n\t//[For now, if we have no supplied customer IDs (i.e. an empty call list), we send a successful dispatch containing no admin audit data,\n\t//without even contacting the server.\n\t//This is because currently admin audits can only be performed within a call context (and there are no calls!) so we want to trigger\n\t//the internal housekeeping cleanup of the stored audit data to save maximum space.]\t\t\n\t\tif(arrLimitCustomerIDs.length == 0){\n\t\t\t//Instruct dispatcher to tell all stores that an admin audits refresh has succeeded\n\t\t\tDispatcher.dispatch({\n\t\t\t\tactionType: Actions.ADMIN_AUDITS_REFRESH,\n\t\t\t\tactionStatus: Status.OK,\n\t\t\t\tcustomerIDs: arrLimitCustomerIDs,\n\t\t\t\tdate: requestDate,\n\t\t\t\tadminAuditsCustomersData: {}\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\t//=======================================================\t\t\n\n\t\t//Instruct dispatcher to tell all stores that an admin audits refresh is pending (has begun)\n\t\tDispatcher.dispatch({\n\t\t\tactionType: Actions.ADMIN_AUDITS_REFRESH,\n\t\t\tactionStatus: Status.PENDING,\n\t\t\tcustomerIDs: arrLimitCustomerIDs,\n\t\t\tdate: requestDate\n\t\t});\t\t\n\t\t\n\t\t$.ajax({\n\t\t\t//context: this,\n\t\t\turl: util.apiUrl + 'audit/getAdminAudits',\n\t\t\ttype: 'GET',\n\t\t\tdata: {'date': requestDate, 'limit_to_stores': JSON.stringify(arrLimitCustomerIDs)},\n\t\t\theaders: { \"Authorization\": util.getHTTPAuthString() },\n\t\t\tdataType: 'json'\n\t\t}).fail(function(){\n\t\t\t//Instruct dispatcher to tell all stores that an admin audits refresh has failed\n\t\t\tDispatcher.dispatch({\n\t\t\t\tactionType: Actions.ADMIN_AUDITS_REFRESH,\n\t\t\t\tactionStatus: Status.ERROR,\n\t\t\t\tcustomerIDs: arrLimitCustomerIDs,\n\t\t\t\tdate: requestDate\n\t\t\t});\n\t\t}).done(function(data){\n\t\t\tif(data.status){\n\t\t\t\tlet adminAuditsCustomersData = {};\n\t\t\t\tif(data.results && data.results.length){\n\t\t\t\t\tvar i;\n\t\t\t\t\tfor(i = 0; i < data.results.length; i++){\n\t\t\t\t\t\tadminAuditsCustomersData[data.results[i].audit_id] = data.results[i].limit_to_stores;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//Instruct dispatcher to tell all stores that an admin audits refresh has succeeded\n\t\t\t\tDispatcher.dispatch({\n\t\t\t\t\tactionType: Actions.ADMIN_AUDITS_REFRESH,\n\t\t\t\t\tactionStatus: Status.OK,\n\t\t\t\t\tcustomerIDs: arrLimitCustomerIDs,\n\t\t\t\t\tdate: requestDate,\n\t\t\t\t\tadminAuditsCustomersData: adminAuditsCustomersData\n\t\t\t\t});\n\t\t\t\t\n\t\t\t}else{\n\t\t\t\t//Instruct dispatcher to tell all stores that an admin audits refresh has failed\n\t\t\t\tDispatcher.dispatch({\n\t\t\t\t\tactionType: Actions.ADMIN_AUDITS_REFRESH,\n\t\t\t\t\tactionStatus: Status.ERROR,\n\t\t\t\t\tcustomerIDs: arrLimitCustomerIDs,\n\t\t\t\t\tdate: requestDate\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t},*/\n\t\n\t//Refresh of the actual audits data (on a per customer basis, currently)\t\t\n\t//[Currently pertains to both call and admin audits]\n\trefreshAudits: function(customerID, arrAuditIDs, blnAdmin){\n\t\tlet returnDeferred = $.Deferred();\n\t\tlet auditsType = ((blnAdmin != null && blnAdmin) ? AuditTypes.ADMIN : AuditTypes.CALL);\n\t\t\n\t\tif(!arrAuditIDs || !arrAuditIDs.length){\n\t\t\t//Adding this dispatch primarily to support the way refreshAuditsForCustomers() uses this function\n\t\t\t//(It refreshes multiple customers, and thus has potentially already refreshed all this customer's audits via\n\t\t\t//the processing of other customers. In this case, we still want to set this customer's last refresh timestamp.)\n\t\t\tutil.dispatch({\n\t\t\t\tactionType: Actions.AUDITS_REFRESH,\n\t\t\t\tactionStatus: Status.OK,\n\t\t\t\tauditsType: auditsType,\n\t\t\t\tauditsData: {},\n\t\t\t\tcustomerID: customerID  //(the only reason we even need a customer ID as input to this action is so we can send on to store for refresh timestamping)\n\t\t\t});\n\t\t\treturnDeferred.resolve();\n\t\t}else{\n\t\t\t//Instruct dispatcher to tell all stores that a customer audit list refresh is pending (has begun)\n\t\t\tutil.dispatch({\n\t\t\t\tactionType: Actions.AUDITS_REFRESH,\n\t\t\t\tactionStatus: Status.PENDING,\n\t\t\t\tauditsType: auditsType,\n\t\t\t\tcustomerID: customerID\n\t\t\t});\n\t\t\t\n\t\t\t//Make a local copy for processing \n\t\t\t//(prevent mutating the orig array which actually references internal storage belonging to a store)\n\t\t\tvar arrProcAuditIDs = arrAuditIDs.slice(0);\n\t\n\t\t\tvar blnAllSuccessful = true;\n\t\t\tvar blnAllUnsuccessful = true;\n\t\t\tvar auditsData = {};\n\t\t\t\n\t\t\tfunction getAudit(auditID){\n\t\t\t\t$.ajax({\n\t\t\t\t\t//context: this,\n\t\t\t\t\turl: util.apiUrl + 'audit/fetch',\n\t\t\t\t\ttype: 'GET',\n\t\t\t\t\tdata: {'audit_id': auditID},\n\t\t\t\t\theaders: { \"Authorization\": util.getHTTPAuthString() },\n\t\t\t\t\tdataType: 'json'\n\t\t\t\t}).fail(function(){\n\t\t\t\t\tblnAllSuccessful = false;\n\t\t\t\t}).done(function(data){\n\t\t\t\t\tif(data.status){\n\t\t\t\t\t\tblnAllUnsuccessful = false;\n\t\t\t\t\t\tauditsData[auditID] = data.results;\n\t\t\t\t\t}else{\n\t\t\t\t\t\tblnAllSuccessful = false;\n\t\t\t\t\t}\n\t\t\t\t}).always(function(){\n\t\t\t\t\t//We still have audits to process\n\t\t\t\t\tif(arrProcAuditIDs.length > 0){\n\t\t\t\t\t\t//Attempt to retrieve the next one\n\t\t\t\t\t\tgetAudit(arrProcAuditIDs.shift());\n\t\t\t\t\t\t\n\t\t\t\t\t//We've processed all audits\n\t\t\t\t\t}else{\n\t\t\t\t\t\tlet actionStatus = (blnAllSuccessful ? Status.OK : (blnAllUnsuccessful ? Status.ERROR : Status.PARTIAL));\n\t\t\t\t\t\t\n\t\t\t\t\t\t//Instruct dispatcher to tell all stores that an audit list refresh has either completed successfully,\n\t\t\t\t\t\t//or failed in some way (partially or completely)\n\t\t\t\t\t\tutil.dispatch({\n\t\t\t\t\t\t\tactionType: Actions.AUDITS_REFRESH,\n\t\t\t\t\t\t\tactionStatus: actionStatus,\n\t\t\t\t\t\t\tauditsType: auditsType,\n\t\t\t\t\t\t\tauditsData: auditsData, //note we always return anything we may have\n\t\t\t\t\t\t\tcustomerID: customerID  //(the only reason we even need a customer ID as input to this action is so we can send on to store for refresh timestamping)\n\t\t\t\t\t\t});\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(actionStatus == Status.ERROR){\n\t\t\t\t\t\t\treturnDeferred.reject();\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t//[Could potentially return auditsData in {results} for use by refreshAuditsForCustomers() in partial success case to know what exactly succeeded]\n\t\t\t\t\t\t\treturnDeferred.resolve({ partial: (actionStatus == Status.PARTIAL) });\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\t\n\t\t\t//Retrieve the first audit\n\t\t\tgetAudit(arrProcAuditIDs.shift());\n\t\t}\n\t\t\n\t\treturn returnDeferred;\n\t},\n\t\n\t//Refresh of the actual audits data for ALL provided customer IDs\t\t\n\t//[Currently pertains to both call and admin audits]\n\t//[NB: This function currently modifies the arrCustomerAuditIDObjs parameter internally. \n\t//Change this behaviour (make a copy first) if needed anywhere other than here in future.] \n\trefreshAuditsForCustomers: function(arrCustomerAuditIDObjs){\n\t\tif(arrCustomerAuditIDObjs == null){\n\t\t\tarrCustomerAuditIDObjs = [];\n\t\t}\n\t\t\n\t\tlet returnDeferred = $.Deferred();\n\t\t\n\t\tif(!arrCustomerAuditIDObjs.length){\n\t\t\treturnDeferred.resolve();\n\t\t}else{\n\t\t\t//Instruct dispatcher to tell all stores that a multi-customer audit refresh is pending (has begun)?\n\t\t\t\n\t\t\tlet processedAuditIDs = [];\n\t\t\t\n\t\t\tlet blnAllSuccessful = true;\n\t\t\tlet blnAllUnsuccessful = true;\n\t\t\t\n\t\t\tfunction refreshAuditsForCustomer(objCustomer){\n\t\t\t\t//Skip any audits already refreshed (even if it means passing an empty array to refreshAudits()) \n\t\t\t\tobjCustomer.auditIDs = _.difference(objCustomer.auditIDs, processedAuditIDs);\n\t\t\t\t\n\t\t\t\tAuditActions.refreshAudits(objCustomer.customerID, objCustomer.auditIDs, objCustomer.isAdmin).fail(function(data){\n\t\t\t\t\tblnAllSuccessful = false;\n\t\t\t\t\tif(data != null && data.partial){\n\t\t\t\t\t\t//if partial qualifier, also ensure total failure not recorded\n\t\t\t\t\t\tblnAllUnsuccessful = false;\n\t\t\t\t\t}\n\t\t\t\t}).done(function(data){\n\t\t\t\t\tblnAllUnsuccessful = false;\n\t\t\t\t\tif(data != null && data.partial){\n\t\t\t\t\t\t//if partial qualifier, also ensure total success not recorded\n\t\t\t\t\t\tblnAllSuccessful = false;\n\t\t\t\t\t}else{\n\t\t\t\t\t\t//Record the successfully obtained audits, to avoid refreshing them multiple times\n\t\t\t\t\t\t//[Note: for now, in the partial case, we don't add any audits to this record, even if it results in some repeat refreshes]\n\t\t\t\t\t\tprocessedAuditIDs = _.union(processedAuditIDs, objCustomer.auditIDs);\n\t\t\t\t\t}\n\t\t\t\t}).always(function(data){\n//sumCompletionWeighting += queueItem.completionWeighting;\n//appUtil.setCurrentPercentageComplete(parseFloat( sumCompletionWeighting * 100 ));\n\t\t\t\t\t\n\t\t\t\t\t//We still have items to process\n\t\t\t\t\tif(arrCustomerAuditIDObjs.length > 0){\n\t\t\t\t\t\t//refresh the next batch of audits/admin audits\n\t\t\t\t\t\trefreshAuditsForCustomer(arrCustomerAuditIDObjs.shift());\n\t\t\t\t\t\t\n\t\t\t\t\t//We've processed all items\n\t\t\t\t\t}else{\n\t\t\t\t\t\tlet queueStatus = (blnAllSuccessful ? Status.OK : (blnAllUnsuccessful ? Status.ERROR : Status.PARTIAL));\n\t\t\t\t\t\t\n\t\t\t\t\t\t//Instruct dispatcher to tell all stores that this multi-customer audit refresh has completed?\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(queueStatus == Status.ERROR){\n\t\t\t\t\t\t\treturnDeferred.reject();\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\treturnDeferred.resolve({ partial: (queueStatus == Status.PARTIAL) });\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\t\n\t\t\t//Process the first item\n\t\t\trefreshAuditsForCustomer(arrCustomerAuditIDObjs.shift());\n\t\t}\n\t\t\n\t\treturn returnDeferred;\n\t},\n\t\n\t//Queueable utility function (returns deferred object) to prepare/collate the customer audit ID data needed for refreshAuditsForCustomers() above\n\t//[NOTE: It's much easier to allow access to some processed readonly data from the CallStore and AuditStore, even though this is not flux-friendly, rather\n\t//than pass and parse the raw data from earlier functions in the queue]\n\tprepareCustomerAuditData: function(arrCustomerIDs){\n\t\tlet arrCustomerAuditIDObjs = [];\n\t\t\n\t\tfor(var i = 0; i < arrCustomerIDs.length; i++){\n\t\t\tlet cust = CallStore.getCallById(arrCustomerIDs[i]); //[arrCustomerIDs[i] is a string]\n\n\t\t\t//Audits\n\t\t\tarrCustomerAuditIDObjs.push({\n\t\t\t\tcustomerID: cust.store_id, //arrCustomerIDs[i], //[cust.store_id is a number]\n\t\t\t\tauditIDs: cust.audits,\n\t\t\t\tisAdmin: false\n\t\t\t});\n\t\t\t\n\t\t\t//Admin audits\n\t\t\tlet adminAuditIDs = AuditStore.getAdminAuditIDsForCustomer(arrCustomerIDs[i]); //[arrCustomerIDs[i] is a string]\n\t\t\tif(adminAuditIDs.length){\n\t\t\t\tarrCustomerAuditIDObjs.push({\n\t\t\t\t\tcustomerID: cust.store_id, //arrCustomerIDs[i], //[cust.store_id is a number]\n\t\t\t\t\tauditIDs: adminAuditIDs,\n\t\t\t\t\tisAdmin: true\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn $.Deferred().resolve({ results: { customerAuditIDObjs: arrCustomerAuditIDObjs } });\n\t},\n\t\n\tsaveAuditAnswer: function(answer, blnAdmin){\n\t\t//Instruct dispatcher to tell all stores that an audit answer has been saved\n\t\tDispatcher.dispatch({\n\t\t\tactionType: Actions.AUDIT_ANSWER_SAVE,\n\t\t\tactionStatus: Status.OK,\n\t\t\tauditType: ((blnAdmin != null && blnAdmin) ? AuditTypes.ADMIN : AuditTypes.CALL),\n\t\t\tauditAnswerData: answer\n\t\t});\n\t}\n};\n\nmodule.exports = AuditActions;","\"use strict\";\n\nvar Dispatcher = require('../dispatcher/appDispatcher');\nvar Actions = require('../constants/actionTypes');\nvar Status = require('../constants/actionStatuses');\nvar AuditTypes = require('../constants/auditTypes');\n//var CallStore = require('./callStore');\nvar EventEmitter = require('events').EventEmitter;\nvar assign = require('object-assign');\nvar _ = require('lodash');\nvar CHANGE_EVENT = 'change';\nvar util = require('../util.js');\n\n//Audit objects keyed on audit ID\n//(Can potentially change this to objects keyed on customer and audit ID) \nvar _audits = {};\n//Admin audit objects keyed on audit ID (best to manage these in a separate list for now, due to the different associated business logic)\nvar _adminAudits = {};\n//Mapping of admin audit IDs to associated customer IDs (if even limited to these, false if no limit, as per audit/getAdminAudits() API results) \nvar _adminAuditsCustomers = {};\n\n//Audit meta data objects keyed on customer ID\n//Currently this is used for tracking last refresh timestamps\nvar _auditsMeta = {};\n//Admin audit meta data objects keyed on customer ID\n//Currently this is used for tracking last refresh timestamps\nvar _adminAuditsMeta = {};\n\n//Track data state\nvar _status = Status.OK;\n\nvar AuditStore = assign({}, EventEmitter.prototype, {\n\taddChangeListener: function(callback){ this.on(CHANGE_EVENT, callback); },\n\tremoveChangeListener: function(callback){ this.removeListener(CHANGE_EVENT, callback); },\n\temitChange: function(){ this.emit(CHANGE_EVENT); },\n\t\n\tgetStatus: function(){\n\t\treturn _status;\n\t},\n\t\n\t/*getAllAuditsForCustomer: function(custID){\n\t\tvar arrAuditIDs = CallStore.getAuditIdsForCall(custID);\n\t\t//let's return an array\n\t\t//****\n\t\treturn _.map(_audits[arrAuditIDs[0]]);//etc.\n\t},*/\n\t//Obtain the specified audits\n\t//[either call (default) or admin (by specifying via flag)]\n\tgetAudits: function(arrAuditIDs, blnAdmin, sortByCompulsory){\n\t\tvar auditsStorage = ((blnAdmin != null && blnAdmin) ? _adminAudits : _audits);\n\t\tvar arrAudits = [];\n\t\t\n\t\tif(arrAuditIDs && arrAuditIDs.length){\n\t\t\tif(sortByCompulsory == null){\n\t\t\t\tsortByCompulsory = true;\n\t\t\t}\n\t\t\tvar i;\n\t\t\tfor(i = 0; i < arrAuditIDs.length; i++){\n\t\t\t\t//check safeguards\n\t\t\t\tif(this.isAuditValid(arrAuditIDs[i], blnAdmin)){\n\t\t\t\t\tarrAudits.push(auditsStorage[arrAuditIDs[i]]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(sortByCompulsory){\n\t\t\t\t//arrAudits = _.sortBy(arrAudits, 'meta_data.is_compulsory');\n\t\t\t\tarrAudits = _.sortBy(arrAudits, function(audit){\n\t\t\t\t\treturn !audit.meta_data.is_compulsory; //sort by compulsory FIRST\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn arrAudits; //_.at(auditsStorage, arrAuditIDs);\n\t},\n\t//Obtain any admin audits associated with this customer\n\t//[Currently unused as it will only return those that are currently available, with no way to determine which need obtaining via server refresh]\n\t/*getAdminAuditsForCustomer: function(customerID){\n\t\tvar arrAudits = [];\n\t\t\n\t\tfor (var auditID in _adminAuditsCustomers){\n\t\t\t//If no customer restrictions for the audit, or customer present in restricted list, this admin audit should be returned\n\t\t\tif(!_adminAuditsCustomers[auditID] || _.find(_adminAuditsCustomers[auditID], (id) => (id == customerID))){\n\t\t\t\t//check safeguards\n\t\t\t\tif(this.isAuditValid(auditID, true)){\n\t\t\t\t\tarrAudits.push(_adminAudits[auditID]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn arrAudits;\n\t},*/\n\t//Obtain the audit IDs applicable to this customer \n\t//[as determined by the current admin audit list (and customer restrictions) - which is usually refreshed with/after a calls refresh]\n\tgetAdminAuditIDsForCustomer: function(customerID){\n\t\tvar arrAuditIDs = [];\n\t\t\n\t\tfor (var auditID in _adminAuditsCustomers){\n\t\t\t//If no customer restrictions for the audit, or customer present in restricted list, this admin audit ID should be returned\n\t\t\tif(!_adminAuditsCustomers[auditID] || _.find(_adminAuditsCustomers[auditID], (id) => (id == customerID))){\n\t\t\t\tarrAuditIDs.push(auditID);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn arrAuditIDs;\n\t},\n\t//Future use: Obtain customer restrictions (if any) for an admin audit\n\tgetCustomerRestrictionsForAdminAudit: function(auditID){\n\t\treturn _adminAuditsCustomers[auditID];\n\t},\n\t//Obtain a specific audit\n\t//[either call (default) or admin (by specifying via flag)]\n\tgetAudit: function(auditID, blnAdmin){\n\t\t//return _.find(_audits, {id: id});\n\t\treturn ((blnAdmin != null && blnAdmin) ? _adminAudits[auditID] : _audits[auditID]);\n\t},\n\t//Do a safeguard check for audit validity\n\t//[either call (default) or admin (by specifying via flag)]\n\tisAuditValid: function(auditID, blnAdmin){\n\t\tvar auditsStorage = ((blnAdmin != null && blnAdmin) ? _adminAudits : _audits);\n\t\t\n\t\t//If audit exists, is enabled and has at least one question group (safeguard)\t\t\t\n\t\tif(auditsStorage[auditID] && (auditsStorage[auditID].meta_data.status == 'enabled') && auditsStorage[auditID].question_groups.length){\n\t\t\tvar j;\n\t\t\tfor(j = 0; j < auditsStorage[auditID].question_groups.length; j++){\n\t\t\t\t//And has at least one question (safeguard)\n\t\t\t\tif(auditsStorage[auditID].question_groups[j] && auditsStorage[auditID].question_groups[j].questions.length){\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn false;\n\t},\n\t//Get the unix timestamp of the last refresh (if any) of the stored audits (for a customer ID)\n\t//[either call (default) or admin (by specifying via flag)]\n\tgetLastRefreshForCustomer: function(customerID, blnAdmin){\n\t\treturn (\n\t\t\t(blnAdmin != null && blnAdmin) ? \n\t\t\t(_adminAuditsMeta[customerID] ? _adminAuditsMeta[customerID].refreshed : null) :\n\t\t\t(_auditsMeta[customerID] ? _auditsMeta[customerID].refreshed : null)\n\t\t);\n\t},\n\t//Clear all cached meta data except for provided customers\n\t//[either call (default) or admin (by specifying via flag)]\n\tpurgeMetaDataExceptForIds: function(arrCustomerIDs, blnAdmin){ //, updateLocalStorage){\n\t\tvar auditsMetaStorage = ((blnAdmin != null && blnAdmin) ? _adminAuditsMeta : _auditsMeta);\n\t\t\n\t\tfor (var customerID in auditsMetaStorage) {\n\t\t\tif(!_.includes(arrCustomerIDs, customerID)){\n\t\t\t\tauditsMetaStorage[customerID] = undefined; //performance boost over delete (and as it happens, node is completely removed by next localStorage save/reload anyway)\n\t\t\t}\n\t\t}\n\t\t//if(updateLocalStorage == null || updateLocalStorage){ //Provide a way to trigger a localStorage save externally (default true)\n\t\t//\tlocalStorage.auditsMeta = JSON.stringify(_auditsMeta);\n\t\t//}\n\t},\n\t//Clear all cached audit data except for provided audits\n\t//[either call (default) or admin (by specifying via flag)]\n\tpurgeAuditDataExceptForIds: function(arrAuditIDs, blnAdmin){\n\t\tvar auditsStorage = ((blnAdmin != null && blnAdmin) ? _adminAudits : _audits);\n\t\t//In the call audits case, arrAuditIDs are ints not strings, hence parseInt required for proper comparison below\n\t\tvar blnCompareIDsAsInts = (!(blnAdmin != null && blnAdmin));\n\t\t\n\t\tfor (var auditID in auditsStorage) {\n\t\t\tif( !_.includes( arrAuditIDs, (blnCompareIDsAsInts ? parseInt(auditID) : auditID) ) ){\n\t\t\t\tauditsStorage[auditID] = undefined; //performance boost over delete (and as it happens, node is completely removed by next localStorage save/reload anyway)\n\t\t\t}\n\t\t}\n\t},\n\t\n\t//Obtain (relevant) store data for server debug submission\n\texportData: function(){\n\t\t//Explicity set up the valid JSON return string (until this store is restructured to store all keys in an object rather than separate module-level variables)\n\t\treturn '{' + \n\t\t\t'\"audits\":' \t\t\t\t+ JSON.stringify(_audits) + \",\" +\n\t\t\t'\"adminAudits\":' \t\t\t+ JSON.stringify(_adminAudits) + \",\" +\n\t\t\t'\"adminAuditsCustomers\":' \t+ JSON.stringify(_adminAuditsCustomers) + \",\" +\n\t\t\t'\"auditsMeta\":' \t\t\t+ JSON.stringify(_auditsMeta) + \",\" +\n\t\t\t'\"adminAuditsMeta\":' \t\t+ JSON.stringify(_adminAuditsMeta) +\n\t\t'}';\n\t}\n});\n\nDispatcher.register(function(action){\n\tswitch(action.actionType){\n\t\tcase Actions.INITIALISE:\n\t\t\t//Load any potentially previously cached audits or audit meta data\n\t\t\tif(localStorage.audits){\n\t\t\t\t_audits = JSON.parse(localStorage.audits);\n\t\t\t}\n\t\t\tif(localStorage.adminAudits){\n\t\t\t\t_adminAudits = JSON.parse(localStorage.adminAudits);\n\t\t\t}\n\t\t\tif(localStorage.adminAuditsCustomers){\n\t\t\t\t_adminAuditsCustomers = JSON.parse(localStorage.adminAuditsCustomers);\n\t\t\t}\n\t\t\t\n\t\t\tif(localStorage.auditsMeta){\n\t\t\t\t_auditsMeta = JSON.parse(localStorage.auditsMeta);\n\t\t\t}\n\t\t\tif(localStorage.adminAuditsMeta){\n\t\t\t\t_adminAuditsMeta = JSON.parse(localStorage.adminAuditsMeta);\n\t\t\t}\n\t\t\tAuditStore.emitChange();\n\t\t\tbreak;\n\t\t//Refreshing of the call list, which includes associated audit lists\t\n\t\t//[Currently pertains to call audits]\t\n\t\tcase Actions.CALLS_REFRESH:\n\t\t\tif(action.actionStatus == Status.OK){\n\t\t\t\t//Obtain customer IDs for fresh calls\n\t\t\t\tvar newCustomerIDs = _.keysIn(action.callsData);\n\t\t\t\t//Purge associated meta data for any old calls (those not in new list), if necessary\n\t\t\t\t//(In normal circumstances, this would be all old IDs (new day refresh) or no IDs (same day refresh))\n\t\t\t\tAuditStore.purgeMetaDataExceptForIds(newCustomerIDs);\n\t\t\t\t//[We currently purge the related admin audit data during an admin audit list refresh (which happens to be after a calls list refresh currently)]\n\t\t\t\t//AuditStore.purgeMetaDataExceptForIds(newCustomerIDs, true);\n\t\t\t\t\n\t\t\t\t//Obtain unique audit IDs for fresh calls\n\t\t\t\tvar newAuditIDSets = [];\n\t\t\t\tfor (var custID in action.callsData) {\n\t\t\t\t\tif(action.callsData[custID].audits != null){\n\t\t\t\t\t\tnewAuditIDSets.push(action.callsData[custID].audits);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tvar newAuditIDs = _.union.apply(null, newAuditIDSets);\n\t\t\t\t//Purge old audits (not appearing in action.callsData's various 'audits' arrays)\n\t\t\t\tAuditStore.purgeAuditDataExceptForIds(newAuditIDs);\n\n\t\t\t\t//Additionally cache in localStorage for re-use across multiple sessions (until audits refreshed/updated again)\n\t\t\t\tlocalStorage.audits = JSON.stringify(_audits);\n\t\t\t\tlocalStorage.auditsMeta = JSON.stringify(_auditsMeta);\n\t\t\t}\n\t\t\t//Just housekeeping, so no real change to emit (and no audit controller views even listening when calls refresh)\n\t\t\t//AuditStore.emitChange();\n\t\t\tbreak;\n\t\t//Refreshing of the list of admin audits (and customer restrictions)\n\t\t//[Pertains to admin audits]\t\n\t\tcase Actions.ADMIN_AUDITS_REFRESH:\n\t\t\tif(action.actionStatus == Status.OK){\n\t\t\t\t//Purge associated refresh meta data for any old call customers (those not in this list), if necessary\n\t\t\t\t//[Currently, this customer list corresponds to the current call list (just refreshed). \n\t\t\t\t//In future, this might be used in a general case, with an empty customer ID array, and thus all old meta data cleared.]\n\t\t\t\tAuditStore.purgeMetaDataExceptForIds(action.customerIDs, true);\n\t\t\t\t\n\t\t\t\t//For now, let's overwrite our list with the new one (it corresponds to the current call customers, so let's remain focussed on that)\n\t\t\t\t//[but in future, we may want to merge in, using _.assign()]\n\t\t\t\t_adminAuditsCustomers = action.adminAuditsCustomersData;\n\t\t\t\t\n\t\t\t\t//Obtain audit IDs for fresh audit list data\n\t\t\t\tvar newAuditIDs = _.keysIn(action.adminAuditsCustomersData);\n\t\t\t\t//Purge old audits (not appearing in latest audit list data)\n\t\t\t\t//[again, we may handle this in a more general way in future]\n\t\t\t\tAuditStore.purgeAuditDataExceptForIds(newAuditIDs, true);\n\t\t\t\t\n\t\t\t\t//Additionally cache in localStorage for re-use across multiple sessions (until audits refreshed/updated again)\n\t\t\t\tlocalStorage.adminAudits = JSON.stringify(_adminAudits);\n\t\t\t\tlocalStorage.adminAuditsCustomers = JSON.stringify(_adminAuditsCustomers);\n\t\t\t\tlocalStorage.adminAuditsMeta = JSON.stringify(_adminAuditsMeta);\n\t\t\t}\n\t\t\t_status = action.actionStatus;\n\t\t\tAuditStore.emitChange();\n\t\t\tbreak;\n\t\t//Refreshing of the actual audits data, on a per customer basis, currently\t\t\n\t\t//[Currently pertains to both call and admin audits]\t\t\n\t\tcase Actions.AUDITS_REFRESH:\n\t\t\t//Store any complete/partial audit data\n\t\t\t//Resolved in some way, either: Status.OK or Status.PARTIAL (Status.ERROR signifies all requests for audits unsuccessful, so no data to merge in)\n\t\t\tif(action.actionStatus == Status.OK || action.actionStatus == Status.PARTIAL){\n\t\t\t\tvar auditsStorage = ((action.auditsType == AuditTypes.ADMIN) ? _adminAudits : _audits);\n\t\t\t\tvar auditsMetaStorage = ((action.auditsType == AuditTypes.ADMIN) ? _adminAuditsMeta : _auditsMeta);\n\t\t\t\t\n\t\t\t\t//add/overwrite into audits storage\n\t\t\t\t_.assign(auditsStorage, action.auditsData);\n\t\t\t\t\n\t\t\t\t//update meta data (currently just last refresh timestamp)\n\t\t\t\tif(!auditsMetaStorage[action.customerID]){\n\t\t\t\t\tauditsMetaStorage[action.customerID] = {};\n\t\t\t\t}\n\t\t\t\tauditsMetaStorage[action.customerID].refreshed = util.getUnixTime();\n\t\t\t\t\n\t\t\t\t//Additionally cache in localStorage for re-use across multiple sessions (until audits refreshed again)\n\t\t\t\tif(action.auditsType == AuditTypes.ADMIN){\n\t\t\t\t\tlocalStorage.adminAudits = JSON.stringify(auditsStorage);\n\t\t\t\t\tlocalStorage.adminAuditsMeta = JSON.stringify(auditsMetaStorage);\n\t\t\t\t}else{\n\t\t\t\t\tlocalStorage.audits = JSON.stringify(auditsStorage);\n\t\t\t\t\tlocalStorage.auditsMeta = JSON.stringify(auditsMetaStorage);\n\t\t\t\t}\n\t\t\t}\n\t\t\t_status = action.actionStatus;\n\t\t\tAuditStore.emitChange();\n\t\t\tbreak;\n\t\tcase Actions.USER_DELETE_DATA:\n\t\t\t_audits = {}; //(technically unnecessary, but let's keep things fresh for the new user)\n\t\t\t_adminAudits = {};\n\t\t\t_adminAuditsCustomers = {};\n\t\t\t_auditsMeta = {};\n\t\t\t_adminAuditsMeta = {};\n\t\t\t//Additionally update localStorage cache\n\t\t\tlocalStorage.audits = JSON.stringify(_audits);\n\t\t\tlocalStorage.adminAudits = JSON.stringify(_adminAudits);\n\t\t\tlocalStorage.adminAuditsCustomers = JSON.stringify(_adminAuditsCustomers);\n\t\t\tlocalStorage.auditsMeta = JSON.stringify(_auditsMeta);\n\t\t\tlocalStorage.adminAuditsMeta = JSON.stringify(_adminAuditsMeta);\n\t\t\t//Safeguard: emit a change event (necessary?)\n\t\t\tAuditStore.emitChange();\n\t\t\tbreak;\t\n\t\t\t\t\n\t\tdefault:\n\t\t\t//nothing\t\n\t}\n});\n\nmodule.exports = AuditStore;","\"use strict\";\n\n//Available search filters \nmodule.exports = {\n\tALL:\t\t'all', //also the equivalent of a null filter\n\tRECENT:\t\t'recent'\n\t\n\t//FEATURED\n\t//CATEGORIES\n};","/*eslint-disable camelcase*/ //due to required format of audits submission to server\n/*eslint-disable no-fallthrough*/ //(we want to use a case fallthrough!)\n/*eslint-disable no-redeclare*/ //(for declaration of 'call' within separate case statements) \n\"use strict\";\n\nvar Dispatcher = require('../dispatcher/appDispatcher');\nvar Actions = require('../constants/actionTypes');\nvar Status = require('../constants/actionStatuses');\nvar EventEmitter = require('events').EventEmitter;\nvar assign = require('object-assign');\nvar _ = require('lodash');\nvar CHANGE_EVENT = 'change';\nvar CallStore = require('./callStore');\t\t\t\t//Needed indirectly by getAuditSubmissions() (call info)\n//var AuditStore = require('./auditStore');\t\t\t//Needed by getAuditSubmissions()\nvar Types = require('../constants/questionTypes');\t//Needed by getAuditSubmissions()\n//var Ans = require('../constants/questionAnswers');\t//Needed by getAuditSubmissions()\nvar util = require('../util.js'); //Needed for unix timestamp functions\nvar AuditTypes = require('../constants/auditTypes');\n\n//Audit answer objects keyed on call date, customer (call) ID and audit ID\nvar _answers = {};\n//Admin audit answer objects keyed on call date ('date of visit'), customer ID, audit ID (containing array - multiple permitted per audit ID)\nvar _adminAnswers = {};\n\n//Track data state\nvar _status = Status.OK;\n//Track last audit type for data state change\nvar _statusAuditType = AuditTypes.CALL;\n\n//Current call list/audit date (for which we are conducting audits, i.e. answering audit questions)\n//[Technically a unix timestamp as at start of day, and ordinarily set via CALLS_REFRESH action]\n//[Ensure it is a string, for valid JSON data structure and comparison purposes]\n//[Can potentially move this and associated getter/setter into util somehow, and share with CallStore (but localStorage needed too)]\nvar _currentCallDate = util.getUnixTimeStartOfDay() + '';\n\nvar AuditAnswerStore = assign({}, EventEmitter.prototype, {\n\taddChangeListener: function(callback){ this.on(CHANGE_EVENT, callback); },\n\tremoveChangeListener: function(callback){ this.removeListener(CHANGE_EVENT, callback); },\n\temitChange: function(){ this.emit(CHANGE_EVENT); },\n\t\n\tgetStatus: function(){\n\t\treturn _status;\n\t},\n\tgetStatusAuditType: function(){\n\t\treturn _statusAuditType;\n\t},\n\t\n\t//Obtain the audit submissions for one or more calls (customers)\n\t/*getAuditAnswersForCalls: function(arrCustIDs){ //arrCallIDs\n\t\t//let's return an array (possibly optimise this)\n\t\tvar arrAnswers = [];\n\t\t\n\t\tif(arrCustIDs && arrCustIDs.length){\n\t\t\tvar i;\n\t\t\tfor(i = 0; i < arrCustIDs.length; i++){\n\t\t\t\tif(_answers[arrCustIDs[i]]){\n\t\t\t\t\tarrAnswers[i] = _answers[arrCustIDs[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn arrAnswers; //_.at(_answers, arrCustIDs);\n\t},*/\n\t//Obtain the audit submissions for customers (calls) that have been completed but not yet submitted to server\n\t/*getAuditAnswersToBeSubmitted: function(){\n\t\t//any potential audit answers will be keyed on audit ID within each customer (call) array item\n\t\treturn _.filter(_answers, {completed: true, submitted: false});\n\t},*/\n\t\n\t//Obtain a fresh call/customer-level audit answers object, with appropriate meta data defaults\n\t//(Intended to be saved at answersStorage[_currentCallDate][custID])\n\tgetFreshCustomerAuditAnswersObject: function(custID, blnAdmin){\n\t\tif(blnAdmin != null && blnAdmin){\n\t\t\t//[Note that there is currently no notion of 'completing' a call (customer) in the admin audits case, hence this flag is always set to true (customer's admin audits are always 'complete' and ready for submission).\n\t\t\t//(This is to avoid differences in business logic between the two cases at various places in this store.)\n\t\t\t//We're not required to submit entry/exit timestamps for admin audits, but keep these fields for completeness, as they are currently only conducted in a call context.]\n\t\t\treturn {\n\t\t\t\t'customer_id': custID, \n\t\t\t\t'entry': null, \n\t\t\t\t'exit': null, \n\t\t\t\t'completed': true, \n\t\t\t\t'submitted': false\n\t\t\t}; //'report_run': false\n\t\t}else{\n\t\t\t//obtain the extra call-related data we need to include in submissions (and save in this store in case CallStore calls refreshed before submission)\n\t\t\tvar call = CallStore.getCallById(custID);\n\t\t\treturn {\n\t\t\t\t'customer_id': custID, \n\t\t\t\t'call_cycle_row_id': ((call != null && call.call_cycle_row_id != null) ? call.call_cycle_row_id : null), \n\t\t\t\t'call_cycle_override_id': ((call != null && call.call_cycle_override_id != null) ? call.call_cycle_override_id : null), \n\t\t\t\t'entry': null, \n\t\t\t\t'exit': null, \n\t\t\t\t'completed': false, \n\t\t\t\t'submitted': false\n\t\t\t}; //'report_run': false\n\t\t}\n\t},\t\n\t//Obtain the audit submissions lodged for a customer (call)\n\tgetAuditAnswersForCustomer: function(custID, blnAdmin){\n\t\tvar answersStorage = ((blnAdmin != null && blnAdmin) ? _adminAnswers : _answers);\n\t\t\n\t\tif(answersStorage[_currentCallDate] != null && answersStorage[_currentCallDate][custID] != null){\n\t\t\treturn answersStorage[_currentCallDate][custID];\n\t\t}else{\n\t\t\t//(place of origin for DISPLAY of fresh call/customer-level audit answers object)\n\t\t\treturn this.getFreshCustomerAuditAnswersObject(custID, blnAdmin);\n\t\t}\n\t},\n\tgetAuditAnswer: function(custID, auditID, blnAdmin, auditIdx){\n\t\t//Since this is the place of origin for our audit answer objects, \n\t\t//if we don't have an answer stored, we return a fresh object initialised with customer and audit ID's\n\t\t//(Could alternatively set this up at the point where we use getAuditAnswer() instead)\n\t\tif(blnAdmin != null && blnAdmin){\n\t\t\tauditIdx = parseInt(auditIdx); //(NB: array index must be an integer)\n\t\t\treturn (\n\t\t\t\t(_adminAnswers[_currentCallDate] && _adminAnswers[_currentCallDate][custID] && _adminAnswers[_currentCallDate][custID][auditID] && _adminAnswers[_currentCallDate][custID][auditID][auditIdx]) ? \n\t\t\t\t_adminAnswers[_currentCallDate][custID][auditID][auditIdx] : \n\t\t\t\t{'customer_id': custID, 'audit_id': auditID, 'audit_idx': auditIdx, 'weight': 0, 'score': 0, 'completed': false} //, 'signatures': []\n\t\t\t);\n\t\t}else{\n\t\t\treturn (\n\t\t\t\t(_answers[_currentCallDate] && _answers[_currentCallDate][custID] && _answers[_currentCallDate][custID][auditID]) ? \n\t\t\t\t_answers[_currentCallDate][custID][auditID] : \n\t\t\t\t{'customer_id': custID, 'audit_id': auditID, 'weight': 0, 'score': 0, 'completed': false} //, 'signatures': []\n\t\t\t);\n\t\t}\n\t},\n\t//Obtain the packaged audit submission data for an audit\n\t//[only used internally in this store currently]\n\tgetAuditSubmission: function(callDate, customerID, auditID, blnAdmin, auditIdx){\n\t\tblnAdmin = (blnAdmin != null && blnAdmin);\n\t\tlet answersStorage = (blnAdmin ? _adminAnswers : _answers);\n\t\t\n\t\t//Obtain the extra audit/question-related data we need to include in submissions\n\t\t//[Update: don't need this, but if we do, we'll need to change the CALLS_REFRESH code in AuditStore to not purge any old audits we may need here]\n\t\t//var audit = AuditStore.getAudit(auditID);\n\t\t\n\t\t//Due to current usage, we don't need to do any existence checks for objects, etc.\n\t\tlet auditAnswer;\n\t\tvar auditSubmission = {\n\t\t\t'customer_id': answersStorage[callDate][customerID].customer_id,\t//this field added for our own usage (keep tabs during submission)\n\t\t\t'call_date': callDate, \t\t\t\t\t\t\t\t\t\t\t\t//this field added for our own usage (keep tabs during submission)\n\t\t\t'entry': answersStorage[callDate][customerID].entry,\n\t\t\t'exit': answersStorage[callDate][customerID].exit,\n\t\t\t'audit_answers': {\n\t\t\t\t'audit_id': auditID,\n\t\t\t\t'final_score': 0,\n\t\t\t\t'date_of_visit': 0,\n\t\t\t\t//'comment': '',\n\t\t\t\t'answers': []\n\t\t\t}\n\t\t};\n\t\t\n\t\tif(blnAdmin){\n\t\t\tauditIdx = parseInt(auditIdx);\n\t\t\tauditAnswer = answersStorage[callDate][customerID][auditID][auditIdx];\n\t\t\tauditSubmission.audit_idx = auditIdx; //this field added for our own usage (keep tabs during submission)\n\t\t\tauditSubmission.audit_answers.store_id = answersStorage[callDate][customerID].customer_id; // = customerID\n\t\t}else{\n\t\t\tauditAnswer = answersStorage[callDate][customerID][auditID];\n\t\t\tif(answersStorage[callDate][customerID].call_cycle_override_id != null){\n\t\t\t\tauditSubmission.audit_answers.call_cycle_override_id = answersStorage[callDate][customerID].call_cycle_override_id;\n\t\t\t}else{\n\t\t\t\tauditSubmission.audit_answers.call_cycle_row_id = answersStorage[callDate][customerID].call_cycle_row_id;\n\t\t\t}\n\t\t}\n\t\t\n\t\t//Add signatures, if any present\n\t\tif(auditAnswer.signatures != null && auditAnswer.signatures.length){\n\t\t\tauditSubmission.audit_answers.signatures = auditAnswer.signatures;\n\t\t}\n\t\t\n\t\t//final score from audit weight and score\n\t\tif(auditAnswer.weight > 0){\n\t\t\tauditSubmission.audit_answers.final_score = parseFloat(auditAnswer.score / auditAnswer.weight);\n\t\t}\n\t\t\n\t\t//for each question answer \n\t\tfor (var questionID in auditAnswer) {\n\t\t\t//ignore meta data entries\n\t\t\tif(questionID == 'customer_id' || questionID == 'audit_id' || questionID == 'weight' || questionID == 'score' || questionID == 'completed' || questionID == 'signatures'){\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tvar questionAnswer = auditAnswer[questionID];\n\t\t\t\n\t\t\t//We only process visible, answered questions\n\t\t\tif(questionAnswer.visible && questionAnswer.answered){\n\t\t\t\tvar questionAnswerSubmission = {\n\t\t\t\t\t'audit_question_id': questionID,\n\t\t\t\t\t'timestamp': questionAnswer.timestamp,\n\t\t\t\t\t'location': questionAnswer.location\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\t//update the audit timestamp, if necessary\n\t\t\t\tif(questionAnswer.timestamp > auditSubmission.audit_answers.date_of_visit){\n\t\t\t\t\tauditSubmission.audit_answers.date_of_visit = questionAnswer.timestamp;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tswitch(questionAnswer.type){\n\t\t\t\t\tcase Types.PRODUCT_FACING:\n\t\t\t\t\t\tquestionAnswerSubmission.facings = questionAnswer.product_facings;\n\t\t\t\t\tcase Types.PRODUCT:\n\t\t\t\t\t\tquestionAnswerSubmission.answer = questionAnswer.product_availability;\n\t\t\t\t\t\tquestionAnswerSubmission.price = questionAnswer.product_price;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase Types.YES_NO:\n\t\t\t\t\t\tquestionAnswerSubmission.answer = questionAnswer.yes_no;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase Types.FREE_TEXT:\n\t\t\t\t\t\tquestionAnswerSubmission.answer = questionAnswer.free_text;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase Types.MULTIPLE_CHOICE:\n\t\t\t\t\t\tquestionAnswerSubmission.answer = questionAnswer.options_selected; //single option\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase Types.MULTI_SELECT:\n\t\t\t\t\t\tquestionAnswerSubmission.answer = questionAnswer.options_selected.join(); //multiple values, CSV string\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase Types.PHOTO:\n\t\t\t\t\t\tquestionAnswerSubmission.downloadable_file = questionAnswer.image;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase Types.NUMERIC:\n\t\t\t\t\t\tquestionAnswerSubmission.answer = questionAnswer.numeric;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase Types.CURRENCY:\n\t\t\t\t\t\tquestionAnswerSubmission.answer = questionAnswer.currency;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase Types.DATE:\n\t\t\t\t\t\tquestionAnswerSubmission.answer = questionAnswer.date;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase Types.BARCODE:\n\t\t\t\t\t\tquestionAnswerSubmission.answer = questionAnswer.barcode;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase Types.SIGNATURE:\n\t\t\t\t\t\tquestionAnswerSubmission.signature_id = questionAnswer.signature_id;\n\t\t\t\t\t\tquestionAnswerSubmission.signature_name = questionAnswer.signature_name;\n\t\t\t\t\t\tquestionAnswerSubmission.signature_comments = questionAnswer.signature_comments;\n\t\t\t\t\t\tquestionAnswerSubmission.signature_file = questionAnswer.signature_file;\n\t\t\t\t\t\tbreak;\t\t\t\t\t\t\t\n\t\t\t\t\tdefault:\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tauditSubmission.audit_answers.answers.push(questionAnswerSubmission);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn auditSubmission;\n\t},\n\t//Obtain the currently eligible, packaged audit submission data\n\tgetAuditSubmissions: function(blnAdmin){\n\t\t//Obtain the audit submissions for customers (calls) that have been completed but not yet submitted to server\n\t\t//[any potential audit answers will be keyed on audit ID within each customer (call) array item]\n\t\t//var arrCalls = _.filter(_answers, {completed: true, submitted: false});\n\t\t\n\t\tblnAdmin = (blnAdmin != null && blnAdmin);\n\t\tlet answersStorage = (blnAdmin ? _adminAnswers : _answers);\n\t\t\n\t\tvar arrSubmit = [];\n\t\t\n\t\t//for each call date\n\t\tfor (var callDate in answersStorage) {\n\t\t\tif(answersStorage[callDate] != null){\n\t\t\t\t\n\t\t\t\t//for each call/customer\n\t\t\t\tfor (var customerID in answersStorage[callDate]) {\n\t\t\t\t\t//We are only interested in the audit submissions for customers (calls) that have been completed but not yet submitted to server\n\t\t\t\t\t//[Also ignore 'deleted' calls (potentially purged on a new call list refresh, but yet to be completely removed by localStorage cache refresh)]\n\t\t\t\t\t//[Could alternatively restructure with negated condition and continue statement, as further below]\n\t\t\t\t\tif(answersStorage[callDate][customerID] != null && answersStorage[callDate][customerID].completed && !answersStorage[callDate][customerID].submitted){\n\t\t\t\t\t\t\n\t\t\t\t\t\t//for each audit \n\t\t\t\t\t\tfor (var auditID in answersStorage[callDate][customerID]) {\n\t\t\t\t\t\t\t//ignore meta data entries\n\t\t\t\t\t\t\tif(auditID == 'customer_id' || auditID == 'call_cycle_row_id' || auditID == 'call_cycle_override_id' || auditID == 'entry' || auditID == 'exit' || auditID == 'completed' || auditID == 'submitted'){\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t//Ignore 'deleted' audits (purged after successful submission)\n\t\t\t\t\t\t\t//(Needed for the case when some sibling audit submissions were unsuccessful - and thus this call was not marked as submitted - and \n\t\t\t\t\t\t\t//there hasn't been a localStorage cache refresh since, which removes deleted nodes like this)\n\t\t\t\t\t\t\tif(answersStorage[callDate][customerID][auditID] == null){\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif(blnAdmin){\n\t\t\t\t\t\t\t\tif(answersStorage[callDate][customerID][auditID].length){\n\t\t\t\t\t\t\t\t\tlet j;\n\t\t\t\t\t\t\t\t\tfor(j = 0; j < answersStorage[callDate][customerID][auditID].length; j++) {\n\t\t\t\t\t\t\t\t\t\t//Ignore 'deleted' audits (purged after successful submission)\n\t\t\t\t\t\t\t\t\t\t//Also ignore incomplete audits (i.e. to have an audit submitted, user is required to explicitly 'complete' it (along with the validation that that triggers), rather than just navigating off the audit page)\n\t\t\t\t\t\t\t\t\t\tif(answersStorage[callDate][customerID][auditID][j] != null && answersStorage[callDate][customerID][auditID][j].completed){\n\t\t\t\t\t\t\t\t\t\t\tvar auditSubmission = this.getAuditSubmission(callDate, customerID, auditID, blnAdmin, j);\n\t\t\t\t\t\t\t\t\t\t\t//Only add this audit to the submission batch if it contains at least one answered question\n\t\t\t\t\t\t\t\t\t\t\t//[This is Morpheus policy and the server treats empty answers arrays as an error]\n\t\t\t\t\t\t\t\t\t\t\tif(auditSubmission.audit_answers.answers.length){\n\t\t\t\t\t\t\t\t\t\t\t\tarrSubmit.push(auditSubmission);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t//Ignore incomplete audits (i.e. to have an audit submitted, user is required to explicitly 'complete' it (along with the validation that that triggers), rather than just navigating off the audit page)\n\t\t\t\t\t\t\t\tif(answersStorage[callDate][customerID][auditID].completed){\n\t\t\t\t\t\t\t\t\tvar auditSubmission = this.getAuditSubmission(callDate, customerID, auditID, blnAdmin);\n\t\t\t\t\t\t\t\t\t//Only add this audit to the submission batch if it contains at least one answered question\n\t\t\t\t\t\t\t\t\t//[This is Morpheus policy and the server treats empty answers arrays as an error]\n\t\t\t\t\t\t\t\t\tif(auditSubmission.audit_answers.answers.length){\n\t\t\t\t\t\t\t\t\t\tarrSubmit.push(auditSubmission);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//TODO: Possibly add rare edge case code here if this completed customer actually has no audits whatsoever to submit (because no audits compulsory and none completed / no questions answered!): \n\t\t\t\t\t\t//marking customer as either incomplete or submitted, so that it can be purged by purgeData() below\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn arrSubmit;\n\t},\n\t//Clear all cached answer data for old call dates except for any customers that are completed but unsubmitted (allowing old submissions from days before today to be re-attempted)\n\tpurgeData: function(blnAdmin){ //, updateLocalStorage){\n\t\tblnAdmin = (blnAdmin != null && blnAdmin);\n\t\tvar answersStorage = (blnAdmin ? _adminAnswers : _answers);\n\t\tvar allCustomerDataForDateDeleted = true;\n\t\tfor (var callDate in answersStorage) {\n\t\t\tif(callDate != _currentCallDate && answersStorage[callDate] != null){\n\t\t\t\tallCustomerDataForDateDeleted = true;\n\t\t\t\tfor (var customerID in answersStorage[callDate]) {\n\t\t\t\t\tif(answersStorage[callDate][customerID] != null){\n\t\t\t\t\t\t//Before deleting, check that the customer's data has either been submitted or is incomplete (i.e. good to delete!)\n\t\t\t\t\t\t//[Note that only calls can be 'completed', so that flag is always 'complete' in the admin audits case]\n\t\t\t\t\t\tif(answersStorage[callDate][customerID].submitted || !answersStorage[callDate][customerID].completed){\n\t\t\t\t\t\t\tanswersStorage[callDate][customerID] = undefined; //performance boost over delete (and as it happens, node is completely removed by next localStorage save/reload anyway)\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t//In the admin audits case, we need to inspect the deeper structures for incomplete audits (and still potentially be able to delete all)\n\t\t\t\t\t\t\tif(blnAdmin){\n\t\t\t\t\t\t\t\tvar allAuditDataForCustomerDeleted = true;\n\t\t\t\t\t\t\t\tfor (var auditID in answersStorage[callDate][customerID]) {\n\t\t\t\t\t\t\t\t\t//ignore meta data entries\n\t\t\t\t\t\t\t\t\tif(auditID == 'customer_id' || auditID == 'entry' || auditID == 'exit' || auditID == 'completed' || auditID == 'submitted'){\n\t\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t//Ignore 'deleted' audits (purged after successful submission)\n\t\t\t\t\t\t\t\t\t//(Needed for the case when some sibling audit submissions were unsuccessful - and thus this call was not marked as submitted - and \n\t\t\t\t\t\t\t\t\t//there hasn't been a localStorage cache refresh since, which removes deleted nodes like this)\n\t\t\t\t\t\t\t\t\tif(answersStorage[callDate][customerID][auditID] == null || !answersStorage[callDate][customerID][auditID].length){\n\t\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tlet j;\n\t\t\t\t\t\t\t\t\tfor(j = 0; j < answersStorage[callDate][customerID][auditID].length; j++) {\n\t\t\t\t\t\t\t\t\t\tif(answersStorage[callDate][customerID][auditID][j] != null){\n\t\t\t\t\t\t\t\t\t\t\tif(!answersStorage[callDate][customerID][auditID][j].completed){\n\t\t\t\t\t\t\t\t\t\t\t\tanswersStorage[callDate][customerID][auditID][j] = null; //undefined; //null might be marginally better when dealing with arrays? [The array node is retained on localStorage save/reload regardless]\n\t\t\t\t\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t\t\t\t\tallAuditDataForCustomerDeleted = false; //at least one audit's data was not deleted (completed but unsubmitted)\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif(allAuditDataForCustomerDeleted){\n\t\t\t\t\t\t\t\t\tanswersStorage[callDate][customerID] = undefined;\n\t\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t\tallCustomerDataForDateDeleted = false; //at least one customer's data was not deleted (completed but unsubmitted)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\tallCustomerDataForDateDeleted = false; //at least one customer's data was not deleted (completed but unsubmitted)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//If all customer data was able to be cleared for this date, we can clear the date entry itself\n\t\t\t\tif(allCustomerDataForDateDeleted){\n\t\t\t\t\tanswersStorage[callDate] = undefined; //performance boost over delete (and as it happens, node is completely removed by next localStorage save/reload anyway)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t//if(updateLocalStorage == null || updateLocalStorage){ //Provide a way to trigger a localStorage save externally (default true)\n\t\t//\tlocalStorage.answers = JSON.stringify(answersStorage);\n\t\t//}\n\t},\n\t\n\t//Obtain (relevant) store data for server debug submission\n\texportData: function(){\n\t\t//Explicity set up the valid JSON return string (until this store is restructured to store all keys in an object rather than separate module-level variables)\n\t\treturn '{' + \n\t\t\t'\"answers\":' \t\t\t+ JSON.stringify(_answers) + \",\" +\n\t\t\t'\"adminAnswers\":' \t\t+ JSON.stringify(_adminAnswers) + \",\" +\n\t\t\t'\"currentCallDate\":'\t+ JSON.stringify(_currentCallDate) +\n\t\t'}';\n\t}\n});\n\nDispatcher.register(function(action){\n\tswitch(action.actionType){\n\t\tcase Actions.INITIALISE:\n\t\t\t//Load any potentially previously cached audit answers\n\t\t\tif(localStorage.answers){\n\t\t\t\t_answers = JSON.parse(localStorage.answers);\n\t\t\t}\n\t\t\tif(localStorage.adminAnswers){\n\t\t\t\t_adminAnswers = JSON.parse(localStorage.adminAnswers);\n\t\t\t}\n\t\t\t//Also load the current call date (if previously cached)\n\t\t\tif(localStorage.currentCallDate){\n\t\t\t\t_currentCallDate = JSON.parse(localStorage.currentCallDate);\n\t\t\t}\n\t\t\tAuditAnswerStore.emitChange();\n\t\t\tbreak;\n\t\t//Refreshing of the call list, which includes associated audit lists\t\n\t\t//[Currently pertains to call audits]\t\n\t\tcase Actions.CALLS_REFRESH:\n\t\t\tif(action.actionStatus == Status.OK){\n\t\t\t\t//Update current call date (call list refresh should always be for today)\n\t\t\t\t//[Ensure it is a string, for valid JSON data structure]\n\t\t\t\t_currentCallDate = action.callDate + '';\n\n\t\t\t\t//Purge associated answer data for any old calls, if necessary\n\t\t\t\t//(In normal circumstances, this would be all old calls (new day refresh) or no calls (same day refresh))\n\t\t\t\tAuditAnswerStore.purgeData();\n\t\t\t\t\n\t\t\t\t//Additionally cache in localStorage for re-use across multiple sessions (until updated again)\n\t\t\t\tlocalStorage.answers = JSON.stringify(_answers);\n\t\t\t\tlocalStorage.currentCallDate = JSON.stringify(_currentCallDate);\n\t\t\t}\n\t\t\t//Just housekeeping, so no real change to emit (and no audit answer controller views even listening when calls refresh)\n\t\t\t//AuditAnswerStore.emitChange();\n\t\t\tbreak;\n\t\t//Refreshing of the list of admin audits (and customer restrictions)\n\t\t//[Pertains to admin audits]\t\n\t\tcase Actions.ADMIN_AUDITS_REFRESH:\n\t\t\tif(action.actionStatus == Status.OK){\n\t\t\t\t//Purge associated admin audit answer data for any old call dates, if necessary (incomplete)\n\t\t\t\t//[Even though this action currently happens straight after a CALLS_REFRESH, it's good to conduct this housekeeping separately]\n\t\t\t\tAuditAnswerStore.purgeData(true);\n\t\t\t\t\n\t\t\t\t//Additionally cache in localStorage for re-use across multiple sessions (until updated again)\n\t\t\t\tlocalStorage.adminAnswers = JSON.stringify(_adminAnswers);\n\t\t\t}\n\t\t\t//Just housekeeping, so no real change to emit (and no audit answer controller views even listening when calls and admin audits list refreshed)\n\t\t\t//AuditAnswerStore.emitChange();\n\t\t\tbreak;\n\t\t//Set the entry timestamp\n\t\t//[Currently pertains to call audits only]\t\n\t\tcase Actions.CUSTOMER_ENTER: //CALL_START //CALL_AUDITS_START\n\t\t\t//We only create the answer data entry in this store if this is a call customer (as apposed to a non-call customer perhaps being entered via elsewhere in the app)\n\t\t\t//(Because otherwise we do not yet have the call data needed internally by getFreshCustomerAuditAnswersObject())\n\t\t\t//[For now, this means it's technically possible to have a later entry timestamp created here in the answer data than in the customer visit record, \n\t\t\t//if calls list is only updated subsequent to entering the previously-non-call customer]\n\t\t\tvar call = CallStore.getCallById(action.customerID);\n\t\t\tif(call != null){\n\t\t\t\tif(!_answers[_currentCallDate]){\n\t\t\t\t\t_answers[_currentCallDate] = {};\n\t\t\t\t}\n\t\t\t\tif(!_answers[_currentCallDate][action.customerID]){\n\t\t\t\t\t//Current place of origin for SAVE of fresh call/customer-level audit answers object\n\t\t\t\t\t_answers[_currentCallDate][action.customerID] = AuditAnswerStore.getFreshCustomerAuditAnswersObject(action.customerID);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//Only record the first entry timestamp\n\t\t\t\tif(_answers[_currentCallDate][action.customerID].entry == null){\n\t\t\t\t\t//Currently set our entry/exit timestamps at call level in this store (only place currently needed),\n\t\t\t\t\t//but could add in CallStore too/alternatively if needed in future (using callsMeta)\n\t\t\t\t\t_answers[_currentCallDate][action.customerID].entry = action.entryTimestamp;\n\t\t\t\t\t\n\t\t\t\t\t//Additionally cache in localStorage for re-use across multiple sessions (until updated again)\n\t\t\t\t\tlocalStorage.answers = JSON.stringify(_answers);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//No need to emit the entry time change - only currently needed within this store\n\t\t\t\t//AuditAnswerStore.emitChange();\n\t\t\t}\n\t\t\tbreak;\t\n\t\tcase Actions.AUDIT_ANSWER_SAVE:\n\t\t\tvar blnAdmin = (action.auditType == AuditTypes.ADMIN);\n\t\t\tvar answersStorage = (blnAdmin ? _adminAnswers : _answers);\n\t\t\tif(!answersStorage[_currentCallDate]){\n\t\t\t\tanswersStorage[_currentCallDate] = {};\n\t\t\t}\n\t\t\tif(!answersStorage[_currentCallDate][action.auditAnswerData.customer_id]){\n\t\t\t\t//This is the place of origin for SAVE of fresh customer-level ADMIN answers object\n\t\t\t\t//Originally: place of origin for save of fresh call/customer-level audit answers object\n\t\t\t\t//[But should no longer get here in normal call audits flow, as we would have needed to set entry timestamp prior to this - see CUSTOMER_ENTER (formerly CALL_START) above\n\t\t\t\tanswersStorage[_currentCallDate][action.auditAnswerData.customer_id] = AuditAnswerStore.getFreshCustomerAuditAnswersObject(action.auditAnswerData.customer_id, blnAdmin);\n\t\t\t\tif(!blnAdmin){\n\t\t\t\t\t//Safeguard (should not get here): In the normal call audits case, the best we can do for now is set a late entry timestamp here\n\t\t\t\t\tanswersStorage[_currentCallDate][action.auditAnswerData.customer_id].entry = util.getUnixTime();\n\t\t\t\t}\t\n\t\t\t}\n\t\t\tif(!answersStorage[_currentCallDate][action.auditAnswerData.customer_id][action.auditAnswerData.audit_id]){\n\t\t\t\tanswersStorage[_currentCallDate][action.auditAnswerData.customer_id][action.auditAnswerData.audit_id] = (blnAdmin ? [] : {});\n\t\t\t}\n\t\t\t\n\t\t\tif(blnAdmin){\n\t\t\t\t//add/overwrite into audit answer storage\n\t\t\t\tanswersStorage[_currentCallDate][action.auditAnswerData.customer_id][action.auditAnswerData.audit_id][action.auditAnswerData.audit_idx] = action.auditAnswerData;\n\t\t\t\t//Since we're editing an audit answer, ensure the submitted flag is reset at customer level (to allow more admin audit answer submissions whenever ready)\n\t\t\t\t//[This works differently to call audits, where the call needs to be completed before a one-time submission]\n\t\t\t\tanswersStorage[_currentCallDate][action.auditAnswerData.customer_id].submitted = false;\n\t\n\t\t\t\t//Additionally cache in localStorage for re-use across multiple sessions (until updated again)\n\t\t\t\tlocalStorage.adminAnswers = JSON.stringify(answersStorage);\n\t\t\t\t\n\t\t\t}else{\n\t\t\t\t//add/overwrite into audit answer storage\n\t\t\t\t//_.assign(answersStorage, action.auditAnswerData);\n\t\t\t\tanswersStorage[_currentCallDate][action.auditAnswerData.customer_id][action.auditAnswerData.audit_id] = action.auditAnswerData;\n\t\n\t\t\t\t//Additionally cache in localStorage for re-use across multiple sessions (until updated again)\n\t\t\t\tlocalStorage.answers = JSON.stringify(answersStorage);\n\t\t\t}\n\t\t\t\n\t\t\tAuditAnswerStore.emitChange();\n\t\t\tbreak;\n\t\t//case Actions.CALL_AUDITS_RUN_REPORT:\n\t\t//\tbreak;\n\t\t//Set the exit timestamp and, if appropriate, complete a call \n\t\t//[Currently pertains to call audits only]\n\t\tcase Actions.CUSTOMER_EXIT: //CALL_AUDITS_COMPLETE\n\t\t\t//We only update the answer data in this store if this is an explicit call audits completion scenario OR\n\t\t\t//we already have answer data to update for this customer (e.g. the user previously answered audits or started/completed a call and then placed an order or re-exited the customer, triggering this operation)\n\t\t\t//(We don't want to CREATE answer data if not appropriate. [Plus, we would need to ensure call data available for getFreshCustomerAuditAnswersObject() usage])\n\t\t\tif(\taction.callAuditsCompleted || (_answers[_currentCallDate] != null && _answers[_currentCallDate][action.customerID] != null) ){\n\t\t\t\tif(!_answers[_currentCallDate]){ //shouldn't be the case\n\t\t\t\t\t_answers[_currentCallDate] = {};\n\t\t\t\t}\n\t\t\t\tif(!_answers[_currentCallDate][action.customerID]){ //shouldn't be the case\n\t\t\t\t\t_answers[_currentCallDate][action.customerID] = AuditAnswerStore.getFreshCustomerAuditAnswersObject(action.customerID);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//Only set the completion flag when actually completing a call (In all other cases, it's simply an exit timestamp update)\n\t\t\t\tif(action.callAuditsCompleted){\n\t\t\t\t\t_answers[_currentCallDate][action.customerID].completed = true;\n\t\t\t\t}\n\t\t\t\t//Currently set our entry/exit timestamps at call level in this store (only place currently needed),\n\t\t\t\t//but could add in CallStore too/alternatively if needed in future (using callsMeta)\n\t\t\t\t_answers[_currentCallDate][action.customerID].exit = action.exitTimestamp;\n\t\t\t\t\n\t\t\t\t//Additionally cache in localStorage for re-use across multiple sessions (until updated again)\n\t\t\t\tlocalStorage.answers = JSON.stringify(_answers);\n\t\t\t\t\n\t\t\t\tAuditAnswerStore.emitChange();\n\t\t\t}\n\t\t\tbreak;\t\t\n\t\tcase Actions.AUDITS_SUBMIT:\n\t\t\t//Resolved in some way, either: Status.OK, Status.ERROR or Status.PARTIAL\n\t\t\tif(action.actionStatus != Status.PENDING){\n\t\t\t\tvar blnAdmin = (action.auditsType == AuditTypes.ADMIN);\n\t\t\t\tvar answersStorage = (blnAdmin ? _adminAnswers : _answers);\n\t\t\t\t\n\t\t\t\t//update submission flag(s) for the successful customers (calls)\n\t\t\t\t//NOTE: \n\t\t\t\t//- We currently don't make use of this particular 'submitted' flag in any controller view (we use the callStore's one for call list display though)\n\t\t\t\t//- We don't additionally have a 'submitted' flag at the audit level and save that here too, because:\n\t\t\t\t//\t\t- currently don't display audit list once call completed\n\t\t\t\t//\t\t- we purge our cache of submitted audit answer data on successful submission (see below)\n\t\t\t\tfor (var callDate in action.submittedIDs) {\n\t\t\t\t\tfor (var customerID in action.submittedIDs[callDate]) {\n\t\t\t\t\t\t//Note that a customer ID will appear in submitted AND failed when partial success (successful audits in submitted, unsuccessful in failed)\n\t\t\t\t\t\t//We make sure to still store customer as unsubmitted when some of its audits are still unsubmitted\n\t\t\t\t\t\tif(!action.failedIDs[callDate] || !action.failedIDs[callDate][customerID]){\n\t\t\t\t\t\t\tanswersStorage[callDate][customerID].submitted = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t//Clear answer cache for successfully submitted audits\n\t\t\t\t\t\tvar arrSuccessfulAuditIDs = action.submittedIDs[callDate][customerID]; \n\t\t\t\t\t\tfor (var i = 0, l = arrSuccessfulAuditIDs.length; i < l; i++) {\n\t\t\t\t\t\t\tif(blnAdmin){\n\t\t\t\t\t\t\t\tvar idPath = arrSuccessfulAuditIDs[i].split('-');\n\t\t\t\t\t\t\t\tanswersStorage[callDate][customerID][idPath[0]][parseInt(idPath[1])] = null; //undefined; //null might be marginally better when dealing with arrays? [The array node is retained on localStorage save/reload regardless]\n\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\tanswersStorage[callDate][customerID][arrSuccessfulAuditIDs[i]] = undefined;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t//Update localStorage cache for re-use across multiple sessions (until updated again)\n\t\t\t\tif(blnAdmin){\n\t\t\t\t\tlocalStorage.adminAnswers = JSON.stringify(answersStorage);\n\t\t\t\t}else{\n\t\t\t\t\tlocalStorage.answers = JSON.stringify(answersStorage);\n\t\t\t\t}\n\t\t\t}\n\t\t\t_status = action.actionStatus;\n\t\t\t_statusAuditType = action.auditsType;\n\t\t\tAuditAnswerStore.emitChange();\n\t\t\tbreak;\n\t\tcase Actions.USER_DELETE_DATA:\n\t\t\t_answers = {};\n\t\t\t_adminAnswers = {};\n\t\t\t//Additionally update localStorage cache\n\t\t\tlocalStorage.answers = JSON.stringify(_answers);\n\t\t\tlocalStorage.adminAnswers = JSON.stringify(_adminAnswers);\n\t\t\t//Safeguard: emit a change event (necessary?)\n\t\t\tAuditAnswerStore.emitChange();\n\t\t\tbreak;\n\t\t\t\t\n\t\tdefault:\n\t\t\t//nothing\t\n\t}\n});\n\nmodule.exports = AuditAnswerStore;","\"use strict\";\n\n//Constants mapping to server question type strings\nmodule.exports = {\n\tPRODUCT:\t\t\t\"product\",\n\tYES_NO:\t\t\t\t\"yes/no\",\n\tFREE_TEXT:\t\t\t\"correct answer\", //free text\n\tMULTIPLE_CHOICE:\t\"multiple choice\",\n\tPHOTO:\t\t\t\t\"photo\",\n\tNUMERIC:\t\t\t\"numeric\",\n\tCURRENCY:\t\t\t\"currency\",\n\tDATE:\t\t\t\t\"date\",\n\tPRODUCT_FACING:\t\t\"product facing\",\n\tMULTI_SELECT:\t\t\"multi select\",\n\tBARCODE:\t\t\t\"barcode\",\n\tSIGNATURE:\t\t\t\"signature\"\n};","\"use strict\";\n\nvar Dispatcher = require('../dispatcher/appDispatcher');\nvar Actions = require('../constants/actionTypes');\nvar Status = require('../constants/actionStatuses');\nvar EventEmitter = require('events').EventEmitter;\nvar assign = require('object-assign');\nvar _ = require('lodash');\nvar CHANGE_EVENT = 'change';\nvar util = require('../util.js');\n\n//Category objects keyed on category ID, in multi-dimensional tree structure\n//(also containing info on global/customer assigned files)\nvar _categories = {};\n//File objects keyed on file IDs for fast retrieval\nvar _files = {};\n//Library meta data objects keyed on customer ID (or 'global' for global library)\n//Currently this is used for tracking last refresh timestamps\n//(Cleaner and easier to maintain this data separately per customer rather than within the categories structure) \nvar _libraryMeta = {};\n//Track data state\nvar _status = Status.OK;\n\nvar LibraryStore = assign({}, EventEmitter.prototype, {\n\taddChangeListener: function(callback){ this.on(CHANGE_EVENT, callback); },\n\tremoveChangeListener: function(callback){ this.removeListener(CHANGE_EVENT, callback); },\n\temitChange: function(){ this.emit(CHANGE_EVENT); },\n\t\n\tgetStatus: function(){\n\t\treturn _status;\n\t},\n\t//Obtain the library categories (tree format)\n\t//[this obviously returns a REFERENCE to our internal tree storage]\n\tgetCategories: function(){\n\t\treturn _categories;\n\t},\n\t//Obtain the library categories (tree format) pertaining to customers (i.e. the 'Prep Info' sub-categories)\n\t//[this obviously returns a REFERENCE to our internal tree storage]\n\t//[NO LONGER USED (as we also need to be able to display files in the 'Prep Info' root folder)]\n\tgetCustomerCategories: function(){\n\t\treturn ((_categories[util.customerLibraryCategoryID] && _categories[util.customerLibraryCategoryID].children) ? _categories[util.customerLibraryCategoryID].children : {});\n\t},\n\t//Obtain the library categories (tree format) pertaining to global file library (i.e. the 'Library' sub-categories)\n\t//[this obviously returns a REFERENCE to our internal tree storage]\n\t//[NO LONGER USED (as we also need to be able to display files in the 'Library' root folder)]\n\tgetGlobalCategories: function(){\n\t\treturn ((_categories[util.globalLibraryCategoryID] && _categories[util.globalLibraryCategoryID].children) ? _categories[util.globalLibraryCategoryID].children : {});\n\t},\n\t//Convenience function (see getCategoriesFileCountsForKey())\n\tgetCustomerCategoriesFileCounts: function(key){\n\t\treturn this.getCategoriesFileCountsForKey(key, _categories, util.customerLibraryCategoryID);\n\t},\n\t//Convenience function (see getCategoriesFileCountsForKey())\n\tgetGlobalCategoriesFileCounts: function(){\n\t\treturn this.getCategoriesFileCountsForKey('global', _categories, util.globalLibraryCategoryID);\n\t},\n\t//Obtain the calculated totals for all files in categories (tree format) pertaining to, with current usage, global file library or customers (i.e. 'Library' or 'Prep Info' sub-categories) \n\t//[Note: we can't conveniently store this per customer in the category tree without bloating storage, so better to calculate this here, when asked]\n\t//[Note: the other option is to do the getFileCountsForKey() calculations within CategoryList component, but would need to store the counts within a separate tree object in component state, and employ componentWillReceiveProps() etc.]\n\t//[this returns a count-specific COPY - i.e. does not mutate our original internal tree storage]\n\tgetCategoriesFileCountsForKey: function(key, tree, filterTopCatID){\n\t\tvar treeCounts = {};\n\t\tthis.getFileCountsForKey(key, tree, treeCounts, filterTopCatID);\n\t\treturn treeCounts;\n\t},\n\tgetFile: function(fileID){\n\t\treturn (_files[fileID] ? _files[fileID] : {name: 'Unavailable'});\n\t},\n\t//Get the unix timestamp of the last refresh (if any) for a customer ID / 'global'\n\tgetLastRefreshForKey: function(key){\n\t\treturn (_libraryMeta[key] ? _libraryMeta[key].refreshed : null);\n\t},\n\t//Used to recursively count file assignments for a customer ID or 'global' within a category tree or sub-tree,\n\t//setting the count at all category levels in the destination tree, and returning a total count (of top-level cat(s)' files).\n\t//Optionally filter for just one of the top-level library cats (customer or global), in which case the count applies just to that part of the library\n\tgetFileCountsForKey: function(key, sourceTree, destTree, filterTopCatID){\n\t\t//for (var firstKey in sourceTree) break;\n\t\t//var blnCategoryList = _.isFinite(parseInt(firstKey));\n\t\tvar categoriesfileCount = 0;\n\n\t\tfor (var catID in sourceTree) {\n\t\t\t//Optionally ignore all top-level cats except for the one we're interested in (filterTopCatID)\n\t\t\tif((filterTopCatID != null) && (catID != filterTopCatID)){\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\tdestTree[catID] = {\n\t\t\t\tfileCount: 0,\n\t\t\t\tchildren: null\n\t\t\t};\n\t\t\t//Add any assigned files for this cat to this cat's file count\n\t\t\tif(sourceTree[catID].assignments[key] != null){\n\t\t\t\tdestTree[catID].fileCount += sourceTree[catID].assignments[key].length;\n\t\t\t}\n\t\t\t//Add any sub-category files to this cat's file count\n\t\t\tif(sourceTree[catID].children != null){\n\t\t\t\tdestTree[catID].children = {};\n\t\t\t\tdestTree[catID].fileCount += this.getFileCountsForKey(key, sourceTree[catID].children, destTree[catID].children);\n\t\t\t}\n\t\t\t//Add this cat's file count to (sibling) categories count\n\t\t\tcategoriesfileCount += destTree[catID].fileCount;\n\t\t}\n\t\t\n\t\treturn categoriesfileCount;\n\t},\n\t//Currently used to recursively REMOVE file assignments for a customer from a category tree or sub-tree (but could be used for 'global' keys too)\n\t//Optionally filter for just one of the top-level library cats (customer or global), in which case the count applies just to that part of the library\n\tremoveFileAssignmentsForKey: function(key, tree, filterTopCatID){\n\t\tfor (var index in tree) {\n\t\t\t//Optionally ignore all top-level cats except for the one we're interested in (filterTopCatID)\n\t\t\tif((filterTopCatID != null) && (index != filterTopCatID)){\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\tif(tree[index].assignments[key] != null){\n\t\t\t\ttree[index].assignments[key] = undefined; //performance boost over delete (and as it happens, node is completely removed by next localStorage save/reload anyway)\n\t\t\t}\n\t\t\t//Process this category's sub cats\n\t\t\tthis.removeFileAssignmentsForKey(key, tree[index].children); \n\t\t}\n\t},\n\t//Currently used to recursively ADD file assignments for a customer to a category tree or sub-tree (but could be used for 'global' keys too)\n\t//This merges the new data in, leaving other customer data, if any, intact\n\t//Optionally filter for just one of the top-level library cats (customer or global), in which case the additions apply just to that part of the library\n\t//[Note: key is currently unnecessary, as the sourceTree passed in is always key-specific data]\n\tmergeFileAssignmentsForKey: function(key, sourceTree, destTree, filterTopCatID){\n\t\tfor (var index in sourceTree) {\n\t\t\t//Optionally ignore all top-level cats except for the one we're interested in (filterTopCatID)\n\t\t\tif((filterTopCatID != null) && (index != filterTopCatID)){\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\t//Skip recursion and set directly when dealing with primitive values\n\t\t\t//Additionally skip recursion and set directly if array (the all-important customer file assignment)\n\t\t\tif(_.isObject(sourceTree[index]) && !_.isArray(sourceTree[index])){ \n\t\t\t\tif(!destTree[index]){\n\t\t\t\t\tdestTree[index] = {}; //our library data structures are all objects (apart from customer file assignment arrays)\n\t\t\t\t}\n\t\t\t\tthis.mergeFileAssignmentsForKey(key, sourceTree[index], destTree[index]);\n\t\t\t}else{\n\t\t\t\tdestTree[index] = sourceTree[index];\n\t\t\t}\n\t\t}\n\t},\n\t\n\t//Obtain (relevant) store data for server debug submission\n\texportData: function(){\n\t\t//Explicity set up the valid JSON return string (until this store is restructured to store all keys in an object rather than separate module-level variables)\n\t\treturn '{' + \n\t\t\t'\"categories\":'\t\t+ JSON.stringify(_categories) + \",\" +\n\t\t\t'\"files\":' \t\t\t+ JSON.stringify(_files) + \",\" +\n\t\t\t'\"libraryMeta\":'\t+ JSON.stringify(_libraryMeta) +\n\t\t'}';\n\t}\n});\n\nDispatcher.register(function(action){\n\tswitch(action.actionType){\n\t\tcase Actions.INITIALISE:\n\t\t\t//Load any potentially previously cached library data\n\t\t\tif(localStorage.libraryCategories){\n\t\t\t\t_categories = JSON.parse(localStorage.libraryCategories);\n\t\t\t}\n\t\t\tif(localStorage.libraryFiles){\n\t\t\t\t_files = JSON.parse(localStorage.libraryFiles);\n\t\t\t}\n\t\t\tif(localStorage.libraryMeta){\n\t\t\t\t_libraryMeta = JSON.parse(localStorage.libraryMeta);\n\t\t\t}\n\t\t\tLibraryStore.emitChange();\n\t\t\tbreak;\n\t\tcase Actions.LIBRARY_REFRESH:\n\t\t\t//Resolved in some way, either: Status.OK or Status.PARTIAL\n\t\t\tif(action.actionStatus == Status.OK || action.actionStatus == Status.PARTIAL){\n\t\t\t\tvar metaKey;\n\t\t\t\t\n\t\t\t\t//Customer (rather than global) refresh\n\t\t\t\tif((action.customerID != null) && (action.customerID > 0)){\n\t\t\t\t\tif(!_categories[util.customerLibraryCategoryID]){\n\t\t\t\t\t\t_categories[util.customerLibraryCategoryID] = {}; //will be properly set up by mergeFileAssignmentsForKey() below\n\t\t\t\t\t}else{\n\t\t\t\t\t\t//Remove all previous file assignment nodes for this customer (within the customer categories and sub-categories)\n\t\t\t\t\t\tLibraryStore.removeFileAssignmentsForKey(action.customerID, _categories, util.customerLibraryCategoryID);\n\t\t\t\t\t}\n//console.log('has:', _.has(_categories, util.customerLibraryCategoryID + '.children.4.assignments.14362'));\n//console.log('get:', _.get(_categories, util.customerLibraryCategoryID + '.children.4.assignments.14362'));\t\t\t\t\t\n\t\t\t\t\tif(!_.isEmpty(action.categoryData[util.customerLibraryCategoryID])){\n\t\t\t\t\t\t//Add the new category file data for this customer (leaving other customers intact, if any)\n\t\t\t\t\t\tLibraryStore.mergeFileAssignmentsForKey(action.customerID, action.categoryData[util.customerLibraryCategoryID], _categories[util.customerLibraryCategoryID]);\n\t\t\t\t\t\t//Because mergeFileAssignmentsForKey() works at any level of the tree, we can do the above. But we could also do this:\n\t\t\t\t\t\t//LibraryStore.mergeFileAssignmentsForKey(action.customerID, action.categoryData, _categories, util.customerLibraryCategoryID);\n\t\t\t\t\t\t\n\t\t\t\t\t\t//_.defaultsDeep(_categories[util.customerLibraryCategoryID], action.categoryData[util.customerLibraryCategoryID]); \n\t\t\t\t\t\t//_.defaultsDeep(_categories, action.categoryData); //_.assign(_categories, action.categoryData);\n\t\t\t\t\t}\n\t\t\t\t\tmetaKey = action.customerID;\n\t\t\t\t}else{\n\t\t\t\t\t//Currently in the global library case we can simply overwrite the existing data with the new\t\t\t\t\n\t\t\t\t\t_categories[util.globalLibraryCategoryID] = action.categoryData[util.globalLibraryCategoryID];\n\t\t\t\t\tmetaKey = 'global';\n\t\t\t\t}\n\n\t\t\t\t//add/overwrite into files storage\n\t\t\t\t_.assign(_files, action.fileData);\n\t\t\t\t\n\t\t\t\t//update meta data (currently just last refresh timestamp)\n\t\t\t\tif(!_libraryMeta[metaKey]){\n\t\t\t\t\t_libraryMeta[metaKey] = {};\n\t\t\t\t}\n\t\t\t\t_libraryMeta[metaKey].refreshed = util.getUnixTime(); \n\n\t\t\t\t//Additionally cache in localStorage for re-use across multiple sessions (until library refreshed again)\n\t\t\t\tlocalStorage.libraryCategories = JSON.stringify(_categories);\n\t\t\t\tlocalStorage.libraryFiles = JSON.stringify(_files);\n\t\t\t\tlocalStorage.libraryMeta = JSON.stringify(_libraryMeta);\n\t\t\t}\n\t\t\t_status = action.actionStatus;\n\t\t\tLibraryStore.emitChange();\n\t\t\tbreak;\n\t\tcase Actions.USER_DELETE_DATA:\n\t\t\t_categories = {};\n\t\t\t_files = {}; //(technically unnecessary, but let's keep things fresh for the new user)\n\t\t\t_libraryMeta = {};\n\t\t\t//Additionally update localStorage cache\n\t\t\tlocalStorage.libraryCategories = JSON.stringify(_categories);\n\t\t\tlocalStorage.libraryFiles = JSON.stringify(_files);\n\t\t\tlocalStorage.libraryMeta = JSON.stringify(_libraryMeta);\n\t\t\t//Safeguard: emit a change event (necessary?)\n\t\t\tLibraryStore.emitChange();\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\t//nothing\t\n\t}\n});\n\nmodule.exports = LibraryStore;","\"use strict\";\n\nimport React from 'react';\n\n/*Based on https://github.com/abdennour/react-progressbar*/\nclass ProgressBar extends React.Component {\n\tstatic propTypes = {\n\t\tcompleted: React.PropTypes.number,\n\t\tcolour: React.PropTypes.string,\n\t\tanimation: React.PropTypes.number,\n\t\theight: React.PropTypes.oneOfType([\n\t\t\tReact.PropTypes.string,\n\t\t\tReact.PropTypes.number\n\t\t])\n\t};\n\t\n\tstatic defaultProps = {\n\t\tcompleted: 0,\n\t\tcolour: '#3BBEFF',\n\t\tanimation: 200,\n\t\theight: 10\n\t};\n\t\n\trender() {\n\t\tconst {completed, colour, animation, height, className, children, ...rest} = this.props;\n\t\tconst style = {\n\t\t\tbackgroundColor: colour,\n\t\t\twidth: completed + '%',\n\t\t\ttransition: `width ${animation}ms`,\n\t\t\theight: height\n\t\t};\n\n\t\treturn (\n\t\t\t<div className={className || \"progressbar-container\"} {...rest}>\n\t\t\t\t<div className=\"progressbar-progress\" style={style}>{children}</div>\n\t\t\t</div>\n\t\t);\n\t}\n};\n\nexport default ProgressBar;","\"use strict\";\n\nimport React from 'react';\nimport Spinner from '../common/spinner';\nimport ProgressBar from '../common/progressBar';\n\nclass ProgressModal extends React.Component {\n\tstatic propTypes = {\n\t\tpercentage: React.PropTypes.number,\n\t\ttitle: React.PropTypes.string,\n\t\tdescription: React.PropTypes.string,\n\t\tisLoading: React.PropTypes.bool\n\t};\n\t\n\tstatic defaultProps = {\n\t\tpercentage: 0,\n\t\ttitle: 'Progress',\n\t\tdescription: '',\n\t\tisLoading: false\n\t};\n\t\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"modal fade in\" style={{display:'block'}} tabIndex=\"-1\" role=\"dialog\">\n\t\t\t\t<div className=\"modal-dialog\">\n\t\t\t\t\t<div className=\"modal-content\">\n\t\t\t\t\t\t\n\t\t\t\t\t\t<div className=\"modal-header\">\n\t\t\t\t\t\t\t<h4 className=\"modal-title\">{this.props.title}</h4>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\n\t\t\t\t\t\t<div className=\"modal-body\">\n\t\t\t\t\t\t\t<div style={{textAlign: 'center'}}>\n\t\t\t\t\t\t\t\t<Spinner isVisible={this.props.isLoading} />\n\t\t\t\t\t\t\t\t{this.props.description}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\n\t\t\t\t\t\t<div className=\"modal-footer\">\n\t\t\t\t\t\t\t<ProgressBar completed={this.props.percentage} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n};\n\nexport default ProgressModal;","\"use strict\";\n\nimport React from 'react';\n\nclass PromptModal extends React.Component {\n\tstatic propTypes = {\n\t\tdescription: React.PropTypes.string,\n\t\tonYes: React.PropTypes.func.isRequired,\n\t\tonNo: React.PropTypes.func.isRequired\n\t};\n\t\n\tstatic defaultProps = {\n\t\tdescription: 'Are you sure?'\n\t};\n\t\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"modal fade in\" style={{display:'block'}} tabIndex=\"-1\" role=\"dialog\">\n\t\t\t\t<div className=\"modal-dialog\">\n\t\t\t\t\t<div className=\"modal-content\">\n\t\t\t\t\t\t\n\t\t\t\t\t\t<div className=\"modal-body\">\n\t\t\t\t\t\t\t<div style={{textAlign: 'center'}}>\n\t\t\t\t\t\t\t\t{this.props.description}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\n\t\t\t\t\t\t<div className=\"modal-footer\" style={{textAlign: 'center'}}>\n\t\t\t\t\t\t\t<button type=\"button\" className=\"btn btn-primary\" onClick={this.props.onYes}><i className=\"fa fa-check\"></i> Yes</button>\n        \t\t\t\t\t<button type=\"button\" className=\"btn btn-primary\" onClick={this.props.onNo}><i className=\"fa fa-close\"></i> No</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n};\n\nexport default PromptModal;","\"use strict\";\n\nimport React from 'react';\nvar _ = require('lodash');\nvar ProductStore = require('../../stores/productStore');\n\nclass CategorySelection extends React.Component {\n\tstatic propTypes = {\n\t\tcategories: React.PropTypes.array.isRequired,\n\t\tselections: React.PropTypes.array,\n\t\tonSelect: React.PropTypes.func.isRequired,\n\t\tonDeselect: React.PropTypes.func.isRequired,\n\t\tisOpen: React.PropTypes.bool\n\t};\n\t\n\tstatic defaultProps = {\n\t\tselections: [],\n\t\tisOpen: false\n\t};\n\t\n\t/*handleCategorySelection = (event) => {\n\t\tevent.preventDefault();\n\t\tthis.props.onSelect(parseInt(event.target.dataset['id']));\n\t}*/\n\t\n\thandleCategoryDeselection = (event) => {\n\t\tevent.preventDefault();\n\t\tthis.props.onDeselect(parseInt(event.currentTarget.dataset['id']));\n\t}\n\t\n\ttoggleCategorySelection = (event) => {\n\t\tevent.preventDefault();\n\t\tconst target = event.target;\n\t\tif(target.dataset['selected'] == 1){\n\t\t\tthis.props.onDeselect(parseInt(target.dataset['id']));\n\t\t}else{\n\t\t\tthis.props.onSelect(parseInt(target.dataset['id']));\n\t\t}\n\t}\n\t\n\trenderCategoryTree = (categoryTree) => {\n\t\tlet cats = [];\n\t\t\n\t\tfor (var i = 0; i < categoryTree.length; i++) {\n\t\t\tlet cat = categoryTree[i];\n\t\t\tlet blnSelected = _.includes(this.props.selections, cat.id);\n\t\t\tcats.push(\n\t\t\t\t<div key={cat.id} className={\"panel cat-panel\" + (blnSelected ? \" panel-primary\" : \" panel-default\")}>\n\t\t\t\t\t<div className=\"panel-heading\" role=\"tab\" id={\"cat-title-\" + cat.id}>\n\t\t\t\t\t\t<h4 className=\"panel-title\">\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcat.children != null ?\n\t\t\t\t\t\t\t\t<a role=\"button\" data-toggle=\"collapse\" href={\"#cat-content-\" + cat.id}>{cat.name}</a> :\n\t\t\t\t\t\t\t\t<a role=\"button\" data-id={cat.id} data-selected={blnSelected ? 1 : 0} href=\"#\" onClick={this.toggleCategorySelection}>{cat.name}</a>\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t</h4>\n\t\t\t\t\t</div>\n\t\t\t\t\t{\n\t\t\t\t\t\tcat.children != null ?\n\t\t\t\t\t\t<div className=\"panel-collapse collapse\" role=\"tabpanel\" id={\"cat-content-\" + cat.id}>\n\t\t\t\t\t\t\t<div className=\"panel-body\">{ this.renderCategoryTree(cat.children) }</div>\n\t\t\t\t\t\t</div> : null\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t\t\n\t\treturn cats;\n\t}\n\t\n\trenderSelectedCategory = (categoryID) => {\n\t\t//[We are using ProductStore category look up, although not ideal pattern]\n\t\treturn (\n\t\t\t<div key={categoryID} className=\"panel panel-primary cat-panel panel-selection\">\n\t\t\t\t<div className=\"panel-heading extra-control\" role=\"tab\">\n\t\t\t\t\t<h4 className=\"panel-title\">\n\t\t\t\t\t\t{ ProductStore.getCategory(categoryID).name }\n\t\t\t\t\t</h4>\n\t\t\t\t\t<a className=\"panel-edit\" role=\"button\" data-id={categoryID} href=\"#\" onClick={this.handleCategoryDeselection}><i className=\"fa fa-close\"></i></a>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n\t\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"category-selection\">\n\t\t\t\t{\n\t\t\t\t\tthis.props.isOpen ?\n\t\t\t\t\t(\n\t\t\t\t\t\tthis.props.categories.length ?\n\t\t\t\t\t\tthis.renderCategoryTree(this.props.categories)\n\t\t\t\t\t\t:\n\t\t\t\t\t\t<div className=\"text-empty\">\n\t\t\t\t\t\t\tNo categories available\n\t\t\t\t\t\t</div>\n\t\t\t\t\t) \n\t\t\t\t\t:\n\t\t\t\t\t(\n\t\t\t\t\t\tthis.props.selections.length ?\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t{ this.props.selections.map(this.renderSelectedCategory) }\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t:\n\t\t\t\t\t\tnull\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t</div>\n\t\t);\n\t}\n};\n\nexport default CategorySelection;","\"use strict\";\n\nimport React from 'react';\nimport LazyImage from './lazyImage';\nimport SearchResultsInfo from './searchResultsInfo';\nvar util = require('../../util.js');\n\nclass ImagesModal extends React.Component {\n\tstatic propTypes = {\n\t\ttitle: React.PropTypes.string,\n\t\timages: React.PropTypes.array.isRequired,\n\t\tonClose: React.PropTypes.func.isRequired\n\t};\n\t\n\tstatic defaultProps = {\n\t\ttitle: null\n\t};\n\t\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tcurrentImageIndex: 0,\n\t\t\tavailableImageHeight: 0 //[Solution used for setting our vertical image space, for now]\n\t\t};\n\t}\n\t\n\tcomponentDidMount() {\n\t\tthis.updateAvailableImageHeight();\n\t\twindow.addEventListener('resize', this.updateAvailableImageHeight);\n\t}\n\t\n\tcomponentWillUnmount() {\n\t\twindow.removeEventListener('resize', this.updateAvailableImageHeight);\n\t}\n\t\n\tupdateAvailableImageHeight = () => {\n\t\tthis.setState({ \n\t\t\tavailableImageHeight: Math.round(window.innerHeight / 2) //[This seems a good enough value for now - but may need to be tweaked]\n\t\t});\n\t}\n\t\n\thandleImageChange = (event) => {\n\t\tevent.preventDefault();\n\t\tconst dir = event.target.dataset['dir'];\n\t\tthis.setState((prevState) => ({\n\t\t\tcurrentImageIndex: (\n\t\t\t\tdir == 'prev' ?\n\t\t\t\t(prevState.currentImageIndex < 1 ? this.props.images.length - 1 : prevState.currentImageIndex - 1) :\n\t\t\t\t(prevState.currentImageIndex > (this.props.images.length - 2) ? 0 : prevState.currentImageIndex + 1)\n\t\t\t)\n\t\t}));\n\t}\n\t\n\thandleClose = () => {\n\t\tthis.props.onClose();\n\t}\n\t\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"modal fade in\" style={{display:'block'}} tabIndex=\"-1\" role=\"dialog\">\n\t\t\t\t<div className=\"modal-dialog\">\n\t\t\t\t\t<div className=\"modal-content\">\n\t\t\t\t\t\t\n\t\t\t\t\t\t<div className=\"modal-header\">\n\t\t\t\t\t\t\t<button type=\"button\" className=\"close\" data-dismiss=\"modal\" onClick={this.handleClose}>&times;</button>\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tthis.props.title != null && this.props.title.length ?\n\t\t\t\t\t\t\t\t<h4 className=\"modal-title\">{this.props.title}</h4> : null\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\n\t\t\t\t\t\t<div className=\"modal-body\">\n\t\t\t\t\t\t\t<div className=\"modal-image\">\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tthis.props.images.map((image, idx) => (\n\t\t\t\t\t\t\t\t\t\t<LazyImage\n\t\t\t\t\t\t\t\t\t\t\tkey={image.id}\n\t\t\t\t\t\t\t\t\t\t\tstyle={{maxHeight: this.state.availableImageHeight}}\n\t\t\t\t\t\t\t\t\t\t\tplaceholderSpinnerStyle={{marginTop: Math.round(this.state.availableImageHeight / 4), marginBottom: Math.round(this.state.availableImageHeight / 4)}} \n\t\t\t\t\t\t\t\t\t\t\tsrc={util.sanitiseForSecureURL(image.image_url)}\n\t\t\t\t\t\t\t\t\t\t\tplaceholderSpinner={true}\n\t\t\t\t\t\t\t\t\t\t\tvisible={(this.state.currentImageIndex == idx)} />\n\t\t\t\t\t\t\t\t\t))\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.props.images.length > 1 ?\n\t\t\t\t\t\t\t<div className=\"modal-footer\">\n\t\t\t\t\t\t\t\t<div className=\"image-paging\">\n\t\t\t\t\t\t\t\t\t<SearchResultsInfo isVisible={true} info={{page: this.state.currentImageIndex + 1, pageSize: 1, total: this.props.images.length, totalPages: this.props.images.length}} />\n\t\t\t\t\t\t\t\t\t<nav>\n\t\t\t\t\t\t\t\t\t\t<ul className=\"pager\">\n\t\t\t\t\t\t\t\t\t\t\t<li className=\"previous\">\n\t\t\t\t\t\t\t\t\t\t\t\t<a href=\"#\" data-dir=\"prev\" onClick={this.handleImageChange}><span aria-hidden=\"true\">&lt;</span> Prev</a>\n\t\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t\t<li className=\"next\">\n\t\t\t\t\t\t\t\t\t\t\t\t<a href=\"#\" data-dir=\"next\" onClick={this.handleImageChange}>Next <span aria-hidden=\"true\">&gt;</span></a>\n\t\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t</nav>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div> : null\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n};\n\nexport default ImagesModal;","\"use strict\";\nvar Dispatcher = require('../dispatcher/appDispatcher');\nvar Actions = require('../constants/actionTypes');\nvar UserActions = require('./userActions');\nvar Status = require('../constants/actionStatuses');\nvar util = require('../util.js');\nvar _ = require('lodash');\n\nconst $ = window.$;\n//List our 'action creators' (e.g. refreshLibrary) that helpfully wrap our actions (payloads {} that are dispatched)\nvar LibraryActions = {\n\tdoAfterAccessCheck: function(action, args){\n\t\tif(action == 'refreshLibrary'){\n\t\t\t//Instruct dispatcher to tell all stores that this action is pending (ensure any visual indicators updated)\n\t\t\tDispatcher.dispatch({\n\t\t\t\tactionType: Actions.LIBRARY_REFRESH,\n\t\t\t\tactionStatus: Status.PENDING,\n\t\t\t\tcustomerID: (args != null ? args[0] : args) //for completeness\n\t\t\t});\n\t\t}\n\n\t\t//UserActions.checkAccess(function(){\n\t\t//\tthis[action].apply(null, args);\n\t\t//}.bind(this)); //ensure we have correct 'this' context in callback (namely LibraryActions)\n\t\tUserActions.checkAccess(this[action], args);\n\t},\n\t\n\trefreshLibrary: function(customerID){\n\t\t//Instruct dispatcher to tell all stores that a library refresh is pending (has begun)\n\t\tutil.dispatch({\n\t\t\tactionType: Actions.LIBRARY_REFRESH,\n\t\t\tactionStatus: Status.PENDING,\n\t\t\tcustomerID: customerID\n\t\t});\n\t\t\n\t\tlet returnDeferred = $.Deferred();\n\t\t\n\t\t//For now, when obtaining category files, let's request one after the other (we can investigate if/how many parallel AJAX requests might be feasible)\n\t\t\n\t\tvar customerRefresh = ((customerID != null) && (customerID > 0)); //customerID set to null signifies a 'global', rather than a customer, file library refresh\n\t\tvar arrRequestCats = []; //categories for which to obtain assigned files\n\t\tvar blnAllSuccessful = true;\n\t\tvar blnAllUnsuccessful = true;\n\t\tvar categoryData = {};\n\t\tvar fileData = {};\n\t\t\n\t\tfunction getCategoryFiles(requestCategory){\n\t\t\t$.ajax({\n\t\t\t\t//context: this,\n\t\t\t\turl: util.apiUrl + 'file/getAssignedFiles',\n\t\t\t\ttype: 'GET',\n\t\t\t\tdata: {'store_id': customerID, 'category_id': requestCategory.categoryID, date: util.getUnixTime()}, //customerID set to null signifies 'global' file library request\n\t\t\t\theaders: { \"Authorization\": util.getHTTPAuthString() },\n\t\t\t\tdataType: 'json'\n\t\t\t}).fail(function(){\n\t\t\t\tblnAllSuccessful = false;\n\t\t\t\t//Potentially mark this category as having unsuccessful file request?\n\t\t\t}).done(function(data){\n\t\t\t\tif(data.status){\n\t\t\t\t\tblnAllUnsuccessful = false;\n\t\t\t\t\t\n\t\t\t\t\t//Add to file data and add files assignment to category (for customer/global)\n\t\t\t\t\tif(data.results.length > 0){\n\t\t\t\t\t\tvar arrAssignedFileIDs = [];\n\t\t\t\t\t\tfor (var i = 0, l = data.results.length; i < l; i++) {\n\t\t\t\t\t\t\tfileData[data.results[i].id] = data.results[i];\n\t\t\t\t\t\t\tarrAssignedFileIDs.push(data.results[i].id);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t_.set(categoryData, (requestCategory.treePath + '.assignments.' + (customerRefresh ? customerID : 'global')), arrAssignedFileIDs);\n\t\t\t\t\t}\n\t\t\t\t}else{\n\t\t\t\t\tblnAllSuccessful = false;\n\t\t\t\t\t//Potentially mark this category as having unsuccessful file request?\n\t\t\t\t}\n\t\t\t}).always(function(){\n\t\t\t\t//We still have files to request\n\t\t\t\tif(arrRequestCats.length > 0){\n\t\t\t\t\t//Attempt to request the files for the next category\n\t\t\t\t\tgetCategoryFiles(arrRequestCats.shift());\n\t\t\t\t\t\n\t\t\t\t//We've requested all files\n\t\t\t\t}else{\n\t\t\t\t\tlet actionStatus = (blnAllSuccessful ? Status.OK : (blnAllUnsuccessful ? Status.ERROR : Status.PARTIAL));\n\t\t\t\t\t\n\t\t\t\t\t//Instruct dispatcher to tell all stores that a library refresh has either completed successfully,\n\t\t\t\t\t//or failed in some way (partially or completely)\n\t\t\t\t\tutil.dispatch({\n\t\t\t\t\t\tactionType: Actions.LIBRARY_REFRESH,\n\t\t\t\t\t\tactionStatus: actionStatus,\n\t\t\t\t\t\tcustomerID: customerID,\t\t\t//customerID set to null signifies a 'global', rather than a customer, file library refresh\n\t\t\t\t\t\tcategoryData: categoryData,\t\t//(will always have valid category data if we've reached this point)\n\t\t\t\t\t\tfileData: fileData\t\t\t\t//send what we have (may not contain all files if any file requests failed)\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\tif(actionStatus == Status.ERROR){\n\t\t\t\t\t\treturnDeferred.reject();\n\t\t\t\t\t}else{\n\t\t\t\t\t\treturnDeferred.resolve({ partial: (actionStatus == Status.PARTIAL) });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\t\n\t\t//Utility function (recursively build category tree by parsing flat tree data)\n\t\t//Additional files collection tracking functionality (last 2 arguments):\n\t\t//- flag for only collecting what/when is appropriate (for 'global' library or customer portion of tree) \n\t\t//- current tree path array for later assignment of files\n\t\tfunction parseTree(arrCats, parentID, blnCollectFiles, currCatTreePath){\n\t\t\tvar returnTree = {};\n\t\t\t\n\t\t\tfor (var i = 0, l = arrCats.length; i < l; i++) {\n\t\t\t\t//(Skip processed categories for efficiency)\n\t\t\t\tif(!arrCats[i].processed && arrCats[i].parent_id == parentID){\n\t\t\t\t\t//Mark category as processed\n\t\t\t\t\t//Could use splice() to remove elements, but that changes array indexes and may be slightly slower\n\t\t\t\t\tarrCats[i].processed = true;\n\t\t\t\t\tvar localCatTreePath;\n\n\t\t\t\t\tif(parentID == null){\n\t\t\t\t\t\t//This is a top-level category, so set the file collection flag if we're about to process the sub-tree relevant to this particular refresh type\n\t\t\t\t\t\tblnCollectFiles = (arrCats[i].category_id == (customerRefresh ? util.customerLibraryCategoryID : util.globalLibraryCategoryID));\n\t\t\t\t\t\t//Ensure our current tree path is reset\n\t\t\t\t\t\tlocalCatTreePath = '' + arrCats[i].category_id;\n\t\t\t\t\t\t//Add to file collection list if this is the top-level category for the appropriate sub-tree (relevant to this particular refresh type) and it contains files\n\t\t\t\t\t\tif(blnCollectFiles && arrCats[i].files > 0){\n\t\t\t\t\t\t\tarrRequestCats.push({categoryID: arrCats[i].category_id, treePath: localCatTreePath});\n\t\t\t\t\t\t}\n\t\t\t\t\t}else{\n\t\t\t\t\t\t//Update our current tree path\n\t\t\t\t\t\tlocalCatTreePath = currCatTreePath + '.children.' + arrCats[i].category_id;\t\t\t\n\t\t\t\t\t\t//Add to file collection list if this category is in the appropriate sub-tree and contains files\n\t\t\t\t\t\tif(blnCollectFiles && arrCats[i].files > 0){\n\t\t\t\t\t\t\tarrRequestCats.push({categoryID: arrCats[i].category_id, treePath: localCatTreePath});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t//Add to tree (keyed on cat ID) and process any children\n\t\t\t\t\treturnTree[arrCats[i].category_id] = {\n\t\t\t\t\t\t'category_id':\tarrCats[i].category_id, \n\t\t\t\t\t\t'name':\t\t\tarrCats[i].name, \n\t\t\t\t\t\t'assignments':\t{}, //file assignments (inserted later, if any)\n\t\t\t\t\t\t'children': \tparseTree(arrCats, arrCats[i].category_id, blnCollectFiles, localCatTreePath)\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\treturn (_.isEmpty(returnTree) ? null : returnTree); \n\t\t}\n\t\t\n\t\t//First obtain categories (and file counts) for this store/global\n\t\t$.ajax({\n\t\t\t//context: this,\n\t\t\turl: util.apiUrl + 'file/getCategoryIndex',\n\t\t\ttype: 'GET',\n\t\t\tdata: {'store_id': customerID, date: util.getUnixTime()}, //customerID set to null signifies 'global' file library request\n\t\t\theaders: { \"Authorization\": util.getHTTPAuthString() },\n\t\t\tdataType: 'json'\n\t\t}).fail(function(){\n\t\t\t//Instruct dispatcher to tell all stores that a library refresh has failed\n\t\t\tutil.dispatch({\n\t\t\t\tactionType: Actions.LIBRARY_REFRESH,\n\t\t\t\tactionStatus: Status.ERROR,\n\t\t\t\tcustomerID: customerID\n\t\t\t});\n\t\t\treturnDeferred.reject();\n\t\t}).done(function(data){\n\t\t\tif(data.status){\n\t\t\t\t//Category request successful, so now:\n\t\t\t\t//- build the multi-dim category tree data ready for dispatch (will be needed for merging into the LibraryStore category tree) \n\t\t\t\t//- build the necessary category request array and kick off the category file requests\n\t\t\t\tif(data.results.length > 0){\n\t\t\t\t\tcategoryData = parseTree(data.results, null, false, '');\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//If we have files to collect, request the files for the first category\n\t\t\t\tif(arrRequestCats.length > 0){\n\t\t\t\t\tblnAllUnsuccessful = false; //For now, let's ensure we communicate at least partial success given our successful category request (even if all subsequent file requests fail)\n\t\t\t\t\tgetCategoryFiles(arrRequestCats.shift());\n\t\t\t\t\t\n\t\t\t\t//If we have no library categories (and thus no files to collect, but should never be the case), or no files to collect, \n\t\t\t\t//instruct dispatcher to tell all stores that a library refresh has completed\n\t\t\t\t}else{\n\t\t\t\t\tutil.dispatch({\n\t\t\t\t\t\tactionType: Actions.LIBRARY_REFRESH,\n\t\t\t\t\t\tactionStatus: Status.OK,\n\t\t\t\t\t\tcustomerID: customerID,\n\t\t\t\t\t\tcategoryData: categoryData,\n\t\t\t\t\t\tfileData: fileData\n\t\t\t\t\t});\n\t\t\t\t\treturnDeferred.resolve();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}else{\n\t\t\t\t//Instruct dispatcher to tell all stores that a library refresh has failed\n\t\t\t\tutil.dispatch({\n\t\t\t\t\tactionType: Actions.LIBRARY_REFRESH,\n\t\t\t\t\tactionStatus: Status.ERROR,\n\t\t\t\t\tcustomerID: customerID\n\t\t\t\t});\n\t\t\t\treturnDeferred.reject();\n\t\t\t}\n\t\t});\n\t\t\n\t\treturn returnDeferred;\n\t},\n\t\n\t//Refresh of the file library data for ALL provided customer IDs\t\t\n\t//[Optionally refreshing the 'global' library too]\n\trefreshLibraryForCustomers: function(arrCustomerIDs, blnRefreshGlobal){\n\t\tif(blnRefreshGlobal == null){\n\t\t\tblnRefreshGlobal = true; //default to 'global' refresh too\n\t\t}\n\t\t\n\t\tarrCustomerIDs = arrCustomerIDs.slice(); //make a copy (since we're modifying it internally here and it's used in other functions too)\n\t\t\n\t\tif(blnRefreshGlobal){\n\t\t\tarrCustomerIDs.push(null); //add the 'global' refresh if necessary\n\t\t}\n\t\t\n\t\tlet returnDeferred = $.Deferred();\n\t\t\n\t\tif(!arrCustomerIDs.length){\n\t\t\treturnDeferred.resolve();\n\t\t}else{\n\t\t\t//Instruct dispatcher to tell all stores that a multi-customer library refresh is pending (has begun)?\n\t\t\t\n\t\t\tlet blnAllSuccessful = true;\n\t\t\tlet blnAllUnsuccessful = true;\n\t\t\t\n\t\t\tfunction refreshLibraryForCustomer(customerID){\n\t\t\t\tLibraryActions.refreshLibrary(customerID).fail(function(data){\n\t\t\t\t\tblnAllSuccessful = false;\n\t\t\t\t\tif(data != null && data.partial){\n\t\t\t\t\t\t//if partial qualifier, also ensure total failure not recorded\n\t\t\t\t\t\tblnAllUnsuccessful = false;\n\t\t\t\t\t}\n\t\t\t\t}).done(function(data){\n\t\t\t\t\tblnAllUnsuccessful = false;\n\t\t\t\t\tif(data != null && data.partial){\n\t\t\t\t\t\t//if partial qualifier, also ensure total success not recorded\n\t\t\t\t\t\tblnAllSuccessful = false;\n\t\t\t\t\t}\n\t\t\t\t}).always(function(data){\n//sumCompletionWeighting += queueItem.completionWeighting;\n//appUtil.setCurrentPercentageComplete(parseFloat( sumCompletionWeighting * 100 ));\n\t\t\t\t\t\n\t\t\t\t\t//We still have items to process\n\t\t\t\t\tif(arrCustomerIDs.length > 0){\n\t\t\t\t\t\t//refresh the next customer's library files\n\t\t\t\t\t\trefreshLibraryForCustomer(arrCustomerIDs.shift());\n\t\t\t\t\t\t\n\t\t\t\t\t//We've processed all items\n\t\t\t\t\t}else{\n\t\t\t\t\t\tlet queueStatus = (blnAllSuccessful ? Status.OK : (blnAllUnsuccessful ? Status.ERROR : Status.PARTIAL));\n\t\t\t\t\t\t\n\t\t\t\t\t\t//Instruct dispatcher to tell all stores that this multi-customer library refresh has completed?\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(queueStatus == Status.ERROR){\n\t\t\t\t\t\t\treturnDeferred.reject();\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\treturnDeferred.resolve({ partial: (queueStatus == Status.PARTIAL) });\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\t\n\t\t\t//Process the first item\n\t\t\trefreshLibraryForCustomer(arrCustomerIDs.shift());\n\t\t}\n\t\t\n\t\treturn returnDeferred;\n\t}\n};\n\nmodule.exports = LibraryActions;","\"use strict\";\n\n//Local app status (not server status)\nmodule.exports = {\n\tINCOMPLETE:\t11,\n\tPLACED:\t12\n};","\"use strict\";\n\n//Data entities involved in (for now) customer submissions\nmodule.exports = {\n\tCUSTOMER_DETAILS:\t'customer_details',\n\tCUSTOMER_LOCATIONS:\t'customer_locations',\n\tCUSTOMER_CONTACTS:\t'customer_contacts'\n};","\"use strict\";\n\nimport React from 'react';\nimport Spinner from '../common/spinner';\nimport SearchResultsInfo from '../common/searchResultsInfo';\n\nconst $ = window.$;\nvar CustomerRequestList = React.createClass({\n\tpropTypes: {\n\t\tsearchTerm: React.PropTypes.string,\n\t\tsearchPage: React.PropTypes.number,\n\t\tsearchPageSize: React.PropTypes.number,\n\t\tsearchTotal: React.PropTypes.number,\n\t\tsearchTotalPages: React.PropTypes.number,\n\t\tsearchResults: React.PropTypes.array,\n\t\tonSearch: React.PropTypes.func.isRequired,\n\t\tonRequest: React.PropTypes.func.isRequired,\n\t\tonFinish: React.PropTypes.func.isRequired,\n\t\tisLoading: React.PropTypes.bool\n\t},\n\tgetDefaultProps: function() {\n\t\treturn {\n\t\t\tsearchTerm: '',\n\t\t\tsearchPage: 1,\n\t\t\tsearchPageSize: null,\n\t\t\tsearchTotal: null,\n\t\t\tsearchTotalPages: null,\n\t\t\tsearchResults: [],\n\t\t\tisLoading: false\n\t\t};\n\t},\n\t\n\t//Holding 'requested' state for customers in this search component (only retained while component is alive - i.e. latest usage only)\n\t//getInitialState: function(){\n\t//\treturn {\n\t//\t\trequested: {} //keyed on customer ID's\n\t//\t};\n\t//},\n\t\n\tcomponentDidMount: function(){\n\t\t$('#customer-search').focus();\n\t\t//Do an initial search\n\t\tthis.props.onSearch(this.props.searchTerm, this.props.searchPage);\n\t},\n\t\n\thandleSearchTermChange: function(event) {\n\t\tvar searchTerm = event.target.value;\n\t\tthis.props.onSearch(searchTerm, 1);\n\t},\n\t\n\thandleSearchPageChange: function(event) {\n\t\tevent.preventDefault();\n\t\t\n\t\tconst searchPage = event.target.dataset['dir'] == 'prev' ? \n\t\t\t(this.props.searchPage > 1 ? this.props.searchPage - 1 : 1) : \n\t\t\t((this.props.searchTotalPages != null && this.props.searchPage < this.props.searchTotalPages) ? this.props.searchPage + 1 : this.props.searchPage);\n\t\t\n\t\tif(searchPage != this.props.searchPage){\n\t\t\tthis.props.onSearch(this.props.searchTerm, searchPage);\n\t\t}\t\n\t},\n\t\n\thandleCustomerRequest: function(customer) { //id\n\t\tthis.props.onRequest(customer);\n\t},\n\t\n\thandleClose: function() {\n\t\tthis.props.onFinish();\n\t},\n\t\n\trender: function(){\n\t\tvar createCustomerRow = function(customer){\n\t\t\t//<td><Link className={customer.was_requested ? \"btn btn-success disabled\" : (this.props.isLoading ? \"btn btn-primary disabled\" : \"btn btn-primary\")} role=\"button\" to={\"/calls/\" + customer.id}>{call.submitted ? 'Submitted' : (call.completed ? 'Completed' : 'Visit')}</Link></td>\n\t\t\treturn (\n\t\t\t\t<tr key={customer.id}>\n\t\t\t\t\t<td>\n\t\t\t\t\t\t<span>{customer.name}</span><br />\n\t\t\t\t\t\t{customer.unique_code ? <span className=\"text-primary small pull-left\">{customer.unique_code}</span> : null}\n\t\t\t\t\t</td>\n\t\t\t\t\t<td className=\"align-right\">\n\t\t\t\t\t\t<button className={this.props.isLoading ? \"btn btn-primary disabled\" : \"btn btn-primary\"} onClick={this.handleCustomerRequest.bind(this, {id: customer.id, name: customer.name})}>Request</button>\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t);\n\t\t};\n\t\t\n\t\treturn (\n\t\t\t<div className=\"modal fade in\" style={{display:'block'}} tabIndex=\"-1\" role=\"dialog\">\n\t\t\t\t<div className=\"modal-dialog\">\n\t\t\t\t\t<div className=\"modal-content\">\n\t\t\t\t\t\t\n\t\t\t\t\t\t<div className=\"modal-header\">\n\t\t\t\t\t\t\t<button type=\"button\" className=\"close\" data-dismiss=\"modal\" onClick={this.handleClose}>&times;</button>\n\t\t\t\t\t\t\t<h4 className=\"modal-title\">Request Customers</h4>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\n\t\t\t\t\t\t<div className=\"modal-body\">\n\t\t\t\t\t\t\t<input type=\"text\" className=\"form-control\" id=\"customer-search\" placeholder=\"Search\" value={this.props.searchTerm} onChange={this.handleSearchTermChange} autoComplete=\"off\" />\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t<div className=\"mor-list mor-list-paging mor-list-paging-spaced\">\n\t\t\t\t\t\t\t\t<Spinner isVisible={this.props.isLoading} />\n\t\t\t\t\t\t\t\t<SearchResultsInfo isVisible={!this.props.isLoading} info={{page: this.props.searchPage, pageSize: this.props.searchPageSize, total: this.props.searchTotal, totalPages: this.props.searchTotalPages}} />\n\t\t\t\t\t\t\t\t<nav>\n\t\t\t\t\t\t\t\t\t<ul className=\"pager\">\n\t\t\t\t\t\t\t\t\t\t<li className={this.props.searchPage == 1 ? 'previous disabled' : 'previous'}>\n\t\t\t\t\t\t\t\t\t\t\t<a href=\"#\" data-dir=\"prev\" onClick={this.handleSearchPageChange}><span aria-hidden=\"true\">&lt;</span> Prev</a>\n\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t<li className={(this.props.searchTotalPages == null || this.props.searchTotalPages <= 1 || this.props.searchPage == this.props.searchTotalPages) ? 'next disabled' : 'next'}>\n\t\t\t\t\t\t\t\t\t\t\t<a href=\"#\" data-dir=\"next\" onClick={this.handleSearchPageChange}>Next <span aria-hidden=\"true\">&gt;</span></a>\n\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t</nav>\n\t\t\t\t\t\t\t\t{ \n\t\t\t\t\t\t\t\tthis.props.searchResults.length ?\n\t\t\t\t\t\t\t\t<table className=\"table table-striped table-spaced\">\n\t\t\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t\t\t{this.props.searchResults.map(createCustomerRow, this)}\n\t\t\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t\t\t</table>\n\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t<div className={this.props.isLoading ? 'hidden' : 'text-muted'}>\n\t\t\t\t\t\t\t\t\tNo customers found\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\n\t\t\t\t\t\t<div className=\"modal-footer\">\n\t\t\t\t\t\t\t<button type=\"button\" className=\"btn btn-primary\" data-dismiss=\"modal\" onClick={this.handleClose}>Done</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n});\n\nexport default CustomerRequestList;","\"use strict\";\n\nimport React from 'react';\nimport Signature from '../../lib/react-another-signature-pad/index';\nvar toastr = require('toastr');\nvar util = require('../../util.js');\n\nclass SignatureModal extends React.Component {\n\tstatic propTypes = {\n\t\ttitle: React.PropTypes.string,\n\t\tsignature: React.PropTypes.object.isRequired,\n\t\tonSave: React.PropTypes.func.isRequired,\n\t\tonClose: React.PropTypes.func.isRequired\n\t\t//onCancel: React.PropTypes.func.isRequired,\n\t\t//onFinish: React.PropTypes.func.isRequired,\n\t};\n\t\n\tstatic defaultProps = {\n\t\ttitle: 'Signature'\n\t};\n\t\n\tconstructor(props) {\n\t\tsuper(props);\n\t\t\n\t\t//Setup internal working/editable state (this.signature), based on provided props\n\t\t//Plain assignment rather than copy (it's a reference to parent authoritative state anyway)\n\t\tthis.signature = props.signature;\n\t\t\n\t\tthis.state = {\n\t\t\tclearSignature: null, //flag for purposes of clearing the signature canvas\n\t\t\toldSignaturePresent: (props.signature.file != null && props.signature.file.length) //(when a previously completed signature is reopened) \n\t\t};\n\t}\n\t\n\tcomponentWillReceiveProps(nextProps){\n\t\tthis.signature = nextProps.signature;\n\t}\n\t\n\tsaveSignature = () => {\n\t\t//Save (and thus also update display - props from parent)\n\t\tthis.props.onSave(this.signature);\n\t}\n\t\n\tsignatureIsValid = () => {\n\t\tif(\tthis.signature.name == null || !this.signature.name.length ||\n\t\t\tthis.signature.file == null || !this.signature.file.length){\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\treturn true;\n\t} \n\t\n\thandleSignatureChange = (data, isSignatureDataPresent) => {\n\t\t//Only save the image data if there is any real user drawing present on the blank canvas\n\t\t//[i.e. we don't want to save the image data for a blank canvas]\n\t\tif(isSignatureDataPresent){\n\t\t\t//We submit image data encoded as is (base 64) \n\t\t\t//Additionally perform a string replacement to encode all '+' as '%2B' (will be URL-decoded back again on server)\n\t\t\tthis.signature.file = data.split(',')[1].replace(/\\+/g, \"%2B\");\n\t\t\tthis.saveSignature();\n\t\t}\n\t}\n\t\n\thandleSignatureClear = () => {\n\t\tthis.setState((prevState) => (\n\t\t\tprevState.oldSignaturePresent ?\n\t\t\t{ oldSignaturePresent: false }\n\t\t\t:\n\t\t\t{ clearSignature: util.getUnixTimeInMs() }\n\t\t));\n\t\t//this.setState({\n\t\t//\tclearSignature: util.getUnixTimeInMs()\n\t\t//});\n\t\t\n\t\tthis.signature.file = '';\n\t\tthis.saveSignature();\n\t}\n\t\n\thandleTextChange = (event) => {\n\t\tthis.signature[event.target.dataset['field']] = event.target.value;\n\t\tthis.saveSignature();\n\t}\n\t\n\t//For now, let's do the validation here as well, i.e. handleFinished()\n\t/*handleClose = () => {\n\t\tthis.props.onClose();\n\t}*/\n\t\n\thandleCancel = () => {\n\t\tthis.signature.file = '';\n\t\tthis.signature.name = '';\n\t\tthis.signature.comments = '';\n\t\tthis.saveSignature();\n\t\tthis.props.onClose();\n\t}\n\t\n\thandleFinished = () => {\n\t\t//this.saveSignature(); //just in case?\n\t\tif(!this.signatureIsValid()){\n\t\t\ttoastr.error('Please provide a signature and name');\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tthis.props.onClose();\n\t}\n\t\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"modal fade in\" style={{display:'block'}} tabIndex=\"-1\" role=\"dialog\">\n\t\t\t\t<div className=\"modal-dialog\">\n\t\t\t\t\t<div className=\"modal-content\">\n\t\t\t\t\t\t\n\t\t\t\t\t\t<div className=\"modal-header\">\n\t\t\t\t\t\t\t<button type=\"button\" className=\"close\" data-dismiss=\"modal\" onClick={this.handleFinished}>&times;</button>\n\t\t\t\t\t\t\t<h4 className=\"modal-title\">{this.props.title}</h4>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\n\t\t\t\t\t\t<div className=\"modal-body\">\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tthis.state.oldSignaturePresent ?\n\t\t\t\t\t\t\t\t<div className=\"form-group signature-pad\">\n\t\t\t\t\t\t\t\t\t<img src={'data:image/png;base64,' + this.signature.file} />\n\t\t\t\t\t\t\t\t\t<button type=\"button\" className=\"close signature-pad-clear\" onClick={this.handleSignatureClear}>&times;</button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t<div className=\"form-group signature-pad\">\n\t\t\t\t\t\t\t\t\t<Signature minWidth=\"0.8\" maxWidth=\"1.5\" backgroundColor=\"rgb(255,255,255)\" mimeType=\"image/jpeg\" quality=\"0.8\" onEnd={this.handleSignatureChange} clear={this.state.clearSignature} />\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t(this.signature.file != null && this.signature.file.length) ?\n\t\t\t\t\t\t\t\t\t\t<button type=\"button\" className=\"close signature-pad-clear\" onClick={this.handleSignatureClear}>&times;</button> :\n\t\t\t\t\t\t\t\t\t\tnull\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t\t\t<input type=\"text\" className=\"form-control\" id=\"signature-name\" data-field=\"name\" placeholder=\"Name\" value={this.props.signature.name} onChange={this.handleTextChange} autoComplete=\"off\" />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"form-group\" style={{marginBottom: 0}}>\n\t\t\t\t\t\t\t\t<textarea className=\"form-control\" id=\"signature-comments\" data-field=\"comments\" placeholder=\"Comments\" rows=\"3\" value={this.props.signature.comments} onChange={this.handleTextChange} autoComplete=\"off\" />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\n\t\t\t\t\t\t<div className=\"modal-footer\" style={{textAlign: 'center'}}>\n        \t\t\t\t\t<button type=\"button\" className=\"btn btn-primary\" onClick={this.handleCancel}><i className=\"fa fa-close\"></i> Cancel</button>\n\t\t\t\t\t\t\t<button type=\"button\" className=\"btn btn-primary\" onClick={this.handleFinished}><i className=\"fa fa-check\"></i> Done</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n};\n\nexport default SignatureModal;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nfunction Point(x, y, time) {\n  this.x = x;\n  this.y = y;\n  this.time = time || new Date().getTime();\n}\n\nPoint.prototype.velocityFrom = function (start) {\n  return this.time !== start.time ? this.distanceTo(start) / (this.time - start.time) : 1;\n};\n\nPoint.prototype.distanceTo = function (start) {\n  return Math.sqrt(Math.pow(this.x - start.x, 2) + Math.pow(this.y - start.y, 2));\n};\n\nexports.default = Point;\n//# sourceMappingURL=point.js.map\n","\"use strict\";\n\nimport React from 'react';\nvar _ = require('lodash');\nvar FileList = require('./fileList');\n\nvar CategoryList = React.createClass({\n\tpropTypes: {\n\t\tassignmentKey: React.PropTypes.oneOfType([\n\t\t\tReact.PropTypes.number.isRequired,\n\t\t\tReact.PropTypes.string.isRequired\n\t\t]), //(customer ID or 'global')\n\t\tfilterTopCategoryId: React.PropTypes.number,\n\t\tcategoryTree: React.PropTypes.object, //.isRequired,\n\t\tcategoryTreeCounts: React.PropTypes.object, //.isRequired,\n\t\tisLoading: React.PropTypes.bool\n\t},\n\tgetDefaultProps: function() {\n\t\treturn {\n\t\t\tfilterTopCategoryId: null,\n\t\t\tcategoryTree: {},\n\t\t\tcategoryTreeCounts: {},\n\t\t\tisLoading: false\n\t\t};\n\t},\n\t//[Could alternatively pass the current tree path (and then use _.get()) rather than the full tree counts object? But this should be equally, maybe even more, efficient]\n\trenderCategoryPanels: function(catTree, catTreeCounts, filterTopCatID){\n\t\tvar panels = [];\n\t\tfor (var catID in catTree) {\n\t\t\t//Optionally ignore all top-level cats except for the one we're interested in (filterTopCatID)\n\t\t\tif((filterTopCatID != null) && (catID != filterTopCatID)){\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\t//We also use the presence of filterTopCatID below as a flag to treat the (filtered/cherry-picked) top cat a little differently \n\t\t\tpanels.push(\n\t\t\t\t<div key={catID} className={\"panel panel-default cat-panel\" + ((catTreeCounts[catID].fileCount == 0 && _.isEmpty(catTree[catID].children)) ? \" cat-empty\" : \"\")}>\n\t\t\t\t\t<div className=\"panel-heading\" role=\"tab\" id={\"cat-title-\" + catID}>\n\t\t\t\t\t\t<h4 className=\"panel-title\">\n\t\t\t\t\t\t\t<a role=\"button\" data-toggle=\"collapse\" href={\"#cat-content-\" + catID}><span>{filterTopCatID != null ? null : catTree[catID].name}</span><div className=\"cat-count\">{catTreeCounts[catID].fileCount}</div></a>\n\t\t\t\t\t\t</h4>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className={\"panel-collapse collapse\" + (filterTopCatID != null ? \" in\" : \"\")} role=\"tabpanel\" id={\"cat-content-\" + catID}>\n\t\t\t\t\t\t{ !_.isEmpty(catTree[catID].assignments[this.props.assignmentKey]) ? <FileList files={catTree[catID].assignments[this.props.assignmentKey]} categoryID={catID} isLoading={this.props.isLoading} /> : null }\n\t\t\t\t\t\t{/* <FileList files={!_.isEmpty(catTree[catID].assignments[this.props.assignmentKey]) ? catTree[catID].assignments[this.props.assignmentKey] : []} categoryID={catID} isLoading={this.props.isLoading} /> */}\n\t\t\t\t\t\t{ !_.isEmpty(catTree[catID].children) ? <div className=\"panel-body\">{this.renderCategoryPanels(catTree[catID].children, catTreeCounts[catID].children)}</div> : null }\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t\treturn panels;\n\t},\n\trender: function(){\n\t\treturn (\n\t\t\t<div className=\"panel-group mor-list\" role=\"tablist\">\n\t\t\t\t<div className={this.props.isLoading ? 'cssload-container show' : 'hidden'}><div className={this.props.isLoading ? 'cssload-wheel' : ''}></div></div>\n\t\t\t\t{ \n\t\t\t\t!_.isEmpty(this.props.categoryTree) ?\n\t\t\t\tthis.renderCategoryPanels(this.props.categoryTree, this.props.categoryTreeCounts, this.props.filterTopCategoryId)\n\t\t\t\t:\n\t\t\t\t<div className={this.props.isLoading ? 'hidden' : 'text-empty'}>\n\t\t\t\t\tPlease refresh to obtain library files\n\t\t\t\t</div>\n\t\t\t\t}\n\t\t\t</div>\n\t\t);\n\t}\n});\n\nexport default CategoryList;","\"use strict\";\n\nimport React from 'react';\nimport Spinner from '../common/spinner';\nimport SearchResultsInfo from '../common/searchResultsInfo';\n\nclass CustomerSelectList extends React.Component {\n\tstatic propTypes = {\n\t\tsearchTerm: React.PropTypes.string,\n\t\tsearchPage: React.PropTypes.number,\n\t\tsearchPageSize: React.PropTypes.number,\n\t\tsearchTotal: React.PropTypes.number,\n\t\tsearchTotalPages: React.PropTypes.number,\n\t\tsearchResults: React.PropTypes.array,\n\t\tonSearch: React.PropTypes.func.isRequired,\n\t\tonSelect: React.PropTypes.func.isRequired,\n\t\tonFinish: React.PropTypes.func.isRequired,\n\t\tisLoading: React.PropTypes.bool\n\t};\n\t\n\tstatic defaultProps = {\n\t\tsearchTerm: '',\n\t\tsearchPage: 1,\n\t\tsearchPageSize: null,\n\t\tsearchTotal: null,\n\t\tsearchTotalPages: null,\n\t\tsearchResults: [],\n\t\tisLoading: false\n\t};\n\t\n\tcomponentDidMount() {\n\t\t//$('#customer-search').focus(); //We're not doing this anymore for now, as it was decided we don't want to bring up the keyboard on Android\n\t\t//Do an initial search\n\t\tthis.props.onSearch(this.props.searchTerm, this.props.searchPage);\n\t}\n\t\n\thandleSearchTermChange = (event) => {\n\t\tconst searchTerm = event.target.value;\n\t\tthis.props.onSearch(searchTerm, 1);\n\t}\n\t\n\thandleSearchPageChange = (event) => {\n\t\tevent.preventDefault();\n\t\t\n\t\tconst searchPage = event.target.dataset['dir'] == 'prev' ? \n\t\t\t(this.props.searchPage > 1 ? this.props.searchPage - 1 : 1) : \n\t\t\t((this.props.searchTotalPages != null && this.props.searchPage < this.props.searchTotalPages) ? this.props.searchPage + 1 : this.props.searchPage);\n\t\t\n\t\tif(searchPage != this.props.searchPage){\n\t\t\tthis.props.onSearch(this.props.searchTerm, searchPage);\n\t\t}\t\n\t}\n\t\n\thandleCustomerSelection = (event) => {\n\t\tlet customer = {\n\t\t\t'id': event.target.dataset['id'],\n\t\t\t'name': event.target.dataset['name'],\n\t\t\t'is_approved_for_orders': event.target.dataset['approved']\n\t\t};\n\t\tthis.props.onSelect(customer);\n\t}\n\t\n\thandleClose = () => {\n\t\tthis.props.onFinish();\n\t}\n\t\n\tcreateCustomerRow = (customer) => (\n\t\t<tr key={customer.id}>\n\t\t\t<td>\n\t\t\t\t<span>{customer.name}</span><br />\n\t\t\t\t{customer.unique_code ? <span className=\"text-primary small pull-left\">{customer.unique_code}</span> : null}\n\t\t\t</td>\n\t\t\t<td className=\"align-right\">\n\t\t\t\t<button className={this.props.isLoading ? \"btn btn-primary disabled\" : \"btn btn-primary\"} \n\t\t\t\t\tdata-id={customer.id} data-name={customer.name} data-approved={customer.is_approved_for_orders} onClick={this.handleCustomerSelection}>Select</button>\n\t\t\t</td>\n\t\t</tr>\n\t)\n\t\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"modal fade in\" style={{display:'block'}} tabIndex=\"-1\" role=\"dialog\">\n\t\t\t\t<div className=\"modal-dialog\" style={{margin: 0}}>\n\t\t\t\t\t<div className=\"modal-content\">\n\t\t\t\t\t\t\n\t\t\t\t\t\t<div className=\"modal-header\">\n\t\t\t\t\t\t\t<button type=\"button\" className=\"close\" data-dismiss=\"modal\" onClick={this.handleClose}>&times;</button>\n\t\t\t\t\t\t\t<h4 className=\"modal-title\">Select Customer</h4>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\n\t\t\t\t\t\t<div className=\"modal-body\">\n\t\t\t\t\t\t\t<input type=\"text\" className=\"form-control\" id=\"customer-search\" placeholder=\"Search\" value={this.props.searchTerm} onChange={this.handleSearchTermChange} autoComplete=\"off\" />\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t<div className=\"mor-list mor-list-paging mor-list-paging-spaced\">\n\t\t\t\t\t\t\t\t<Spinner isVisible={this.props.isLoading} />\n\t\t\t\t\t\t\t\t<SearchResultsInfo isVisible={!this.props.isLoading} info={{page: this.props.searchPage, pageSize: this.props.searchPageSize, total: this.props.searchTotal, totalPages: this.props.searchTotalPages}} />\n\t\t\t\t\t\t\t\t<nav>\n\t\t\t\t\t\t\t\t\t<ul className=\"pager\">\n\t\t\t\t\t\t\t\t\t\t<li className={this.props.searchPage == 1 ? 'previous disabled' : 'previous'}>\n\t\t\t\t\t\t\t\t\t\t\t<a href=\"#\" data-dir=\"prev\" onClick={this.handleSearchPageChange}><span aria-hidden=\"true\">&lt;</span> Prev</a>\n\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t<li className={(this.props.searchTotalPages == null || this.props.searchTotalPages <= 1 || this.props.searchPage == this.props.searchTotalPages) ? 'next disabled' : 'next'}>\n\t\t\t\t\t\t\t\t\t\t\t<a href=\"#\" data-dir=\"next\" onClick={this.handleSearchPageChange}>Next <span aria-hidden=\"true\">&gt;</span></a>\n\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t</nav>\n\t\t\t\t\t\t\t\t{ \n\t\t\t\t\t\t\t\tthis.props.searchResults.length ?\n\t\t\t\t\t\t\t\t<table className=\"table table-striped table-spaced\">\n\t\t\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t\t\t{ this.props.searchResults.map(this.createCustomerRow) }\n\t\t\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t\t\t</table>\n\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t<div className={this.props.isLoading ? 'hidden' : 'text-muted'}>\n\t\t\t\t\t\t\t\t\tNo customers found\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\n\t\t\t\t\t\t<div className=\"modal-footer\">\n\t\t\t\t\t\t\t<button type=\"button\" className=\"btn btn-primary\" data-dismiss=\"modal\" onClick={this.handleClose}>Done</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n};\n\nexport default CustomerSelectList;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _point = require('./point');\n\nvar _point2 = _interopRequireDefault(_point);\n\nvar _bezier = require('./bezier');\n\nvar _bezier2 = _interopRequireDefault(_bezier);\n\nvar _util = require('./util');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Signature = function (_React$Component) {\n  _inherits(Signature, _React$Component);\n\n  function Signature(props) {\n    _classCallCheck(this, Signature);\n\n    var _this = _possibleConstructorReturn(this, (Signature.__proto__ || Object.getPrototypeOf(Signature)).call(this, props));\n\n    _this.style = _this.props.style || {};\n    _this.style.width = _this.style.width || '100%';\n    _this.style.height = _this.style.height || '100%';\n    _this.style.msTouchAction = 'none';\n    _this.style.touchAction = 'none';\n    _this.clearVal = 0;\n\n    _this.handleMouseDown = _this.handleMouseDown.bind(_this);\n    _this.handleMouseMove = _this.handleMouseMove.bind(_this);\n    _this.handleMouseUp = _this.handleMouseUp.bind(_this);\n    _this.handleMouseLeave = _this.handleMouseLeave.bind(_this);\n    _this.handleTouchStart = _this.handleTouchStart.bind(_this);\n    _this.handleTouchMove = _this.handleTouchMove.bind(_this);\n    _this.handleTouchEnd = _this.handleTouchEnd.bind(_this);\n    _this.strokeBegin = _this.strokeBegin.bind(_this);\n    _this.strokeUpdate = _this.strokeUpdate.bind(_this);\n    _this.strokeEnd = _this.strokeEnd.bind(_this);\n    _this.transformData = _this.transformData.bind(_this);\n    _this.isDataPresent = _this.isDataPresent.bind(_this);\n    _this.createPoint = _this.createPoint.bind(_this);\n    _this.addPoint = _this.addPoint.bind(_this);\n    _this.calculateCurveWidths = _this.calculateCurveWidths.bind(_this);\n    _this.drawPoint = _this.drawPoint.bind(_this);\n    _this.drawCurve = _this.drawCurve.bind(_this);\n    _this.drawDot = _this.drawDot.bind(_this);\n    _this.clear = _this.clear.bind(_this);\n    _this.reset = _this.reset.bind(_this);\n    return _this;\n  }\n\n  _createClass(Signature, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.velocityFilterWeight = this.props.velocityFilterWeight || 0.7;\n      this.minWidth = this.props.minWidth || 0.5;\n      this.maxWidth = this.props.maxWidth || 2.5;\n      this.throttle = this.props.throttle || 16; // in miliseconds\n      this.strokeMoveUpdate = this.throttle ? (0, _util.throttle)(this.strokeUpdate, this.throttle) : this.strokeUpdate;\n      this.strokeMoveUpdate = this.strokeUpdate;\n      this.dotSize = this.props.dotSize || (this.minWidth + this.maxWidth) / 2;\n      this.penColor = this.props.penColor || 'black';\n      this.backgroundColor = this.props.backgroundColor || 'rgba(0,0,0,0)';\n      this.mimeType = this.props.mimeType || 'image/png';\n      this.blob = this.props.blob || false;\n      this.trim = this.props.trim || false;\n      this.quality = this.props.quality || 1.0;\n\n      var canvas = this.canvas;\n      canvas.width = canvas.offsetWidth;\n      canvas.height = canvas.offsetHeight;\n      this.ctx = canvas.getContext('2d');\n      this.clear();\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      if (nextProps.clear && nextProps.clear !== this.clearVal) {\n        this.clearVal = nextProps.clear;\n        this.clear();\n      }\n    }\n  }, {\n    key: 'handleMouseDown',\n    value: function handleMouseDown(event) {\n      if (event.button === 0) {\n        this.mouseButtonDown = true;\n        this.strokeBegin(event);\n      }\n    }\n  }, {\n    key: 'handleMouseMove',\n    value: function handleMouseMove(event) {\n      if (this.mouseButtonDown) {\n        this.strokeMoveUpdate(event);\n      }\n    }\n  }, {\n    key: 'handleMouseUp',\n    value: function handleMouseUp(event) {\n      if (event.button === 0 && this.mouseButtonDown) {\n        this.mouseButtonDown = false;\n        this.strokeEnd(event);\n      }\n    }\n  }, {\n    key: 'handleMouseLeave',\n    value: function handleMouseLeave(event) {\n      if (event.button === 0 && this.mouseButtonDown) {\n        this.mouseButtonDown = false;\n        this.strokeEnd(event);\n      }\n    }\n  }, {\n    key: 'handleTouchStart',\n    value: function handleTouchStart(event) {\n      if (event.targetTouches.length === 1) {\n        var touch = event.changedTouches[0];\n        this.strokeBegin(touch);\n      }\n    }\n  }, {\n    key: 'handleTouchMove',\n    value: function handleTouchMove(event) {\n      event.preventDefault();\n      var touch = event.targetTouches[0];\n      this.strokeMoveUpdate(touch);\n    }\n  }, {\n    key: 'handleTouchEnd',\n    value: function handleTouchEnd(event) {\n      var wasCanvasTouched = event.target === this.canvas;\n      if (wasCanvasTouched) {\n        event.preventDefault();\n        this.strokeEnd(event);\n      }\n    }\n  }, {\n    key: 'strokeBegin',\n    value: function strokeBegin(event) {\n      this.data.push([]);\n      this.reset();\n      this.strokeUpdate(event);\n\n      if (typeof this.props.onBegin === 'function') {\n        this.props.onBegin(event);\n      }\n    }\n  }, {\n    key: 'strokeUpdate',\n    value: function strokeUpdate(event) {\n      var x = event.clientX;\n      var y = event.clientY;\n\n      var point = this.createPoint(x, y);\n\n      var _addPoint = this.addPoint(point),\n          curve = _addPoint.curve,\n          widths = _addPoint.widths;\n\n      if (curve && widths) {\n        this.drawCurve(curve, widths.start, widths.end);\n      }\n\n      this.data[this.data.length - 1].push({\n        x: point.x,\n        y: point.y,\n        time: point.time\n      });\n    }\n  }, {\n    key: 'strokeEnd',\n    value: function strokeEnd() {\n      var canDrawCurve = this.points.length > 2;\n      var point = this.points[0];\n\n      if (!canDrawCurve && point) {\n        this.drawDot(point);\n      }\n\n      if (typeof this.props.onEnd === 'function') {\n        this.props.onEnd(this.transformData(), this.isDataPresent());\n      }\n    }\n  }, {\n    key: 'transformData',\n    value: function transformData() {\n      var type = String(this.mimeType).toLowerCase();\n      var data = void 0;\n      var canvas = void 0;\n      if (this.trim) {\n        canvas = (0, _util.trim)(this.canvas);\n      } else {\n        canvas = this.canvas;\n      }\n      if (type === 'image/jpeg' || 'image/png') {\n        data = canvas.toDataURL(type, this.quality);\n      } else {\n        type = 'image/png';\n        data = canvas.toDataURL(type, this.quality);\n      }\n      if (this.blob) {\n        // Not using toBlob since it's not supported by some browsers\n        var byteString = atob(data.split(',')[1]);\n        var mimeString = data.split(',')[0].split(':')[1].split(';')[0];\n        var array = new Uint8Array(byteString.length);\n        for (var i = 0; i < byteString.length; i += 1) {\n          array[i] = byteString.charCodeAt(i);\n        }\n        data = new Blob([array], { type: mimeString });\n      }\n      return data;\n    }\n  }, {\n    key: 'isDataPresent',\n    value: function isDataPresent() {\n    \treturn (0, _util.canvasHasData)(this.canvas);\n    }    \n  }, {\n    key: 'createPoint',\n    value: function createPoint(x, y, time) {\n      var rect = this.canvas.getBoundingClientRect();\n\n      return new _point2.default(x - rect.left, y - rect.top, time || new Date().getTime());\n    }\n  }, {\n    key: 'addPoint',\n    value: function addPoint(point) {\n      var points = this.points;\n      var tmp = void 0;\n      points.push(point);\n      if (points.length > 2) {\n        // To reduce the initial lag make it work with 3 points\n        // by copying the first point to the beginning.\n        if (points.length === 3) points.unshift(points[0]);\n        tmp = (0, _util.calculateCurveControlPoints)(points[0], points[1], points[2]);\n        var c2 = tmp.c2;\n        tmp = (0, _util.calculateCurveControlPoints)(points[1], points[2], points[3]);\n        var c3 = tmp.c1;\n        var curve = new _bezier2.default(points[1], c2, c3, points[2]);\n        var widths = this.calculateCurveWidths(curve);\n        // Remove the first element from the list,\n        // so that we always have no more than 4 points in points array.\n        points.shift();\n        return { curve: curve, widths: widths };\n      }\n      return {};\n    }\n  }, {\n    key: 'calculateCurveWidths',\n    value: function calculateCurveWidths(curve) {\n      var startPoint = curve.startPoint;\n      var endPoint = curve.endPoint;\n      var widths = { start: null, end: null };\n\n      var velocity = this.velocityFilterWeight * endPoint.velocityFrom(startPoint) + (1 - this.velocityFilterWeight) * this.lastVelocity;\n\n      var newWidth = this.strokeWidth(velocity);\n\n      widths.start = this.lastWidth;\n      widths.end = newWidth;\n\n      this.lastVelocity = velocity;\n      this.lastWidth = newWidth;\n\n      return widths;\n    }\n  }, {\n    key: 'strokeWidth',\n    value: function strokeWidth(velocity) {\n      return Math.max(this.maxWidth / (velocity + 1), this.minWidth);\n    }\n  }, {\n    key: 'drawPoint',\n    value: function drawPoint(x, y, size) {\n      this.ctx.moveTo(x, y);\n      this.ctx.arc(x, y, size, 0, 2 * Math.PI, false);\n      if (typeof this.props.onChange === 'function') {\n        this.props.onChange(false);\n      }\n    }\n  }, {\n    key: 'drawCurve',\n    value: function drawCurve(curve, startWidth, endWidth) {\n      var widthDelta = endWidth - startWidth;\n      var drawSteps = Math.floor(curve.length());\n\n      this.ctx.beginPath();\n\n      for (var i = 0; i < drawSteps; i += 1) {\n        // Calculate the Bezier (x, y) coordinate for this step.\n        var t = i / drawSteps;\n        var tt = t * t;\n        var ttt = tt * t;\n        var u = 1 - t;\n        var uu = u * u;\n        var uuu = uu * u;\n\n        var x = uuu * curve.startPoint.x;\n        x += 3 * uu * t * curve.control1.x;\n        x += 3 * u * tt * curve.control2.x;\n        x += ttt * curve.endPoint.x;\n\n        var y = uuu * curve.startPoint.y;\n        y += 3 * uu * t * curve.control1.y;\n        y += 3 * u * tt * curve.control2.y;\n        y += ttt * curve.endPoint.y;\n\n        var width = startWidth + ttt * widthDelta;\n        this.drawPoint(x, y, width);\n      }\n\n      this.ctx.closePath();\n      this.ctx.fill();\n    }\n  }, {\n    key: 'drawDot',\n    value: function drawDot(point) {\n      this.ctx.beginPath();\n      this.drawPoint(point.x, point.y, this.dotSize);\n      this.ctx.closePath();\n      this.ctx.fill();\n    }\n  }, {\n    key: 'clear',\n    value: function clear() {\n      this.ctx.fillStyle = this.backgroundColor;\n      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n      this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n\n      this.data = [];\n      this.reset();\n      if (typeof this.props.onChange === 'function') {\n        this.props.onChange(true);\n      }\n    }\n  }, {\n    key: 'reset',\n    value: function reset() {\n      this.points = [];\n      this.lastVelocity = 0;\n      this.lastWidth = (this.minWidth + this.maxWidth) / 2;\n      this.ctx.fillStyle = this.penColor;\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      return _react2.default.createElement('canvas', {\n        style: this.style,\n        className: this.props.className,\n        ref: function ref(canvas) {\n          _this2.canvas = canvas;\n        },\n        onMouseDown: this.handleMouseDown,\n        onMouseMove: this.handleMouseMove,\n        onMouseUp: this.handleMouseUp,\n        onMouseLeave: this.handleMouseLeave,\n        onTouchStart: this.handleTouchStart,\n        onTouchMove: this.handleTouchMove,\n        onTouchEnd: this.handleTouchEnd\n      });\n    }\n  }]);\n\n  return Signature;\n}(_react2.default.Component);\n\nexports.default = Signature;\n//# sourceMappingURL=index.js.map\n","\"use strict\";\n\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nvar util = require('../../util.js');\n//var Input = require('../common/textInput');\n\nvar LoginForm = React.createClass({\n\tpropTypes: {\n\t\tinfo: React.PropTypes.object.isRequired,\n\t\tonChange: React.PropTypes.func.isRequired,\n\t\tonLogin: React.PropTypes.func.isRequired,\n\t\tonCancel: React.PropTypes.func.isRequired, //used when user is about to be changed\n\t\tisLoading: React.PropTypes.bool,\n\t\tdifferentUserWillBeLoggedIn: React.PropTypes.bool\n\t},\n\tgetDefaultProps: function() {\n\t\treturn {\n\t\t\tisLoading: false,\n\t\t\tdifferentUserWillBeLoggedIn: false\n\t\t};\n\t},\n\t\n\trender: function(){\n\t\treturn (\n\t\t\t<form className=\"login-form\">\n\t\t\t\t<div className=\"user-login-info\">\n\t\t\t\t\t<img className=\"login-img\" src={util.assetsUrl + \"img/morpheus-m.png\"} />\n\t\t\t\t\t<div className=\"login-input\">\n\t\t\t\t\t\t<input type=\"email\" className=\"form-control\" name=\"username\" placeholder=\"Email\" value={this.props.info.username} onChange={this.props.onChange} autoFocus={true} autoComplete=\"off\" disabled={this.props.isLoading} />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"login-input\">\n\t\t\t\t\t\t<input type=\"password\" className=\"form-control\" name=\"password\" placeholder=\"Password\" value={this.props.info.password} onChange={this.props.onChange} autoComplete=\"off\" disabled={this.props.isLoading} />\n\t\t\t\t\t</div>\t\n\t\t\t\t\t<div className=\"login-footer\">\n\t\t\t\t\t\t{this.props.differentUserWillBeLoggedIn ?\n\t\t\t\t\t\t\t<div className=\"btn-group\" role=\"group\">\n\t\t\t\t\t\t\t\t<button type=\"submit\" className=\"btn btn-primary\" onClick={this.props.onLogin} disabled={this.props.isLoading}>Login and Clear Data</button>\n\t\t\t\t\t\t\t\t<button className=\"btn btn-default\" onClick={this.props.onCancel} disabled={this.props.isLoading}>Cancel</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t<button type=\"submit\" className=\"btn btn-primary\" onClick={this.props.onLogin} disabled={this.props.isLoading}>Login</button>\n\t\t\t\t\t\t}\n\t\t\t\t\t\t<Link className=\"forgot-password\" to=\"/login/passwordreset\">Forgot password?</Link>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className={this.props.isLoading ? 'cssload-container show' : 'hidden'}><div className={this.props.isLoading ? 'cssload-wheel' : ''}></div></div>\n\t\t\t\t</div>\n\t\t\t\t<img className=\"login-img-footer\" src={util.assetsUrl + \"img/morpheus-brand-pb.png\"} />\n\t\t\t</form>\n\t\t);\n\t}\n});\n\nexport default LoginForm;","\"use strict\";\n\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nvar util = require('../../util.js');\n\nvar CallList = React.createClass({\n\tpropTypes: {\n\t\tcalls: React.PropTypes.array.isRequired,\n\t\tisLoading: React.PropTypes.bool\n\t},\n\tgetDefaultProps: function() {\n\t\treturn {\n\t\t\tisLoading: false\n\t\t};\n\t},\n\t\n\trender: function(){\n\t\tvar createCallRow = function(call){\n\t\t\t//<td>{call.was_requested ? <span className=\"text-primary small\">Requested</span> : ''}</td>\n\t\t\t\n\t\t\t//Do we have both current and customer location information?\n\t\t\t//[For now, we throw out (0,0) locations in server DB as invalid]\n\t\t\t//var blnShowDistance = ((util.location.lat != null) && call.locations.length && (call.locations[0].latitude != null));\n\t\t\tvar blnShowDistance = ((util.location.lat != null) && call.locations.length && call.locations[0].latitude); \n\t\t\treturn (\n\t\t\t\t<tr key={call.store_id} className={call.completed ? 'success' : null}>\n\t\t\t\t\t<td className=\"col-xs-8\">\n\t\t\t\t\t\t<span>{call.store_name}</span><br />\n\t\t\t\t\t\t{blnShowDistance ? <span className=\"text-primary small pull-left\">{(util.getDistanceBetweenLatLonPointsInKm(util.location.lat, util.location.lng, call.locations[0].latitude, call.locations[0].longitude)) + 'km'}</span> : null}\n\t\t\t\t\t\t{call.start_time ? <span className=\"text-primary small pull-left\" style={(blnShowDistance ? {marginLeft: '5px'} : null)}>{call.start_time + '-' + call.end_time}</span> : null}\n\t\t\t\t\t\t{call.was_requested ? <span className=\"text-primary small pull-left\" style={((blnShowDistance || call.start_time) ? {marginLeft: '5px'} : null)}>Requested</span> : null}\n\t\t\t\t\t</td>\n\t\t\t\t\t<td className=\"col-xs-4 align-right\" style={{paddingLeft: 0}}>\n\t\t\t\t\t\t<Link className={call.completed ? \"btn btn-success disabled\" : (this.props.isLoading ? \"btn btn-primary disabled\" : \"btn btn-primary\")} role=\"button\" to={\"/calls/\" + call.store_id}><i className={(call.submitted || call.completed) ? \"fa fa-check\" : \"fa fa-arrow-right\"}></i> {call.submitted ? 'Submitted' : (call.completed ? 'Completed' : 'View')}</Link>\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t);\n\t\t};\n\t\t\n\t\t//<div className=\"table-responsive mor-list\">\n\t\treturn (\n\t\t\t<div className=\"mor-list\">\n\t\t\t\t<div className={this.props.isLoading ? 'cssload-container show' : 'hidden'}><div className={this.props.isLoading ? 'cssload-wheel' : ''}></div></div>\n\t\t\t\t{ \n\t\t\t\tthis.props.calls.length ?\n\t\t\t\t<table className=\"table table-striped table-spaced\" style={{marginTop: 0}}>\n\t\t\t\t\t<tbody>\n\t\t\t\t\t\t{this.props.calls.map(createCallRow, this)}\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t\t:\n\t\t\t\t<div className={this.props.isLoading ? 'hidden' : 'text-empty'}>\n\t\t\t\t\tPlease refresh to obtain calls for today\n\t\t\t\t</div>\n\t\t\t\t}\n\t\t\t</div>\n\t\t);\n\t}\n});\n\nexport default CallList;","\"use strict\";\n\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport Spinner from '../common/spinner';\nvar _ = require('lodash');\n\nvar CustomerInfoPanelList = React.createClass({\n\tpropTypes: {\n\t\tcustomer: React.PropTypes.object.isRequired,\n\t\tcustomerFields: React.PropTypes.array.isRequired,\n\t\tcustomerEditBaseURL: React.PropTypes.string,\n\t\tisLoading: React.PropTypes.bool\n\t},\n\tgetDefaultProps: function() {\n\t\treturn {\n\t\t\tcustomerEditBaseURL: \"\",\n\t\t\tisLoading: false\n\t\t};\n\t},\n\trenderField: function(field){\n\t\treturn (\n\t\t\t<li key={field.name} className=\"list-group-item\">\n\t\t\t\t<div className=\"row\">\n\t\t\t\t\t<div className=\"col-xs-4\"><small className=\"text-muted\">{field.label}</small></div>\n\t\t\t\t\t<div className=\"col-xs-8\"><span className=\"text-primary\">{this.props.customer[field.name]}</span></div>\n\t\t\t\t</div>\n\t\t\t</li>\n\t\t);\n\t},\n\trenderAddress: function(location, idx){\n\t\tif(location.is_active != null && location.is_active != 1){\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\tlet locationKey = idx + 1; //better than using location.id, as in the new customer edit case, it's undefined\n\t\tlet locationTitle = (location.description != null && location.description != '') ? location.description : \"Location \" + locationKey;\n\t\treturn (\n\t\t\t<div key={locationKey} className=\"panel panel-default cat-panel\" style={(idx == 0 ? {marginTop: 0} : {})}>\n\t\t\t\t<div className=\"panel-heading\" role=\"tab\" id={\"cat-title-address-\" + locationKey}>\n\t\t\t\t\t<h4 className=\"panel-title\">\n\t\t\t\t\t\t<a className={(idx == 0 ? \"\" : \"collapsed\")} role=\"button\" data-toggle=\"collapse\" data-parent=\"#cust-address-accordion\" href={\"#cat-content-address-\" + locationKey}>\n\t\t\t\t\t\t\t<span>{locationTitle}</span>\n\t\t\t\t\t\t\t<i className=\"minimise fa fa-window-minimize\"></i>\n\t\t\t\t\t\t\t<i className=\"maximise fa fa-window-maximize\"></i>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</h4>\n\t\t\t\t</div>\n\t\t\t\t<div className={\"panel-collapse collapse\" + (idx == 0 ? \" in\" : \"\")} role=\"tabpanel\" id={\"cat-content-address-\" + locationKey}>\n\t\t\t\t\t<div className=\"panel-body address-container\">\n\t\t\t\t\t\t\n\t\t\t\t\t\t<address>\n\t\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t\t<div className=\"col-xs-4\"><small className=\"text-muted\">Description</small></div>\n\t\t\t\t\t\t\t\t<div className=\"col-xs-8\">{location.description}</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t\t<div className=\"col-xs-4\"><small className=\"text-muted\">Address</small></div>\n\t\t\t\t\t\t\t\t<div className=\"col-xs-8\">{location.address_1}<br />{location.address_2}</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t\t<div className=\"col-xs-4\"><small className=\"text-muted\">City</small></div>\n\t\t\t\t\t\t\t\t<div className=\"col-xs-8\">{location.city}</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t\t<div className=\"col-xs-4\"><small className=\"text-muted\">Zip</small></div>\n\t\t\t\t\t\t\t\t<div className=\"col-xs-8\">{location.zip}</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t\t<div className=\"col-xs-4\"><small className=\"text-muted\">Location</small></div>\n\t\t\t\t\t\t\t\t<div className=\"col-xs-8\">{location.latitude}, {location.longitude}</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</address>\n\t\t\t\t\t\t\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t},\n\trenderContact: function(contact, idx){\n\t\tlet contactKey = idx + 1; //better than using contact.id, as in the new customer edit case, it's undefined\n\t\tlet arrContactTitle = [];\n\t\tif(contact.first_name != null && contact.first_name != ''){\n\t\t\tarrContactTitle.push(contact.first_name);\n\t\t}\n\t\tif(contact.last_name != null && contact.last_name != ''){\n\t\t\tarrContactTitle.push(contact.last_name);\n\t\t}\n\t\tlet contactTitle = arrContactTitle.join(' ');\n\t\tcontactTitle = (contactTitle == '' ? \"Contact \" + contactKey : contactTitle);\n\t\t\n\t\treturn (\n\t\t\t<div key={contactKey} className=\"panel panel-default cat-panel\" style={(idx == 0 ? {marginTop: 0} : {})}>\n\t\t\t\t<div className=\"panel-heading\" role=\"tab\" id={\"cat-title-contact-\" + contactKey}>\n\t\t\t\t\t<h4 className=\"panel-title\">\n\t\t\t\t\t\t<a className={(idx == 0 ? \"\" : \"collapsed\")} role=\"button\" data-toggle=\"collapse\" data-parent=\"#cust-contact-accordion\" href={\"#cat-content-contact-\" + contactKey}>\n\t\t\t\t\t\t\t<span>{contactTitle}</span>\n\t\t\t\t\t\t\t<i className=\"minimise fa fa-window-minimize\"></i>\n\t\t\t\t\t\t\t<i className=\"maximise fa fa-window-maximize\"></i>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</h4>\n\t\t\t\t</div>\n\t\t\t\t<div className={\"panel-collapse collapse\" + (idx == 0 ? \" in\" : \"\")} role=\"tabpanel\" id={\"cat-content-contact-\" + contactKey}>\n\t\t\t\t\t<div className=\"panel-body contact-container\">\n\t\t\t\t\t\t\n\t\t\t\t\t\t<address>\n\t\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t\t<div className=\"col-xs-4\"><small className=\"text-muted\">First Name</small></div>\n\t\t\t\t\t\t\t\t<div className=\"col-xs-8\">{contact.first_name}</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t\t<div className=\"col-xs-4\"><small className=\"text-muted\">Last Name</small></div>\n\t\t\t\t\t\t\t\t<div className=\"col-xs-8\">{contact.last_name}</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t\t<div className=\"col-xs-4\"><small className=\"text-muted\">Email</small></div>\n\t\t\t\t\t\t\t\t<div className=\"col-xs-8\">{contact.email}</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t\t<div className=\"col-xs-4\"><small className=\"text-muted\">Office Phone</small></div>\n\t\t\t\t\t\t\t\t<div className=\"col-xs-8\">{contact.office_phone}</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t\t<div className=\"col-xs-4\"><small className=\"text-muted\">Cell Phone</small></div>\n\t\t\t\t\t\t\t\t<div className=\"col-xs-8\">{contact.cell_phone}</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t\t<div className=\"col-xs-4\"><small className=\"text-muted\">Fax</small></div>\n\t\t\t\t\t\t\t\t<div className=\"col-xs-8\">{contact.fax}</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</address>\n\t\t\t\t\t\t\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t},\n\trenderInfoPanels: function(){\n\t\tvar panels = [];\n\t\t\n\t\tpanels.push(\n\t\t\t<div key=\"details\" className=\"panel panel-default cat-panel\">\n\t\t\t\t<div className=\"panel-heading extra-control\" role=\"tab\" id=\"cat-title-details\">\n\t\t\t\t\t<h4 className=\"panel-title\">\n\t\t\t\t\t\t<a role=\"button\" data-toggle=\"collapse\" data-parent=\"#cust-cat-accordion\" href=\"#cat-content-details\">\n\t\t\t\t\t\t\t<span>Details</span>\n\t\t\t\t\t\t\t<i className=\"minimise fa fa-window-minimize\"></i>\n\t\t\t\t\t\t\t<i className=\"maximise fa fa-window-maximize\"></i>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</h4>\n\t\t\t\t\t<Link className={\"panel-edit\" + (this.props.isLoading ? \" disabled\" : \"\")} role=\"button\" to={this.props.customerEditBaseURL + \"/editdetails\"}><i className=\"fa fa-edit\"></i></Link>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"panel-collapse collapse in\" role=\"tabpanel\" id=\"cat-content-details\">\n\t\t\t\t\t<ul className=\"list-group\">\n\t\t\t\t\t\t{this.props.customerFields.map(this.renderField)}\n\t\t\t\t\t</ul>\t\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t\t\n\t\tpanels.push(\n\t\t\t<div key=\"addresses\" className=\"panel panel-default cat-panel\">\n\t\t\t\t<div className=\"panel-heading extra-control\" role=\"tab\" id=\"cat-title-address\">\n\t\t\t\t\t<h4 className=\"panel-title\">\n\t\t\t\t\t\t<a className=\"collapsed\" role=\"button\" data-toggle=\"collapse\" data-parent=\"#cust-cat-accordion\" href=\"#cat-content-address\">\n\t\t\t\t\t\t\t<span>Addresses</span>\n\t\t\t\t\t\t\t<i className=\"minimise fa fa-window-minimize\"></i>\n\t\t\t\t\t\t\t<i className=\"maximise fa fa-window-maximize\"></i>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</h4>\n\t\t\t\t\t<Link className={\"panel-edit\" + (this.props.isLoading ? \" disabled\" : \"\")} role=\"button\" to={this.props.customerEditBaseURL + \"/editlocations\"}><i className=\"fa fa-edit\"></i></Link>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"panel-collapse collapse\" role=\"tabpanel\" id=\"cat-content-address\">\n\t\t\t\t\t<div className=\"panel-body address-container\">\n\t\t\t\t\t\t\n\t\t\t\t\t\t<div className=\"panel-group\" id=\"cust-address-accordion\" style={{marginBottom: 0}} role=\"tablist\">\n\t\t\t\t\t\t\t{this.props.customer.locations.map(this.renderAddress)}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t\t\n\t\tpanels.push(\n\t\t\t<div key=\"contacts\" className=\"panel panel-default cat-panel\">\n\t\t\t\t<div className=\"panel-heading extra-control\" role=\"tab\" id=\"cat-title-contact\">\n\t\t\t\t\t<h4 className=\"panel-title\">\n\t\t\t\t\t\t<a className=\"collapsed\" role=\"button\" data-toggle=\"collapse\" data-parent=\"#cust-cat-accordion\" href=\"#cat-content-contact\">\n\t\t\t\t\t\t\t<span>Contacts</span>\n\t\t\t\t\t\t\t<i className=\"minimise fa fa-window-minimize\"></i>\n\t\t\t\t\t\t\t<i className=\"maximise fa fa-window-maximize\"></i>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</h4>\n\t\t\t\t\t<Link className={\"panel-edit\" + (this.props.isLoading ? \" disabled\" : \"\")} role=\"button\" to={this.props.customerEditBaseURL + \"/editcontacts\"}><i className=\"fa fa-edit\"></i></Link>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"panel-collapse collapse\" role=\"tabpanel\" id=\"cat-content-contact\">\n\t\t\t\t\t<div className=\"panel-body contact-container\">\n\t\t\t\t\t\t\n\t\t\t\t\t\t<div className=\"panel-group\" id=\"cust-contact-accordion\" style={{marginBottom: 0}} role=\"tablist\">\n\t\t\t\t\t\t\t{this.props.customer.contacts.map(this.renderContact)}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t\t\n\t\treturn panels;\n\t},\n\trender: function(){\n\t\tvar custProps = _.keys(this.props.customer);\n\t\treturn (\n\t\t\t<div className=\"panel-group mor-list\" id=\"cust-cat-accordion\" role=\"tablist\">\n\t\t\t\t<Spinner isVisible={this.props.isLoading} />\n\t\t\t\t{ \n\t\t\t\t(custProps.length > 2) ? /*We have more than just id and name (i.e. we have a detailed object)*/\n\t\t\t\tthis.renderInfoPanels()\n\t\t\t\t:\n\t\t\t\t<div className={this.props.isLoading ? 'hidden' : 'text-empty'}>\n\t\t\t\t\tNo information\n\t\t\t\t</div>\n\t\t\t\t}\n\t\t\t</div>\n\t\t);\n\t}\n});\n\nexport default CustomerInfoPanelList;","\"use strict\";\n\nimport React from 'react';\n//var _ = require('lodash');\n//var util = require('../../util.js');\n\nclass CustomerDetailsFormPanel extends React.Component {\n\tstatic propTypes = {\n\t\tcustomerEdits: React.PropTypes.object.isRequired,\n\t\tcustomerFields: React.PropTypes.array.isRequired,\n\t\tonSave: React.PropTypes.func.isRequired,\n\t\tonComplete: React.PropTypes.func.isRequired,\n\t\tonCancel: React.PropTypes.func.isRequired\n\t\t//isLoading: React.PropTypes.bool\n\t};\n\t\n\t//static defaultProps = {\n\t//\tisLoading: false\n\t//};\n\t\n\tconstructor(props) {\n\t\tsuper(props);\n\t\t\n\t\t//Our internal working copy state (this.customerEdits) of props (parent authoritative state)\n\t\t//is currently just a plain assignment (as after the first form save (this component) it's a reference to parent state anyway)\n\t\t//this.customerEdits = {};\n\t\t//_.defaultsDeep(this.customerEdits, props.customerEdits);\n\t\tthis.customerEdits = props.customerEdits;\n\t}\n\t\n\tcomponentWillReceiveProps(nextProps){\n\t\t//Potentially change this (and constructor above) to a deep copy of nextProps.customerEdits (props.customerEdits), rather than assignment? Performance considerations? (this is called a lot)\n\t\t//(currently after the first form save (this component) is a reference to parent state anyway)\n\t\tthis.customerEdits = nextProps.customerEdits;\n\t}\n\t\n\t/*handleDateChange = (date) => {\n\t\tthis.customerEdits.some_date = (date != null) ? date.unix() : null;\n\t\t//Save edit (and thus also update display - props from parent)\n\t\tthis.saveCustomerDetails();\n\t}\n\t\n\thandleSelectionChange = (event) => {\n\t\tthis.customerEdits[event.target.dataset['field']] = parseInt(event.target.value);\n\t\t//Save edit (and thus also update display - props from parent)\n\t\tthis.saveCustomerDetails();\n\t}*/\n\t\n\thandleTextChange = (event) => {\n\t\tthis.customerEdits[event.target.dataset['field']] = event.target.value;\n\t\t//Save edit (and thus also update display - props from parent)\n\t\tthis.saveCustomerDetails();\n\t}\n\t\n\tsaveCustomerDetails = () => {\n\t\t//Save (and thus also update display - props from parent)\n\t\tthis.props.onSave(this.customerEdits);\n\t}\n\t\n\tcreateCustomerDetailsField = (field) => (\n\t\t<div key={field.name} className=\"form-group\">\n\t\t\t<label htmlFor={\"cust-edit-\" + field.name} className=\"col-xs-4 control-label\"><small className=\"text-muted\">{field.label}</small></label>\n\t\t\t<div className=\"col-xs-8\">\n\t\t\t\t<input type=\"text\" className=\"form-control\" id={\"cust-edit-\" + field.name} data-field={field.name} value={this.props.customerEdits[field.name]} onChange={this.handleTextChange} autoComplete=\"off\" />\n\t\t\t</div>\n\t\t</div>\n\t)\n\t\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div className=\"panel panel-default mor-list\">\n\t\t\t\t\t<div className=\"panel-heading\" role=\"tab\" id=\"customer-details-edit-title\">\n\t\t\t\t\t\t<h4 className=\"panel-title\">Details</h4>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"panel-collapse collapse in\" role=\"tabpanel\" id=\"customer-details-edit-content\">\n\t\t\t\t\t\t<div className=\"panel-body\">\n\t\t\t\t\t\t\t<div className=\"form-horizontal panel-form\">\n\t\t\t\t\t\t\t\t{this.props.customerFields.map(this.createCustomerDetailsField)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t<div className=\"audit-footer\">\n\t\t\t\t\t<div className=\"btn-group\" role=\"group\">\n\t\t\t\t\t\t<button className=\"btn btn-primary\" onClick={this.props.onCancel}><i className=\"fa fa-close\"></i> Cancel</button>\n\t\t\t\t\t\t<button className=\"btn btn-primary\" onClick={this.props.onComplete}><i className=\"fa fa-check\"></i> Done</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n};\n\nexport default CustomerDetailsFormPanel;","\"use strict\";\n\nimport React from 'react';\n//var _ = require('lodash');\nvar util = require('../../util.js');\n\nclass CustomerLocationsFormPanel extends React.Component {\n\tstatic propTypes = {\n\t\tcustomerEdits: React.PropTypes.object.isRequired,\n\t\tcustomerFields: React.PropTypes.array.isRequired,\n\t\tonSave: React.PropTypes.func.isRequired,\n\t\tonComplete: React.PropTypes.func.isRequired,\n\t\tonCancel: React.PropTypes.func.isRequired,\n\t\tfocusItemID: React.PropTypes.string //optional, allowing us to specify the active location being edited or receiving focus (open)\n\t\t//isLoading: React.PropTypes.bool\n\t};\n\t\n\t//static defaultProps = {\n\t//\tisLoading: false\n\t//};\n\t\n\tconstructor(props) {\n\t\tsuper(props);\n\t\t\n\t\t//Our internal working copy state (this.customerEdits) of props (parent authoritative state)\n\t\t//is currently just a plain assignment (as after the first form save (this component) it's a reference to parent state anyway)\n\t\t//this.customerEdits = {};\n\t\t//_.defaultsDeep(this.customerEdits, props.customerEdits);\n\t\tthis.customerEdits = props.customerEdits;\n\t\t\n\t\tthis.state = {\n\t\t\tpositionRequestedLocationID: null //represents the location from which current position was requested (i.e. the one to populate with new GPS coords)\n\t\t};\n\t}\n\t\n\tcomponentWillReceiveProps(nextProps){\n\t\t//Potentially change this (and constructor above) to a deep copy of nextProps.customerEdits (props.customerEdits), rather than assignment? Performance considerations? (this is called a lot)\n\t\t//(currently after the first form save (this component) is a reference to parent state anyway)\n\t\tthis.customerEdits = nextProps.customerEdits;\n\t}\n\t\n\tcomponentDidMount(){\n\t\tutil.addChangeListener(this._onLocationChange);\n\t}\n\t\n\tcomponentWillUnmount(){\n\t\tutil.removeChangeListener(this._onLocationChange);\n\t}\n\t\n\t_onLocationChange = () => {\n\t\tthis.customerEdits[this.state.positionRequestedLocationID].latitude = (util.location.lat != null ? util.location.lat + '' : '');\n\t\tthis.customerEdits[this.state.positionRequestedLocationID].longitude = (util.location.lng != null ? util.location.lng + '' : '');\n\t\tthis.saveCustomerLocations(this.state.positionRequestedLocationID);\n\t\tthis.setState({ positionRequestedLocationID: null });\n\t}\n\t\n\tsetCurrentPositionLatLng = () => {}\n\t\n\trequestCurrentPositionLatLng = (event) => {\n\t\tconst locationID = event.currentTarget.dataset['id'];\n\t\tthis.setState({ positionRequestedLocationID: locationID }); \n\t\tutil.refreshGeolocation();\n\t}\n\t\n\t/*handleDateChange = (date) => {\n\t\tthis.customerEdits.some_date = (date != null) ? date.unix() : null;\n\t\t//Save edit (and thus also update display - props from parent)\n\t\tthis.saveCustomerLocations();\n\t}\n\t\n\thandleSelectionChange = (event) => {\n\t\tthis.customerEdits[event.target.dataset['field']] = parseInt(event.target.value);\n\t\t//Save edit (and thus also update display - props from parent)\n\t\tthis.saveCustomerLocations();\n\t}*/\n\t\n\thandleTextChange = (event) => {\n\t\tconst target = event.target;\n\t\tthis.customerEdits[target.dataset['id']][target.dataset['field']] = target.value;\n\t\t//Save edit (and thus also update display - props from parent)\n\t\tthis.saveCustomerLocations(target.dataset['id']);\n\t}\n\t\n\tsaveCustomerLocations = (lastEditedLocationID) => {\n\t\t//Save (and thus also update display - props from parent)\n\t\tthis.props.onSave(this.customerEdits, lastEditedLocationID);\n\t}\n\t\n\tcreateCustomerLocationsPanels = () => {\n\t\tvar panels = [];\n\t\t\n\t\tlet locationNumber = 0;\n\t\t\n\t\tfor(var locationID in this.props.customerEdits){\n\t\t\tif(this.props.customerEdits[locationID] != null){\n\t\t\t\tlocationNumber++;\n\t\t\t\t\n\t\t\t\tlet locationTitle = \n\t\t\t\t\t(this.props.customerEdits[locationID].description != null && this.props.customerEdits[locationID].description != '') ? \n\t\t\t\t\tthis.props.customerEdits[locationID].description : \n\t\t\t\t\t\"Location \" + locationNumber;\n\t\t\t\t\n\t\t\t\t//Assemble the fields for this location\n\t\t\t\tlet locationFields = [];\n\t\t\t\tlet j;\n\t\t\t\tfor(j = 0; j < this.props.customerFields.length; j++) {\n\t\t\t\t\tif(this.props.customerFields[j] != null){\n\t\t\t\t\t\tlocationFields.push(this.createCustomerLocationField(locationID, this.props.customerFields[j]));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//Determine whether we want to expand this particular panel\n\t\t\t\tlet blnExpandPanel = (\n\t\t\t\t\t//locationNumber == 1\n\t\t\t\t\t(this.props.focusItemID != null && this.props.focusItemID == locationID) || \n\t\t\t\t\t(this.props.focusItemID == null && locationNumber == 1)\n\t\t\t\t);\n\t\t\t\t\n\t\t\t\t//Add this location's panel to the list of panels\n\t\t\t\tpanels.push(\n\t\t\t\t\t<div key={locationID} className=\"panel panel-default cat-panel\" style={(locationNumber==1 ? {marginTop: 0} : {})}>\n\t\t\t\t\t\t<div className=\"panel-heading\" role=\"tab\" id={\"location-edit-title-\" + locationID}>\n\t\t\t\t\t\t\t<h4 className=\"panel-title\">\n\t\t\t\t\t\t\t\t<a className={(blnExpandPanel ? \"\" : \"collapsed\")} role=\"button\" data-toggle=\"collapse\" data-parent=\"#cust-address-accordion\" href={\"#location-edit-content-\" + locationID}>\n\t\t\t\t\t\t\t\t\t<span>{locationTitle}</span>\n\t\t\t\t\t\t\t\t\t<i className=\"minimise fa fa-window-minimize\"></i>\n\t\t\t\t\t\t\t\t\t<i className=\"maximise fa fa-window-maximize\"></i>\n\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t</h4>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className={\"panel-collapse collapse\" + (blnExpandPanel ? \" in\" : \"\")} role=\"tabpanel\" id={\"location-edit-content-\" + locationID}>\n\t\t\t\t\t\t\t<div className=\"panel-body\">\n\t\t\t\t\t\t\t\t<div className=\"form-horizontal panel-form\">\n\t\t\t\t\t\t\t\t\t{ locationFields }\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn panels;\n\t}\n\t\n\tcreateCustomerLocationField = (locationID, field) => (\n\t\t<div key={field.name} className=\"form-group\">\n\t\t\t<label htmlFor={\"loc-edit-\" + locationID + \"-\" + field.name} className=\"col-xs-4 control-label\"><small className=\"text-muted\">{field.label}</small></label>\n\t\t\t<div className=\"col-xs-8\">\n\t\t\t\t<input type=\"text\" className=\"form-control\" id={\"loc-edit-\" + locationID + \"-\" + field.name} \n\t\t\t\t\tdata-id={locationID} data-field={field.name} value={this.props.customerEdits[locationID][field.name]}\n\t\t\t\t\tdisabled={((field.name == 'latitude' || field.name == 'longitude') && this.state.positionRequestedLocationID == locationID)} \n\t\t\t\t\tonChange={this.handleTextChange} autoComplete=\"off\" />\n\t\t\t</div>\n\t\t\t{\n\t\t\t\tfield.name == 'longitude' ?\n\t\t\t\t<div className=\"col-xs-8 col-xs-offset-4\" style={{marginTop: '15px'}}>\n\t\t\t\t\t<button className=\"btn btn-primary\" data-id={locationID} onClick={this.requestCurrentPositionLatLng} disabled={this.state.positionRequestedLocationID == locationID}>\n\t\t\t\t\t\t<i className=\"fa fa-map-marker\"></i> <span style={{fontSize: '10px'}}>Use Current Location</span>\n\t\t\t\t\t</button>\n\t\t\t\t</div> : null\n\t\t\t}\n\t\t</div>\n\t)\n\t\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div className=\"panel panel-default mor-list\">\n\t\t\t\t\t<div className=\"panel-heading\" role=\"tab\" id=\"customer-locations-edit-title\">\n\t\t\t\t\t\t<h4 className=\"panel-title\">Locations</h4>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"panel-collapse collapse in\" role=\"tabpanel\" id=\"customer-locations-edit-content\">\n\t\t\t\t\t\t<div className=\"panel-body address-container\">\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t<div className=\"panel-group\" id=\"cust-address-accordion\" style={{marginBottom: 0}} role=\"tablist\">\n\t\t\t\t\t\t\t\t{this.createCustomerLocationsPanels()}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t<div className=\"audit-footer\">\n\t\t\t\t\t<div className=\"btn-group\" role=\"group\">\n\t\t\t\t\t\t<button className=\"btn btn-primary\" onClick={this.props.onCancel}><i className=\"fa fa-close\"></i> Cancel</button>\n\t\t\t\t\t\t<button className=\"btn btn-primary\" onClick={this.props.onComplete}><i className=\"fa fa-check\"></i> Done</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n};\n\nexport default CustomerLocationsFormPanel;","\"use strict\";\n\nimport React from 'react';\n//var _ = require('lodash');\n//var util = require('../../util.js');\n\nclass CustomerContactsFormPanel extends React.Component {\n\tstatic propTypes = {\n\t\tcustomerEdits: React.PropTypes.object.isRequired,\n\t\tcustomerFields: React.PropTypes.array.isRequired,\n\t\tonSave: React.PropTypes.func.isRequired,\n\t\tonComplete: React.PropTypes.func.isRequired,\n\t\tonCancel: React.PropTypes.func.isRequired,\n\t\tfocusItemID: React.PropTypes.string //optional, allowing us to specify the active contact being edited or receiving focus (open)\n\t\t//isLoading: React.PropTypes.bool\n\t};\n\t\n\t//static defaultProps = {\n\t//\tisLoading: false\n\t//};\n\t\n\tconstructor(props) {\n\t\tsuper(props);\n\t\t\n\t\t//Our internal working copy state (this.customerEdits) of props (parent authoritative state)\n\t\t//is currently just a plain assignment (as after the first form save (this component) it's a reference to parent state anyway)\n\t\t//this.customerEdits = {};\n\t\t//_.defaultsDeep(this.customerEdits, props.customerEdits);\n\t\tthis.customerEdits = props.customerEdits;\n\t}\n\t\n\tcomponentWillReceiveProps(nextProps){\n\t\t//Potentially change this (and constructor above) to a deep copy of nextProps.customerEdits (props.customerEdits), rather than assignment? Performance considerations? (this is called a lot)\n\t\t//(currently after the first form save (this component) is a reference to parent state anyway)\n\t\tthis.customerEdits = nextProps.customerEdits;\n\t}\n\t\n\t/*handleDateChange = (date) => {\n\t\tthis.customerEdits.some_date = (date != null) ? date.unix() : null;\n\t\t//Save edit (and thus also update display - props from parent)\n\t\tthis.saveCustomerContacts();\n\t}\n\t\n\thandleSelectionChange = (event) => {\n\t\tthis.customerEdits[event.target.dataset['field']] = parseInt(event.target.value);\n\t\t//Save edit (and thus also update display - props from parent)\n\t\tthis.saveCustomerContacts();\n\t}*/\n\t\n\thandleTextChange = (event) => {\n\t\tconst target = event.target;\n\t\tthis.customerEdits[target.dataset['id']][target.dataset['field']] = target.value;\n\t\t//Save edit (and thus also update display - props from parent)\n\t\tthis.saveCustomerContacts(target.dataset['id']);\n\t}\n\t\n\tsaveCustomerContacts = (lastEditedContactID) => {\n\t\t//Save (and thus also update display - props from parent)\n\t\tthis.props.onSave(this.customerEdits, lastEditedContactID);\n\t}\n\t\n\tcreateCustomerContactsPanels = () => {\n\t\tvar panels = [];\n\t\t\n\t\tlet contactNumber = 0;\n\t\t\n\t\tfor(var contactID in this.props.customerEdits){\n\t\t\tif(this.props.customerEdits[contactID] != null){\n\t\t\t\tcontactNumber++;\n\t\t\t\t\n\t\t\t\tlet arrContactTitle = [];\n\t\t\t\tif(this.props.customerEdits[contactID].first_name != null && this.props.customerEdits[contactID].first_name != ''){\n\t\t\t\t\tarrContactTitle.push(this.props.customerEdits[contactID].first_name);\n\t\t\t\t}\n\t\t\t\tif(this.props.customerEdits[contactID].last_name != null && this.props.customerEdits[contactID].last_name != ''){\n\t\t\t\t\tarrContactTitle.push(this.props.customerEdits[contactID].last_name);\n\t\t\t\t}\n\t\t\t\tlet contactTitle = arrContactTitle.join(' ');\n\t\t\t\tcontactTitle = (contactTitle == '' ? \"Contact \" + contactNumber : contactTitle);\n\t\t\t\t\n\t\t\t\t//Assemble the fields for this contact\n\t\t\t\tlet contactFields = [];\n\t\t\t\tlet j;\n\t\t\t\tfor(j = 0; j < this.props.customerFields.length; j++) {\n\t\t\t\t\tif(this.props.customerFields[j] != null){\n\t\t\t\t\t\tcontactFields.push(this.createCustomerContactField(contactID, this.props.customerFields[j]));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//Determine whether we want to expand this particular panel\n\t\t\t\tlet blnExpandPanel = (\n\t\t\t\t\t//contactNumber == 1\n\t\t\t\t\t(this.props.focusItemID != null && this.props.focusItemID == contactID) || \n\t\t\t\t\t(this.props.focusItemID == null && contactNumber == 1)\n\t\t\t\t);\n\t\t\t\t\n\t\t\t\t//Add this contact's panel to the list of panels\n\t\t\t\tpanels.push(\n\t\t\t\t\t<div key={contactID} className=\"panel panel-default cat-panel\" style={(contactNumber==1 ? {marginTop: 0} : {})}>\n\t\t\t\t\t\t<div className=\"panel-heading\" role=\"tab\" id={\"contact-edit-title-\" + contactID}>\n\t\t\t\t\t\t\t<h4 className=\"panel-title\">\n\t\t\t\t\t\t\t\t<a className={(blnExpandPanel ? \"\" : \"collapsed\")} role=\"button\" data-toggle=\"collapse\" data-parent=\"#cust-contact-accordion\" href={\"#contact-edit-content-\" + contactID}>\n\t\t\t\t\t\t\t\t\t<span>{contactTitle}</span>\n\t\t\t\t\t\t\t\t\t<i className=\"minimise fa fa-window-minimize\"></i>\n\t\t\t\t\t\t\t\t\t<i className=\"maximise fa fa-window-maximize\"></i>\n\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t</h4>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className={\"panel-collapse collapse\" + (blnExpandPanel ? \" in\" : \"\")} role=\"tabpanel\" id={\"contact-edit-content-\" + contactID}>\n\t\t\t\t\t\t\t<div className=\"panel-body\">\n\t\t\t\t\t\t\t\t<div className=\"form-horizontal panel-form\">\n\t\t\t\t\t\t\t\t\t{ contactFields }\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn panels;\n\t}\n\t\n\tcreateCustomerContactField = (contactID, field) => (\n\t\t<div key={field.name} className=\"form-group\">\n\t\t\t<label htmlFor={\"con-edit-\" + contactID + \"-\" + field.name} className=\"col-xs-4 control-label\"><small className=\"text-muted\">{field.label}</small></label>\n\t\t\t<div className=\"col-xs-8\">\n\t\t\t\t<input type=\"text\" className=\"form-control\" id={\"con-edit-\" + contactID + \"-\" + field.name} data-id={contactID} data-field={field.name} value={this.props.customerEdits[contactID][field.name]} onChange={this.handleTextChange} autoComplete=\"off\" />\n\t\t\t</div>\n\t\t</div>\n\t)\n\t\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div className=\"panel panel-default mor-list\">\n\t\t\t\t\t<div className=\"panel-heading\" role=\"tab\" id=\"customer-contacts-edit-title\">\n\t\t\t\t\t\t<h4 className=\"panel-title\">Contacts</h4>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"panel-collapse collapse in\" role=\"tabpanel\" id=\"customer-contacts-edit-content\">\n\t\t\t\t\t\t<div className=\"panel-body contact-container\">\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t<div className=\"panel-group\" id=\"cust-contact-accordion\" style={{marginBottom: 0}} role=\"tablist\">\n\t\t\t\t\t\t\t\t{this.createCustomerContactsPanels()}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t<div className=\"audit-footer\">\n\t\t\t\t\t<div className=\"btn-group\" role=\"group\">\n\t\t\t\t\t\t<button className=\"btn btn-primary\" onClick={this.props.onCancel}><i className=\"fa fa-close\"></i> Cancel</button>\n\t\t\t\t\t\t<button className=\"btn btn-primary\" onClick={this.props.onComplete}><i className=\"fa fa-check\"></i> Done</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n};\n\nexport default CustomerContactsFormPanel;","\"use strict\";\n\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport Spinner from '../common/spinner';\n\nvar AuditList = React.createClass({\n\tpropTypes: {\n\t\tcustomerId: React.PropTypes.number.isRequired,\n\t\taudits: React.PropTypes.array.isRequired,\n\t\tanswers: React.PropTypes.object.isRequired,\n\t\tisLoading: React.PropTypes.bool\n\t},\n\tgetDefaultProps: function() {\n\t\treturn {\n\t\t\tisLoading: false\n\t\t};\n\t},\n\t\n\trender: function(){\n\t\tvar createAuditRow = function(audit){\n\t\t\treturn (\n\t\t\t\t<tr key={audit.id} className={this.props.answers[audit.id] && this.props.answers[audit.id].completed ? 'success' : null}>\n\t\t\t\t\t<td><span>{audit.name}</span><br />{audit.meta_data.is_compulsory ? <span className=\"text-primary small pull-left\">Compulsory</span> : null}</td>\n\t\t\t\t\t{ //If call completed, don't display buttons to open audits\n\t\t\t\t\tthis.props.answers.completed ? null : \n\t\t\t\t\t<td className=\"align-right\"><Link className={(this.props.answers[audit.id] && this.props.answers[audit.id].completed ? \"btn btn-success\" : \"btn btn-primary\") + (this.props.isLoading ? \" disabled\" : \"\")} role=\"button\" to={\"/calls/\" + this.props.customerId + \"/audits/\" + audit.id}><i className=\"fa fa-pencil-square-o\"></i> Open</Link></td>\n\t\t\t\t\t}\n\t\t\t\t</tr>\n\t\t\t);\n\t\t};\n\t\t\n\t\t//<div className=\"table-responsive mor-list\">\n\t\treturn (\n\t\t\t<div className=\"mor-list\">\n\t\t\t\t<Spinner isVisible={this.props.isLoading} />\n\t\t\t\t{ \n\t\t\t\tthis.props.audits.length ?\n\t\t\t\t<table className=\"table table-striped table-spaced\">\n\t\t\t\t\t<tbody>\n\t\t\t\t\t\t{this.props.audits.map(createAuditRow, this)}\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t\t:\n\t\t\t\t<div className={this.props.isLoading ? 'hidden' : 'text-empty'}>\n\t\t\t\t\tPlease refresh to obtain audits for this customer\n\t\t\t\t</div>\n\t\t\t\t}\n\t\t\t</div>\n\t\t);\n\t}\n});\n\nmodule.exports = AuditList;","\"use strict\";\n\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport Spinner from '../common/spinner';\nvar _ = require('lodash');\n\nclass AdminAuditList extends React.Component {\n\tstatic propTypes = {\n\t\tcustomerId: React.PropTypes.number.isRequired,\n\t\taudits: React.PropTypes.array.isRequired,\n\t\tanswers: React.PropTypes.object.isRequired,\n\t\tisLoading: React.PropTypes.bool\n\t};\n\t\n\tstatic defaultProps = {\n\t\tisLoading: false\n\t};\n\t\n\t//Do we have any answers (are any audits in progress)?\n\thaveAnswers = () => {\n\t\tfor (var auditID in this.props.answers) {\n\t\t\t//ignore meta data entries\n\t\t\tif(auditID == 'customer_id' || auditID == 'entry' || auditID == 'exit' || auditID == 'completed' || auditID == 'submitted'){\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\tif(this.props.answers[auditID] == null || !this.props.answers[auditID].length){\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\tlet j;\n\t\t\tfor(j = 0; j < this.props.answers[auditID].length; j++) {\n\t\t\t\tif(this.props.answers[auditID][j] != null){\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn false;\n\t}\n\t\n\t//Obtain the next available new answer array index for an audit (NB: must return a number)\n\tgetNewAnswerIndex = (auditID) => (this.props.answers[auditID] && this.props.answers[auditID].length ? this.props.answers[auditID].length : 0)\n\t\n\t//[idx and arr are required when used as Array.map() function - we don't currently make use of them though]\n\tcreateAuditRow = (audit, idx, arr, answer, answerIndex) => (\n\t\t<tr key={audit.id + (answer != null ? \"-\" + answerIndex : \"\")} className={answer != null && answer.completed ? 'success' : null}>\n\t\t\t<td><span>{audit.name}</span><br />{audit.meta_data.is_compulsory ? <span className=\"text-primary small pull-left\">Compulsory</span> : null}</td>\n\t\t\t<td className=\"align-right\">\n\t\t\t\t<Link \n\t\t\t\t\tclassName={(answer != null && answer.completed ? \"btn btn-success\" : \"btn btn-primary\") + (this.props.isLoading ? \" disabled\" : \"\")} \n\t\t\t\t\trole=\"button\" \n\t\t\t\t\tto={\"/calls/\" + this.props.customerId + \"/adminaudits/\" + audit.id + \"/\" + (answer != null ? answerIndex : this.getNewAnswerIndex(audit.id))}\n\t\t\t\t><i className=\"fa fa-pencil-square-o\"></i> Open</Link>\n\t\t\t</td>\n\t\t</tr>\n\t)\n\t\n\t//[We need to render rows for each completed/in-progress audit]\n\tcreateAuditsInProgressTable = () => {\n\t\tlet auditRows = [];\n\t\tlet i;\n\t\tfor(i = 0; i < this.props.audits.length; i++) {\n\t\t\tlet audit = this.props.audits[i];\n\t\t\tif(this.props.answers[audit.id] && this.props.answers[audit.id].length){\n\t\t\t\tlet j;\n\t\t\t\tfor(j = 0; j < this.props.answers[audit.id].length; j++) {\n\t\t\t\t\tif(this.props.answers[audit.id][j] != null){\n\t\t\t\t\t\tauditRows.push(this.createAuditRow(audit, null, null, this.props.answers[audit.id][j], j));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn (\n\t\t\t<div key=\"admin-audits-inprogress\" className=\"panel panel-default table-responsive mor-list\">\n\t\t\t\t<div className=\"panel-heading\">\n\t\t\t\t\t<h4 className=\"panel-title\">Audits In Progress</h4>\n\t\t\t\t</div>\n\t\t\t\t<table className=\"table table-striped\">\n\t\t\t\t\t<tbody>\n\t\t\t\t\t\t{ auditRows }\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t</div>\n\t\t);\n\t}\n\t\n\t//[We always render a fresh unedited row per audit regardless (ready for use)]\n\tcreateAuditsTable = () => (\n\t\t<div key=\"admin-audits-available\" className=\"panel panel-default table-responsive mor-list\">\n\t\t\t<div className=\"panel-heading\">\n\t\t\t\t<h4 className=\"panel-title\">Audits Available</h4>\n\t\t\t</div>\n\t\t\t<table className=\"table table-striped\">\n\t\t\t\t<tbody>\n\t\t\t\t\t{ this.props.audits.map(this.createAuditRow) }\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t</div>\n\t)\n\t\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Spinner isVisible={this.props.isLoading} />\n\t\t\t\t{ \n\t\t\t\tthis.props.audits.length ?\n\t\t\t\t\t([\n\t\t\t\t\t\t( this.haveAnswers() ? this.createAuditsInProgressTable() : null ),\n\t\t\t\t\t\tthis.createAuditsTable()\n\t\t\t\t\t])\n\t\t\t\t:\n\t\t\t\t\t<div className={this.props.isLoading ? 'hidden' : 'text-empty mor-list'}>\n\t\t\t\t\t\tPlease refresh to obtain admin audits for this customer\n\t\t\t\t\t</div>\n\t\t\t\t}\n\t\t\t</div>\n\t\t);\n\t}\n};\n\nmodule.exports = AdminAuditList;","\"use strict\";\n\n//Constants mapping to server question answer action integers\nmodule.exports = {\n\tDO_NOTHING:\t\t\t\t\t\t\t\t0,\n\tHIDE_REMAINING:\t\t\t\t\t\t\t1,\t//Hide all remaining questions in this audit\n\tSHOW_DEPENDENT:\t\t\t\t\t\t\t2,\t//Show all dependent questions\n\tSHOW_DEPENDENT_HIDE_REMAINING_GROUP:\t3,\t//Show all dependent questions and hide all remaining questions in this group\n\tSHOW_DEPENDENT_HIDE_REMAINING:\t\t\t4\t//Show all dependent questions and hide all remaining questions in this audit\n};","\"use strict\";\n\nimport React from 'react';\nvar Question = require('./question');\nvar Types = require('../../constants/questionTypes');\n\nvar QuestionGroup = React.createClass({\n\tpropTypes: {\n\t\tgroup: React.PropTypes.object.isRequired,\n\t\tauditAnswer: React.PropTypes.object.isRequired,\n\t\tonChange: React.PropTypes.func.isRequired\n\t},\n\t/*getDefaultProps: function() {\n\t\treturn {\n\t\t\tgroup: {}\n\t\t};\n\t},*/\n\t\n\trender: function(){\n\t\treturn (\n\t\t\t<div className=\"panel panel-default\">\n\t\t\t\t<div className=\"panel-heading\"><h3 className=\"panel-title\">{this.props.group.name}</h3></div>\n\t\t\t\t\n\t\t\t\t<ul className=\"list-group\">\n\t\t\t\t\t{this.props.group.questions.map(function(question){\n\t\t\t\t\t\treturn ((this.props.auditAnswer[question.id] && this.props.auditAnswer[question.id].visible) ? <Question key={question.id} question={question} answer={this.props.auditAnswer[question.id] ? this.props.auditAnswer[question.id] : {}} onChange={this.props.onChange} /> : null);\n\t\t\t\t\t}, this)}\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t);\n\t}\n});\n\nexport default QuestionGroup;","\"use strict\";\n\n\nimport React from 'react';\nimport $ from 'jquery';\nwindow.$ = $;\nvar Types = require('../../constants/questionTypes');\nvar Ans = require('../../constants/questionAnswers');\nvar SignatureModal = require('../common/signatureModal');\n\nvar DatePicker = require('react-datepicker');\nvar moment = require('moment'); //needed by datepicker\n\nvar _ = require('lodash');\nvar util = require('../../util.js');\n\n\n\nvar Question = React.createClass({\n\tpropTypes: {\n\t\tquestion: React.PropTypes.object.isRequired,\n\t\tanswer: React.PropTypes.object.isRequired,\n\t\tonChange: React.PropTypes.func.isRequired\n\t},\n\t/*getDefaultProps: function() {\n\t\treturn {\n\t\t\tquestion: {},\n\t\t\tanswer: {}\n\t\t};\n\t},*/\n\t\n\tgetInitialState: function() {\n\t\treturn {\n\t\t\tisSignatureModalVisible: false\n\t\t};\n\t},\n\t\n\thandleQuestionChange: function(questionAnswerData) {\n\t\t//merge in (overwrite) question answer form data with the necessary meta data and call changes save callback\n\t\tthis.props.onChange(_.assign({\n\t\t\t'question_id': this.props.question.id,\n\t\t\t'type': this.props.question.type,\n\t\t\t'score': ((this.props.question.weighting && this.props.question.is_compulsory && questionAnswerData.correct) ? this.props.question.weighting : 0), \n\t\t\t'location': util.location.string,\n\t\t\t'timestamp': util.getUnixTime()\n\t\t\t//potentially check for this being a changed answer\n\t\t}, questionAnswerData));\n\t\t//console.log(this.props.question, questionAnswerData);\n\t},\n\thandleYesNoClick: function(event) {\n\t\tvar answer = $(event.target).closest('.btn').attr('data-yes-no');\n\t\tthis.handleQuestionChange({\n\t\t\t'yes_no': answer,\n\t\t\t'correct': ( (answer == Ans.YES && (this.props.question.correct_answer == 1 || this.props.question.correct_answer.toUpperCase() == 'YES')) ||\n\t\t\t\t\t\t(answer == Ans.NO && (this.props.question.correct_answer == 0 || this.props.question.correct_answer.toUpperCase() == 'NO')) ),\n\t\t\t'answered': true\t\t\t\n\t\t});\n\t},\n\thandleProductAvailabilityClick: function(event) {\n\t\tvar answer = $(event.target).closest('.btn').attr('data-product-availability');\n\t\tvar productAvailable = (answer == Ans.AVAILABLE);\n\t\tvar productNotAvailable = (answer == Ans.NOT_AVAILABLE);\n\t\tvar priceEntered = (this.props.answer.product_price != null && this.props.answer.product_price !== '');\n\t\tvar facingsEntered = (this.props.answer.product_facings != null && this.props.answer.product_facings !== '');\n\t\tthis.handleQuestionChange({\n\t\t\t'product_availability': answer,\n\t\t\t//considered correct if: \n\t\t\t//- product not available button selected\n\t\t\t//- product available button selected and necessary fields filled in\n\t\t\t'correct': (productNotAvailable ? true : (this.props.question.type == Types.PRODUCT_FACING ? (productAvailable && priceEntered && facingsEntered) : (productAvailable && priceEntered))),\n\t\t\t'answered': (productNotAvailable ? true : (this.props.question.type == Types.PRODUCT_FACING ? (priceEntered && facingsEntered) : priceEntered))\n\t\t});\n\t},\n\thandleProductPriceChange: function(event) {\n\t\tlet formattedCurrencyAnswer = util.formatCurrency(event.target.value, (event.type != 'blur'), true);\n\t\tlet displayAnswer = formattedCurrencyAnswer.displayValue;\n\t\tlet answer = formattedCurrencyAnswer.value;\n\t\t\n\t\tvar priceEntered = (answer !== '');\n\t\tvar facingsEntered = (this.props.answer.product_facings != null && this.props.answer.product_facings !== '');\n\t\tvar productSelection = (this.props.answer.product_availability != null && this.props.answer.product_availability !== ''); //A selection made\n\t\tvar productAvailable = (this.props.answer.product_availability != null && this.props.answer.product_availability == Ans.AVAILABLE); //'Available' selected\n\t\tvar productNotAvailable = (this.props.answer.product_availability != null && this.props.answer.product_availability == Ans.NOT_AVAILABLE); //'Not available' selected\n\t\tthis.handleQuestionChange({\n\t\t\t'product_price_display': displayAnswer,\n\t\t\t'product_price': answer,\n\t\t\t//considered correct if: \n\t\t\t//- product not available button selected\n\t\t\t//- product available button selected and necessary fields filled in\n\t\t\t'correct': (productNotAvailable ? true : (this.props.question.type == Types.PRODUCT_FACING ? (productAvailable && priceEntered && facingsEntered) : (productAvailable && priceEntered))),\n\t\t\t'answered': (productNotAvailable ? true : (this.props.question.type == Types.PRODUCT_FACING ? (productSelection && priceEntered && facingsEntered) : (productSelection && priceEntered)))\n\t\t});\n\t},\n\thandleProductFacingsChange: function(event) {\n\t\tvar answer = (event.target.value !== '') ? parseInt(event.target.value) : '';\n\t\tvar facingsEntered = (answer !== '');\n\t\tvar priceEntered = (this.props.answer.product_price != null && this.props.answer.product_price !== '');\n\t\tvar productSelection = (this.props.answer.product_availability != null && this.props.answer.product_availability !== ''); //A selection made\n\t\tvar productAvailable = (this.props.answer.product_availability != null && this.props.answer.product_availability == Ans.AVAILABLE); //'Available' selected\n\t\tvar productNotAvailable = (this.props.answer.product_availability != null && this.props.answer.product_availability == Ans.NOT_AVAILABLE); //'Not available' selected\n\t\tthis.handleQuestionChange({\n\t\t\t'product_facings': answer,\n\t\t\t//considered correct if: \n\t\t\t//- product not available button selected\n\t\t\t//- product available button selected and necessary fields filled in\n\t\t\t//(Retain product facings question type check for now, even though should be redundant here)\n\t\t\t'correct': (productNotAvailable ? true : (this.props.question.type == Types.PRODUCT_FACING ? (productAvailable && priceEntered && facingsEntered) : (productAvailable && priceEntered))),\n\t\t\t'answered': (productNotAvailable ? true : (this.props.question.type == Types.PRODUCT_FACING ? (productSelection && priceEntered && facingsEntered) : (productSelection && priceEntered)))\n\t\t});\n\t},\n\thandleFreeTextChange: function(event) {\n\t\tvar answer = event.target.value;\n\t\tthis.handleQuestionChange({\n\t\t\t'free_text': answer,\n\t\t\t'correct': (answer !== ''),\n\t\t\t'answered': (answer !== '')\n\t\t});\n\t},\n\thandleBarcodeChange: function(event) {\n\t\tvar answer = event.target.value;\n\t\tthis.handleQuestionChange({\n\t\t\t'barcode': answer,\n\t\t\t'correct': (answer !== ''),\n\t\t\t'answered': (answer !== '')\n\t\t});\n\t},\n\thandleNumericChange: function(event) {\n\t\tvar answer = (event.target.value !== '') ? parseFloat(event.target.value) : '';\n\t\tthis.handleQuestionChange({\n\t\t\t'numeric': answer,\n\t\t\t'correct': (answer !== ''),\n\t\t\t'answered': (answer !== '')\n\t\t});\n\t},\n\thandleCurrencyChange: function(event) {\n\t\tlet formattedCurrencyAnswer = util.formatCurrency(event.target.value, (event.type != 'blur'), true);\n\t\tlet displayAnswer = formattedCurrencyAnswer.displayValue;\n\t\tlet answer = formattedCurrencyAnswer.value;\n\t\t\n\t\tthis.handleQuestionChange({\n\t\t\t'currency_display': displayAnswer,\n\t\t\t'currency': answer,\n\t\t\t'correct': (answer !== ''),\n\t\t\t'answered': (answer !== '')\n\t\t});\n\t},\n\thandleSelectionChange: function(event) {\n\t\tvar optionsSelected;\n\t\tvar correct = false;\n\t\tvar answered = false;\n\t\t\n\t\tif(this.props.question.type == Types.MULTI_SELECT){\n\t\t\toptionsSelected = [];\n\t\t\tvar options = event.target.options;\n\t\t\tfor (var i = 0, l = options.length; i < l; i++) {\n\t\t\t\tif (options[i].selected) {\n\t\t\t\t\toptionsSelected.push(options[i].value);\n\t\t\t\t\tanswered = true;\n\t\t\t\t\t\n\t\t\t\t\t//Check whether this selected item is a correct answer\n\t\t\t\t\t//Can use correct_answer (string with ^^ delimited options) or correct_answer_array\n\t\t\t\t\t//(Premises:\n\t\t\t\t\t// - If correct_answer is a blank string, answer is never considered correct!\n\t\t\t\t\t// - We only need one matching correct option, so only bother with this check if none yet found)\n\t\t\t\t\tif(this.props.question.correct_answer != '' && !correct){\n\t\t\t\t\t\tfor(var j = 0, m = this.props.question.correct_answer_array.length; j < m; j++) {\n\t\t\t\t\t\t\t//(the correct answers provided specify option text rather than value)\n\t\t\t\t\t\t\tif(this.props.question.correct_answer_array[j] == options[i].text){ \n\t\t\t\t\t\t\t\tcorrect = true;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}else{\n\t\t\toptionsSelected = event.target.value;\n\t\t\tanswered = (optionsSelected !== '');\n\t\t\t\n\t\t\t//Check whether this selected item is a correct answer\n\t\t\t//Can use correct_answer (string with ^^ delimited options) or correct_answer_array\n\t\t\t//(Premise:\n\t\t\t// - If correct_answer is a blank string, answer is never considered correct!)\n\t\t\tif(this.props.question.correct_answer != ''){\n\t\t\t\t//Obtain selected option TEXT (the correct answers provided specify option text rather than value)\n\t\t\t\tvar textSelected = _.result(_.find(event.target.options, {'value': optionsSelected}), 'text');\n\n\t\t\t\tfor(var k = 0, n = this.props.question.correct_answer_array.length; k < n; k++) {\n\t\t\t\t\tif(this.props.question.correct_answer_array[k] == textSelected){\n\t\t\t\t\t\tcorrect = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.handleQuestionChange({\n\t\t\t'options_selected': optionsSelected, //either a value or an array of values (multi-select)\n\t\t\t'correct': correct,\n\t\t\t'answered': answered\n\t\t});\n\t},\n\thandleDateChange: function(date) {\n\t\t//console.log(date.format(\"YYYY-MM-DD\"));\n\t\tthis.handleQuestionChange({\n\t\t\t'date': ((date != null) ? date.format(\"YYYY-MM-DD\") : ''),\n\t\t\t'correct': (date != null),\n\t\t\t'answered': (date != null)\n\t\t});\n\t},\n\thandleFileChange: function(event) {\n\t\t//var answer = event.target.value;\n\t\tif(event.target.files.length){\n\t\t\tvar file = event.target.files[0];\n\t\t\tvar thisComponent = this;\n\t\t\t$.canvasResize(file, {\n\t\t\t\t//(These settings will result in a final image fitting within 500x500 without cropping) \n\t\t\t\twidth: 500,\n\t\t\t\theight: 500,\n\t\t\t\tcrop: false,\n\t\t\t\tquality: 70, //80,\n\t\t\t\t//rotate: 90,\n\t\t\t\tcallback: function(data, width, height){\n\t\t\t\t\t//console.log(data);\n\t\t\t\t\t//console.log($.canvasResize('dataURLtoBlob', data));\n\t\t\t\t\tvar strBase64EncodedImageData = '';\n\t\t\t\t\tif(data){\n\t\t\t\t\t\t//Show as an image (debug)\n\t\t\t\t\t\t/*$('<img>').load(function(){\n\t\t\t\t\t\t\t$(this).css({ 'width': width, 'height': height }).appendTo('#pictest');\n\t\t\t\t\t\t}).attr('src', data);*/\n\t\t\t\t\t\t\n\t\t\t\t\t\t//Keep image encoded as is (base 64), as we need to submit it in this format \n\t\t\t\t\t\t//Additionally perform a string replacement to encode all '+' as '%2B' (will be URL-decoded back again on server)\n\t\t\t\t\t\tstrBase64EncodedImageData = data.split(',')[1].replace(/\\+/g, \"%2B\");\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tthisComponent.handleQuestionChange({\n\t\t\t\t\t\t'image': strBase64EncodedImageData,\n\t\t\t\t\t\t'correct': (strBase64EncodedImageData !== ''),\n\t\t\t\t\t\t'answered': (strBase64EncodedImageData !== '')\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t}else{\n\t\t\tthis.handleQuestionChange({\n\t\t\t\t'image': '',\n\t\t\t\t'correct': false,\n\t\t\t\t'answered': false\n\t\t\t});\n\t\t}\t\n\t},\n\thandleFileRemove: function() {\n\t\tthis.handleQuestionChange({\n\t\t\t'image': '',\n\t\t\t'correct': false,\n\t\t\t'answered': false\n\t\t});\n\t},\n\thandleSignatureChange: function(signatureData) {\n\t\tvar isComplete = Boolean(\n\t\t\tsignatureData.id != null &&\n\t\t\tsignatureData.name != null && signatureData.name.length &&\n\t\t\tsignatureData.file != null && signatureData.file.length\n\t\t);\n\t\t\n\t\tthis.handleQuestionChange({\n\t\t\t'signature_id': signatureData.id,\n\t\t\t'signature_name': signatureData.name,\n\t\t\t'signature_comments': signatureData.comments,\n\t\t\t'signature_file': signatureData.file,\n\t\t\t'correct': isComplete,\n\t\t\t'answered': isComplete\n\t\t});\n\t},\n\thandleSignatureOpen: function() {\n\t\tthis.setState({ isSignatureModalVisible: true });\n\t},\n\thandleSignatureClose: function() {\n\t\tthis.setState({ isSignatureModalVisible: false });\n\t},\n\tsignatureIsComplete: function(){\n\t\treturn (\n\t\t\tthis.props.answer.signature_id != null &&\n\t\t\tthis.props.answer.signature_name != null && this.props.answer.signature_name.length &&\n\t\t\tthis.props.answer.signature_file != null && this.props.answer.signature_file.length\n\t\t);\n\t},\n\t\n\trenderInputs: function(){\n\t\t//console.log(this.props.question);\n\t\t\n\t\tvar inputs;\n\t\tvar radioName = 'options' + this.props.question.id;\n\t\tvar radioID = 'option' + this.props.question.id;\n\t\t\n\t\tswitch(this.props.question.type){\n\t\t\tcase Types.PRODUCT:\n\t\t\tcase Types.PRODUCT_FACING:\n\t\t\t\tvar currencySymbol = util.getCompanyCurrency().symbol;\n\t\t\t\t\n\t\t\t\tvar facingsInput = '';\n\t\t\t\tif(this.props.question.type == Types.PRODUCT_FACING){\n\t\t\t\t\tfacingsInput = \n\t\t\t\t\t<div className=\"col-xs-6\">\n\t\t\t\t\t\t<input type=\"number\" min=\"0\" step=\"1\" className=\"form-control\" placeholder=\"Facings\" value={this.props.answer.product_facings} onChange={this.handleProductFacingsChange} disabled={this.props.answer.product_availability == Ans.NOT_AVAILABLE} autoComplete=\"off\" />\n\t\t\t\t\t</div>;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//No need for controlled radio input components, as we're not using them (e.g. onChange={this.handleChange} checked={this.props.answer.product_availability == 'available' ? 'checked' : ''})\n\t\t\t\tinputs = \n\t\t\t\t<div className=\"question-inputs\">\n\t\t\t\t\t<div className=\"btn-group\" data-toggle=\"buttons\">\n\t\t\t\t\t\t<label className={this.props.answer.product_availability == Ans.AVAILABLE ? \"btn btn-primary active\" : \"btn btn-default\"} data-product-availability={Ans.AVAILABLE} onClick={this.handleProductAvailabilityClick}>\n\t\t\t\t\t\t\t<input type=\"radio\" name={radioName} id={radioID + Ans.AVAILABLE} autoComplete=\"off\" /> Available\n\t\t\t\t\t\t</label>\n\t\t\t\t\t\t<label className={this.props.answer.product_availability == Ans.OUT_OF_STOCK ? \"btn btn-primary active\" : \"btn btn-default\"} data-product-availability={Ans.OUT_OF_STOCK} onClick={this.handleProductAvailabilityClick}>\n\t\t\t\t\t\t\t<input type=\"radio\" name={radioName} id={radioID + Ans.OUT_OF_STOCK} autoComplete=\"off\" /> Out Of Stock\n\t\t\t\t\t\t</label>\n\t\t\t\t\t\t<label className={this.props.answer.product_availability == Ans.NOT_AVAILABLE ? \"btn btn-primary active\" : \"btn btn-default\"} data-product-availability={Ans.NOT_AVAILABLE} onClick={this.handleProductAvailabilityClick}>\n\t\t\t\t\t\t\t<input type=\"radio\" name={radioName} id={radioID + Ans.NOT_AVAILABLE} autoComplete=\"off\" /> Not Available\n\t\t\t\t\t\t</label>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"row\" style={{marginTop: '5px'}}>\n\t\t\t\t\t\t<div className=\"col-xs-6\">\n\t\t\t\t\t\t\t<div className=\"input-group\">\n\t\t\t\t\t\t\t\t<span className=\"input-group-addon\">{currencySymbol}</span>\n\t\t\t\t\t\t\t\t<input type=\"text\" className=\"form-control\" placeholder=\"Price\" value={this.props.answer.product_price_display} onChange={this.handleProductPriceChange} onBlur={this.handleProductPriceChange} disabled={this.props.answer.product_availability == Ans.NOT_AVAILABLE} autoComplete=\"off\" />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t{facingsInput}\n\t\t\t\t\t</div>\n\t\t\t\t</div>;\n\t\t\t\tbreak;\n\t\t\tcase Types.YES_NO:\n\t\t\t\t//<button className=\"btn btn-primary\" onClick={this.saveInputAnswer} autoComplete=\"off\">Yes</button>\n\t\t\t\t//No need for controlled radio input components, as we're not using them (e.g. onChange={this.handleChange} checked={this.props.answer.yes_no ? 'checked' : ''})\n\t\t\t\tinputs = \n\t\t\t\t<div className=\"question-inputs\">\n\t\t\t\t\t<div className=\"btn-group\" data-toggle=\"buttons\">\n\t\t\t\t\t\t<label className={this.props.answer.yes_no == Ans.YES ? \"btn btn-primary active\" : \"btn btn-default\"} data-yes-no={Ans.YES} onClick={this.handleYesNoClick}>\n\t\t\t\t\t\t\t<input type=\"radio\" name={radioName} id={radioID + Ans.YES} autoComplete=\"off\" /> Yes\n\t\t\t\t\t\t</label>\n\t\t\t\t\t\t<label className={this.props.answer.yes_no == Ans.NO ? \"btn btn-primary active\" : \"btn btn-default\"} data-yes-no={Ans.NO} onClick={this.handleYesNoClick}>\n\t\t\t\t\t\t\t<input type=\"radio\" name={radioName} id={radioID + Ans.NO} autoComplete=\"off\" /> No\n\t\t\t\t\t\t</label>\n\t\t\t\t\t</div>\n\t\t\t\t</div>;\n\t\t\t\tbreak;\n\t\t\tcase Types.FREE_TEXT:\n\t\t\t\tinputs = \n\t\t\t\t<div className=\"question-inputs\">\n\t\t\t\t\t<input type=\"text\" className=\"form-control\" value={this.props.answer.free_text} onChange={this.handleFreeTextChange} autoComplete=\"off\" />\n\t\t\t\t</div>;\n\t\t\t\tbreak;\n\t\t\tcase Types.BARCODE:\n\t\t\t\tinputs = \n\t\t\t\t<div className=\"question-inputs\">\n\t\t\t\t\t<input type=\"text\" className=\"form-control\" value={this.props.answer.barcode} onChange={this.handleBarcodeChange} autoComplete=\"off\" />\n\t\t\t\t</div>;\n\t\t\t\tbreak;\t\n\t\t\tcase Types.MULTIPLE_CHOICE:\n\t\t\tcase Types.MULTI_SELECT:\n\t\t\t\tinputs = \n\t\t\t\t<div className=\"question-inputs\">\n\t\t\t\t\t<select multiple={this.props.question.type == Types.MULTI_SELECT} className=\"form-control\" value={this.props.answer.options_selected} onChange={this.handleSelectionChange} autoComplete=\"off\">\n\t\t\t\t\t\t{this.props.question.type == Types.MULTIPLE_CHOICE ? <option key=\"noselection\" value=\"\">(Please select)</option> : ''}\n\t\t\t\t\t\t{this.props.question.multiple_choice_options.map(function(option){\n\t\t\t\t\t\t\treturn <option key={option.id} value={option.id}>{option.title}</option>;\n\t\t\t\t\t\t})} \n\t\t\t\t\t</select>\n\t\t\t\t</div>;\n\t\t\t\tbreak;\n\t\t\tcase Types.PHOTO:\n\t\t\t\t//Alternative input declaration: <input type=\"file\" accept=\"image/*;capture=camera\" onChange={this.handleFileChange} />\n\t\t\t\tinputs = \n\t\t\t\t<div className=\"question-inputs\">\n\t\t\t\t\t{\n\t\t\t\t\t\t(this.props.answer.image != null && this.props.answer.image !== '') ? \n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<span className=\"text-primary\">File added</span>\n\t\t\t\t\t\t\t<button className=\"btn btn-default\" onClick={this.handleFileRemove} style={{marginLeft: '5px'}}>Remove</button>\n\t\t\t\t\t\t</div> :\n\t\t\t\t\t\t<input type=\"file\" accept=\"image/*\" capture=\"camera\" onChange={this.handleFileChange} /> \n\t\t\t\t\t\t//<input type=\"file\" accept=\"image/*\" capture=\"camera\" onChange={this.handleFileChange} ref={function(input){\n\t\t\t\t\t\t\t//if (input != null) { //Necessary check (is null whenever input component unmounted)\n\t\t\t\t\t\t\t\t//Fix to support capture attribute, only available from React v0.14 (leaving capture attribute in component declaration above for completeness/clarity)\n\t\t\t\t\t\t\t\t//input.getDOMNode().setAttribute(\"capture\", \"camera\");\n\t\t\t\t\t\t\t\t//New way with React v0.14 (btw):\n\t\t\t\t\t\t\t\t//input.setAttribute(\"capture\", \"camera\");\n\t\t\t\t\t\t\t//} \n\t\t\t\t\t\t//}} />\n\t\t\t\t\t}\n\t\t\t\t</div>;\t\n\t\t\t\tbreak;\n\t\t\tcase Types.NUMERIC:\n\t\t\t\tinputs = \n\t\t\t\t<div className=\"row question-inputs\">\n\t\t\t\t\t<div className=\"col-xs-6\">\n\t\t\t\t\t\t<input type=\"number\" min=\"0\" step=\"1\" className=\"form-control\" value={this.props.answer.numeric} onChange={this.handleNumericChange} autoComplete=\"off\" />\n\t\t\t\t\t</div>\n\t\t\t\t</div>;\n\t\t\t\tbreak;\n\t\t\tcase Types.CURRENCY:\n\t\t\t\tvar currencySymbol = util.getCompanyCurrency().symbol;\n\t\t\t\t\n\t\t\t\tinputs = \n\t\t\t\t<div className=\"row question-inputs\">\n\t\t\t\t\t<div className=\"col-xs-6\">\n\t\t\t\t\t\t<div className=\"input-group\">\n\t\t\t\t\t\t\t<span className=\"input-group-addon\">{currencySymbol}</span>\n\t\t\t\t\t\t\t<input type=\"text\" className=\"form-control\" value={this.props.answer.currency_display} onChange={this.handleCurrencyChange} onBlur={this.handleCurrencyChange} autoComplete=\"off\" />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>;\n\t\t\t\tbreak;\n\t\t\tcase Types.DATE:\n\t\t\t\tinputs = \n\t\t\t\t<div className=\"row question-inputs\">\n\t\t\t\t\t<div className=\"col-xs-6\">\n\t\t\t\t\t\t<DatePicker selected={this.props.answer.date ? moment(this.props.answer.date, \"YYYY-MM-DD\") : null} onChange={this.handleDateChange} placeholderText=\"Select date\" className=\"form-control\" />\n\t\t\t\t\t</div>\t\n\t\t\t\t</div>;\n\t\t\t\tbreak;\n\t\t\tcase Types.SIGNATURE:\n\t\t\t\tlet blnComplete = this.signatureIsComplete();\n\t\t\t\t\n\t\t\t\tinputs = \n\t\t\t\t<div className=\"row question-inputs\">\n\t\t\t\t\t{ \n\t\t\t\t\t\tthis.state.isSignatureModalVisible ?\n\t\t\t\t\t\t<SignatureModal \n\t\t\t\t\t\t\ttitle={ this.props.question.signature_name.substr(0, 1).toUpperCase() + this.props.question.signature_name.substr(1) + \" Signature\" }\n\t\t\t\t\t\t\tsignature={{ \n\t\t\t\t\t\t\t\tid: this.props.question.signature_id,\n\t\t\t\t\t\t\t\tname: this.props.answer.signature_name,\n\t\t\t\t\t\t\t\tcomments: this.props.answer.signature_comments,\n\t\t\t\t\t\t\t\tfile: this.props.answer.signature_file \n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tonSave={this.handleSignatureChange}\n\t\t\t\t\t\t\tonClose={this.handleSignatureClose}\n\t\t\t\t\t\t/> : null \n\t\t\t\t\t}\n\t\t\t\t\t<div className=\"col-xs-6\">\n\t\t\t\t\t\t<button className={\"btn btn-\" + (blnComplete ? \"success\" : \"default\")} onClick={this.handleSignatureOpen}><i className={\"fa fa-\" + (blnComplete ? \"check\" : \"pencil\")}></i> {this.props.question.signature_name}</button>\n\t\t\t\t\t</div>\t\n\t\t\t\t</div>;\n\t\t\t\tbreak;\t\t\t\t\t\t\n\t\t\tdefault:\n\t\t\t\t//inputs = <div className=\"question-inputs\">inputs here</div>;\t\n\t\t}\n\t\t\n\t\treturn inputs;\n\t},\n\trender: function(){\n\t\treturn (\n\t\t\t<li className=\"list-group-item\">\n\t\t\t\t<div>{this.props.question.title} {(this.props.question.is_compulsory ? <span className=\"text-primary\">*</span> : '')}</div>\n\t\t\t\t{this.renderInputs()}\n\t\t\t</li>\n\t\t);\n\t}\n});\n\nexport default Question;","\"use strict\";\n\n//Constants mapping to server question answer strings (used for non-textual selections)\n//Let's store the value needed for server submission, rather than our own\nmodule.exports = {\n\tAVAILABLE:\t\t\t\"1\",\t//\"product-available\",\n\tOUT_OF_STOCK:\t\t\"2\",\t//\"product-out-of-stock\",\n\tNOT_AVAILABLE:\t\t\"3\",\t//\"product-not-available\",\n\tYES:\t\t\t\t\"Yes\",\t//\"yes\",\n\tNO:\t\t\t\t\t\"No\"\t//\"no\"\n};","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nfunction Bezier(startPoint, control1, control2, endPoint) {\n  this.startPoint = startPoint;\n  this.control1 = control1;\n  this.control2 = control2;\n  this.endPoint = endPoint;\n}\n\n// Returns approximated length.\nBezier.prototype.length = function getCurveLength() {\n  var steps = 10;\n  var length = 0;\n  var px = void 0;\n  var py = void 0;\n\n  for (var i = 0; i <= steps; i += 1) {\n    var t = i / steps;\n    var cx = this.point(t, this.startPoint.x, this.control1.x, this.control2.x, this.endPoint.x);\n    var cy = this.point(t, this.startPoint.y, this.control1.y, this.control2.y, this.endPoint.y);\n    if (i > 0) {\n      var xdiff = cx - px;\n      var ydiff = cy - py;\n      length += Math.sqrt(xdiff * xdiff + ydiff * ydiff);\n    }\n    px = cx;\n    py = cy;\n  }\n\n  return length;\n};\n\nBezier.prototype.point = function calculatePoint(t, start, c1, c2, end) {\n  return start * (1.0 - t) * (1.0 - t) * (1.0 - t) + 3.0 * c1 * (1.0 - t) * (1.0 - t) * t + 3.0 * c2 * (1.0 - t) * t * t + end * t * t * t;\n};\n\nexports.default = Bezier;\n//# sourceMappingURL=bezier.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.throttle = throttle;\nexports.trim = trim;\nexports.canvasHasData = canvasHasData;\nexports.calculateCurveControlPoints = calculateCurveControlPoints;\n\nvar _point = require('./point');\n\nvar _point2 = _interopRequireDefault(_point);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// http://stackoverflow.com/a/27078401/815507\nfunction throttle(func, wait, options) {\n  for (var _len = arguments.length, all = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n    all[_key - 3] = arguments[_key];\n  }\n\n  var context = void 0;\n  var args = void 0;\n  var result = void 0;\n  var timeout = null;\n  var previous = 0;\n  var opts = options || {};\n  var later = function later() {\n    previous = opts.leading === false ? 0 : Date.now();\n    timeout = null;\n    result = func.apply(context, args);\n    if (!timeout) {\n      args = null;\n      context = args;\n    }\n  };\n  return function call() {\n    var now = Date.now();\n    if (!previous && opts.leading === false) previous = now;\n    var remaining = wait - (now - previous);\n    context = this;\n    args = all;\n    if (remaining <= 0 || remaining > wait) {\n      if (timeout) {\n        clearTimeout(timeout);\n        timeout = null;\n      }\n      previous = now;\n      result = func.apply(context, args);\n      if (!timeout) {\n        args = null;\n        context = args;\n      }\n    } else if (!timeout && opts.trailing !== false) {\n      timeout = setTimeout(later, remaining);\n    }\n    return result;\n  };\n}\n\n// https://gist.github.com/remy/784508\n\nfunction trim(canvas) {\n  var ctx = canvas.getContext('2d');\n  var copy = document.createElement('canvas').getContext('2d');\n  var pixels = ctx.getImageData(0, 0, canvas.width, canvas.height);\n  var length = pixels.data.length;\n  var bound = {\n    top: null,\n    left: null,\n    right: null,\n    bottom: null\n  };\n  for (var i = 0; i < length; i += 4) {\n    if (pixels.data[i + 3] !== 0) {\n      var x = i / 4 % canvas.width;\n      var y = Math.floor(i / 4 / canvas.width);\n\n      if (bound.top === null) {\n        bound.top = y;\n      }\n\n      if (bound.left === null) {\n        bound.left = x;\n      } else if (x < bound.left) {\n        bound.left = x;\n      }\n\n      if (bound.right === null) {\n        bound.right = x;\n      } else if (bound.right < x) {\n        bound.right = x;\n      }\n\n      if (bound.bottom === null) {\n        bound.bottom = y;\n      } else if (bound.bottom < y) {\n        bound.bottom = y;\n      }\n    }\n  }\n\n  var trimHeight = bound.bottom - bound.top;\n  var trimWidth = bound.right - bound.left;\n  var trimmed = ctx.getImageData(bound.left, bound.top, trimWidth, trimHeight);\n\n  copy.canvas.width = trimWidth;\n  copy.canvas.height = trimHeight;\n  copy.putImageData(trimmed, 0, 0);\n  return copy.canvas;\n}\n\nfunction canvasHasData(canvas) {\n  var ctx = canvas.getContext('2d');\n  var pixels = ctx.getImageData(0, 0, canvas.width, canvas.height);\n  var length = pixels.data.length;\n  \n  var blnHasData = false;\n  \n  for (var i = 0; i < length; i += 4) {\n    if (pixels.data[i + 3] !== 0) {\n      //var x = i / 4 % canvas.width;\n      //var y = Math.floor(i / 4 / canvas.width);\n\t\tblnHasData = true;\n\t\tbreak;\n    }\n  }\n\treturn blnHasData;\n}\n\nfunction calculateCurveControlPoints(s1, s2, s3) {\n  var dx1 = s1.x - s2.x;\n  var dy1 = s1.y - s2.y;\n  var dx2 = s2.x - s3.x;\n  var dy2 = s2.y - s3.y;\n\n  var m1 = { x: (s1.x + s2.x) / 2.0, y: (s1.y + s2.y) / 2.0 };\n  var m2 = { x: (s2.x + s3.x) / 2.0, y: (s2.y + s3.y) / 2.0 };\n\n  var l1 = Math.sqrt(dx1 * dx1 + dy1 * dy1);\n  var l2 = Math.sqrt(dx2 * dx2 + dy2 * dy2);\n\n  var dxm = m1.x - m2.x;\n  var dym = m1.y - m2.y;\n\n  var k = l2 / (l1 + l2);\n  var cm = { x: m2.x + dxm * k, y: m2.y + dym * k };\n\n  var tx = s2.x - cm.x;\n  var ty = s2.y - cm.y;\n\n  return {\n    c1: new _point2.default(m1.x + tx, m1.y + ty),\n    c2: new _point2.default(m2.x + tx, m2.y + ty)\n  };\n}\n//# sourceMappingURL=util.js.map\n","\"use strict\";\n\nimport React from 'react';\nvar SignatureModal = require('../common/signatureModal');\n\nclass SignatureGroup extends React.Component {\n\tstatic propTypes = {\n\t\tsignatures: React.PropTypes.array.isRequired,\t\t//audit/requirements data\n\t\tsavedSignatures: React.PropTypes.array.isRequired,\t//provided/answer data\n\t\tonChange: React.PropTypes.func.isRequired\n\t};\n\t\n\t//NB: CANNOT use defaultProps for savedSignatures due to the way we're assigning it in this component\n\t//(otherwise causes issue where we're holding references to -and overwrite- other previous audits' signatures)\n\t//static defaultProps = {\n\t//\tsavedSignatures: []\n\t//};\n\t\n\tconstructor(props) {\n\t\tsuper(props);\n\t\t\n\t\t//Setup internal working/editable state (this.savedSignatures), based on provided props\n\t\t//Plain assignment rather than copy (it's a reference to parent authoritative state anyway)\n\t\tthis.savedSignatures = props.savedSignatures;\n\t\t\n\t\tthis.signatureEditIndex = null;\n\t\t\n\t\tthis.state = {\n\t\t\tisSignatureModalVisible: false,\n\t\t\tsignatureModalTitle: null\n\t\t};\n\t}\n\t\n\tcomponentWillReceiveProps(nextProps){\n\t\tthis.savedSignatures = nextProps.savedSignatures;\n\t}\n\t\n\tgetFreshSignatureObject = (id) => ({\n\t\tid: id,\n\t\tname: '',\n\t\tcomments: '',\n\t\tfile: ''\n\t})\n\t\n\teditSignature = (event) => {\n\t\tconst sigData = event.currentTarget.dataset;\n\t\tthis.signatureEditIndex = parseInt(sigData['idx']); //item to be edited\n\t\tthis.setState({\n\t\t\tisSignatureModalVisible: true,\n\t\t\tsignatureModalTitle: sigData['name'].substr(0, 1).toUpperCase() + sigData['name'].substr(1) + ' Signature',\n\t\t\tsignatureEditing: (this.savedSignatures[this.signatureEditIndex] != null ? this.savedSignatures[this.signatureEditIndex] : this.getFreshSignatureObject(sigData['id']))\n\t\t});\n\t}\n\t\n\t//\"Finishing\" and \"cancelling\" within the signature modal also make use of these 2 atomic operations (save and close):\n\t\n\tsaveSignature = (signatureData) => {\n\t\tthis.savedSignatures[this.signatureEditIndex] = signatureData;\n\t\t//Save (and thus also update display - props from parent)\n\t\tthis.props.onChange(this.savedSignatures);\n\t}\n\t\n\tcloseSignatureModal = () => {\n\t\tthis.signatureEditIndex = null;\n\t\tthis.setState({\n\t\t\tisSignatureModalVisible: false,\n\t\t\tsignatureModalTitle: null,\n\t\t\tsignatureEditing: null\n\t\t});\n\t}\n\t\n\tsignatureIsComplete = (idx) => (\n\t\tthis.savedSignatures != null && this.savedSignatures[idx] != null &&\n\t\tthis.savedSignatures[idx].name != null && this.savedSignatures[idx].name.length &&\n\t\tthis.savedSignatures[idx].file != null && this.savedSignatures[idx].file.length \n\t)\n\t\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"panel panel-default\">\n\t\t\t\t{ \n\t\t\t\t\tthis.state.isSignatureModalVisible ?\n\t\t\t\t\t<SignatureModal \n\t\t\t\t\t\ttitle={this.state.signatureModalTitle}\n\t\t\t\t\t\tsignature={this.state.signatureEditing}\n\t\t\t\t\t\tonSave={this.saveSignature}\n\t\t\t\t\t\tonClose={this.closeSignatureModal}\n\t\t\t\t\t/> : null \n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t<div className=\"panel-heading\">\n\t\t\t\t\t<h3 className=\"panel-title\">Signatures</h3>\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t<ul className=\"list-group\">\n\t\t\t\t\t{ this.props.signatures.map((signature, idx) => {\n\t\t\t\t\t\tlet blnComplete = this.signatureIsComplete(parseInt(idx));\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<li className=\"list-group-item\" key={idx}>\n\t\t\t\t\t\t\t\t<button className={\"btn btn-\" + (blnComplete ? \"success\" : \"default\")} data-idx={idx} data-id={signature.id} data-name={signature.name} onClick={this.editSignature}><i className={\"fa fa-\" + (blnComplete ? \"check\" : \"pencil\")}></i> {signature.name}</button>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t);\n\t\t\t\t\t}) }\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t);\n\t}\n};\n\nexport default SignatureGroup;","\"use strict\";\n\nimport React from 'react';\nvar LibraryStore = require('../../stores/libraryStore'); //normally only needed at controller view level (library page, e.g.) but we need it here for obtaining file details\nvar util = require('../../util.js');\n\nvar FileList = React.createClass({\n\tpropTypes: {\n\t\tcategoryID: React.PropTypes.string.isRequired, //(only needed to ensure unique react keys - if this is even necessary here?)\n\t\tfiles: React.PropTypes.array.isRequired,\n\t\tisLoading: React.PropTypes.bool\n\t},\n\tgetDefaultProps: function() {\n\t\treturn {\n\t\t\tisLoading: false\n\t\t};\n\t},\n\t\n\trender: function(){\n\t\tvar createFileRow = function(fileID){\n\t\t\t//Normally only need store at controller view level (library page, e.g.) but we need it here for efficiently obtaining file details\n\t\t\t//(we'd rather grab it whilst building the tree structure once)\n\t\t\tvar file = LibraryStore.getFile(fileID);\n\t\t\treturn (\n\t\t\t\t<tr key={this.props.categoryID + '-' + fileID}>\n\t\t\t\t\t<td>{file.name}</td>\n\t\t\t\t\t<td className=\"align-right\"><a href={util.apiUrl + 'file/download?file_id=' + file.id + '&' + util.getURLAuthString()} className={this.props.isLoading ? \"btn btn-primary disabled\" : \"btn btn-primary\"} role=\"button\"><i className=\"fa fa-download\"></i> Download</a></td>\n\t\t\t\t</tr>\n\t\t\t);\n\t\t};\n\t\t\n\t\treturn (\n\t\t\t<div>{/*<div className=\"table-responsive mor-list\">*/}\n\t\t\t\t{/*<div className={this.props.isLoading ? 'cssload-container show' : 'hidden'}><div className={this.props.isLoading ? 'cssload-wheel' : ''}></div></div>*/}\n\t\t\t\t{ \n\t\t\t\tthis.props.files.length ?\n\t\t\t\t<table className=\"table table-striped\" style={{'marginBottom': 0}}>\n\t\t\t\t\t<tbody>\n\t\t\t\t\t\t{this.props.files.map(createFileRow, this)}\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t\t:\n\t\t\t\t<div className={this.props.isLoading ? 'hidden' : 'text-muted'}>\n\t\t\t\t\tNo files to display\n\t\t\t\t</div>\n\t\t\t\t}\n\t\t\t</div>\n\t\t);\n\t}\n});\n\nexport default FileList;","\"use strict\";\n\nimport React from 'react';\nimport Spinner from '../common/spinner';\n//var Input = require('../common/textInput');\nimport CSSTransitionGroup from 'react-transition-group/CSSTransitionGroup';\n\nvar CommentForm = React.createClass({\n\tpropTypes: {\n\t\t//comment: React.PropTypes.object.isRequired, //don't need a whole object as just single field needed\n\t\tcomment: React.PropTypes.string.isRequired,\n\t\tonChange: React.PropTypes.func.isRequired,\n\t\tonSave: React.PropTypes.func.isRequired,\n\t\tonCancel: React.PropTypes.func.isRequired,\n\t\tisLoading: React.PropTypes.bool,\n\t\tisVisible: React.PropTypes.bool,\n\t\tisValid: React.PropTypes.bool\n\t},\n\tgetDefaultProps: function() {\n\t\treturn {\n\t\t\tisLoading: false,\n\t\t\tisVisible: false,\n\t\t\tisValid: false\n\t\t};\n\t},\n\t\n\trender: function(){\n\t\treturn (\n\t\t\t<CSSTransitionGroup component=\"div\"\n\t\t\t\ttransitionName=\"comment-form\"\n\t\t\t\ttransitionEnterTimeout={150}\n\t\t\t\ttransitionLeaveTimeout={100}>\n\t\t\t\t{\n\t\t\t\tthis.props.isVisible ?\n\t\t\t\t<form>\n\t\t\t\t\t<div className=\"comment-input\">\n\t\t\t\t\t\t<textarea className=\"form-control\" name=\"new-comment\" rows=\"3\" placeholder=\"Comment\" value={this.props.comment} onChange={this.props.onChange} autoComplete=\"off\" disabled={this.props.isLoading} />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"comment-footer\">\n\t\t\t\t\t\t<div className=\"btn-group\" role=\"group\">\n\t\t\t\t\t\t\t<button type=\"submit\" className=\"btn btn-primary\" onClick={this.props.onSave} disabled={this.props.isLoading || !this.props.isValid}>Add</button>\n\t\t\t\t\t\t\t<button className=\"btn btn-default\" onClick={this.props.onCancel} disabled={this.props.isLoading}>Cancel</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<Spinner isVisible={this.props.isLoading} />\n\t\t\t\t</form>\n\t\t\t\t: null\n\t\t\t\t}\n\t\t\t</CSSTransitionGroup>\n\t\t);\n\t}\n});\n\nexport default CommentForm;","\"use strict\";\n\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport Spinner from '../common/spinner';\nvar moment = require('moment');\n\n//import Nl2br from '../common/nl2br';\n\nvar CommentList = React.createClass({\n\tpropTypes: {\n\t\tcomments: React.PropTypes.array.isRequired,\n\t\tisLoading: React.PropTypes.bool\n\t},\n\tgetDefaultProps: function() {\n\t\treturn {\n\t\t\tisLoading: false\n\t\t};\n\t},\n\t/*\t\t\t\t\t<Nl2br text={comment.comment} /> (Alternative to using CSS white-space: 'pre-line')*/\n\trender: function(){\n\t\tvar createCommentRow = function(comment){\n\t\t\treturn (\n\t\t\t\t<tr key={comment.id}>\n\t\t\t\t\t<td>\n\t\t\t\t\t\t<span className=\"text-muted small pull-left\"><strong className=\"text-primary\">{comment.user}</strong>{\" on \" + moment.unix(comment.date).format(\"ddd D MMM YYYY [at] HH:mm:ss\")}</span><br />\n\t\t\t\t\t\t<span style={{whiteSpace: 'pre-line'}}>{comment.comment}</span>\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t);\n\t\t};\n\t\t\n\t\treturn (\n\t\t\t<div className=\"mor-list\">\n\t\t\t\t<Spinner isVisible={this.props.isLoading} />\n\t\t\t\t{ \n\t\t\t\tthis.props.comments.length ?\n\t\t\t\t<table className=\"table table-striped table-spaced\">\n\t\t\t\t\t<tbody>\n\t\t\t\t\t\t{this.props.comments.map(createCommentRow, this)}\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t\t:\n\t\t\t\t<div className={this.props.isLoading ? 'hidden' : 'text-empty'}>\n\t\t\t\t\tNo comments to display\n\t\t\t\t</div>\n\t\t\t\t}\n\t\t\t</div>\n\t\t);\n\t}\n});\n\nexport default CommentList;","\"use strict\";\n\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport Spinner from '../common/spinner';\nvar OrderStatuses = require('../../constants/orderStatuses');\nvar _ = require('lodash');\nvar util = require('../../util.js');\n\nclass OrderList extends React.Component {\n\tstatic propTypes = {\n\t\torders: React.PropTypes.array.isRequired,\n\t\tisLoading: React.PropTypes.bool\n\t};\n\t\n\tstatic defaultProps = {\n\t\tisLoading: false\n\t};\n\t\n\tconstructor(props) {\n\t\tsuper(props);\n\t\t\n\t\t//Backup/default currency symbol to be used for (legacy) orders without 'currency_display_symbol' property recorded\n\t\tthis.defaultCurrencySymbol = util.getCompanyCurrency().symbol;\n\t}\n\t\n\t//Count an order's items\n\t//[Used for display purposes. We can't simply use items.length as we could have some nullified array elements.]\n\tcountItems = (items) => {\n\t\tlet itemCount = 0;\n\t\t\n\t\tif(items.length){\n\t\t\tlet j;\n\t\t\tfor(j = 0; j < items.length; j++) {\n\t\t\t\tif(items[j] != null){\n\t\t\t\t\titemCount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn itemCount;\n\t}\n\t\n\tcreateOrderRow = (order) => {\n\t\tlet itemCount = this.countItems(order.items);\n\t\t\n\t\treturn (\n\t\t\t<tr key={order.id} className={order.status == OrderStatuses.PLACED ? 'success' : null}>\n\t\t\t\t<td>\n\t\t\t\t\t<span>{order.customer_id != null ? order.customer_name : 'No customer added'}</span><br />\n\t\t\t\t\t<span className=\"text-primary small pull-left\">Total <strong>{(order.currency_display_symbol != null ? order.currency_display_symbol : this.defaultCurrencySymbol) + order.total_display}</strong></span>\n\t\t\t\t\t<span className=\"text-primary small pull-left\" style={{marginLeft: '5px'}}>{'(' + itemCount + ' item' + (itemCount == 1 ? '' : 's') + ')'}</span>\n\t\t\t\t</td>\n\t\t\t\t<td className=\"align-right\">\n\t\t\t\t\t<Link className={order.status == OrderStatuses.PLACED ? \"btn btn-success disabled\" : (this.props.isLoading ? \"btn btn-primary disabled\" : \"btn btn-primary\")} role=\"button\" to={\"/sales/orders/\" + order.id}><i className={order.status == OrderStatuses.PLACED ? \"fa fa-check\" : \"fa fa-shopping-cart\"}></i> {order.status == OrderStatuses.PLACED ? 'Placed' : 'Open'}</Link>\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t);\n\t}\n\t\n\trender() {\n\t\t//<div className=\"table-responsive mor-list\">\n\t\treturn (\n\t\t\t<div className=\"mor-list\">\n\t\t\t\t<Spinner isVisible={this.props.isLoading} />\n\t\t\t\t{ \n\t\t\t\tthis.props.orders.length ?\n\t\t\t\t<table className=\"table table-striped table-spaced\" style={{marginTop: 0}}>\n\t\t\t\t\t<tbody>\n\t\t\t\t\t\t{ this.props.orders.map(this.createOrderRow) }\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t\t:\n\t\t\t\t<div className={this.props.isLoading ? 'hidden' : 'text-empty'}>\n\t\t\t\t\tNo orders in progress\n\t\t\t\t</div>\n\t\t\t\t}\n\t\t\t</div>\n\t\t);\n\t}\n};\n\nexport default OrderList;","\"use strict\";\n\nimport React from 'react';\n//import { Link } from 'react-router-dom';\nvar PromptModal = require('../common/promptModal');\nvar _ = require('lodash');\nvar util = require('../../util.js');\nvar option = require('../../constants/configOptions.js');\nvar config = require('../../config.js');\n\nclass OrderForm extends React.Component {\n\tstatic propTypes = {\n\t\torder: React.PropTypes.object.isRequired,\n\t\tonSave: React.PropTypes.func.isRequired,\n\t\tonPlace: React.PropTypes.func.isRequired,\n\t\tonPlaceAndSubmit: React.PropTypes.func.isRequired,\n\t\tonCancel: React.PropTypes.func.isRequired,\n\t\teditablePricing: React.PropTypes.bool\n\t};\n\t\n\tstatic defaultProps = {\n\t\t//isLoading: false\n\t\teditablePricing: true\n\t};\n\t\n\tconstructor(props) {\n\t\tsuper(props);\n\t\t\n\t\t//Setup internal working copy state (this.order) of props (parent authoritative state)\n\t\t//Update: changed this to plain assignment (as after the first form save (this component) it's a reference to parent state anyway)\n\t\t//this.order = {};\n\t\t//_.defaultsDeep(this.order, props.order);\n\t\tthis.order = props.order;\n\t\t\n\t\t//Backup/default currency symbol to be used for (legacy) orders without 'currency_display_symbol' property recorded\n\t\tthis.defaultCurrencySymbol = util.getCompanyCurrency().symbol;\n\t\t//Resolved currency symbol to be used (needs to be checked/refreshed for every render, in case customer change has led to currency change)\n\t\tthis.currencySymbol = (props.order.currency_display_symbol != null) ? props.order.currency_display_symbol : this.defaultCurrencySymbol;\n\t\t\n\t\tthis.orderItemRemoveIndex = null;\n\t\tthis.orderItemRemoveConfirmDescription = 'Are you sure you want to remove this item?';\n\t\t\n\t\tthis.state = {\n\t\t\tisOrderItemRemoveConfirmationVisible: false\n\t\t};\n\t}\n\t\n\tcomponentWillReceiveProps(nextProps){\n\t\t//TODO: change this (and constructor above) to a deep copy of nextProps.order (props.order), rather than assignment? Performance considerations? (this is called a lot)\n\t\t//(currently after the first form save (this component) is a reference to parent state anyway)\n\t\tthis.order = nextProps.order;\n\t}\n\t\n\thandleNumericChange = (event) => {\n\t\tconst target = event.target;\n\t\tconst eventType = event.type;\n\t\t\n\t\tlet formattedNumber = util.formatDecimal(target.value, (eventType != 'blur'));\n\t\tlet quantityMin = this.order.items[target.dataset['idx']].quantity_min != null ? this.order.items[target.dataset['idx']].quantity_min : 1;\n\t\tlet quantityMax = this.order.items[target.dataset['idx']].quantity_max != null ? this.order.items[target.dataset['idx']].quantity_max : 0;\n\t\tlet quantityMom = this.order.items[target.dataset['idx']].quantity_mom != null ? this.order.items[target.dataset['idx']].quantity_mom : 0;\n\n\t\tif(formattedNumber.value < quantityMin){\n\t\t\tformattedNumber.value = quantityMin;\n\t\t\tif(eventType == 'blur'){\n\t\t\t\tformattedNumber.displayValue = quantityMin;\n\t\t\t}\n\t\t}\n\t\t\n\t\t//Update our working copy\n\t\tthis.order.items[target.dataset['idx']].quantity = formattedNumber.value;\n\t\tthis.order.items[target.dataset['idx']].quantity_display = formattedNumber.displayValue;\n\n\t\t//Ensure quantity conforms to min/max/multiple (if applicable, and only if not editing within the field)\n\t\tif(eventType == 'blur'){\n\t\t\tlet restrictedNumber = util.restrictNumber(\n\t\t\t\tthis.order.items[target.dataset['idx']].quantity, \n\t\t\t\tthis.order.items[target.dataset['idx']].quantity_display, \n\t\t\t\tquantityMin, quantityMax, quantityMom\n\t\t\t);\n\t\t\tthis.order.items[target.dataset['idx']].quantity = restrictedNumber.value;\n\t\t\tthis.order.items[target.dataset['idx']].quantity_display = restrictedNumber.displayValue;\n\t\t}\n\t\t\n\t\t//Refresh totals and save (and thus also update display - props from parent)\n\t\tthis.saveOrder();\n\t}\n\t\n\thandleCurrencyChange = (event) => {\n\t\tconst inputData = event.target.dataset;\n\t\tlet formattedCurrency = util.formatCurrency(event.target.value, (event.type != 'blur'));\n\t\t\n\t\tif(formattedCurrency.value == 0 && event.type == 'blur'){\n\t\t\tformattedCurrency.displayValue = '0.00';\n\t\t}\n\n\t\tif(inputData['field'] == 'item-price'){\n\t\t\t//Update our working copy\n\t\t\tthis.order.items[inputData['idx']].price_display = formattedCurrency.displayValue;\n\t\t\tthis.order.items[inputData['idx']].price = formattedCurrency.value;\n\t\n\t\t\t//Refresh totals and save (and thus also update display - props from parent)\n\t\t\tthis.saveOrder();\n\t\t\t\n\t\t}else{\n\t\t\t//Update our working copy\n\t\t\tthis.order[inputData['field'] + '_display'] = formattedCurrency.displayValue;\n\t\t\tthis.order[inputData['field']] = formattedCurrency.value;\n\t\n\t\t\t//Refresh totals and save (and thus also update display - props from parent), //skipping unnecessary subtotalling\n\t\t\tthis.saveOrder(); //true);\n\t\t}\n\t}\n\t\n\tremoveOrderItem = () => {\n\t\tif(this.orderItemRemoveIndex != null){\n\t\t\tthis.order.items[this.orderItemRemoveIndex] = null; //undefined;\n\t\t\tthis.orderItemRemoveIndex = null;\n\t\t\t\n\t\t\tthis.setState({ isOrderItemRemoveConfirmationVisible: false });\n\t\t\t\n\t\t\t//Refresh totals and save (and thus also update display - props from parent)\n\t\t\tthis.saveOrder();\n\t\t}\n\t}\n\t\n\tsaveOrder = () => { //(blnSkipSubtotalling) => {\n\t\t/*blnSkipSubtotalling = (blnSkipSubtotalling != null && blnSkipSubtotalling); //defaults to false\n\t\t\n\t\t//Calculate line item totals and subtotal (if necessary)\n\t\tif(!blnSkipSubtotalling){\n\t\t\tthis.order.subtotal = 0;\n\t\t\t\n\t\t\tlet j;\n\t\t\tfor(j = 0; j < this.order.items.length; j++) {\n\t\t\t\tif(this.order.items[j] != null){\n\t\t\t\t\tthis.order.items[j].total = this.order.items[j].price * this.order.items[j].quantity;\n\t\t\t\t\t\n\t\t\t\t\tlet formattedCurrency = util.formatCurrencyNumber(this.order.items[j].total)\n\t\t\t\t\tthis.order.items[j].total = formattedCurrency.value;\n\t\t\t\t\tthis.order.items[j].total_display = formattedCurrency.displayValue;\n\t\t\t\t\t\n\t\t\t\t\tthis.order.subtotal += this.order.items[j].total;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tlet formattedCurrency = util.formatCurrencyNumber(this.order.subtotal);\n\t\t\tthis.order.subtotal = formattedCurrency.value;\n\t\t\tthis.order.subtotal_display = formattedCurrency.displayValue;\n\t\t}\n\t\t\n\t\t//Calculate grand total\n\t\tthis.order.total = this.order.subtotal + this.order.adjustment + this.order.shipping + this.order.tax;\n\t\tlet formattedCurrency = util.formatCurrencyNumber(this.order.total);\n\t\tthis.order.total = formattedCurrency.value;\n\t\tthis.order.total_display = formattedCurrency.displayValue;\n\t\t*/\n\n\t\t//Save (and thus also update display - props from parent)\n\t\tthis.props.onSave(this.order);\n\t}\n\t\n\t//Do we have any order items?\n\t//[Used for display purposes. We can't simply use items.length as we could have some nullified array elements.]\n\thaveItems = () => {\n\t\tif(this.props.order.items.length){\n\t\t\tlet j;\n\t\t\tfor(j = 0; j < this.props.order.items.length; j++) {\n\t\t\t\tif(this.props.order.items[j] != null){\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn false;\n\t}\n\t\n\tshowOrderItemRemoveConfirmationPrompt = (event) => {\n\t\tthis.orderItemRemoveIndex = event.target.dataset['idx']; //(item to be removed on confirmation)\n\t\tthis.setState({ isOrderItemRemoveConfirmationVisible: true });\n\t}\n\t\n\thideOrderItemRemoveConfirmationPrompt = () => {\n\t\tthis.orderItemRemoveIndex = null;\n\t\tthis.setState({ isOrderItemRemoveConfirmationVisible: false });\n\t}\n\t\n\tcreateOrderItemRow = (item, idx, arr) => (\n\t\titem != null ?\n\t\t<tr key={idx}>\n\t\t\t<td colSpan=\"3\">\n\t\t\t\t<div className=\"order-item\">\n\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t<div className=\"col-xs-11 text-primary\">{item.sku}</div>\n\t\t\t\t\t\t<div className=\"col-xs-1\"><button type=\"button\" className=\"close\" data-idx={idx} onClick={this.showOrderItemRemoveConfirmationPrompt}>&times;</button></div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t<div className=\"col-xs-12\">{item.name}</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t<div className=\"col-xs-4\">\n\t\t\t\t\t\t\t<input type=\"text\" className=\"form-control\" value={item.quantity_display} data-idx={idx} onChange={this.handleNumericChange} onBlur={this.handleNumericChange} autoComplete=\"off\" />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"col-xs-4\">\n\t\t\t\t\t\t\t<div className=\"input-group\">\n\t\t\t\t\t\t\t\t<span className=\"input-group-addon\">{this.currencySymbol}</span>\n\t\t\t\t\t\t\t\t{this.props.editablePricing ? \n\t\t\t\t\t\t\t\t\t<input type=\"text\" className=\"form-control\" value={item.price_display} data-field=\"item-price\" data-idx={idx} onChange={this.handleCurrencyChange} onBlur={this.handleCurrencyChange} autoComplete=\"off\" /> :\n\t\t\t\t\t\t\t\t\t<input type=\"text\" className=\"form-control\" value={item.price_display} data-field=\"item-price\" data-idx={idx} disabled={true} autoComplete=\"off\" /> }\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"col-xs-4\">\n\t\t\t\t\t\t\t<div className=\"input-group\">\n\t\t\t\t\t\t\t\t<span className=\"input-group-addon\">{this.currencySymbol}</span>\n\t\t\t\t\t\t\t\t<input type=\"text\" className=\"form-control\" value={item.total_display} disabled={true} autoComplete=\"off\" />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</td>\n\t\t</tr> :\n\t\tnull\n\t)\n\t\n\trender() {\n\t\t//Resolved currency symbol to be used (needs to be checked/refreshed for every render, in case customer change has led to currency change)\n\t\tthis.currencySymbol = (this.props.order.currency_display_symbol != null) ? this.props.order.currency_display_symbol : this.defaultCurrencySymbol;\n\t\t\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t{ this.state.isOrderItemRemoveConfirmationVisible ? \n\t\t\t\t\t<PromptModal\n\t\t\t\t\t\tdescription={this.orderItemRemoveConfirmDescription} \n\t\t\t\t\t\tonYes={this.removeOrderItem} \n\t\t\t\t\t\tonNo={this.hideOrderItemRemoveConfirmationPrompt} \n\t\t\t\t\t/> : null }\n\t\t\t\t\t\n\t\t\t\t<div className=\"panel panel-default mor-list cat-panel\">\n\t\t\t\t\t<div className=\"panel-heading\">\n\t\t\t\t\t\t<h4 className=\"panel-title\">\n\t\t\t\t\t\t\t<a role=\"button\" data-toggle=\"collapse\" href=\"#order-details-content\">\n\t\t\t\t\t\t\t\t<span>Order Details</span>\n\t\t\t\t\t\t\t\t<i className=\"minimise fa fa-window-minimize\"></i>\n\t\t\t\t\t\t\t\t<i className=\"maximise fa fa-window-maximize\"></i>\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</h4>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"panel-collapse collapse in\" role=\"tabpanel\" id=\"order-details-content\">\n\t\t\t\t\t\t<table className=\"table table-striped\">\n\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<th className=\"col-xs-4\">Quantity</th>\n\t\t\t\t\t\t\t\t\t<th className=\"col-xs-4\">Price</th>\n\t\t\t\t\t\t\t\t\t<th className=\"col-xs-4\">Total</th>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tthis.haveItems() ? \n\t\t\t\t\t\t\t\t\tthis.props.order.items.map(this.createOrderItemRow) :\n\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t<td colSpan=\"3\"><span className=\"text-muted\">No order items</span></td>\n\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t</table>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t<div className=\"panel panel-default mor-list cat-panel\">\n\t\t\t\t\t<div className=\"panel-heading\">\n\t\t\t\t\t\t<h4 className=\"panel-title\">\n\t\t\t\t\t\t\t<a role=\"button\" data-toggle=\"collapse\" href=\"#order-totals-content\">\n\t\t\t\t\t\t\t\t<span>Order Totals</span>\n\t\t\t\t\t\t\t\t<i className=\"minimise fa fa-window-minimize\"></i>\n\t\t\t\t\t\t\t\t<i className=\"maximise fa fa-window-maximize\"></i>\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</h4>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"panel-collapse collapse in\" role=\"tabpanel\" id=\"order-totals-content\">\n\t\t\t\t\t\t<ul className=\"list-group form-horizontal\">\n\t\t\t\t\t\t\t<li className=\"list-group-item\">\n\t\t\t\t\t\t\t\t<div className=\"form-group\" style={{marginBottom: 0}}>\n\t\t\t\t\t\t\t\t\t<label htmlFor=\"order-subtotal\" className=\"col-xs-4 control-label\">Subtotal</label>\n\t\t\t\t\t\t\t\t\t<div className=\"input-group col-xs-4\">\n\t\t\t\t\t\t\t\t\t\t<span className=\"input-group-addon\">{this.currencySymbol}</span>\n\t\t\t\t\t\t\t\t\t\t<input type=\"text\" className=\"form-control\" id=\"order-subtotal\" value={this.props.order.subtotal_display} disabled={true} autoComplete=\"off\" />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li className=\"list-group-item\">\n\t\t\t\t\t\t\t\t<div className=\"form-group\" style={{marginBottom: 0}}>\n\t\t\t\t\t\t\t\t\t<label htmlFor=\"order-adjustment\" className=\"col-xs-4 control-label\">Adjustment</label>\n\t\t\t\t\t\t\t\t\t<div className=\"input-group col-xs-4\">\n\t\t\t\t\t\t\t\t\t\t<span className=\"input-group-addon\">{this.currencySymbol}</span>\n\t\t\t\t\t\t\t\t\t\t{this.props.editablePricing ? \n\t\t\t\t\t\t\t\t\t\t\t<input type=\"text\" className=\"form-control\" id=\"order-adjustment\" value={this.props.order.adjustment_display} data-field=\"adjustment\" onChange={this.handleCurrencyChange} onBlur={this.handleCurrencyChange} autoComplete=\"off\" /> :\n\t\t\t\t\t\t\t\t\t\t\t<input type=\"text\" className=\"form-control\" id=\"order-adjustment\" value={this.props.order.adjustment_display} data-field=\"adjustment\" disabled={true} autoComplete=\"off\" /> }\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\t\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li className=\"list-group-item\">\n\t\t\t\t\t\t\t\t<div className=\"form-group\" style={{marginBottom: 0}}>\n\t\t\t\t\t\t\t\t\t<label htmlFor=\"order-shipping\" className=\"col-xs-4 control-label\">Shipping</label>\n\t\t\t\t\t\t\t\t\t<div className=\"input-group col-xs-4\">\n\t\t\t\t\t\t\t\t\t\t<span className=\"input-group-addon\">{this.currencySymbol}</span>\n\t\t\t\t\t\t\t\t\t\t{this.props.editablePricing ? \n\t\t\t\t\t\t\t\t\t\t\t<input type=\"text\" className=\"form-control\" id=\"order-shipping\" value={this.props.order.shipping_display} data-field=\"shipping\" onChange={this.handleCurrencyChange} onBlur={this.handleCurrencyChange} autoComplete=\"off\" /> :\n\t\t\t\t\t\t\t\t\t\t\t<input type=\"text\" className=\"form-control\" id=\"order-shipping\" value={this.props.order.shipping_display} data-field=\"shipping\" disabled={true} autoComplete=\"off\" /> }\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\t\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li className=\"list-group-item\">\n\t\t\t\t\t\t\t\t<div className=\"form-group\" style={{marginBottom: 0}}>\n\t\t\t\t\t\t\t\t\t<label htmlFor=\"order-tax\" className=\"col-xs-4 control-label\">Tax</label>\n\t\t\t\t\t\t\t\t\t<div className=\"input-group col-xs-4\">\n\t\t\t\t\t\t\t\t\t\t<span className=\"input-group-addon\">{this.currencySymbol}</span>\n\t\t\t\t\t\t\t\t\t\t<input type=\"text\" className=\"form-control\" id=\"order-tax\" value={this.props.order.tax_display} disabled={true} autoComplete=\"off\" />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\t\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li className=\"list-group-item\">\n\t\t\t\t\t\t\t\t<div className=\"form-group\" style={{marginBottom: 0}}>\n\t\t\t\t\t\t\t\t\t<label htmlFor=\"order-total\" className=\"col-xs-4 control-label\">Total</label>\n\t\t\t\t\t\t\t\t\t<div className=\"input-group col-xs-4\">\n\t\t\t\t\t\t\t\t\t\t<span className=\"input-group-addon\" style={{fontWeight: 'bold'}}>{this.currencySymbol}</span>\n\t\t\t\t\t\t\t\t\t\t<input type=\"text\" className=\"form-control\" id=\"order-total\" style={{fontWeight: 'bold'}} value={this.props.order.total_display} disabled={true} autoComplete=\"off\" />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\t\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t<div className=\"audit-footer\">\n\t\t\t\t\t<div className=\"btn-group\" role=\"group\">\n\t\t\t\t\t\t<button className=\"btn btn-primary\" onClick={this.props.onCancel}><i className=\"fa fa-close\"></i> Cancel</button>\n\t\t\t\t\t\t{ config.activeProfile != option.PROFILE_B2B && <button className=\"btn btn-primary\" onClick={this.props.onPlace}><i className=\"fa fa-check\"></i> Place</button> }\n\t\t\t\t\t\t<button className={\"btn btn-primary col-xs-\" + (config.get(option.UI_BUTTON_CHANGE_CUSTOMER) ? \"4\" : \"6\")} onClick={this.showProductSelectionList}><i className=\"fa fa-plus\"></i> Add Item</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n};\n\nexport default OrderForm;","\"use strict\";\n\nimport React from 'react';\n//import { Link } from 'react-router-dom';\nvar DatePicker = require('react-datepicker');\nvar moment = require('moment'); //needed by datepicker\nvar _ = require('lodash');\nvar util = require('../../util.js');\n\nclass OrderInfoForm extends React.Component {\n\tstatic propTypes = {\n\t\torder: React.PropTypes.object.isRequired,\n\t\tpaymentTerms: React.PropTypes.array.isRequired,\n\t\ttaxClasses: React.PropTypes.array.isRequired,\n\t\tcarriers: React.PropTypes.array.isRequired,\n\t\tcustomerLocations: React.PropTypes.array,\n\t\tonSave: React.PropTypes.func.isRequired\n\t};\n\t\n\tstatic defaultProps = {\n\t\tcustomerLocations: []\n\t};\n\t\n\tconstructor(props) {\n\t\tsuper(props);\n\t\t\n\t\t//Setup internal working copy state (this.order) of props (parent authoritative state)\n\t\t//Update: changed this to plain assignment (as after the first form save (this component) it's a reference to parent state anyway)\n\t\t//this.order = {};\n\t\t//_.defaultsDeep(this.order, props.order);\n\t\tthis.order = props.order;\n\t}\n\t\n\tcomponentWillReceiveProps(nextProps){\n\t\t//TODO: change this (and constructor above) to a deep copy of nextProps.order (props.order), rather than assignment? Performance considerations? (this is called a lot)\n\t\t//(currently after the first form save (this component) is a reference to parent state anyway)\n\t\tthis.order = nextProps.order;\n\t}\n\t\n\thandleDateChange = (date) => {\n\t\tthis.order.expected_date = (date != null) ? date.unix() : null;\n\t\t//Refresh totals and save (and thus also update display - props from parent)\n\t\tthis.saveOrder();\n\t}\n\t\n\thandleSelectionChange = (event) => {\n\t\tthis.order[event.target.dataset['field']] = parseInt(event.target.value);\n\t\t//Refresh totals and save (and thus also update display - props from parent)\n\t\tthis.saveOrder();\n\t}\n\t\n\thandleTextChange = (event) => {\n\t\tthis.order[event.target.dataset['field']] = event.target.value;\n\t\t//Refresh totals and save (and thus also update display - props from parent)\n\t\tthis.saveOrder();\n\t}\n\t\n\tsaveOrder = () => {\n\t\t//Save (and thus also update display - props from parent)\n\t\tthis.props.onSave(this.order);\n\t}\n\t\n\trender() {\n\t\t//[Backup/default currency name is used for (legacy) orders without 'currency_display_name' property recorded]\n\t\t\n\t\treturn (\n\t\t\t<div className=\"panel panel-default mor-list cat-panel\">\n\t\t\t\t<div className=\"panel-heading\" role=\"tab\" id=\"order-info-title\">\n\t\t\t\t\t<h4 className=\"panel-title\">\n\t\t\t\t\t\t<a role=\"button\" data-toggle=\"collapse\" href=\"#order-info-content\">\n\t\t\t\t\t\t\t<span>Order Information</span>\n\t\t\t\t\t\t\t<i className=\"minimise fa fa-window-minimize\"></i>\n\t\t\t\t\t\t\t<i className=\"maximise fa fa-window-maximize\"></i>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</h4>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"panel-collapse collapse in order-info-form\" role=\"tabpanel\" id=\"order-info-content\">\n\t\t\t\t\t<div className=\"panel-body row\">\n\t\t\t\t\t\t<div className=\"form-horizontal col-xs-6\">\n\t\t\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t\t\t<label htmlFor=\"order-expected-date\" className=\"col-xs-4 control-label\">Expected Date</label>\n\t\t\t\t\t\t\t\t<div className=\"col-xs-8 order-date\">\n\t\t\t\t\t\t\t\t\t<DatePicker selected={this.props.order.expected_date ? moment.unix(this.props.order.expected_date) : null} onChange={this.handleDateChange} /*dateFormat=\"YYYY-MM-DD\"*/ placeholderText=\"Select date\" className=\"form-control\" />\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t\t\t<label htmlFor=\"order-preferred-carrier\" className=\"col-xs-4 control-label\">Preferred Carrier</label>\n\t\t\t\t\t\t\t\t<div className=\"col-xs-8\">\n\t\t\t\t\t\t\t\t\t<select className=\"form-control\" id=\"order-preferred-carrier\" data-field=\"carrier_id\" value={this.props.order.carrier_id} onChange={this.handleSelectionChange} autoComplete=\"off\">\n\t\t\t\t\t\t\t\t\t\t{this.props.carriers.map(function(option){\n\t\t\t\t\t\t\t\t\t\t\treturn <option key={option.id} value={option.id}>{option.name}</option>;\n\t\t\t\t\t\t\t\t\t\t})} \n\t\t\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t\t\t<label htmlFor=\"order-po\" className=\"col-xs-4 control-label\">PO #</label>\n\t\t\t\t\t\t\t\t<div className=\"col-xs-8\">\n\t\t\t\t\t\t\t\t\t<input type=\"text\" className=\"form-control\" id=\"order-po\" data-field=\"po\" value={this.props.order.po} onChange={this.handleTextChange} autoComplete=\"off\" />\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t{ this.props.customerLocations.length ?\n\t\t\t\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t\t\t\t<label htmlFor=\"order-billing-location\" className=\"col-xs-4 control-label\">Billing Address</label>\n\t\t\t\t\t\t\t\t\t<div className=\"col-xs-8\">\n\t\t\t\t\t\t\t\t\t\t<select className=\"form-control\" id=\"order-billing-location\" data-field=\"billing_location_id\" value={this.props.order.billing_location_id} onChange={this.handleSelectionChange} autoComplete=\"off\">\n\t\t\t\t\t\t\t\t\t\t\t<option key=\"no-selection\" value=\"0\"></option>\n\t\t\t\t\t\t\t\t\t\t\t{this.props.customerLocations.map(function(option){\n\t\t\t\t\t\t\t\t\t\t\t\treturn <option key={option.id} value={option.id}>{(option.description != null && option.description != '') ? option.description : option.address_1}</option>;\n\t\t\t\t\t\t\t\t\t\t\t})} \n\t\t\t\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div> : null\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\n\t\t\t\t\t\t<div className=\"form-horizontal col-xs-6\">\n\t\t\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t\t\t<label htmlFor=\"order-currency\" className=\"col-xs-4 control-label\">Currency</label>\n\t\t\t\t\t\t\t\t<div className=\"col-xs-8\">\n\t\t\t\t\t\t\t\t\t<input type=\"text\" className=\"form-control\" id=\"order-currency\" value={this.props.order.currency_display_name != null ? this.props.order.currency_display_name : util.getCompanyCurrency().name} disabled={true} autoComplete=\"off\" />\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t\t\t<label htmlFor=\"order-payment-term\" className=\"col-xs-4 control-label\">Payment Term</label>\n\t\t\t\t\t\t\t\t<div className=\"col-xs-8\">\n\t\t\t\t\t\t\t\t\t<select className=\"form-control\" id=\"order-payment-term\" data-field=\"payment_terms_id\" value={this.props.order.payment_terms_id} onChange={this.handleSelectionChange} autoComplete=\"off\">\n\t\t\t\t\t\t\t\t\t\t{this.props.paymentTerms.map(function(option){\n\t\t\t\t\t\t\t\t\t\t\treturn <option key={option.id} value={option.id}>{option.name}</option>;\n\t\t\t\t\t\t\t\t\t\t})} \n\t\t\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t\t\t<label htmlFor=\"order-tax-class\" className=\"col-xs-4 control-label\">Tax Class</label>\n\t\t\t\t\t\t\t\t<div className=\"col-xs-8\">\n\t\t\t\t\t\t\t\t\t<select className=\"form-control\" id=\"order-tax-class\" data-field=\"tax_class_id\" value={this.props.order.tax_class_id} onChange={this.handleSelectionChange} autoComplete=\"off\">\n\t\t\t\t\t\t\t\t\t\t{this.props.taxClasses.map(function(option){\n\t\t\t\t\t\t\t\t\t\t\treturn <option key={option.id} value={option.id}>{option.name}</option>;\n\t\t\t\t\t\t\t\t\t\t})} \n\t\t\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t{ this.props.customerLocations.length ?\n\t\t\t\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t\t\t\t<label htmlFor=\"order-shipping-location\" className=\"col-xs-4 control-label\">Shipping Address</label>\n\t\t\t\t\t\t\t\t\t<div className=\"col-xs-8\">\n\t\t\t\t\t\t\t\t\t\t<select className=\"form-control\" id=\"order-shipping-location\" data-field=\"shipping_location_id\" value={this.props.order.shipping_location_id} onChange={this.handleSelectionChange} autoComplete=\"off\">\n\t\t\t\t\t\t\t\t\t\t\t<option key=\"no-selection\" value=\"0\"></option>\n\t\t\t\t\t\t\t\t\t\t\t{this.props.customerLocations.map(function(option){\n\t\t\t\t\t\t\t\t\t\t\t\treturn <option key={option.id} value={option.id}>{(option.description != null && option.description != '') ? option.description : option.address_1}</option>;\n\t\t\t\t\t\t\t\t\t\t\t})} \n\t\t\t\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div> : null\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\n\t\t\t\t\t\t<div className=\"form-horizontal col-xs-12\">\n\t\t\t\t\t\t\t<div className=\"form-group\" style={{marginBottom: 0}}>\n\t\t\t\t\t\t\t\t<label htmlFor=\"order-comments\" className=\"col-xs-2 control-label\">Comments</label>\n\t\t\t\t\t\t\t\t<div className=\"col-xs-10\">\n\t\t\t\t\t\t\t\t\t<textarea className=\"form-control\" id=\"order-comments\" data-field=\"review\" rows=\"3\" value={this.props.order.review} onChange={this.handleTextChange} autoComplete=\"off\" />\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n};\n\nexport default OrderInfoForm;","\"use strict\";\n\nimport React from 'react';\nimport Spinner from '../common/spinner';\nimport CategorySelection from './categorySelection';\nimport SearchResultsInfo from '../common/searchResultsInfo';\nimport LazyImage from '../common/lazyImage';\nimport ImagesModal from '../common/imagesModal';\nvar SearchFilters = require('../../constants/searchFilters');\nvar _ = require('lodash');\nvar util = require('../../util.js');\n\nclass ProductSelectList extends React.Component {\n\tstatic propTypes = {\n\t\tsubTitle: React.PropTypes.string,\n\t\tcurrencySymbol: React.PropTypes.string,\n\t\tcategories: React.PropTypes.array,\n\t\tsearchTerm: React.PropTypes.string,\n\t\tsearchPage: React.PropTypes.number,\n\t\tsearchPageSize: React.PropTypes.number,\n\t\tsearchFilters: React.PropTypes.object,\n\t\tcustomerSearchFiltersActive: React.PropTypes.bool,\n\t\tsearchTotal: React.PropTypes.number,\n\t\tsearchTotalPages: React.PropTypes.number,\n\t\tsearchResults: React.PropTypes.array,\n\t\tonSearch: React.PropTypes.func.isRequired,\n\t\tonFinish: React.PropTypes.func.isRequired,\n\t\tisLoading: React.PropTypes.bool\n\t};\n\t\n\tstatic defaultProps = {\n\t\tsubTitle: null,\n\t\tcurrencySymbol: util.getCompanyCurrency().symbol, //Default to current system currency symbol\n\t\tcategories: [],\n\t\tsearchTerm: '',\n\t\tsearchPage: 1,\n\t\tsearchPageSize: null,\n\t\tsearchFilters: null,\n\t\tcustomerSearchFiltersActive: false,\n\t\tsearchTotal: null,\n\t\tsearchTotalPages: null,\n\t\tsearchResults: [],\n\t\tisLoading: false\n\t};\n\t\n\tconstructor(props) {\n\t\tsuper(props);\n\t\t\n\t\tthis.state = {\n\t\t\t//Local state for product selections (to be saved on popup close, i.e. when editing done)\n\t\t\tselectedProducts: {},\n\t\t\tunselectedProductQuantity: 0,\n\t\t\t\n\t\t\tisCategorySearchFilterVisible: false,\n\t\t\tisImagesModalVisible: false,\n\t\t\timagesModalTitle: null,\n\t\t\timagesModalImages: []\n\t\t};\n\t}\n\t\n\tcomponentDidMount() {\n\t\t//$('#product-search').focus(); //We're not doing this anymore for now, as it was decided we don't want to bring up the keyboard on Android\n\t\t//const searchFilters = (this.props.customerSearchFiltersActive ? this.props.searchFilters : null);\n\t\t//Do an initial search\n\t\tthis.props.onSearch(this.props.searchTerm, this.props.searchPage, this.props.searchFilters);\n\t}\n\t\n\thandleSearchTermChange = (event) => {\n\t\tconst searchTerm = event.target.value;\n\t\t//const searchFilters = (this.props.customerSearchFiltersActive ? this.props.searchFilters : null);\n\t\tthis.props.onSearch(searchTerm, 1, this.props.searchFilters); //this.props.searchPage\n\t}\n\t\n\thandleCustomerSearchFilterChange = (event) => {\n\t\tconst searchFilters = this.props.searchFilters || {};\n\t\tsearchFilters.customerProducts = event.target.dataset['filter'];\n\t\t//const searchFilters = (this.props.customerSearchFiltersActive ? { customerProducts: event.target.dataset['filter'] } : null);\n\t\tthis.props.onSearch(this.props.searchTerm, 1, searchFilters); //this.props.searchPage\n\t}\n\t\n\thandleSearchPageChange = (event) => {\n\t\tevent.preventDefault();\n\t\t\n\t\tconst searchPage = event.target.dataset['dir'] == 'prev' ? \n\t\t\t(this.props.searchPage > 1 ? this.props.searchPage - 1 : 1) : \n\t\t\t((this.props.searchTotalPages != null && this.props.searchPage < this.props.searchTotalPages) ? this.props.searchPage + 1 : this.props.searchPage);\n\t\t//const searchFilters = (this.props.customerSearchFiltersActive ? this.props.searchFilters : null);\n\t\t\n\t\tif(searchPage != this.props.searchPage){\n\t\t\tthis.props.onSearch(this.props.searchTerm, searchPage, this.props.searchFilters);\n\t\t}\t\n\t}\n\t\n\ttoggleFeaturedSearchFilter = () => {\n\t\tconst searchFilters = this.props.searchFilters || {};\n\t\tsearchFilters.featured = !(searchFilters.featured != null && searchFilters.featured);\n\t\tthis.props.onSearch(this.props.searchTerm, 1, searchFilters); //this.props.searchPage\n\t}\n\t\n\ttoggleCategorySearchFilterDisplay = () => {\n\t\tthis.setState((prevState) => ({\n\t\t\tisCategorySearchFilterVisible: !prevState.isCategorySearchFilterVisible\n\t\t}));\n\t}\n\t\n\thandleCategorySearchFilterSelection = (catID) => {\n\t\tconst searchFilters = this.props.searchFilters || {};\n\t\tsearchFilters.categories = searchFilters.categories || [];\n\t\tsearchFilters.categories.push(catID);\n\t\tsearchFilters.categories = _.uniq(searchFilters.categories);\n\t\tthis.props.onSearch(this.props.searchTerm, 1, searchFilters); //this.props.searchPage\n\t}\n\t\n\thandleCategorySearchFilterDeselection = (catID) => {\n\t\tconst searchFilters = this.props.searchFilters || {};\n\t\tsearchFilters.categories = searchFilters.categories || [];\n\t\t_.pull(searchFilters.categories, catID);\n\t\tthis.props.onSearch(this.props.searchTerm, 1, searchFilters); //this.props.searchPage\n\t}\n\t\n\thandleProductQuantityChange = (event) => {\n\t\tconst target = event.target;\n\t\tconst eventType = event.type;\n \t\n\t\tlet product = {\n\t\t\t'id': target.dataset['id'],\n\t\t\t'name': target.dataset['name'],\n\t\t\t'sku': target.dataset['sku'],\n\t\t\t'calc_price': target.dataset['calcprice'],\n\t\t\t'is_taxable': (target.dataset['istaxable'] > 0), //true\n\t\t\t'tax_class_id': target.dataset['taxclassid'], //0\n\t\t\t'quantity_min': parseFloat(target.dataset['min']),\n\t\t\t'quantity_max': parseFloat(target.dataset['max']),\n\t\t\t'quantity_mom': parseInt(target.dataset['mom'])\n\t\t};\n\t\t\n\t\tthis.setState(function(prevState, props) {\n\t\t\t//+/- button\n\t\t\tif(target.type == 'button'){\n\t\t\t\tlet prevQuantity = (prevState.selectedProducts[product.id] != null && prevState.selectedProducts[product.id].quantity > 0) ? prevState.selectedProducts[product.id].quantity : 0;\n\t\t\t\tlet quantityStep = product.quantity_mom ? product.quantity_min : 1;\n\t\t\t\tproduct.quantity = util.fixNumber(target.dataset['dir'] == 'up' ? prevQuantity + quantityStep : prevQuantity - quantityStep);\n\t\t\t\tproduct.quantity_display = product.quantity; \n\t\t\t\t\n\t\t\t//manual numeric input\n\t\t\t}else{\n\t\t\t\tlet formattedNumber = util.formatDecimal(target.value, (eventType != 'blur'))\n\t\t\t\tproduct.quantity = formattedNumber.value;\n\t\t\t\tproduct.quantity_display = formattedNumber.displayValue;\n\t\t\t}\n\t\t\t\n\t\t\tif(product.quantity < 0){\n\t\t\t\tproduct.quantity = 0;\n\t\t\t\tproduct.quantity_display = 0;\n\t\t\t}\n\t\t\t\n\t\t\t//Ensure quantity conforms to min/max/multiple (if applicable, and only if not editing within the field)\n\t\t\tif(target.type == 'button' || eventType == 'blur'){\n\t\t\t\tlet restrictedNumber = util.restrictNumber(product.quantity, product.quantity_display, product.quantity_min, product.quantity_max, product.quantity_mom);\n\t\t\t\tproduct.quantity = restrictedNumber.value;\n\t\t\t\tproduct.quantity_display = restrictedNumber.displayValue;\n\t\t\t}\n\n\t\t\t//This product is considered 'selected'\n\t\t\tif(product.quantity > 0){\n\t\t\t\tprevState.selectedProducts[product.id] = product;\n\t\t\t\t\n\t\t\t//This product is considered 'unselected'\n\t\t\t}else{\n\t\t\t\tif(prevState.selectedProducts[product.id] != null){\n\t\t\t\t\tprevState.selectedProducts[product.id] = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tselectedProducts: prevState.selectedProducts\n\t\t\t};\n\t\t});\n\t}\n\t\n\t//In this selection list, we send all selected info on close\n\thandleClose = () => {\n\t\tthis.props.onFinish(this.state.selectedProducts);\n\t}\n\t\n\t\t\t\t//{product.calc_price ? <span className=\"text-primary small pull-left\" style={(product.unique_code || product.SKU ? {marginLeft: '5px'} : null)}>{product.calc_price}</span> : null}\n\tcreateProductRow = ({ product }, idx) => { //[we only require product.product]\n\t\t//We need to use the product's default (only) VARIANT ID when placing orders (as it can be different to the main product (class) ID)\n\t\t//[We add an availability check safeguard, but should always exist]\n\t\t//[If/when we actually support variants we'll need to do more checking than simply using the first (only) variant]\n\t\tlet productID = (product.variants != null && product.variants.length > 0 ? product.variants[0].id : product.id);\n\t\t\n\t\tlet blnHasImage = (product.default_image != null && product.default_image.length);\n\t\t\n\t\treturn ( \n\t\t\t<tr key={product.id}>\n\t\t\t\t<td className=\"col-xs-7\">\n\t\t\t\t\t<div className={\"product-info\" + (blnHasImage ? \" product-with-image\" : \"\")}>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tblnHasImage ? \n\t\t\t\t\t\t\t<div className=\"product-image\">\n\t\t\t\t\t\t\t\t<a href=\"#\" onClick={this.openImagesModal} data-idx={idx}>\n\t\t\t\t\t\t\t\t\t<LazyImage src={util.sanitiseForSecureURL(product.default_image)} />\n\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t</div> : null\n\t\t\t\t\t\t}\n\t\t\t\t\t\t<span>{product.name}</span><br />\n\t\t\t\t\t\t{ product.unique_code ? \n\t\t\t\t\t\t\t<span className=\"text-muted small pull-left add-info\">{product.unique_code}</span> : null\n\t\t\t\t\t\t}\n\t\t\t\t\t\t{ product.SKU ? \n\t\t\t\t\t\t\t<span className=\"text-muted small pull-left add-info\" style={(product.unique_code ? {marginLeft: '5px'} : null)}>{product.SKU}</span> : null\n\t\t\t\t\t\t}\n\t\t\t\t\t\t<span className=\"text-muted small pull-left add-info\" style={(product.unique_code || product.SKU ? {marginLeft: '5px'} : null)}>{\"SOH:\" + (product.stock_on_hand ? product.stock_on_hand : \"0\")}</span>\n\t\t\t\t\t\t<span className=\"text-primary pull-left price-info\" style={{marginLeft: '5px'}}>\n\t\t\t\t\t\t\t{this.props.currencySymbol + product.calc_price}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t{ (product.is_featured != null && product.is_featured == 1) ? \n\t\t\t\t\t\t\t<span className=\"text-primary small pull-left\" style={{marginLeft: '5px'}}>\n\t\t\t\t\t\t\t\t<i className=\"fa fa-star\"></i>\n\t\t\t\t\t\t\t</span> : null \n\t\t\t\t\t\t}\n\t\t\t\t\t</div>\t\n\t\t\t\t</td>\n\t\t\t\t<td className=\"col-xs-5\">\n\t\t\t\t\t<div className=\"input-group\">\n\t\t\t\t\t\t<span className=\"input-group-btn\">\n\t\t\t\t\t\t\t<button className={this.props.isLoading ? \"btn btn-default disabled\" : \"btn btn-default\"} type=\"button\" \n\t\t\t\t\t\t\t\tonClick={this.handleProductQuantityChange}\n\t\t\t\t\t\t\t\tdata-dir=\"down\" data-id={productID} data-name={product.name} data-sku={product.SKU} data-calcprice={product.calc_price} data-istaxable={product.is_taxable} \n\t\t\t\t\t\t\t\tdata-taxclassid={product.tax_class_id} data-min={product.min_order_qty} data-max={product.max_order_qty} data-mom={product.multiples_of_min}>-</button>\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<input type=\"text\" className=\"form-control input-space-efficient input-centred\" autoComplete=\"off\"\n\t\t\t\t\t\t\tvalue={this.state.selectedProducts[productID] != null ? this.state.selectedProducts[productID].quantity_display : this.state.unselectedProductQuantity} \n\t\t\t\t\t\t\tonChange={this.handleProductQuantityChange} onBlur={this.handleProductQuantityChange} disabled={this.props.isLoading}  \n\t\t\t\t\t\t\tdata-id={productID} data-name={product.name} data-sku={product.SKU} data-calcprice={product.calc_price} data-istaxable={product.is_taxable} \n\t\t\t\t\t\t\tdata-taxclassid={product.tax_class_id} data-min={product.min_order_qty} data-max={product.max_order_qty} data-mom={product.multiples_of_min} />\n\t\t\t\t\t\t<span className=\"input-group-btn\">\n\t\t\t\t\t\t\t<button className={this.props.isLoading ? \"btn btn-default disabled\" : \"btn btn-default\"} type=\"button\" \n\t\t\t\t\t\t\t\tonClick={this.handleProductQuantityChange}\n\t\t\t\t\t\t\t\tdata-dir=\"up\" data-id={productID} data-name={product.name} data-sku={product.SKU} data-calcprice={product.calc_price} data-istaxable={product.is_taxable} \n\t\t\t\t\t\t\t\tdata-taxclassid={product.tax_class_id} data-min={product.min_order_qty} data-max={product.max_order_qty} data-mom={product.multiples_of_min}>+</button>\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</div>\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t);\n\t}\n\t\n\topenImagesModal = (event) => {\n\t\tevent.preventDefault();\n\t\tconst productIndex = event.currentTarget.dataset['idx'];\n\t\tlet product = this.props.searchResults[productIndex].product;\n\t\tthis.setState({\n\t\t\tisImagesModalVisible: true,\n\t\t\timagesModalTitle: product.name,\n\t\t\timagesModalImages: product.images\n\t\t});\n\t}\n\t\n\tcloseImagesModal = () => {\n\t\tthis.setState({\n\t\t\tisImagesModalVisible: false,\n\t\t\timagesModalTitle: null,\n\t\t\timagesModalImages: []\n\t\t});\n\t}\n\t\n\trender() {\n\t\tlet blnFeaturedProductsFilter = (this.props.searchFilters != null && this.props.searchFilters.featured != null && this.props.searchFilters.featured);\n\t\tlet blnCustomerRecentProductsFilter = (this.props.searchFilters != null && this.props.searchFilters.customerProducts == SearchFilters.RECENT);\n\t\tlet blnCategoriesFilter = (this.props.searchFilters != null && this.props.searchFilters.categories != null && this.props.searchFilters.categories.length);\n\t\t\n\t\treturn (\n\t\t\t<div className=\"modal fade in\" style={{display:'block'}} tabIndex=\"-1\" role=\"dialog\">\n\t\t\t\t<div className=\"modal-dialog\" style={{margin: 0}}>\n\t\t\t\t\t<div className=\"modal-content\">\n\t\t\t\t\t\t\n\t\t\t\t\t\t<div className=\"modal-header\">\n\t\t\t\t\t\t\t<button type=\"button\" className=\"close\" data-dismiss=\"modal\" onClick={this.handleClose}>&times;</button>\n\t\t\t\t\t\t\t<h4 className=\"modal-title\">\n\t\t\t\t\t\t\t\tSelect Products\n\t\t\t\t\t\t\t\t{ this.props.subTitle != null ? <br /> : null }\n\t\t\t\t\t\t\t\t{ this.props.subTitle != null ? <small>{this.props.subTitle}</small> : null }\n\t\t\t\t\t\t\t</h4>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\n\t\t\t\t\t\t<div className=\"modal-body\">\n\t\t\t\t\t\t\t{ \n\t\t\t\t\t\t\t\t//[NOTE: If any issues with this modal within a modal, we can move it outside]\n\t\t\t\t\t\t\t\tthis.state.isImagesModalVisible ?\n\t\t\t\t\t\t\t\t<ImagesModal \n\t\t\t\t\t\t\t\t\ttitle={this.state.imagesModalTitle}\n\t\t\t\t\t\t\t\t\timages={this.state.imagesModalImages}\n\t\t\t\t\t\t\t\t\tonClose={this.closeImagesModal} \n\t\t\t\t\t\t\t\t/> : null \n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tthis.props.customerSearchFiltersActive ?\n\t\t\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t\t\t<div className=\"col-xs-5\">\n\t\t\t\t\t\t\t\t\t\t<input type=\"text\" className=\"form-control\" id=\"product-search\" placeholder=\"Search\" value={this.props.searchTerm} onChange={this.handleSearchTermChange} autoComplete=\"off\" />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"col-xs-3 search-filters\">\n\t\t\t\t\t\t\t\t\t\t<div className=\"btn-group btn-group-justified\" role=\"group\">\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"btn-group\" role=\"group\">\n\t\t\t\t\t\t\t\t\t\t\t\t<button className={\"btn btn-block \" + (blnFeaturedProductsFilter ? \"btn-primary\" : \"btn-default\")} \n\t\t\t\t\t\t\t\t\t\t\t\t\tdisabled={this.props.isLoading} \n\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={this.toggleFeaturedSearchFilter}><i className=\"fa fa-star\"></i></button>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"btn-group\" role=\"group\">\n\t\t\t\t\t\t\t\t\t\t\t\t<button className={\"btn btn-block \" + (blnCategoriesFilter ? \"btn-primary\" : \"btn-default\")} \n\t\t\t\t\t\t\t\t\t\t\t\t\tdisabled={this.props.isLoading} \n\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={this.toggleCategorySearchFilterDisplay}><i className=\"fa fa-filter\"></i></button>\n\t\t\t\t\t\t\t\t\t\t\t</div>\t\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"col-xs-4 search-filters\">\n\t\t\t\t\t\t\t\t\t\t<div className=\"btn-group btn-group-justified\" role=\"group\">\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"btn-group\" role=\"group\">\n\t\t\t\t\t\t\t\t\t\t\t\t<button className={\"btn \" + (blnCustomerRecentProductsFilter ? \"btn-primary\" : \"btn-default\")} \n\t\t\t\t\t\t\t\t\t\t\t\t\tdisabled={(blnCustomerRecentProductsFilter || this.props.isLoading)} \n\t\t\t\t\t\t\t\t\t\t\t\t\tdata-filter={SearchFilters.RECENT} onClick={this.handleCustomerSearchFilterChange}>Recent</button>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"btn-group\" role=\"group\">\n\t\t\t\t\t\t\t\t\t\t\t\t<button className={\"btn \" + (!blnCustomerRecentProductsFilter ? \"btn-primary\" : \"btn-default\")} \n\t\t\t\t\t\t\t\t\t\t\t\t\tdisabled={(!blnCustomerRecentProductsFilter || this.props.isLoading)} \n\t\t\t\t\t\t\t\t\t\t\t\t\tdata-filter={SearchFilters.ALL} onClick={this.handleCustomerSearchFilterChange}>All</button>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t\t\t<div className=\"col-xs-9\">\n\t\t\t\t\t\t\t\t\t\t<input type=\"text\" className=\"form-control\" id=\"product-search\" placeholder=\"Search\" value={this.props.searchTerm} onChange={this.handleSearchTermChange} autoComplete=\"off\" />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"col-xs-3 search-filters\">\n\t\t\t\t\t\t\t\t\t\t<div className=\"btn-group btn-group-justified\" role=\"group\">\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"btn-group\" role=\"group\">\n\t\t\t\t\t\t\t\t\t\t\t\t<button className={\"btn btn-block \" + (blnFeaturedProductsFilter ? \"btn-primary\" : \"btn-default\")} \n\t\t\t\t\t\t\t\t\t\t\t\t\tdisabled={this.props.isLoading} \n\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={this.toggleFeaturedSearchFilter}><i className=\"fa fa-star\"></i></button>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"btn-group\" role=\"group\">\n\t\t\t\t\t\t\t\t\t\t\t\t<button className={\"btn btn-block \" + (blnCategoriesFilter ? \"btn-primary\" : \"btn-default\")} \n\t\t\t\t\t\t\t\t\t\t\t\t\tdisabled={this.props.isLoading} \n\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={this.toggleCategorySearchFilterDisplay}><i className=\"fa fa-filter\"></i></button>\n\t\t\t\t\t\t\t\t\t\t\t</div>\t\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t<CategorySelection \n\t\t\t\t\t\t\t\tcategories={this.props.categories} \n\t\t\t\t\t\t\t\tselections={(blnCategoriesFilter ? this.props.searchFilters.categories : [])}\n\t\t\t\t\t\t\t\tonSelect={this.handleCategorySearchFilterSelection}\n\t\t\t\t\t\t\t\tonDeselect={this.handleCategorySearchFilterDeselection} \n\t\t\t\t\t\t\t\tisOpen={this.state.isCategorySearchFilterVisible} />\n\t\t\t\t\t\t\t<div className=\"mor-list mor-list-paging mor-list-paging-spaced\">\n\t\t\t\t\t\t\t\t<Spinner isVisible={this.props.isLoading} />\n\t\t\t\t\t\t\t\t<SearchResultsInfo isVisible={!this.props.isLoading} info={{page: this.props.searchPage, pageSize: this.props.searchPageSize, total: this.props.searchTotal, totalPages: this.props.searchTotalPages}} />\n\t\t\t\t\t\t\t\t<nav>\n\t\t\t\t\t\t\t\t\t<ul className=\"pager\">\n\t\t\t\t\t\t\t\t\t\t<li className={this.props.searchPage == 1 ? 'previous disabled' : 'previous'}>\n\t\t\t\t\t\t\t\t\t\t\t<a href=\"#\" data-dir=\"prev\" onClick={this.handleSearchPageChange}><span aria-hidden=\"true\">&lt;</span> Prev</a>\n\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t<li className={(this.props.searchTotalPages == null || this.props.searchTotalPages <= 1 || this.props.searchPage == this.props.searchTotalPages) ? 'next disabled' : 'next'}>\n\t\t\t\t\t\t\t\t\t\t\t<a href=\"#\" data-dir=\"next\" onClick={this.handleSearchPageChange}>Next <span aria-hidden=\"true\">&gt;</span></a>\n\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t</nav>\n\t\t\t\t\t\t\t\t{ \n\t\t\t\t\t\t\t\tthis.props.searchResults.length ?\n\t\t\t\t\t\t\t\t<table className=\"table table-striped table-spaced\">\n\t\t\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t\t\t{ this.props.searchResults.map(this.createProductRow) }\n\t\t\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t\t\t</table>\n\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t<div className={'no-results ' + (this.props.isLoading ? 'hidden' : 'text-muted')}>\n\t\t\t\t\t\t\t\t\tNo products found\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\n\t\t\t\t\t\t<div className=\"modal-footer\">\n\t\t\t\t\t\t\t<button type=\"button\" className=\"btn btn-primary\" data-dismiss=\"modal\" onClick={this.handleClose}>Done</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n};\n\nexport default ProductSelectList;","\"use strict\";\n\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport Spinner from '../common/spinner';\nvar CustomerStore = require('../../stores/customerStore');\nvar _ = require('lodash');\nvar util = require('../../util.js');\n\nclass PastOrderList extends React.Component {\n\tstatic propTypes = {\n\t\torders: React.PropTypes.array.isRequired,\n\t\tisLoading: React.PropTypes.bool\n\t};\n\t\n\tstatic defaultProps = {\n\t\tisLoading: false\n\t};\n\t\n\tconstructor(props) {\n\t\tsuper(props);\n\t\t\n\t\t//Backup/default currency symbol (shouldn't be needed)\n\t\tthis.defaultCurrencySymbol = util.getCompanyCurrency().symbol;\n\t}\n\t\n\tcreateOrderRow = (order) => {\n\t\tlet itemCount = _.keys(order.items).length;\n\t\tlet formattedTotal = util.formatCurrency(order.total);\n\t\tlet customer = CustomerStore.getCustomer(order.customer_id);\n\t\t\n\t\treturn (\n\t\t\t<tr key={order.id}>\n\t\t\t\t<td>\n\t\t\t\t\t<span>{customer != null ? customer.name : 'Customer info unavailable'}</span><br />\n\t\t\t\t\t<span className=\"text-primary small pull-left\">Total <strong>{(order.currency.symbol != null ? order.currency.symbol : this.defaultCurrencySymbol) + formattedTotal.displayValue}</strong></span>\n\t\t\t\t\t<span className=\"text-primary small pull-left\" style={{marginLeft: '5px'}}>{'(' + itemCount + ' item' + (itemCount == 1 ? '' : 's') + ')'}</span>\n\t\t\t\t</td>\n\t\t\t\t<td className=\"align-right\">\n\t\t\t\t\t<Link className={(this.props.isLoading ? \"btn btn-primary disabled\" : \"btn btn-primary\")} role=\"button\" to={\"/sales/orders/past/\" + order.id}><i className=\"fa fa-shopping-cart\"></i> View</Link>\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t);\n\t}\n\t\n\trender() {\n\t\t//<div className=\"table-responsive mor-list\">\n\t\treturn (\n\t\t\t<div className=\"mor-list\">\n\t\t\t\t<Spinner isVisible={this.props.isLoading} />\n\t\t\t\t{ \n\t\t\t\tthis.props.orders.length ?\n\t\t\t\t<table className=\"table table-striped table-spaced\" style={{marginTop: 0}}>\n\t\t\t\t\t<tbody>\n\t\t\t\t\t\t{ this.props.orders.map(this.createOrderRow) }\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t\t:\n\t\t\t\t<div className={this.props.isLoading ? 'hidden' : 'text-empty'}>\n\t\t\t\t\tNo orders in progress\n\t\t\t\t</div>\n\t\t\t\t}\n\t\t\t</div>\n\t\t);\n\t}\n};\n\nexport default PastOrderList;","\"use strict\";\n\nimport React from 'react';\nvar OrderStore = require('../../stores/orderStore');\nvar CustomerStore = require('../../stores/customerStore');\nvar moment = require('moment');\n\nclass PastOrderInfo extends React.Component {\n\tstatic propTypes = {\n\t\torder: React.PropTypes.object.isRequired\n\t};\n\t\n\t//static defaultProps = {\n\t//\tcustomerLocations: []\n\t//};\n\t\n\tconstructor(props) {\n\t\tsuper(props);\n\t\t\n\t\t//Obtain extra details we need\n\t\tthis.state = {\n\t\t\tpaymentTerm: OrderStore.getPaymentTerm(props.order.payment_term_id),\n\t\t\ttaxClass: OrderStore.getTaxClass(props.order.tax_class_id),\n\t\t\tbillingLocation: (props.order.billing_location_id > 0 ? CustomerStore.getCustomerLocation(props.order.customer_id, props.order.billing_location_id) : null),\n\t\t\tshippingLocation: (props.order.shipping_location_id > 0 ? CustomerStore.getCustomerLocation(props.order.customer_id, props.order.shipping_location_id) : null)\n\t\t};\n\t}\n\t\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"panel panel-default mor-list cat-panel\">\n\t\t\t\t<div className=\"panel-heading\" role=\"tab\" id=\"order-info-title\">\n\t\t\t\t\t<h4 className=\"panel-title\">\n\t\t\t\t\t\t<a role=\"button\" data-toggle=\"collapse\" href=\"#order-info-content\">\n\t\t\t\t\t\t\t<span>Order Information</span>\n\t\t\t\t\t\t\t<i className=\"minimise fa fa-window-minimize\"></i>\n\t\t\t\t\t\t\t<i className=\"maximise fa fa-window-maximize\"></i>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</h4>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"panel-collapse collapse in order-info-form\" role=\"tabpanel\" id=\"order-info-content\">\n\t\t\t\t\t<div className=\"panel-body row\">\n\t\t\t\t\t\t<div className=\"form-horizontal col-xs-6\">\n\t\t\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t\t\t<label htmlFor=\"order-expected-date\" className=\"col-xs-4 control-label\">Expected Date</label>\n\t\t\t\t\t\t\t\t<div className=\"col-xs-8 order-date\">\n\t\t\t\t\t\t\t\t\t{ moment.unix(parseInt(this.props.order.expected_date)).format('DD/MM/YYYY') }\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t\t\t<label htmlFor=\"order-preferred-carrier\" className=\"col-xs-4 control-label\">Preferred Carrier</label>\n\t\t\t\t\t\t\t\t<div className=\"col-xs-8\">\n\t\t\t\t\t\t\t\t\t{ this.props.order.carriers[this.props.order.carrier_id] }\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t\t\t<label htmlFor=\"order-po\" className=\"col-xs-4 control-label\">PO #</label>\n\t\t\t\t\t\t\t\t<div className=\"col-xs-8\">\n\t\t\t\t\t\t\t\t\t{ this.props.order.PO }\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t{ this.state.billingLocation != null ?\n\t\t\t\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t\t\t\t<label htmlFor=\"order-billing-location\" className=\"col-xs-4 control-label\">Billing Address</label>\n\t\t\t\t\t\t\t\t\t<div className=\"col-xs-8\">\n\t\t\t\t\t\t\t\t\t\t{ (this.state.billingLocation.description != null && this.state.billingLocation.description != '') ? this.state.billingLocation.description : this.state.billingLocation.address_1 }\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div> : null\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\n\t\t\t\t\t\t<div className=\"form-horizontal col-xs-6\">\n\t\t\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t\t\t<label htmlFor=\"order-currency\" className=\"col-xs-4 control-label\">Currency</label>\n\t\t\t\t\t\t\t\t<div className=\"col-xs-8\">\n\t\t\t\t\t\t\t\t\t{ this.props.order.currency.name != null ? this.props.order.currency.name : this.props.order.currency.symbol }\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t\t\t<label htmlFor=\"order-payment-term\" className=\"col-xs-4 control-label\">Payment Term</label>\n\t\t\t\t\t\t\t\t<div className=\"col-xs-8\">\n\t\t\t\t\t\t\t\t\t{ this.state.paymentTerm != null ? this.state.paymentTerm.name : null }\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t\t\t<label htmlFor=\"order-tax-class\" className=\"col-xs-4 control-label\">Tax Class</label>\n\t\t\t\t\t\t\t\t<div className=\"col-xs-8\">\n\t\t\t\t\t\t\t\t\t{ this.state.taxClass != null ? this.state.taxClass.name : null }\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t{ this.state.shippingLocation != null ?\n\t\t\t\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t\t\t\t<label htmlFor=\"order-billing-location\" className=\"col-xs-4 control-label\">Shipping Address</label>\n\t\t\t\t\t\t\t\t\t<div className=\"col-xs-8\">\n\t\t\t\t\t\t\t\t\t\t{ (this.state.shippingLocation.description != null && this.state.shippingLocation.description != '') ? this.state.shippingLocation.description : this.state.shippingLocation.address_1 }\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div> : null\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\n\t\t\t\t\t\t<div className=\"form-horizontal col-xs-12\">\n\t\t\t\t\t\t\t<div className=\"form-group\" style={{marginBottom: 0}}>\n\t\t\t\t\t\t\t\t<label htmlFor=\"order-comments\" className=\"col-xs-2 control-label\">Comments</label>\n\t\t\t\t\t\t\t\t<div className=\"col-xs-10\">\n\t\t\t\t\t\t\t\t\t{ this.props.order.review }\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n};\n\nexport default PastOrderInfo;","\"use strict\";\n\nimport React from 'react';\n//import { Link } from 'react-router-dom';\nvar util = require('../../util.js');\nvar _ = require('lodash');\n\nclass PastOrderItems extends React.Component {\n\tstatic propTypes = {\n\t\torder: React.PropTypes.object.isRequired,\n\t\tonClone: React.PropTypes.func.isRequired\n\t};\n\t\n\t//static defaultProps = {\n\t\t//isLoading: false\n\t//};\n\t\n\tconstructor(props) {\n\t\tsuper(props);\n\t\t\n\t\t//Backup/default currency symbol (shouldn't be needed)\n\t\tthis.defaultCurrencySymbol = util.getCompanyCurrency().symbol;\n\t\t//Resolved currency symbol to be used (good practice to be checked/refreshed for every render)\n\t\tthis.currencySymbol = (props.order.currency.symbol != null) ? props.order.currency.symbol : this.defaultCurrencySymbol;\n\t}\n\t\n\trenderOrderItem = (item) => (\n\t\titem != null ?\n\t\t<tr key={item.id}>\n\t\t\t<td colSpan=\"3\">\n\t\t\t\t<div className=\"order-item\">\n\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t<div className=\"col-xs-12 text-primary\">{item.SKU}</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t<div className=\"col-xs-12\">{item.name}</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t<div className=\"col-xs-4\">\n\t\t\t\t\t\t\t{item.qty}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"col-xs-4\">\n\t\t\t\t\t\t\t{this.currencySymbol + (item.price != null ? util.formatCurrency(item.price).displayValue : util.formatCurrencyNumber(item.discount_price).displayValue)}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"col-xs-4\">\n\t\t\t\t\t\t\t{this.currencySymbol + util.formatCurrencyNumber(item.total).displayValue}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</td>\n\t\t</tr> :\n\t\tnull\n\t)\n\t\n\trenderOrderItems = (items) => {\n\t\tvar arrRenderedItems = [];\n\t\t\n\t\tif(_.keys(items).length){\n\t\t\tfor (var key in items){\n\t\t\t\tarrRenderedItems.push(this.renderOrderItem(items[key]));\n\t\t\t}\n\t\t}else{\n\t\t\tarrRenderedItems.push(\n\t\t\t\t<tr key=\"1\">\n\t\t\t\t\t<td colSpan=\"3\"><span className=\"text-muted\">No order items</span></td>\n\t\t\t\t</tr>\n\t\t\t);\n\t\t}\n\t\t\n\t\treturn arrRenderedItems;\n\t}\n\t\n\trender() {\n\t\tlet formattedSubTotal = util.formatCurrency(this.props.order.subtotal);\n\t\tlet formattedAdjustment = util.formatCurrency(this.props.order.adjustment_amount);\n\t\tlet formattedShipping = util.formatCurrency(this.props.order.shipping_amount);\n\t\tlet formattedTax = util.formatCurrency(this.props.order.tax);\n\t\tlet formattedTotal = util.formatCurrency(this.props.order.total);\n\t\t\n\t\t//Resolved currency symbol to be used (good practice to be checked/refreshed for every render)\n\t\tthis.currencySymbol = (this.props.order.currency.symbol != null) ? this.props.order.currency.symbol : this.defaultCurrencySymbol;\n\t\t\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div className=\"panel panel-default mor-list cat-panel\">\n\t\t\t\t\t<div className=\"panel-heading\">\n\t\t\t\t\t\t<h4 className=\"panel-title\">\n\t\t\t\t\t\t\t<a role=\"button\" data-toggle=\"collapse\" href=\"#order-details-content\">\n\t\t\t\t\t\t\t\t<span>Order Details</span>\n\t\t\t\t\t\t\t\t<i className=\"minimise fa fa-window-minimize\"></i>\n\t\t\t\t\t\t\t\t<i className=\"maximise fa fa-window-maximize\"></i>\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</h4>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"panel-collapse collapse in\" role=\"tabpanel\" id=\"order-details-content\">\n\t\t\t\t\t\t<table className=\"table table-striped\">\n\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<th className=\"col-xs-4\">Quantity</th>\n\t\t\t\t\t\t\t\t\t<th className=\"col-xs-4\">Price</th>\n\t\t\t\t\t\t\t\t\t<th className=\"col-xs-4\">Total</th>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tthis.renderOrderItems(this.props.order.items)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t</table>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t<div className=\"panel panel-default mor-list cat-panel\">\n\t\t\t\t\t<div className=\"panel-heading\">\n\t\t\t\t\t\t<h4 className=\"panel-title\">\n\t\t\t\t\t\t\t<a role=\"button\" data-toggle=\"collapse\" href=\"#order-totals-content\">\n\t\t\t\t\t\t\t\t<span>Order Totals</span>\n\t\t\t\t\t\t\t\t<i className=\"minimise fa fa-window-minimize\"></i>\n\t\t\t\t\t\t\t\t<i className=\"maximise fa fa-window-maximize\"></i>\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</h4>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"panel-collapse collapse in\" role=\"tabpanel\" id=\"order-totals-content\">\n\t\t\t\t\t\t<ul className=\"list-group form-horizontal\">\n\t\t\t\t\t\t\t<li className=\"list-group-item\">\n\t\t\t\t\t\t\t\t<div className=\"form-group\" style={{marginBottom: 0}}>\n\t\t\t\t\t\t\t\t\t<label htmlFor=\"order-subtotal\" className=\"col-xs-4 control-label\">Subtotal</label>\n\t\t\t\t\t\t\t\t\t<div className=\"input-group col-xs-4\">\n\t\t\t\t\t\t\t\t\t\t<span>{this.currencySymbol + formattedSubTotal.displayValue}</span>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li className=\"list-group-item\">\n\t\t\t\t\t\t\t\t<div className=\"form-group\" style={{marginBottom: 0}}>\n\t\t\t\t\t\t\t\t\t<label htmlFor=\"order-adjustment\" className=\"col-xs-4 control-label\">Adjustment</label>\n\t\t\t\t\t\t\t\t\t<div className=\"input-group col-xs-4\">\n\t\t\t\t\t\t\t\t\t\t<span>{this.currencySymbol + formattedAdjustment.displayValue}</span>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\t\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li className=\"list-group-item\">\n\t\t\t\t\t\t\t\t<div className=\"form-group\" style={{marginBottom: 0}}>\n\t\t\t\t\t\t\t\t\t<label htmlFor=\"order-shipping\" className=\"col-xs-4 control-label\">Shipping</label>\n\t\t\t\t\t\t\t\t\t<div className=\"input-group col-xs-4\">\n\t\t\t\t\t\t\t\t\t\t<span>{this.currencySymbol + formattedShipping.displayValue}</span>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\t\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li className=\"list-group-item\">\n\t\t\t\t\t\t\t\t<div className=\"form-group\" style={{marginBottom: 0}}>\n\t\t\t\t\t\t\t\t\t<label htmlFor=\"order-tax\" className=\"col-xs-4 control-label\">Tax</label>\n\t\t\t\t\t\t\t\t\t<div className=\"input-group col-xs-4\">\n\t\t\t\t\t\t\t\t\t\t<span>{this.currencySymbol + formattedTax.displayValue}</span>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\t\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li className=\"list-group-item\">\n\t\t\t\t\t\t\t\t<div className=\"form-group\" style={{marginBottom: 0}}>\n\t\t\t\t\t\t\t\t\t<label htmlFor=\"order-total\" className=\"col-xs-4 control-label\">Total</label>\n\t\t\t\t\t\t\t\t\t<div className=\"input-group col-xs-4\">\n\t\t\t\t\t\t\t\t\t\t<span><strong>{this.currencySymbol + formattedTotal.displayValue}</strong></span>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\t\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t<div className=\"audit-footer\">\n\t\t\t\t\t<div className=\"btn-group\" role=\"group\">\n\t\t\t\t\t\t<button className=\"btn btn-primary\" onClick={this.props.onClone}><i className=\"fa fa-clone\"></i> Clone Order</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n};\n\nexport default PastOrderItems;","\"use strict\";\n\nimport React from 'react';\nimport Spinner from '../common/spinner';\nimport CategorySelection from './categorySelection';\nimport SearchResultsInfo from '../common/searchResultsInfo';\nimport LazyImage from '../common/lazyImage';\nimport ImagesModal from '../common/imagesModal';\nvar SearchFilters = require('../../constants/searchFilters');\nvar _ = require('lodash');\nvar util = require('../../util.js');\n\n/**\n * Based on ProductSelectList, but without the modal wrapping, and with product quantities/selection conditionally available\n */\nclass ProductList extends React.Component {\n\tstatic propTypes = {\n\t\tcurrencySymbol: React.PropTypes.string,\n\t\tproducts: React.PropTypes.array,\n\t\tselectedProducts: React.PropTypes.object,\n\t\tcategories: React.PropTypes.array,\n\t\tsearchTerm: React.PropTypes.string,\n\t\tsearchPage: React.PropTypes.number,\n\t\tsearchPageSize: React.PropTypes.number,\n\t\tsearchFilters: React.PropTypes.object,\n\t\tcustomerSearchFiltersActive: React.PropTypes.bool,\n\t\tsearchTotal: React.PropTypes.number,\n\t\tsearchTotalPages: React.PropTypes.number,\n\t\tonSearch: React.PropTypes.func.isRequired,\n\t\tonProductQuantityChange: React.PropTypes.func.isRequired,\n\t\tisLoading: React.PropTypes.bool,\n\t\tisProductSelectionAvailable: React.PropTypes.bool\n\t};\n\t\n\tstatic defaultProps = {\n\t\tcurrencySymbol: util.getCompanyCurrency().symbol, //Default to current system currency symbol\n\t\tproducts: [],\n\t\tselectedProducts: {},\n\t\tcategories: [],\n\t\tsearchTerm: '',\n\t\tsearchPage: 1,\n\t\tsearchPageSize: null,\n\t\tsearchFilters: null,\n\t\tcustomerSearchFiltersActive: false,\n\t\tsearchTotal: null,\n\t\tsearchTotalPages: null,\n\t\tisLoading: false,\n\t\tisProductSelectionAvailable: false\n\t};\n\t\n\tconstructor(props) {\n\t\tsuper(props);\n\t\t\n\t\tthis.state = {\n\t\t\tisCategorySearchFilterVisible: false,\n\t\t\tisImagesModalVisible: false,\n\t\t\timagesModalTitle: null,\n\t\t\timagesModalImages: []\n\t\t};\n\t}\n\t\n\thandleSearchTermChange = (event) => {\n\t\tconst searchTerm = event.target.value;\n\t\t//const searchFilters = (this.props.customerSearchFiltersActive ? this.props.searchFilters : null);\n\t\tthis.props.onSearch(searchTerm, 1, this.props.searchFilters); //this.props.searchPage\n\t}\n\t\n\thandleCustomerSearchFilterChange = (event) => {\n\t\tconst searchFilters = this.props.searchFilters || {};\n\t\tsearchFilters.customerProducts = event.target.dataset['filter'];\n\t\t//const searchFilters = (this.props.customerSearchFiltersActive ? { customerProducts: event.target.dataset['filter'] } : null);\n\t\tthis.props.onSearch(this.props.searchTerm, 1, searchFilters); //this.props.searchPage\n\t}\n\t\n\thandleSearchPageChange = (event) => {\n\t\tevent.preventDefault();\n\t\t\n\t\tconst searchPage = event.target.dataset['dir'] == 'prev' ? \n\t\t\t(this.props.searchPage > 1 ? this.props.searchPage - 1 : 1) : \n\t\t\t((this.props.searchTotalPages != null && this.props.searchPage < this.props.searchTotalPages) ? this.props.searchPage + 1 : this.props.searchPage);\n\t\t//const searchFilters = (this.props.customerSearchFiltersActive ? this.props.searchFilters : null);\n\t\t\n\t\tif(searchPage != this.props.searchPage){\n\t\t\tthis.props.onSearch(this.props.searchTerm, searchPage, this.props.searchFilters);\n\t\t}\t\n\t}\n\t\n\ttoggleFeaturedSearchFilter = () => {\n\t\tconst searchFilters = this.props.searchFilters || {};\n\t\tsearchFilters.featured = !(searchFilters.featured != null && searchFilters.featured);\n\t\tthis.props.onSearch(this.props.searchTerm, 1, searchFilters); //this.props.searchPage\n\t}\n\t\n\ttoggleCategorySearchFilterDisplay = () => {\n\t\tthis.setState((prevState) => ({\n\t\t\tisCategorySearchFilterVisible: !prevState.isCategorySearchFilterVisible\n\t\t}));\n\t}\n\t\n\thandleCategorySearchFilterSelection = (catID) => {\n\t\tconst searchFilters = this.props.searchFilters || {};\n\t\tsearchFilters.categories = searchFilters.categories || [];\n\t\tsearchFilters.categories.push(catID);\n\t\tsearchFilters.categories = _.uniq(searchFilters.categories);\n\t\tthis.props.onSearch(this.props.searchTerm, 1, searchFilters); //this.props.searchPage\n\t}\n\t\n\thandleCategorySearchFilterDeselection = (catID) => {\n\t\tconst searchFilters = this.props.searchFilters || {};\n\t\tsearchFilters.categories = searchFilters.categories || [];\n\t\t_.pull(searchFilters.categories, catID);\n\t\tthis.props.onSearch(this.props.searchTerm, 1, searchFilters); //this.props.searchPage\n\t}\n\t\n\thandleProductQuantityChange = (event) => {\n\t\tconst target = event.target;\n\t\tconst eventType = event.type;\n \t\n\t\tlet product = {\n\t\t\t'id': target.dataset['id'],\n\t\t\t'name': target.dataset['name'],\n\t\t\t'sku': target.dataset['sku'],\n\t\t\t'calc_price': target.dataset['calcprice'],\n\t\t\t'is_taxable': (target.dataset['istaxable'] > 0), //true\n\t\t\t'tax_class_id': target.dataset['taxclassid'], //0\n\t\t\t'quantity_min': parseFloat(target.dataset['min']),\n\t\t\t'quantity_max': parseFloat(target.dataset['max']),\n\t\t\t'quantity_mom': parseInt(target.dataset['mom'])\n\t\t};\n\t\t\n\t\t//+/- button\n\t\tif(target.type == 'button'){\n\t\t\tlet prevQuantity = (this.props.selectedProducts[product.id] != null && this.props.selectedProducts[product.id].quantity > 0) ? this.props.selectedProducts[product.id].quantity : 0;\n\t\t\tlet quantityStep = product.quantity_mom ? product.quantity_min : 1;\n\t\t\tproduct.quantity = util.fixNumber(target.dataset['dir'] == 'up' ? prevQuantity + quantityStep : prevQuantity - quantityStep);\n\t\t\tproduct.quantity_display = product.quantity; \n\t\t\t\n\t\t//manual numeric input\n\t\t}else{\n\t\t\tlet formattedNumber = util.formatDecimal(target.value, (eventType != 'blur'))\n\t\t\tproduct.quantity = formattedNumber.value;\n\t\t\tproduct.quantity_display = formattedNumber.displayValue;\n\t\t}\n\t\t\n\t\tif(product.quantity < 0){\n\t\t\tproduct.quantity = 0;\n\t\t\tproduct.quantity_display = 0;\n\t\t}\n\t\t\n\t\t//Ensure quantity conforms to min/max/multiple (if applicable, and only if not editing within the field)\n\t\tif(target.type == 'button' || eventType == 'blur'){\n\t\t\tlet restrictedNumber = util.restrictNumber(product.quantity, product.quantity_display, product.quantity_min, product.quantity_max, product.quantity_mom);\n\t\t\tproduct.quantity = restrictedNumber.value;\n\t\t\tproduct.quantity_display = restrictedNumber.displayValue;\n\t\t}\n\t\t\n\t\tthis.props.onProductQuantityChange(product);\n\t}\n\t\n\tcreateProductRow = ({ product }, idx) => { //[we only require product.product]\n\t\t//We need to use the product's default (only) VARIANT ID when placing orders (as it can be different to the main product (class) ID)\n\t\t//[We add an availability check safeguard, but should always exist]\n\t\t//[If/when we actually support variants we'll need to do more checking than simply using the first (only) variant]\n\t\tlet productID = (product.variants != null && product.variants.length > 0 ? product.variants[0].id : product.id);\n\t\t\n\t\tlet blnHasImage = (product.default_image != null && product.default_image.length);\n\t\t\n\t\treturn ( \n\t\t\t<tr key={product.id}>\n\t\t\t\t<td className={this.props.isProductSelectionAvailable ? \"col-xs-7\" : \"col-xs-9\"}>\n\t\t\t\t\t<div className={\"product-info\" + (blnHasImage ? \" product-with-image\" : \"\")}>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tblnHasImage ? \n\t\t\t\t\t\t\t<div className=\"product-image\">\n\t\t\t\t\t\t\t\t<a href=\"#\" onClick={this.openImagesModal} data-idx={idx}>\n\t\t\t\t\t\t\t\t\t<LazyImage src={util.sanitiseForSecureURL(product.default_image)} />\n\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t</div> : null\n\t\t\t\t\t\t}\n\t\t\t\t\t\t<span>{product.name}</span><br />\n\t\t\t\t\t\t{ product.unique_code ? \n\t\t\t\t\t\t\t<span className=\"text-muted small pull-left add-info\">{product.unique_code}</span> : null \n\t\t\t\t\t\t}\n\t\t\t\t\t\t{ product.SKU ? \n\t\t\t\t\t\t\t<span className=\"text-muted small pull-left add-info\" style={(product.unique_code ? {marginLeft: '5px'} : null)}>{product.SKU}</span> : null \n\t\t\t\t\t\t}\n\t\t\t\t\t\t<span className=\"text-muted small pull-left add-info\" style={(product.unique_code || product.SKU ? {marginLeft: '5px'} : null)}>{\"SOH:\" + (product.stock_on_hand ? product.stock_on_hand : \"0\")}</span>\n\t\t\t\t\t\t{ this.props.isProductSelectionAvailable ? \n\t\t\t\t\t\t\t<span className=\"text-primary pull-left price-info\" style={{marginLeft: '5px'}}>\n\t\t\t\t\t\t\t\t{this.props.currencySymbol + product.calc_price}\n\t\t\t\t\t\t\t</span> : null \n\t\t\t\t\t\t}\n\t\t\t\t\t\t{ (product.is_featured != null && product.is_featured == 1) ? \n\t\t\t\t\t\t\t<span className=\"text-primary small pull-left\" style={{marginLeft: '5px'}}>\n\t\t\t\t\t\t\t\t<i className=\"fa fa-star\"></i>\n\t\t\t\t\t\t\t</span> : null \n\t\t\t\t\t\t}\n\t\t\t\t\t</div>\n\t\t\t\t</td>\n\t\t\t\t<td className={this.props.isProductSelectionAvailable ? \"col-xs-5\" : \"col-xs-3\"} style={this.props.isProductSelectionAvailable ? {} : {textAlign: 'right'}}>\n\t\t\t\t\t{ \n\t\t\t\t\t\tthis.props.isProductSelectionAvailable ? \n\t\t\t\t\t\t<div className=\"input-group\">\n\t\t\t\t\t\t\t<span className=\"input-group-btn\">\n\t\t\t\t\t\t\t\t<button className={this.props.isLoading ? \"btn btn-default disabled\" : \"btn btn-default\"} type=\"button\" \n\t\t\t\t\t\t\t\t\tonClick={this.handleProductQuantityChange}\n\t\t\t\t\t\t\t\t\tdata-dir=\"down\" data-id={productID} data-name={product.name} data-sku={product.SKU} data-calcprice={product.calc_price} data-istaxable={product.is_taxable} \n\t\t\t\t\t\t\t\t\tdata-taxclassid={product.tax_class_id} data-min={product.min_order_qty} data-max={product.max_order_qty} data-mom={product.multiples_of_min}>-</button>\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t<input type=\"text\" className=\"form-control input-space-efficient input-centred\" autoComplete=\"off\"\n\t\t\t\t\t\t\t\tvalue={this.props.selectedProducts[productID] != null ? this.props.selectedProducts[productID].quantity_display : 0} \n\t\t\t\t\t\t\t\tonChange={this.handleProductQuantityChange} onBlur={this.handleProductQuantityChange} disabled={this.props.isLoading}  \n\t\t\t\t\t\t\t\tdata-id={productID} data-name={product.name} data-sku={product.SKU} data-calcprice={product.calc_price} data-istaxable={product.is_taxable} \n\t\t\t\t\t\t\t\tdata-taxclassid={product.tax_class_id} data-min={product.min_order_qty} data-max={product.max_order_qty} data-mom={product.multiples_of_min} />\n\t\t\t\t\t\t\t<span className=\"input-group-btn\">\n\t\t\t\t\t\t\t\t<button className={this.props.isLoading ? \"btn btn-default disabled\" : \"btn btn-default\"} type=\"button\" \n\t\t\t\t\t\t\t\t\tonClick={this.handleProductQuantityChange}\n\t\t\t\t\t\t\t\t\tdata-dir=\"up\" data-id={productID} data-name={product.name} data-sku={product.SKU} data-calcprice={product.calc_price} data-istaxable={product.is_taxable} \n\t\t\t\t\t\t\t\t\tdata-taxclassid={product.tax_class_id} data-min={product.min_order_qty} data-max={product.max_order_qty} data-mom={product.multiples_of_min}>+</button>\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t:\n\t\t\t\t\t\t<span className=\"text-primary price-info\">{this.props.currencySymbol + product.calc_price}</span>\n\t\t\t\t\t}\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t);\n\t}\n\t\n\topenImagesModal = (event) => {\n\t\tevent.preventDefault();\n\t\tconst productIndex = event.currentTarget.dataset['idx'];\n\t\tlet product = this.props.products[productIndex].product;\n\t\tthis.setState({\n\t\t\tisImagesModalVisible: true,\n\t\t\timagesModalTitle: product.name,\n\t\t\timagesModalImages: product.images\n\t\t});\n\t}\n\t\n\tcloseImagesModal = () => {\n\t\tthis.setState({\n\t\t\tisImagesModalVisible: false,\n\t\t\timagesModalTitle: null,\n\t\t\timagesModalImages: []\n\t\t});\n\t}\n\t\n\trender() {\n\t\tlet blnFeaturedProductsFilter = (this.props.searchFilters != null && this.props.searchFilters.featured != null && this.props.searchFilters.featured);\n\t\tlet blnCustomerRecentProductsFilter = (this.props.searchFilters != null && this.props.searchFilters.customerProducts == SearchFilters.RECENT);\n\t\tlet blnCategoriesFilter = (this.props.searchFilters != null && this.props.searchFilters.categories != null && this.props.searchFilters.categories.length);\n\t\t\n\t\treturn (\n\t\t\t<div style={{marginTop: '15px'}}>\n\t\t\t\t{ \n\t\t\t\t\tthis.state.isImagesModalVisible ?\n\t\t\t\t\t<ImagesModal \n\t\t\t\t\t\ttitle={this.state.imagesModalTitle}\n\t\t\t\t\t\timages={this.state.imagesModalImages}\n\t\t\t\t\t\tonClose={this.closeImagesModal} \n\t\t\t\t\t/> : null \n\t\t\t\t}\n\t\t\t\t{\n\t\t\t\t\tthis.props.customerSearchFiltersActive ?\n\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t<div className=\"col-xs-5\">\n\t\t\t\t\t\t\t<input type=\"text\" className=\"form-control\" id=\"product-search\" placeholder=\"Search\" value={this.props.searchTerm} onChange={this.handleSearchTermChange} autoComplete=\"off\" />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"col-xs-3 search-filters\">\n\t\t\t\t\t\t\t<div className=\"btn-group btn-group-justified\" role=\"group\">\n\t\t\t\t\t\t\t\t<div className=\"btn-group\" role=\"group\">\n\t\t\t\t\t\t\t\t\t<button className={\"btn btn-block \" + (blnFeaturedProductsFilter ? \"btn-primary\" : \"btn-default\")} \n\t\t\t\t\t\t\t\t\t\tdisabled={this.props.isLoading} \n\t\t\t\t\t\t\t\t\t\tonClick={this.toggleFeaturedSearchFilter}><i className=\"fa fa-star\"></i></button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"btn-group\" role=\"group\">\n\t\t\t\t\t\t\t\t\t<button className={\"btn btn-block \" + (blnCategoriesFilter ? \"btn-primary\" : \"btn-default\")} \n\t\t\t\t\t\t\t\t\t\tdisabled={this.props.isLoading} \n\t\t\t\t\t\t\t\t\t\tonClick={this.toggleCategorySearchFilterDisplay}><i className=\"fa fa-filter\"></i></button>\n\t\t\t\t\t\t\t\t</div>\t\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"col-xs-4 search-filters\">\n\t\t\t\t\t\t\t<div className=\"btn-group btn-group-justified\" role=\"group\">\n\t\t\t\t\t\t\t\t<div className=\"btn-group\" role=\"group\">\n\t\t\t\t\t\t\t\t\t<button className={\"btn \" + (blnCustomerRecentProductsFilter ? \"btn-primary\" : \"btn-default\")} \n\t\t\t\t\t\t\t\t\t\tdisabled={(blnCustomerRecentProductsFilter || this.props.isLoading)} \n\t\t\t\t\t\t\t\t\t\tdata-filter={SearchFilters.RECENT} onClick={this.handleCustomerSearchFilterChange}>Recent</button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"btn-group\" role=\"group\">\n\t\t\t\t\t\t\t\t\t<button className={\"btn \" + (!blnCustomerRecentProductsFilter ? \"btn-primary\" : \"btn-default\")} \n\t\t\t\t\t\t\t\t\t\tdisabled={(!blnCustomerRecentProductsFilter || this.props.isLoading)} \n\t\t\t\t\t\t\t\t\t\tdata-filter={SearchFilters.ALL} onClick={this.handleCustomerSearchFilterChange}>All</button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t:\n\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t<div className=\"col-xs-9\">\n\t\t\t\t\t\t\t<input type=\"text\" className=\"form-control\" id=\"product-search\" placeholder=\"Search\" value={this.props.searchTerm} onChange={this.handleSearchTermChange} autoComplete=\"off\" />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"col-xs-3 search-filters\">\n\t\t\t\t\t\t\t<div className=\"btn-group btn-group-justified\" role=\"group\">\n\t\t\t\t\t\t\t\t<div className=\"btn-group\" role=\"group\">\n\t\t\t\t\t\t\t\t\t<button className={\"btn btn-block \" + (blnFeaturedProductsFilter ? \"btn-primary\" : \"btn-default\")} \n\t\t\t\t\t\t\t\t\t\tdisabled={this.props.isLoading} \n\t\t\t\t\t\t\t\t\t\tonClick={this.toggleFeaturedSearchFilter}><i className=\"fa fa-star\"></i></button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"btn-group\" role=\"group\">\n\t\t\t\t\t\t\t\t\t<button className={\"btn btn-block \" + (blnCategoriesFilter ? \"btn-primary\" : \"btn-default\")} \n\t\t\t\t\t\t\t\t\t\tdisabled={this.props.isLoading} \n\t\t\t\t\t\t\t\t\t\tonClick={this.toggleCategorySearchFilterDisplay}><i className=\"fa fa-filter\"></i></button>\n\t\t\t\t\t\t\t\t</div>\t\n\t\t\t\t\t\t\t</div>\t\t\t\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t}\n\t\t\t\t<CategorySelection \n\t\t\t\t\tcategories={this.props.categories} \n\t\t\t\t\tselections={(blnCategoriesFilter ? this.props.searchFilters.categories : [])}\n\t\t\t\t\tonSelect={this.handleCategorySearchFilterSelection}\n\t\t\t\t\tonDeselect={this.handleCategorySearchFilterDeselection} \n\t\t\t\t\tisOpen={this.state.isCategorySearchFilterVisible} />\n\t\t\t\t<div className=\"mor-list mor-list-paging mor-list-paging-spaced\">\n\t\t\t\t\t<Spinner isVisible={this.props.isLoading} />\n\t\t\t\t\t<SearchResultsInfo isVisible={!this.props.isLoading} info={{page: this.props.searchPage, pageSize: this.props.searchPageSize, total: this.props.searchTotal, totalPages: this.props.searchTotalPages}} />\n\t\t\t\t\t<nav>\n\t\t\t\t\t\t<ul className=\"pager\">\n\t\t\t\t\t\t\t<li className={this.props.searchPage == 1 ? 'previous disabled' : 'previous'}>\n\t\t\t\t\t\t\t\t<a href=\"#\" data-dir=\"prev\" onClick={this.handleSearchPageChange}><span aria-hidden=\"true\">&lt;</span> Prev</a>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li className={(this.props.searchTotalPages == null || this.props.searchTotalPages <= 1 || this.props.searchPage == this.props.searchTotalPages) ? 'next disabled' : 'next'}>\n\t\t\t\t\t\t\t\t<a href=\"#\" data-dir=\"next\" onClick={this.handleSearchPageChange}>Next <span aria-hidden=\"true\">&gt;</span></a>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</nav>\n\t\t\t\t\t{ \n\t\t\t\t\tthis.props.products.length ?\n\t\t\t\t\t<table className=\"table table-striped table-spaced\">\n\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t{ this.props.products.map(this.createProductRow) }\n\t\t\t\t\t\t</tbody>\n\t\t\t\t\t</table>\n\t\t\t\t\t:\n\t\t\t\t\t<div className={'no-results ' + (this.props.isLoading ? 'hidden' : 'text-empty')}>\n\t\t\t\t\t\tNo products found\n\t\t\t\t\t</div>\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n};\n\nexport default ProductList;","\"use strict\";\n\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport Spinner from '../common/spinner';\nimport SearchResultsInfo from '../common/searchResultsInfo';\nvar util = require('../../util.js');\n\n/**\n * Based on CustomerSelectList, but without the modal wrapping\n */\nclass CustomerList extends React.Component {\n\tstatic propTypes = {\n\t\tcustomers: React.PropTypes.array,\n\t\tsearchTerm: React.PropTypes.string,\n\t\tsearchPage: React.PropTypes.number,\n\t\tsearchPageSize: React.PropTypes.number,\n\t\tsearchTotal: React.PropTypes.number,\n\t\tsearchTotalPages: React.PropTypes.number,\n\t\tonSearch: React.PropTypes.func.isRequired,\n\t\t//onSelect: React.PropTypes.func.isRequired,\n\t\tisLoading: React.PropTypes.bool\n\t};\n\t\n\tstatic defaultProps = {\n\t\tcustomers: [],\n\t\tsearchTerm: '',\n\t\tsearchPage: 1,\n\t\tsearchPageSize: null,\n\t\tsearchTotal: null,\n\t\tsearchTotalPages: null,\n\t\tisLoading: false\n\t};\n\t\n\thandleSearchTermChange = (event) => {\n\t\tconst searchTerm = event.target.value;\n\t\tthis.props.onSearch(searchTerm, 1);\n\t}\n\t\n\thandleSearchPageChange = (event) => {\n\t\tevent.preventDefault();\n\t\t\n\t\tconst searchPage = event.target.dataset['dir'] == 'prev' ? \n\t\t\t(this.props.searchPage > 1 ? this.props.searchPage - 1 : 1) : \n\t\t\t((this.props.searchTotalPages != null && this.props.searchPage < this.props.searchTotalPages) ? this.props.searchPage + 1 : this.props.searchPage);\n\t\t\n\t\tif(searchPage != this.props.searchPage){\n\t\t\tthis.props.onSearch(this.props.searchTerm, searchPage);\n\t\t}\t\n\t}\n\t\n\t/*handleCustomerSelection = (event) => {\n\t\tlet customer = {\n\t\t\t'id': event.target.dataset['id'],\n\t\t\t'name': event.target.dataset['name'],\n\t\t};\n\t\tthis.props.onSelect(customer);\n\t}*/\n\t\n\t//\t\t\t<td className=\"align-right\"><button className={this.props.isLoading ? \"btn btn-primary disabled\" : \"btn btn-primary\"} data-id={customer.id} data-name={customer.name} onClick={this.handleCustomerSelection}><i className=\"fa fa-plus\"></i> New Order</button></td>\n\tcreateCustomerRow = (customer) => (\n\t\t<tr key={customer.id}>\n\t\t\t<td>\n\t\t\t\t<span>{customer.name}</span><br />\n\t\t\t\t{customer.unique_code ? <span className=\"text-primary small pull-left\">{customer.unique_code}</span> : null}\n\t\t\t</td>\n\t\t\t<td className=\"align-right\" style={{paddingLeft: 0}}>\n\t\t\t\t<Link className={this.props.isLoading ? \"btn btn-primary disabled\" : \"btn btn-primary\"} role=\"button\" to={\"/sales/customers/\" + customer.id}><i className=\"fa fa-arrow-right\"></i> View</Link>\n\t\t\t</td>\n\t\t</tr>\n\t)\n\t\n\trender() {\n\t\treturn (\n\t\t\t<div style={{marginTop: '15px'}}>\n\t\t\t\t<input type=\"text\" className=\"form-control\" id=\"customer-search\" placeholder=\"Search\" value={this.props.searchTerm} onChange={this.handleSearchTermChange} autoComplete=\"off\" />\n\t\t\t\t<div className=\"mor-list mor-list-paging mor-list-paging-spaced\">\n\t\t\t\t\t<Spinner isVisible={this.props.isLoading} />\n\t\t\t\t\t<SearchResultsInfo isVisible={!this.props.isLoading} info={{page: this.props.searchPage, pageSize: this.props.searchPageSize, total: this.props.searchTotal, totalPages: this.props.searchTotalPages}} />\n\t\t\t\t\t<nav>\n\t\t\t\t\t\t<ul className=\"pager\">\n\t\t\t\t\t\t\t<li className={this.props.searchPage == 1 ? 'previous disabled' : 'previous'}>\n\t\t\t\t\t\t\t\t<a href=\"#\" data-dir=\"prev\" onClick={this.handleSearchPageChange}><span aria-hidden=\"true\">&lt;</span> Prev</a>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li className={(this.props.searchTotalPages == null || this.props.searchTotalPages <= 1 || this.props.searchPage == this.props.searchTotalPages) ? 'next disabled' : 'next'}>\n\t\t\t\t\t\t\t\t<a href=\"#\" data-dir=\"next\" onClick={this.handleSearchPageChange}>Next <span aria-hidden=\"true\">&gt;</span></a>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</nav>\n\t\t\t\t\t{ \n\t\t\t\t\tthis.props.customers.length ?\n\t\t\t\t\t<table className=\"table table-striped table-spaced\">\n\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t{ this.props.customers.map(this.createCustomerRow) }\n\t\t\t\t\t\t</tbody>\n\t\t\t\t\t</table>\n\t\t\t\t\t:\n\t\t\t\t\t<div className={this.props.isLoading ? 'hidden' : 'text-empty'}>\n\t\t\t\t\t\tNo customers found\n\t\t\t\t\t</div>\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n};\n\nexport default CustomerList;","\"use strict\";\n\nimport React from 'react';\nimport Spinner from '../common/spinner';\nvar moment = require('moment');\n\nvar UserInfoList = React.createClass({\n\tpropTypes: {\n\t\tuser: React.PropTypes.object.isRequired,\n\t\tuserFields: React.PropTypes.array.isRequired,\n\t\tisLoading: React.PropTypes.bool\n\t},\n\tgetDefaultProps: function() {\n\t\treturn {\n\t\t\tisLoading: false\n\t\t};\n\t},\n\trenderField: function(field){\n\t\treturn (\n\t\t\t<li key={field.name} className=\"list-group-item\">\n\t\t\t\t<div className=\"row\">\n\t\t\t\t\t<div className=\"col-xs-4\"><small className=\"text-muted\">{field.label}</small></div>\n\t\t\t\t\t<div className=\"col-xs-8\">\n\t\t\t\t\t\t<span className=\"text-primary\">\n\t\t\t\t\t\t{(field.name == 'date_of_birth' && this.props.user[field.name] != null) ? \n\t\t\t\t\t\tmoment.unix(this.props.user[field.name]).format(\"D MMM YYYY\") :\n\t\t\t\t\t\tthis.props.user[field.name]\n\t\t\t\t\t\t}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</li>\n\t\t);\n\t},\n\t\n\trender: function(){\n\t\treturn (\n\t\t\t<div className=\"panel-group mor-list\">\n\t\t\t\t<Spinner isVisible={this.props.isLoading} />\n\t\t\t\t{\n\t\t\t\t(this.props.user.id != null) ? /*We have a user for which to display details*/\n\t\t\t\t<ul className=\"list-group\">\n\t\t\t\t\t{this.props.userFields.map(this.renderField)}\n\t\t\t\t</ul>\n\t\t\t\t:\n\t\t\t\t<div className={this.props.isLoading ? 'hidden' : 'text-empty'}>\n\t\t\t\t\tNo information\n\t\t\t\t</div>\n\t\t\t\t}\n\t\t\t</div>\n\t\t);\n\t}\n});\n\nexport default UserInfoList;","\"use strict\";\n\nimport React from 'react';\nimport Spinner from '../common/spinner';\nimport PromptModal from '../common/promptModal';\n//import option from '../../constants/configOptions.js';\nimport config from '../../config.js';\n\nclass AppInfoList extends React.Component {\n\tstatic propTypes = {\n\t\tonSubmitAppData: React.PropTypes.func.isRequired,\n\t\tisLoading: React.PropTypes.bool\n\t};\n\t\n\tstatic defaultProps = {\n\t\tisLoading: false\n\t};\n\t\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.appDataSubmissionConfirmationDescription = \"Are you sure you want to submit your app data?\";\n\t\tthis.state = {\n\t\t\tisAppDataSubmissionConfirmationVisible: false\n\t\t};\n\t}\n\t\n\tshowAppDataSubmissionConfirmationPrompt = () => {\n\t\tthis.setState({ isAppDataSubmissionConfirmationVisible: true });\n\t}\n\t\n\thideAppDataSubmissionConfirmationPrompt = () => {\n\t\tthis.setState({ isAppDataSubmissionConfirmationVisible: false });\n\t}\n\t\n\tsubmitAppData = () => {\n\t\tthis.hideAppDataSubmissionConfirmationPrompt();\n\t\tthis.props.onSubmitAppData();\n\t}\n\t\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"panel-group mor-list\">\n\t\t\t\t{ this.state.isAppDataSubmissionConfirmationVisible ? \n\t\t\t\t\t<PromptModal\n\t\t\t\t\t\tdescription={this.appDataSubmissionConfirmationDescription} \n\t\t\t\t\t\tonYes={this.submitAppData} \n\t\t\t\t\t\tonNo={this.hideAppDataSubmissionConfirmationPrompt} \n\t\t\t\t\t/> : null }\n\t\t\t\t\t\n\t\t\t\t<Spinner isVisible={this.props.isLoading} />\n\t\t\t\t\n\t\t\t\t<ul className=\"list-group\">\n\t\t\t\t\t<li className=\"list-group-item\">\n\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t<div className=\"col-xs-4\"><small className=\"text-muted\">App Version</small></div>\n\t\t\t\t\t\t\t<div className=\"col-xs-8\">\n\t\t\t\t\t\t\t\t<span className=\"text-primary\">\n\t\t\t\t\t\t\t\t\t{ config.appVersion }\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li className=\"list-group-item\">\n\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t<div className=\"col-xs-4\"><small className=\"text-muted\">App Data</small></div>\n\t\t\t\t\t\t\t<div className=\"col-xs-8\">\n\t\t\t\t\t\t\t\t<small className=\"text-muted\">You may be asked to submit your app data to help track down issues.</small><br />\n\t\t\t\t\t\t\t\t<button type=\"button\" className=\"btn btn-default btn-sm\" onClick={this.showAppDataSubmissionConfirmationPrompt} disabled={this.props.isLoading}>Submit</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</li>\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t);\n\t}\n};\n\nexport default AppInfoList;","\r\n/*\r\n * Javascript EXIF Reader - jQuery plugin 0.1.3\r\n * Copyright (c) 2008 Jacob Seidelin, cupboy@gmail.com, http://blog.nihilogic.dk/\r\n * Licensed under the MPL License [http://www.nihilogic.dk/licenses/mpl-license.txt]\r\n */\r\n\r\n/*\r\n * I added three functions for read EXIF from dataURL\r\n * - getImageDataFromDataURL\r\n * - getDataFromDataURL\r\n * - jQuery.fn.exifLoadFromDataURL\r\n * \r\n * http://orientation.gokercebeci.com \r\n * @gokercebeci\r\n */\r\nimport jQuery from 'jquery';\r\nimport $ from 'jquery';\r\nwindow.$ = $;\r\n\r\n(function() {\r\n\r\n\r\n    var BinaryFile = function(strData, iDataOffset, iDataLength) {\r\n        var data = strData;\r\n        var dataOffset = iDataOffset || 0;\r\n        var dataLength = 0;\r\n        var IEBinary_getLength = $(this).IEBinary_getLength();\r\n        var IEBinary_getByteAt = $(this).IEBinary_getByteAt();\r\n\r\n        this.getRawData = function() {\r\n            return data;\r\n        }\r\n\r\n        if (typeof strData == \"string\") {\r\n            dataLength = iDataLength || data.length;\r\n\r\n            this.getByteAt = function(iOffset) {\r\n                return data.charCodeAt(iOffset + dataOffset) & 0xFF;\r\n            }\r\n        } else if (typeof strData == \"unknown\") {\r\n             dataLength = iDataLength || IEBinary_getLength(data);\r\n\r\n            this.getByteAt = function(iOffset) {\r\n                return IEBinary_getByteAt(data, iOffset + dataOffset);\r\n            }\r\n        }\r\n\r\n        this.getLength = function() {\r\n            return dataLength;\r\n        }\r\n\r\n        this.getSByteAt = function(iOffset) {\r\n            var iByte = this.getByteAt(iOffset);\r\n            if (iByte > 127)\r\n                return iByte - 256;\r\n            else\r\n                return iByte;\r\n        }\r\n\r\n        this.getShortAt = function(iOffset, bBigEndian) {\r\n            var iShort = bBigEndian ?\r\n                    (this.getByteAt(iOffset) << 8) + this.getByteAt(iOffset + 1)\r\n                    : (this.getByteAt(iOffset + 1) << 8) + this.getByteAt(iOffset)\r\n            if (iShort < 0)\r\n                iShort += 65536;\r\n            return iShort;\r\n        }\r\n        this.getSShortAt = function(iOffset, bBigEndian) {\r\n            var iUShort = this.getShortAt(iOffset, bBigEndian);\r\n            if (iUShort > 32767)\r\n                return iUShort - 65536;\r\n            else\r\n                return iUShort;\r\n        }\r\n        this.getLongAt = function(iOffset, bBigEndian) {\r\n            var iByte1 = this.getByteAt(iOffset),\r\n                    iByte2 = this.getByteAt(iOffset + 1),\r\n                    iByte3 = this.getByteAt(iOffset + 2),\r\n                    iByte4 = this.getByteAt(iOffset + 3);\r\n\r\n            var iLong = bBigEndian ?\r\n                    (((((iByte1 << 8) + iByte2) << 8) + iByte3) << 8) + iByte4\r\n                    : (((((iByte4 << 8) + iByte3) << 8) + iByte2) << 8) + iByte1;\r\n            if (iLong < 0)\r\n                iLong += 4294967296;\r\n            return iLong;\r\n        }\r\n        this.getSLongAt = function(iOffset, bBigEndian) {\r\n            var iULong = this.getLongAt(iOffset, bBigEndian);\r\n            if (iULong > 2147483647)\r\n                return iULong - 4294967296;\r\n            else\r\n                return iULong;\r\n        }\r\n        this.getStringAt = function(iOffset, iLength) {\r\n            var aStr = [];\r\n            for (var i = iOffset, j = 0; i < iOffset + iLength; i++, j++) {\r\n                aStr[j] = String.fromCharCode(this.getByteAt(i));\r\n            }\r\n            return aStr.join(\"\");\r\n        }\r\n\r\n        this.getCharAt = function(iOffset) {\r\n            return String.fromCharCode(this.getByteAt(iOffset));\r\n        }\r\n        this.toBase64 = function() {\r\n            return window.btoa(data);\r\n        }\r\n        this.fromBase64 = function(strBase64) {\r\n            data = window.atob(strBase64);\r\n        }\r\n    }\r\n\r\n\r\n    var BinaryAjax = (function() {\r\n\r\n        function createRequest() {\r\n            var oHTTP = null;\r\n            var ActiveXObject = $(this).ActiveXObject;\r\n            if (window.XMLHttpRequest) {\r\n                oHTTP = new XMLHttpRequest();\r\n            } else if (window.ActiveXObject) {\r\n                oHTTP = new ActiveXObject(\"Microsoft.XMLHTTP\");\r\n            }\r\n            return oHTTP;\r\n        }\r\n\r\n        function getHead(strURL, fncCallback, fncError) {\r\n            var oHTTP = createRequest();\r\n            if (oHTTP) {\r\n                if (fncCallback) {\r\n                    if (typeof(oHTTP.onload) != \"undefined\") {\r\n                        oHTTP.onload = function() {\r\n                            if (oHTTP.status == \"200\") {\r\n                                fncCallback(this);\r\n                            } else {\r\n                                if (fncError)\r\n                                    fncError();\r\n                            }\r\n                            oHTTP = null;\r\n                        };\r\n                    } else {\r\n                        oHTTP.onreadystatechange = function() {\r\n                            if (oHTTP.readyState == 4) {\r\n                                if (oHTTP.status == \"200\") {\r\n                                    fncCallback(this);\r\n                                } else {\r\n                                    if (fncError)\r\n                                        fncError();\r\n                                }\r\n                                oHTTP = null;\r\n                            }\r\n                        };\r\n                    }\r\n                }\r\n                oHTTP.open(\"HEAD\", strURL, true);\r\n                oHTTP.send(null);\r\n            } else {\r\n                if (fncError)\r\n                    fncError();\r\n            }\r\n        }\r\n\r\n        function sendRequest(strURL, fncCallback, fncError, aRange, bAcceptRanges, iFileSize) {\r\n            var oHTTP = createRequest();\r\n            if (oHTTP) {\r\n\r\n                var iDataOffset = 0;\r\n                if (aRange && !bAcceptRanges) {\r\n                    iDataOffset = aRange[0];\r\n                }\r\n                var iDataLen = 0;\r\n                if (aRange) {\r\n                    iDataLen = aRange[1] - aRange[0] + 1;\r\n                }\r\n\r\n                if (fncCallback) {\r\n                    if (typeof(oHTTP.onload) != \"undefined\") {\r\n                        oHTTP.onload = function() {\r\n\r\n                            if (oHTTP.status == \"200\" || oHTTP.status == \"206\" || oHTTP.status == \"0\") {\r\n                                this.binaryResponse = new BinaryFile(this.responseText, iDataOffset, iDataLen);\r\n                                this.fileSize = iFileSize || this.getResponseHeader(\"Content-Length\");\r\n                                fncCallback(this);\r\n                            } else {\r\n                                if (fncError)\r\n                                    fncError();\r\n                            }\r\n                            oHTTP = null;\r\n                        };\r\n                    } else {\r\n                        oHTTP.onreadystatechange = function() {\r\n                            if (oHTTP.readyState == 4) {\r\n                                if (oHTTP.status == \"200\" || oHTTP.status == \"206\" || oHTTP.status == \"0\") {\r\n                                    this.binaryResponse = new BinaryFile(oHTTP.responseBody, iDataOffset, iDataLen);\r\n                                    this.fileSize = iFileSize || this.getResponseHeader(\"Content-Length\");\r\n                                    fncCallback(this);\r\n                                } else {\r\n                                    if (fncError)\r\n                                        fncError();\r\n                                }\r\n                                oHTTP = null;\r\n                            }\r\n                        };\r\n                    }\r\n                }\r\n                oHTTP.open(\"GET\", strURL, true);\r\n\r\n                if (oHTTP.overrideMimeType)\r\n                    oHTTP.overrideMimeType('text/plain; charset=x-user-defined');\r\n\r\n                if (aRange && bAcceptRanges) {\r\n                    oHTTP.setRequestHeader(\"Range\", \"bytes=\" + aRange[0] + \"-\" + aRange[1]);\r\n                }\r\n\r\n                oHTTP.setRequestHeader(\"If-Modified-Since\", \"Sat, 1 Jan 1970 00:00:00 GMT\");\r\n\r\n                oHTTP.send(null);\r\n            } else {\r\n                if (fncError)\r\n                    fncError();\r\n            }\r\n        }\r\n\r\n        return function(strURL, fncCallback, fncError, aRange) {\r\n\r\n            if (aRange) {\r\n                getHead(\r\n                        strURL,\r\n                        function(oHTTP) {\r\n                            var iLength = parseInt(oHTTP.getResponseHeader(\"Content-Length\"), 10);\r\n                            var strAcceptRanges = oHTTP.getResponseHeader(\"Accept-Ranges\");\r\n\r\n                            var iStart, iEnd;\r\n                            iStart = aRange[0];\r\n                            if (aRange[0] < 0)\r\n                                iStart += iLength;\r\n                            iEnd = iStart + aRange[1] - 1;\r\n\r\n                            sendRequest(strURL, fncCallback, fncError, [iStart, iEnd], (strAcceptRanges == \"bytes\"), iLength);\r\n                        }\r\n                );\r\n\r\n            } else {\r\n                sendRequest(strURL, fncCallback, fncError);\r\n            }\r\n        }\r\n\r\n    }());\r\n\r\n\r\n    document.write(\r\n            \"<script type='text/vbscript'>\\r\\n\"\r\n            + \"Function IEBinary_getByteAt(strBinary, iOffset)\\r\\n\"\r\n            + \"\tIEBinary_getByteAt = AscB(MidB(strBinary,iOffset+1,1))\\r\\n\"\r\n            + \"End Function\\r\\n\"\r\n            + \"Function IEBinary_getLength(strBinary)\\r\\n\"\r\n            + \"\tIEBinary_getLength = LenB(strBinary)\\r\\n\"\r\n            + \"End Function\\r\\n\"\r\n            + \"</script>\\r\\n\"\r\n            );\r\n\r\n\r\n    var EXIF = {};\r\n\r\n    (function() {\r\n\r\n        var bDebug = false;\r\n\r\n        EXIF.Tags = {\r\n\r\n            // version tags\r\n            0x9000: \"ExifVersion\", // EXIF version\r\n            0xA000: \"FlashpixVersion\", // Flashpix format version\r\n\r\n            // colorspace tags\r\n            0xA001: \"ColorSpace\", // Color space information tag\r\n\r\n            // image configuration\r\n            0xA002: \"PixelXDimension\", // Valid width of meaningful image\r\n            0xA003: \"PixelYDimension\", // Valid height of meaningful image\r\n            0x9101: \"ComponentsConfiguration\", // Information about channels\r\n            0x9102: \"CompressedBitsPerPixel\", // Compressed bits per pixel\r\n\r\n            // user information\r\n            0x927C: \"MakerNote\", // Any desired information written by the manufacturer\r\n            0x9286: \"UserComment\", // Comments by user\r\n\r\n            // related file\r\n            0xA004: \"RelatedSoundFile\", // Name of related sound file\r\n\r\n            // date and time\r\n            0x9003: \"DateTimeOriginal\", // Date and time when the original image was generated\r\n            0x9004: \"DateTimeDigitized\", // Date and time when the image was stored digitally\r\n            0x9290: \"SubsecTime\", // Fractions of seconds for DateTime\r\n            0x9291: \"SubsecTimeOriginal\", // Fractions of seconds for DateTimeOriginal\r\n            0x9292: \"SubsecTimeDigitized\", // Fractions of seconds for DateTimeDigitized\r\n\r\n            // picture-taking conditions\r\n            0x829A: \"ExposureTime\", // Exposure time (in seconds)\r\n            0x829D: \"FNumber\", // F number\r\n            0x8822: \"ExposureProgram\", // Exposure program\r\n            0x8824: \"SpectralSensitivity\", // Spectral sensitivity\r\n            0x8827: \"ISOSpeedRatings\", // ISO speed rating\r\n            0x8828: \"OECF\", // Optoelectric conversion factor\r\n            0x9201: \"ShutterSpeedValue\", // Shutter speed\r\n            0x9202: \"ApertureValue\", // Lens aperture\r\n            0x9203: \"BrightnessValue\", // Value of brightness\r\n            0x9204: \"ExposureBias\", // Exposure bias\r\n            0x9205: \"MaxApertureValue\", // Smallest F number of lens\r\n            0x9206: \"SubjectDistance\", // Distance to subject in meters\r\n            0x9207: \"MeteringMode\", // Metering mode\r\n            0x9208: \"LightSource\", // Kind of light source\r\n            0x9209: \"Flash\", // Flash status\r\n            0x9214: \"SubjectArea\", // Location and area of main subject\r\n            0x920A: \"FocalLength\", // Focal length of the lens in mm\r\n            0xA20B: \"FlashEnergy\", // Strobe energy in BCPS\r\n            0xA20C: \"SpatialFrequencyResponse\", // \r\n            0xA20E: \"FocalPlaneXResolution\", // Number of pixels in width direction per FocalPlaneResolutionUnit\r\n            0xA20F: \"FocalPlaneYResolution\", // Number of pixels in height direction per FocalPlaneResolutionUnit\r\n            0xA210: \"FocalPlaneResolutionUnit\", // Unit for measuring FocalPlaneXResolution and FocalPlaneYResolution\r\n            0xA214: \"SubjectLocation\", // Location of subject in image\r\n            0xA215: \"ExposureIndex\", // Exposure index selected on camera\r\n            0xA217: \"SensingMethod\", // Image sensor type\r\n            0xA300: \"FileSource\", // Image source (3 == DSC)\r\n            0xA301: \"SceneType\", // Scene type (1 == directly photographed)\r\n            0xA302: \"CFAPattern\", // Color filter array geometric pattern\r\n            0xA401: \"CustomRendered\", // Special processing\r\n            0xA402: \"ExposureMode\", // Exposure mode\r\n            0xA403: \"WhiteBalance\", // 1 = auto white balance, 2 = manual\r\n            0xA404: \"DigitalZoomRation\", // Digital zoom ratio\r\n            0xA405: \"FocalLengthIn35mmFilm\", // Equivalent foacl length assuming 35mm film camera (in mm)\r\n            0xA406: \"SceneCaptureType\", // Type of scene\r\n            0xA407: \"GainControl\", // Degree of overall image gain adjustment\r\n            0xA408: \"Contrast\", // Direction of contrast processing applied by camera\r\n            0xA409: \"Saturation\", // Direction of saturation processing applied by camera\r\n            0xA40A: \"Sharpness\", // Direction of sharpness processing applied by camera\r\n            0xA40B: \"DeviceSettingDescription\", // \r\n            0xA40C: \"SubjectDistanceRange\", // Distance to subject\r\n\r\n            // other tags\r\n            0xA005: \"InteroperabilityIFDPointer\",\r\n            0xA420: \"ImageUniqueID\"\t\t// Identifier assigned uniquely to each image\r\n        };\r\n\r\n        EXIF.TiffTags = {\r\n            0x0100: \"ImageWidth\",\r\n            0x0101: \"ImageHeight\",\r\n            0x8769: \"ExifIFDPointer\",\r\n            0x8825: \"GPSInfoIFDPointer\",\r\n            0xA005: \"InteroperabilityIFDPointer\",\r\n            0x0102: \"BitsPerSample\",\r\n            0x0103: \"Compression\",\r\n            0x0106: \"PhotometricInterpretation\",\r\n            0x0112: \"Orientation\",\r\n            0x0115: \"SamplesPerPixel\",\r\n            0x011C: \"PlanarConfiguration\",\r\n            0x0212: \"YCbCrSubSampling\",\r\n            0x0213: \"YCbCrPositioning\",\r\n            0x011A: \"XResolution\",\r\n            0x011B: \"YResolution\",\r\n            0x0128: \"ResolutionUnit\",\r\n            0x0111: \"StripOffsets\",\r\n            0x0116: \"RowsPerStrip\",\r\n            0x0117: \"StripByteCounts\",\r\n            0x0201: \"JPEGInterchangeFormat\",\r\n            0x0202: \"JPEGInterchangeFormatLength\",\r\n            0x012D: \"TransferFunction\",\r\n            0x013E: \"WhitePoint\",\r\n            0x013F: \"PrimaryChromaticities\",\r\n            0x0211: \"YCbCrCoefficients\",\r\n            0x0214: \"ReferenceBlackWhite\",\r\n            0x0132: \"DateTime\",\r\n            0x010E: \"ImageDescription\",\r\n            0x010F: \"Make\",\r\n            0x0110: \"Model\",\r\n            0x0131: \"Software\",\r\n            0x013B: \"Artist\",\r\n            0x8298: \"Copyright\"\r\n        }\r\n\r\n        EXIF.GPSTags = {\r\n            0x0000: \"GPSVersionID\",\r\n            0x0001: \"GPSLatitudeRef\",\r\n            0x0002: \"GPSLatitude\",\r\n            0x0003: \"GPSLongitudeRef\",\r\n            0x0004: \"GPSLongitude\",\r\n            0x0005: \"GPSAltitudeRef\",\r\n            0x0006: \"GPSAltitude\",\r\n            0x0007: \"GPSTimeStamp\",\r\n            0x0008: \"GPSSatellites\",\r\n            0x0009: \"GPSStatus\",\r\n            0x000A: \"GPSMeasureMode\",\r\n            0x000B: \"GPSDOP\",\r\n            0x000C: \"GPSSpeedRef\",\r\n            0x000D: \"GPSSpeed\",\r\n            0x000E: \"GPSTrackRef\",\r\n            0x000F: \"GPSTrack\",\r\n            0x0010: \"GPSImgDirectionRef\",\r\n            0x0011: \"GPSImgDirection\",\r\n            0x0012: \"GPSMapDatum\",\r\n            0x0013: \"GPSDestLatitudeRef\",\r\n            0x0014: \"GPSDestLatitude\",\r\n            0x0015: \"GPSDestLongitudeRef\",\r\n            0x0016: \"GPSDestLongitude\",\r\n            0x0017: \"GPSDestBearingRef\",\r\n            0x0018: \"GPSDestBearing\",\r\n            0x0019: \"GPSDestDistanceRef\",\r\n            0x001A: \"GPSDestDistance\",\r\n            0x001B: \"GPSProcessingMethod\",\r\n            0x001C: \"GPSAreaInformation\",\r\n            0x001D: \"GPSDateStamp\",\r\n            0x001E: \"GPSDifferential\"\r\n        }\r\n\r\n        EXIF.StringValues = {\r\n            ExposureProgram: {\r\n                0: \"Not defined\",\r\n                1: \"Manual\",\r\n                2: \"Normal program\",\r\n                3: \"Aperture priority\",\r\n                4: \"Shutter priority\",\r\n                5: \"Creative program\",\r\n                6: \"Action program\",\r\n                7: \"Portrait mode\",\r\n                8: \"Landscape mode\"\r\n            },\r\n            MeteringMode: {\r\n                0: \"Unknown\",\r\n                1: \"Average\",\r\n                2: \"CenterWeightedAverage\",\r\n                3: \"Spot\",\r\n                4: \"MultiSpot\",\r\n                5: \"Pattern\",\r\n                6: \"Partial\",\r\n                255: \"Other\"\r\n            },\r\n            LightSource: {\r\n                0: \"Unknown\",\r\n                1: \"Daylight\",\r\n                2: \"Fluorescent\",\r\n                3: \"Tungsten (incandescent light)\",\r\n                4: \"Flash\",\r\n                9: \"Fine weather\",\r\n                10: \"Cloudy weather\",\r\n                11: \"Shade\",\r\n                12: \"Daylight fluorescent (D 5700 - 7100K)\",\r\n                13: \"Day white fluorescent (N 4600 - 5400K)\",\r\n                14: \"Cool white fluorescent (W 3900 - 4500K)\",\r\n                15: \"White fluorescent (WW 3200 - 3700K)\",\r\n                17: \"Standard light A\",\r\n                18: \"Standard light B\",\r\n                19: \"Standard light C\",\r\n                20: \"D55\",\r\n                21: \"D65\",\r\n                22: \"D75\",\r\n                23: \"D50\",\r\n                24: \"ISO studio tungsten\",\r\n                255: \"Other\"\r\n            },\r\n            Flash: {\r\n                0x0000: \"Flash did not fire\",\r\n                0x0001: \"Flash fired\",\r\n                0x0005: \"Strobe return light not detected\",\r\n                0x0007: \"Strobe return light detected\",\r\n                0x0009: \"Flash fired, compulsory flash mode\",\r\n                0x000D: \"Flash fired, compulsory flash mode, return light not detected\",\r\n                0x000F: \"Flash fired, compulsory flash mode, return light detected\",\r\n                0x0010: \"Flash did not fire, compulsory flash mode\",\r\n                0x0018: \"Flash did not fire, auto mode\",\r\n                0x0019: \"Flash fired, auto mode\",\r\n                0x001D: \"Flash fired, auto mode, return light not detected\",\r\n                0x001F: \"Flash fired, auto mode, return light detected\",\r\n                0x0020: \"No flash function\",\r\n                0x0041: \"Flash fired, red-eye reduction mode\",\r\n                0x0045: \"Flash fired, red-eye reduction mode, return light not detected\",\r\n                0x0047: \"Flash fired, red-eye reduction mode, return light detected\",\r\n                0x0049: \"Flash fired, compulsory flash mode, red-eye reduction mode\",\r\n                0x004D: \"Flash fired, compulsory flash mode, red-eye reduction mode, return light not detected\",\r\n                0x004F: \"Flash fired, compulsory flash mode, red-eye reduction mode, return light detected\",\r\n                0x0059: \"Flash fired, auto mode, red-eye reduction mode\",\r\n                0x005D: \"Flash fired, auto mode, return light not detected, red-eye reduction mode\",\r\n                0x005F: \"Flash fired, auto mode, return light detected, red-eye reduction mode\"\r\n            },\r\n            SensingMethod: {\r\n                1: \"Not defined\",\r\n                2: \"One-chip color area sensor\",\r\n                3: \"Two-chip color area sensor\",\r\n                4: \"Three-chip color area sensor\",\r\n                5: \"Color sequential area sensor\",\r\n                7: \"Trilinear sensor\",\r\n                8: \"Color sequential linear sensor\"\r\n            },\r\n            SceneCaptureType: {\r\n                0: \"Standard\",\r\n                1: \"Landscape\",\r\n                2: \"Portrait\",\r\n                3: \"Night scene\"\r\n            },\r\n            SceneType: {\r\n                1: \"Directly photographed\"\r\n            },\r\n            CustomRendered: {\r\n                0: \"Normal process\",\r\n                1: \"Custom process\"\r\n            },\r\n            WhiteBalance: {\r\n                0: \"Auto white balance\",\r\n                1: \"Manual white balance\"\r\n            },\r\n            GainControl: {\r\n                0: \"None\",\r\n                1: \"Low gain up\",\r\n                2: \"High gain up\",\r\n                3: \"Low gain down\",\r\n                4: \"High gain down\"\r\n            },\r\n            Contrast: {\r\n                0: \"Normal\",\r\n                1: \"Soft\",\r\n                2: \"Hard\"\r\n            },\r\n            Saturation: {\r\n                0: \"Normal\",\r\n                1: \"Low saturation\",\r\n                2: \"High saturation\"\r\n            },\r\n            Sharpness: {\r\n                0: \"Normal\",\r\n                1: \"Soft\",\r\n                2: \"Hard\"\r\n            },\r\n            SubjectDistanceRange: {\r\n                0: \"Unknown\",\r\n                1: \"Macro\",\r\n                2: \"Close view\",\r\n                3: \"Distant view\"\r\n            },\r\n            FileSource: {\r\n                3: \"DSC\"\r\n            },\r\n            Components: {\r\n                0: \"\",\r\n                1: \"Y\",\r\n                2: \"Cb\",\r\n                3: \"Cr\",\r\n                4: \"R\",\r\n                5: \"G\",\r\n                6: \"B\"\r\n            }\r\n        }\r\n\r\n        function addEvent(oElement, strEvent, fncHandler)\r\n        {\r\n            if (oElement.addEventListener) {\r\n                oElement.addEventListener(strEvent, fncHandler, false);\r\n            } else if (oElement.attachEvent) {\r\n                oElement.attachEvent(\"on\" + strEvent, fncHandler);\r\n            }\r\n        }\r\n\r\n\r\n        function imageHasData(oImg)\r\n        {\r\n            return !!(oImg.exifdata);\r\n        }\r\n\r\n        function getImageData(oImg, fncCallback)\r\n        {\r\n            BinaryAjax(\r\n                    oImg.src,\r\n                    function(oHTTP) {\r\n                        console.log('BINARY', oHTTP.binaryResponse);\r\n                        var oEXIF = findEXIFinJPEG(oHTTP.binaryResponse);\r\n                        oImg.exifdata = oEXIF || {};\r\n                        if (fncCallback)\r\n                    fncCallback();\r\n                    }\r\n            )\r\n        }\r\n\r\n        function getImageDataFromDataURL(oImg, fncCallback)\r\n        {\r\n            var byteString = atob(oImg.src.split(',')[1]);\r\n            var f = new BinaryFile(byteString, 0, byteString.length)\r\n            var oEXIF = findEXIFinJPEG(f);\r\n            oImg.exifdata = oEXIF || {};\r\n            if (fncCallback)\r\n                fncCallback();\r\n        }\r\n\r\n        function findEXIFinJPEG(oFile) {\r\n            var aMarkers = [];\r\n\r\n            if (oFile.getByteAt(0) != 0xFF || oFile.getByteAt(1) != 0xD8) {\r\n                return false; // not a valid jpeg\r\n            }\r\n\r\n            var iOffset = 2;\r\n            var iLength = oFile.getLength();\r\n            while (iOffset < iLength) {\r\n                if (oFile.getByteAt(iOffset) != 0xFF) {\r\n                    if (bDebug)\r\n                        console.log(\"Not a valid marker at offset \" + iOffset + \", found: \" + oFile.getByteAt(iOffset));\r\n                    return false; // not a valid marker, something is wrong\r\n                }\r\n\r\n                var iMarker = oFile.getByteAt(iOffset + 1);\r\n\r\n                // we could implement handling for other markers here, \r\n                // but we're only looking for 0xFFE1 for EXIF data\r\n\r\n                if (iMarker == 22400) {\r\n                    if (bDebug)\r\n                        console.log(\"Found 0xFFE1 marker\");\r\n                    return readEXIFData(oFile, iOffset + 4, oFile.getShortAt(iOffset + 2, true) - 2);\r\n                    iOffset += 2 + oFile.getShortAt(iOffset + 2, true);\r\n\r\n                } else if (iMarker == 225) {\r\n                    // 0xE1 = Application-specific 1 (for EXIF)\r\n                    if (bDebug)\r\n                        console.log(\"Found 0xFFE1 marker\");\r\n                    return readEXIFData(oFile, iOffset + 4, oFile.getShortAt(iOffset + 2, true) - 2);\r\n\r\n                } else {\r\n                    iOffset += 2 + oFile.getShortAt(iOffset + 2, true);\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n\r\n        function readTags(oFile, iTIFFStart, iDirStart, oStrings, bBigEnd)\r\n        {\r\n            var iEntries = oFile.getShortAt(iDirStart, bBigEnd);\r\n            var oTags = {};\r\n            for (var i = 0; i < iEntries; i++) {\r\n                var iEntryOffset = iDirStart + i * 12 + 2;\r\n                var strTag = oStrings[oFile.getShortAt(iEntryOffset, bBigEnd)];\r\n                if (!strTag && bDebug)\r\n                    console.log(\"Unknown tag: \" + oFile.getShortAt(iEntryOffset, bBigEnd));\r\n                oTags[strTag] = readTagValue(oFile, iEntryOffset, iTIFFStart, iDirStart, bBigEnd);\r\n            }\r\n            return oTags;\r\n        }\r\n\r\n\r\n        function readTagValue(oFile, iEntryOffset, iTIFFStart, iDirStart, bBigEnd)\r\n        {\r\n            var iType = oFile.getShortAt(iEntryOffset + 2, bBigEnd);\r\n            var iNumValues = oFile.getLongAt(iEntryOffset + 4, bBigEnd);\r\n            var iValueOffset = oFile.getLongAt(iEntryOffset + 8, bBigEnd) + iTIFFStart;\r\n\r\n            switch (iType) {\r\n                case 1: // byte, 8-bit unsigned int\r\n                case 7: // undefined, 8-bit byte, value depending on field\r\n                    if (iNumValues == 1) {\r\n                        return oFile.getByteAt(iEntryOffset + 8, bBigEnd);\r\n                    } else {\r\n                        var iValOffset = iNumValues > 4 ? iValueOffset : (iEntryOffset + 8);\r\n                        var aVals = [];\r\n                        for (var n = 0; n < iNumValues; n++) {\r\n                            aVals[n] = oFile.getByteAt(iValOffset + n);\r\n                        }\r\n                        return aVals;\r\n                    }\r\n                    break;\r\n\r\n                case 2: // ascii, 8-bit byte\r\n                    var iStringOffset = iNumValues > 4 ? iValueOffset : (iEntryOffset + 8);\r\n                    return oFile.getStringAt(iStringOffset, iNumValues - 1);\r\n                    break;\r\n\r\n                case 3: // short, 16 bit int\r\n                    if (iNumValues == 1) {\r\n                        return oFile.getShortAt(iEntryOffset + 8, bBigEnd);\r\n                    } else {\r\n                        var iValOffset = iNumValues > 2 ? iValueOffset : (iEntryOffset + 8);\r\n                        var aVals = [];\r\n                        for (var n = 0; n < iNumValues; n++) {\r\n                            aVals[n] = oFile.getShortAt(iValOffset + 2 * n, bBigEnd);\r\n                        }\r\n                        return aVals;\r\n                    }\r\n                    break;\r\n\r\n                case 4: // long, 32 bit int\r\n                    if (iNumValues == 1) {\r\n                        return oFile.getLongAt(iEntryOffset + 8, bBigEnd);\r\n                    } else {\r\n                        var aVals = [];\r\n                        for (var n = 0; n < iNumValues; n++) {\r\n                            aVals[n] = oFile.getLongAt(iValueOffset + 4 * n, bBigEnd);\r\n                        }\r\n                        return aVals;\r\n                    }\r\n                    break;\r\n                case 5:\t// rational = two long values, first is numerator, second is denominator\r\n                    if (iNumValues == 1) {\r\n                        return oFile.getLongAt(iValueOffset, bBigEnd) / oFile.getLongAt(iValueOffset + 4, bBigEnd);\r\n                    } else {\r\n                        var aVals = [];\r\n                        for (var n = 0; n < iNumValues; n++) {\r\n                            aVals[n] = oFile.getLongAt(iValueOffset + 8 * n, bBigEnd) / oFile.getLongAt(iValueOffset + 4 + 8 * n, bBigEnd);\r\n                        }\r\n                        return aVals;\r\n                    }\r\n                    break;\r\n                case 9: // slong, 32 bit signed int\r\n                    if (iNumValues == 1) {\r\n                        return oFile.getSLongAt(iEntryOffset + 8, bBigEnd);\r\n                    } else {\r\n                        var aVals = [];\r\n                        for (var n = 0; n < iNumValues; n++) {\r\n                            aVals[n] = oFile.getSLongAt(iValueOffset + 4 * n, bBigEnd);\r\n                        }\r\n                        return aVals;\r\n                    }\r\n                    break;\r\n                case 10: // signed rational, two slongs, first is numerator, second is denominator\r\n                    if (iNumValues == 1) {\r\n                        return oFile.getSLongAt(iValueOffset, bBigEnd) / oFile.getSLongAt(iValueOffset + 4, bBigEnd);\r\n                    } else {\r\n                        var aVals = [];\r\n                        for (var n = 0; n < iNumValues; n++) {\r\n                            aVals[n] = oFile.getSLongAt(iValueOffset + 8 * n, bBigEnd) / oFile.getSLongAt(iValueOffset + 4 + 8 * n, bBigEnd);\r\n                        }\r\n                        return aVals;\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n\r\n\r\n        function readEXIFData(oFile, iStart, iLength)\r\n        {\r\n            if (oFile.getStringAt(iStart, 4) != \"Exif\") {\r\n                if (bDebug)\r\n                    console.log(\"Not valid EXIF data! \" + oFile.getStringAt(iStart, 4));\r\n                return false;\r\n            }\r\n\r\n            var bBigEnd;\r\n\r\n            var iTIFFOffset = iStart + 6;\r\n\r\n            // test for TIFF validity and endianness\r\n            if (oFile.getShortAt(iTIFFOffset) == 0x4949) {\r\n                bBigEnd = false;\r\n            } else if (oFile.getShortAt(iTIFFOffset) == 0x4D4D) {\r\n                bBigEnd = true;\r\n            } else {\r\n                if (bDebug)\r\n                    console.log(\"Not valid TIFF data! (no 0x4949 or 0x4D4D)\");\r\n                return false;\r\n            }\r\n\r\n            if (oFile.getShortAt(iTIFFOffset + 2, bBigEnd) != 0x002A) {\r\n                if (bDebug)\r\n                    console.log(\"Not valid TIFF data! (no 0x002A)\");\r\n                return false;\r\n            }\r\n\r\n            if (oFile.getLongAt(iTIFFOffset + 4, bBigEnd) != 0x00000008) {\r\n                if (bDebug)\r\n                    console.log(\"Not valid TIFF data! (First offset not 8)\", oFile.getShortAt(iTIFFOffset + 4, bBigEnd));\r\n                return false;\r\n            }\r\n\r\n            var oTags = readTags(oFile, iTIFFOffset, iTIFFOffset + 8, EXIF.TiffTags, bBigEnd);\r\n\r\n            if (oTags.ExifIFDPointer) {\r\n                var oEXIFTags = readTags(oFile, iTIFFOffset, iTIFFOffset + oTags.ExifIFDPointer, EXIF.Tags, bBigEnd);\r\n                for (var strTag in oEXIFTags) {\r\n                    switch (strTag) {\r\n                        case \"LightSource\" :\r\n                        case \"Flash\" :\r\n                        case \"MeteringMode\" :\r\n                        case \"ExposureProgram\" :\r\n                        case \"SensingMethod\" :\r\n                        case \"SceneCaptureType\" :\r\n                        case \"SceneType\" :\r\n                        case \"CustomRendered\" :\r\n                        case \"WhiteBalance\" :\r\n                        case \"GainControl\" :\r\n                        case \"Contrast\" :\r\n                        case \"Saturation\" :\r\n                        case \"Sharpness\" :\r\n                        case \"SubjectDistanceRange\" :\r\n                        case \"FileSource\" :\r\n                            oEXIFTags[strTag] = EXIF.StringValues[strTag][oEXIFTags[strTag]];\r\n                            break;\r\n\r\n                        case \"ExifVersion\" :\r\n                        case \"FlashpixVersion\" :\r\n                            oEXIFTags[strTag] = String.fromCharCode(oEXIFTags[strTag][0], oEXIFTags[strTag][1], oEXIFTags[strTag][2], oEXIFTags[strTag][3]);\r\n                            break;\r\n\r\n                        case \"ComponentsConfiguration\" :\r\n                            oEXIFTags[strTag] =\r\n                                    EXIF.StringValues.Components[oEXIFTags[strTag][0]]\r\n                                    + EXIF.StringValues.Components[oEXIFTags[strTag][1]]\r\n                                    + EXIF.StringValues.Components[oEXIFTags[strTag][2]]\r\n                                    + EXIF.StringValues.Components[oEXIFTags[strTag][3]];\r\n                            break;\r\n                    }\r\n                    oTags[strTag] = oEXIFTags[strTag];\r\n                }\r\n            }\r\n\r\n            if (oTags.GPSInfoIFDPointer) {\r\n                var oGPSTags = readTags(oFile, iTIFFOffset, iTIFFOffset + oTags.GPSInfoIFDPointer, EXIF.GPSTags, bBigEnd);\r\n                for (var strTag in oGPSTags) {\r\n                    switch (strTag) {\r\n                        case \"GPSVersionID\" :\r\n                            oGPSTags[strTag] = oGPSTags[strTag][0]\r\n                                    + \".\" + oGPSTags[strTag][1]\r\n                                    + \".\" + oGPSTags[strTag][2]\r\n                                    + \".\" + oGPSTags[strTag][3];\r\n                            break;\r\n                    }\r\n                    oTags[strTag] = oGPSTags[strTag];\r\n                }\r\n            }\r\n\r\n            return oTags;\r\n        }\r\n\r\n\r\n        EXIF.getData = function(oImg, fncCallback)\r\n        {\r\n            if (!oImg.complete)\r\n                return false;\r\n            if (!imageHasData(oImg)) {\r\n                getImageData(oImg, fncCallback);\r\n            } else {\r\n                if (fncCallback)\r\n                    fncCallback();\r\n            }\r\n            return true;\r\n        }\r\n\r\n        EXIF.getDataFromDataURL = function(oImg, fncCallback)\r\n        {\r\n            if (!oImg.complete)\r\n                return false;\r\n            if (!imageHasData(oImg)) {\r\n                getImageDataFromDataURL(oImg, fncCallback);\r\n            } else {\r\n                if (fncCallback)\r\n                    fncCallback();\r\n            }\r\n            return true;\r\n        }\r\n\r\n        EXIF.getTag = function(oImg, strTag)\r\n        {\r\n            if (!imageHasData(oImg))\r\n                return;\r\n            return oImg.exifdata[strTag];\r\n        }\r\n\r\n        EXIF.getAllTags = function(oImg)\r\n        {\r\n            if (!imageHasData(oImg))\r\n                return {};\r\n            var oData = oImg.exifdata;\r\n            var oAllTags = {};\r\n            for (var a in oData) {\r\n                if (oData.hasOwnProperty(a)) {\r\n                    oAllTags[a] = oData[a];\r\n                }\r\n            }\r\n            return oAllTags;\r\n        }\r\n\r\n        EXIF.pretty = function(oImg)\r\n        {\r\n            if (!imageHasData(oImg))\r\n                return \"\";\r\n            var oData = oImg.exifdata;\r\n            var strPretty = \"\";\r\n            for (var a in oData) {\r\n                if (oData.hasOwnProperty(a)) {\r\n                    if (typeof oData[a] == \"object\") {\r\n                        strPretty += a + \" : [\" + oData[a].length + \" values]\\r\\n\";\r\n                    } else {\r\n                        strPretty += a + \" : \" + oData[a] + \"\\r\\n\";\r\n                    }\r\n                }\r\n            }\r\n            return strPretty;\r\n        }\r\n\r\n        EXIF.readFromBinaryFile = function(oFile) {\r\n            return findEXIFinJPEG(oFile);\r\n        }\r\n\r\n        function loadAllImages()\r\n        {\r\n            var aImages = document.getElementsByTagName(\"img\");\r\n            for (var i = 0; i < aImages.length; i++) {\r\n                if (aImages[i].getAttribute(\"exif\") == \"true\") {\r\n                    if (!aImages[i].complete) {\r\n                        addEvent(aImages[i], \"load\",\r\n                                function() {\r\n                                    EXIF.getData(this);\r\n                                }\r\n                        );\r\n                    } else {\r\n                        EXIF.getData(aImages[i]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // automatically load exif data for all images with exif=true when doc is ready\r\n        jQuery(document).ready(loadAllImages);\r\n\r\n        // load data for images manually\r\n        jQuery.fn.exifLoad = function(fncCallback) {\r\n            return this.each(function() {\r\n                EXIF.getData(this, fncCallback)\r\n            });\r\n        }\r\n\r\n        // load data for images manually\r\n        jQuery.fn.exifLoadFromDataURL = function(fncCallback) {\r\n            return this.each(function() {\r\n                EXIF.getDataFromDataURL(this, fncCallback)\r\n                return true;\r\n            });\r\n        }\r\n\r\n        jQuery.fn.exif = function(strTag) {\r\n            var aStrings = [];\r\n            this.each(function() {\r\n                aStrings.push(EXIF.getTag(this, strTag));\r\n            });\r\n            return aStrings;\r\n        }\r\n\r\n        jQuery.fn.exifAll = function() {\r\n            var aStrings = [];\r\n            this.each(function() {\r\n                aStrings.push(EXIF.getAllTags(this));\r\n            });\r\n            return aStrings;\r\n        }\r\n\r\n        jQuery.fn.exifPretty = function() {\r\n            var aStrings = [];\r\n            this.each(function() {\r\n                aStrings.push(EXIF.pretty(this));\r\n            });\r\n            return aStrings;\r\n        }\r\n\r\n\r\n    })();\r\n\r\n\r\n})(jQuery);\r\n","/*\n * jQuery canvasResize plugin\n * \n * Version: 1.2.0 \n * Date (d/m/y): 02/10/12\n * Update (d/m/y): 14/05/13\n * Original author: @gokercebeci \n * Licensed under the MIT license\n * - This plugin working with jquery.exif.js \n *   (It's under the MPL License http://www.nihilogic.dk/licenses/mpl-license.txt)\n * Demo: http://ios6-image-resize.gokercebeci.com/\n * \n * - I fixed iOS6 Safari's image file rendering issue for large size image (over mega-pixel)\n *   using few functions from https://github.com/stomita/ios-imagefile-megapixel\n *   (detectSubsampling, )\n *   And fixed orientation issue by edited http://blog.nihilogic.dk/2008/05/jquery-exif-data-plugin.html\n *   Thanks, Shinichi Tomita and Jacob Seidelin\n */\nimport jQuery from 'jquery';\n\n\n(function($) {\n    var pluginName = 'canvasResize',\n            methods = {\n        newsize: function(w, h, W, H, C) {\n            var c = C ? 'h' : '';\n            if ((W && w > W) || (H && h > H)) {\n                var r = w / h;\n                if ((r >= 1 || H === 0) && W && !C) {\n                    w = W;\n                    h = (W / r) >> 0;\n                } else if (C && r <= (W / H)) {\n                    w = W;\n                    h = (W / r) >> 0;\n                    c = 'w';\n                } else {\n                    w = (H * r) >> 0;\n                    h = H;\n                }\n            }\n            return {\n                'width': w,\n                'height': h,\n                'cropped': c\n            };\n        },\n        dataURLtoBlob: function(data) {\n            var mimeString = data.split(',')[0].split(':')[1].split(';')[0];\n            var byteString = atob(data.split(',')[1]);\n            var ab = new ArrayBuffer(byteString.length);\n            var ia = new Uint8Array(ab);\n            for (var i = 0; i < byteString.length; i++) {\n                ia[i] = byteString.charCodeAt(i);\n            }\n            var bb = (window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder);\n            if (bb) {\n                //    console.log('BlobBuilder');        \n                bb = new (window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder)();\n                bb.append(ab);\n                return bb.getBlob(mimeString);\n            } else {\n                //    console.log('Blob');  \n                bb = new Blob([ab], {\n                    'type': (mimeString)\n                });\n                return bb;\n            }\n        },\n        /**\n         * Detect subsampling in loaded image.\n         * In iOS, larger images than 2M pixels may be subsampled in rendering.\n         */\n        detectSubsampling: function(img) {\n            var iw = img.width, ih = img.height;\n            if (iw * ih > 1048576) { // subsampling may happen over megapixel image\n                var canvas = document.createElement('canvas');\n                canvas.width = canvas.height = 1;\n                var ctx = canvas.getContext('2d');\n                ctx.drawImage(img, -iw + 1, 0);\n                // subsampled image becomes half smaller in rendering size.\n                // check alpha channel value to confirm image is covering edge pixel or not.\n                // if alpha value is 0 image is not covering, hence subsampled.\n                return ctx.getImageData(0, 0, 1, 1).data[3] === 0;\n            } else {\n                return false;\n            }\n        },\n        /**\n         * Update the orientation according to the specified rotation angle\n         */\n        rotate: function(orientation, angle) {\n            var o = {\n                // nothing\n                1: {90: 6, 180: 3, 270: 8},\n                // horizontal flip\n                2: {90: 7, 180: 4, 270: 5},\n                // 180 rotate left\n                3: {90: 8, 180: 1, 270: 6},\n                // vertical flip\n                4: {90: 5, 180: 2, 270: 7},\n                // vertical flip + 90 rotate right\n                5: {90: 2, 180: 7, 270: 4},\n                // 90 rotate right\n                6: {90: 3, 180: 8, 270: 1},\n                // horizontal flip + 90 rotate right\n                7: {90: 4, 180: 5, 270: 2},\n                // 90 rotate left\n                8: {90: 1, 180: 6, 270: 3}\n            };\n            return o[orientation][angle] ? o[orientation][angle] : orientation;\n        },\n        /**\n         * Transform canvas coordination according to specified frame size and orientation\n         * Orientation value is from EXIF tag\n         */\n        transformCoordinate: function(canvas, width, height, orientation) {\n            //console.log(width, height);\n            switch (orientation) {\n                case 5:\n                case 6:\n                case 7:\n                case 8:\n                    canvas.width = height;\n                    canvas.height = width;\n                    break;\n                default:\n                    canvas.width = width;\n                    canvas.height = height;\n            }\n            var ctx = canvas.getContext('2d');\n            switch (orientation) {\n                case 1:\n                    // nothing\n                    break;\n                case 2:\n                    // horizontal flip\n                    ctx.translate(width, 0);\n                    ctx.scale(-1, 1);\n                    break;\n                case 3:\n                    // 180 rotate left\n                    ctx.translate(width, height);\n                    ctx.rotate(Math.PI);\n                    break;\n                case 4:\n                    // vertical flip\n                    ctx.translate(0, height);\n                    ctx.scale(1, -1);\n                    break;\n                case 5:\n                    // vertical flip + 90 rotate right\n                    ctx.rotate(0.5 * Math.PI);\n                    ctx.scale(1, -1);\n                    break;\n                case 6:\n                    // 90 rotate right\n                    ctx.rotate(0.5 * Math.PI);\n                    ctx.translate(0, -height);\n                    break;\n                case 7:\n                    // horizontal flip + 90 rotate right\n                    ctx.rotate(0.5 * Math.PI);\n                    ctx.translate(width, -height);\n                    ctx.scale(-1, 1);\n                    break;\n                case 8:\n                    // 90 rotate left\n                    ctx.rotate(-0.5 * Math.PI);\n                    ctx.translate(-width, 0);\n                    break;\n                default:\n                    break;\n            }\n        },\n        /**\n         * Detecting vertical squash in loaded image.\n         * Fixes a bug which squash image vertically while drawing into canvas for some images.\n         */\n        detectVerticalSquash: function(img, iw, ih) {\n            var canvas = document.createElement('canvas');\n            canvas.width = 1;\n            canvas.height = ih;\n            var ctx = canvas.getContext('2d');\n            ctx.drawImage(img, 0, 0);\n            var data = ctx.getImageData(0, 0, 1, ih).data;\n            // search image edge pixel position in case it is squashed vertically.\n            var sy = 0;\n            var ey = ih;\n            var py = ih;\n            while (py > sy) {\n                var alpha = data[(py - 1) * 4 + 3];\n                if (alpha === 0) {\n                    ey = py;\n                } else {\n                    sy = py;\n                }\n                py = (ey + sy) >> 1;\n            }\n            var ratio = py / ih;\n            return ratio === 0 ? 1 : ratio;\n        },\n        callback: function(d) {\n            return d;\n        }\n    },\n    defaults = {\n        width: 300,\n        height: 0,\n        crop: false,\n        quality: 80,\n        'callback': methods.callback\n    };\n    function Plugin(file, options) {\n        this.file = file;\n        this.options = $.extend({}, defaults, options);\n        this._defaults = defaults;\n        this._name = pluginName;\n        this.init();\n    }\n    Plugin.prototype = {\n        init: function() {\n            //this.options.init(this);\n            var $this = this;\n            var file = this.file;\n\n            var reader = new FileReader();\n            reader.onloadend = function(e) {\n                var dataURL = e.target.result;\n                var img = new Image();\n                img.onload = function(e) {\n                    // Read Orientation Data in EXIF\n                    $(img).exifLoadFromDataURL(function() {\n                        var orientation = $(img).exif('Orientation')[0] || 1;\n                        orientation = methods.rotate(orientation, $this.options.rotate);\n\n                        // CW or CCW ? replace width and height\n                        var size = (orientation >= 5 && orientation <= 8)\n                                ? methods.newsize(img.height, img.width, $this.options.width, $this.options.height, $this.options.crop)\n                                : methods.newsize(img.width, img.height, $this.options.width, $this.options.height, $this.options.crop);\n\n                        var iw = img.width, ih = img.height;\n                        var width = size.width, height = size.height;\n\n                        //console.log(iw, ih, size.width, size.height, orientation);\n\n                        var canvas = document.createElement(\"canvas\");\n                        var ctx = canvas.getContext(\"2d\");\n                        ctx.save();\n                        methods.transformCoordinate(canvas, width, height, orientation);\n\n                        // over image size\n                        if (methods.detectSubsampling(img)) {\n                            iw /= 2;\n                            ih /= 2;\n                        }\n                        var d = 1024; // size of tiling canvas\n                        var tmpCanvas = document.createElement('canvas');\n                        tmpCanvas.width = tmpCanvas.height = d;\n                        var tmpCtx = tmpCanvas.getContext('2d');\n                        var vertSquashRatio = methods.detectVerticalSquash(img, iw, ih);\n                        var sy = 0;\n                        while (sy < ih) {\n                            var sh = sy + d > ih ? ih - sy : d;\n                            var sx = 0;\n                            while (sx < iw) {\n                                var sw = sx + d > iw ? iw - sx : d;\n                                tmpCtx.clearRect(0, 0, d, d);\n                                tmpCtx.drawImage(img, -sx, -sy);\n                                var dx = Math.floor(sx * width / iw);\n                                var dw = Math.ceil(sw * width / iw);\n                                var dy = Math.floor(sy * height / ih / vertSquashRatio);\n                                var dh = Math.ceil(sh * height / ih / vertSquashRatio);\n                                ctx.drawImage(tmpCanvas, 0, 0, sw, sh, dx, dy, dw, dh);\n                                sx += d;\n                            }\n                            sy += d;\n                        }\n                        ctx.restore();\n                        tmpCanvas = tmpCtx = null;\n\n                        // if cropped or rotated width and height data replacing issue \n                        var newcanvas = document.createElement('canvas');\n                        newcanvas.width = size.cropped === 'h' ? height : width;\n                        newcanvas.height = size.cropped === 'w' ? width : height;\n                        var x = size.cropped === 'h' ? (height - width) * .5 : 0;\n                        var y = size.cropped === 'w' ? (width - height) * .5 : 0;\n                        var newctx = newcanvas.getContext('2d');\n                        newctx.drawImage(canvas, x, y, width, height);\n\n                        if (file.type === \"image/png\") {\n                            var data = newcanvas.toDataURL(file.type);\n                        } else {\n                            var data = newcanvas.toDataURL(\"image/jpeg\", ($this.options.quality * .01));\n                        }\n\n                        // CALLBACK\n                        $this.options.callback(data, width, height);\n\n                    });\n                };\n                img.src = dataURL;\n                // =====================================================\n            };\n            reader.readAsDataURL(file);\n\n        }\n    };\n    $[pluginName] = function(file, options) {\n        if (typeof file === 'string')\n            return methods[file](options);\n        else\n            new Plugin(file, options);\n    };\n\n})(jQuery);","\"use strict\";\n\nimport initWatcher from '../initialisationWatcher';\nvar Dispatcher = require('../dispatcher/appDispatcher');\nvar Actions = require('../constants/actionTypes');\n\nvar InitialisationActions = {\n\tinitApp: function(){\n\t\tDispatcher.dispatch({\n\t\t\tactionType: Actions.INITIALISE,\n\t\t\tinitialData: {\n\t\t\t\t//objects: SomeApi.getStuffPerhaps() ?\n\t\t\t}\n\t\t});\n\t\t\n\t\t//Return a promise that will resolve once all stores that have async setup are initialised\n\t\t//(if they've even added themselves as stores to care about) \n\t\treturn initWatcher.getReady();\n\t}\n};\n\nmodule.exports = InitialisationActions;","import React from 'react';\nimport util from '../util';\nimport initWatcher from '../initialisationWatcher';\n\n/*const Splash = () => (\n    <div className=\"splash\">\n      <img src={util.assetsUrl + \"img/morpheus-m.png\"} />\n    </div>\n);*/\n\nclass Splash extends React.Component {\n\tstatic propTypes = {\n\t\tpreloadImages: React.PropTypes.array\n\t};\n\t\n\tstatic defaultProps = {\n\t\tpreloadImages: []\n\t};\n\t\n\tcomponentDidMount() {\n\t\tif(this.props.preloadImages.length){\n\t\t\tinitWatcher.setReady(\n\t\t\t\tPromise.all(this.props.preloadImages.map((imgSrc) => (\n\t\t\t\t\tnew Promise(function(resolve, reject) {\n\t\t\t\t\t\tconst img = new Image();\n\t\t\t\t\t\timg.onload = () => {\n\t\t\t\t\t\t\t//console.log(imgSrc + \" loaded\");\n\t\t\t\t\t\t\tresolve(imgSrc + \" loaded\");\n\t\t\t\t\t\t};\n\t\t\t\t\t\timg.onerror = () => {\n\t\t\t\t\t\t\t//console.log(imgSrc + \" failed to load\");\n\t\t\t\t\t\t\treject(Error(imgSrc + \" failed to load\"));\n\t\t\t\t\t\t};\n\t\t\t\t\t\timg.src = imgSrc;\n\t\t\t\t\t})\n\t\t\t\t))).catch(() => {\n\t\t\t\t\t//Let's silently catch an image load failure, so we always return a resolved (not rejected) promise\n\t\t\t\t\t//[don't want to derail the rest of initWatcher.getReady()'s Promise.all usage]\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t}\n\t\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"splash\">\n\t\t\t\t<img src={util.assetsUrl + \"img/morpheus-m.png\"} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Splash;","\"use strict\";\n\nimport React from 'react';\nimport { Link, Redirect, withRouter } from 'react-router-dom';\n\nvar UserActions = require('../../actions/userActions');\nvar UserStore = require('../../stores/userStore');\nvar option = require('../../constants/configOptions.js');\nvar config = require('../../config.js');\nvar util = require('../../util.js');\n\n\nconst $ = window.$;\nvar Header = React.createClass({\n\tgetInitialState: function() {\n\t\treturn {\n\t\t\tscreenTitle: util.screenData.title,\n\t\t\tmenuVisible: false,\n\t\t\tloggedInName: UserStore.getFullName(), //don't need full user object\n\t\t\tcompanyLogoBase64: UserStore.getCompanyLogo(), //don't need full user object\n\t\t\tredirectToLoginPage: false //!util.isLoggedIn()\n\t\t};\n\t},\n\t\n\tcomponentWillMount: function(){\n\t\t//We add this listener in WILL mount so it's early enough to catch\n\t\t//it being set in WILL mount by other components (as well as prevent a re-render)\n\t\tutil.addChangeListener(this._onScreenDataChange);\n\t},\n\t\n\tcomponentDidMount: function(){\n\t\tUserStore.addChangeListener(this._onChange);\n\t\t//Close nav again on nav link click (this is probably the best place to add this code for now)\n\t\t$(document).on('click', '.navbar-collapse.in', function(e){\n\t\t\tif($(e.target).is('a') && ( $(e.target).attr('class') != 'dropdown-toggle' )){\n\t\t\t\t$(this).collapse('hide');\n\t\t\t}\n\t\t});\n\t\t\n\t\t//As good a place as any for updating the background image on login, if necessary \n\t\t//(we subscribe to user store info changes in this header companent, and initiate login/logout)\n\t\tutil.refreshBackgroundImage();\n\t},\n\t\n\tcomponentWillReceiveProps: function(nextProps){\n\t\t//We can close the menu whenever this component receives props, as they are always React Router props\n\t\t//(due to a navigation change). [See withRouter() usage]\n\t\tthis.setState({\n\t\t\tmenuVisible: false\n\t\t});\t\n\t},\n\t\n\tcomponentWillUnmount: function(){\n\t\tUserStore.removeChangeListener(this._onChange);\n\t\tutil.removeChangeListener(this._onScreenDataChange);\n\t},\n\t\n\t_onChange: function(){\n\t\t//var status = UserStore.getStatus();\n\t\t//User has logged out (user store unloaded) \n\t\t//if(status == Status.OK){}\t\n\t\t\n\t\t//Still logged in \n\t\t// - update user name (user info updated by another component)\n\t\t// - update company logo\n\t\tif(UserStore.hasUser()){\n\t\t\t//this.state.loggedInName = UserStore.getFullName();\n\t\t\tthis.setState({\n\t\t\t\tloggedInName: UserStore.getFullName(), //this.state.loggedInName,\n\t\t\t\tcompanyLogoBase64: UserStore.getCompanyLogo(),\n\t\t\t\tredirectToLoginPage: false\n\t\t\t});\n\t\t\t\n\t\t//Logged out successfully\t\n\t\t}else{\n\t\t\tthis.setState({\n\t\t\t\tloggedInName: '', //may as well set this just in case\n\t\t\t\tcompanyLogoBase64: '', //may as well set this just in case\n\t\t\t\tredirectToLoginPage: true\n\t\t\t}); \n\t\t}\n\t\t\n\t\t//As good a place as any for updating the background image on login/logout, if necessary \n\t\t//(we subscribe to user store info changes in this header companent, and initiate login/logout)\n\t\tutil.refreshBackgroundImage();\n\t},\n\t\n\t_onScreenDataChange: function(){\n\t\tthis.setState({\n\t\t\tscreenTitle: util.screenData.title\n\t\t});\n\t},\n\t\n\ttoggleMenu: function(){\n\t\tthis.setState((prevState) => ({\n\t\t\tmenuVisible: !prevState.menuVisible\n\t\t}));\n\t},\n\t\n\tlogout: function(event){\n\t\tevent.preventDefault();\n\t\tUserActions.logout();\n\t},\n\t\n\trender: function(){\n\t\t//style={{display: (util.isLoggedIn() ? 'block' : 'none')}}\t\t \n\t\t\n\t\t//if (this.state.redirectToLoginPage) {\n\t\t//\treturn (\n\t\t//\t\t<Redirect to=\"/login\" />\n\t\t//\t);\n\t\t//}\n\t\t\n\t\t//<a href=\"#\" className=\"nav-link\" onClick={this.logout}><i className=\"fa fa-sign-out\"></i>LOGOUT <small className=\"text-primary\">{this.state.loggedInName}</small></a>\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t{this.state.loggedInName ?\n\t\t\t\t\t<header className=\"navbar navbar-fixed-top navbar-inverse\">\n\t\t\t\t\t\t<div className=\"container\">\n\t\t\t\t\t\t\t<div className=\"navbar-header\">\n\t\t\t\t\t\t\t\t{ \n\t\t\t\t\t\t\t\t\tthis.state.companyLogoBase64 != null && this.state.companyLogoBase64 != '' ?\n\t\t\t\t\t\t\t\t\t<button type=\"button\" className=\"navbar-toggle navbar-toggle-logo pull-left\" onClick={this.toggleMenu} aria-expanded=\"false\">\n\t\t\t\t\t\t\t\t\t\t<img src={'data:image/png;base64,' + this.state.companyLogoBase64} />\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t: \n\t\t\t\t\t\t\t\t\t<button type=\"button\" className=\"navbar-toggle pull-left\" onClick={this.toggleMenu} aria-expanded=\"false\">\n\t\t\t\t\t\t\t\t\t\t<span className=\"icon-bar\"></span>\n\t\t\t\t\t\t\t\t\t\t<span className=\"icon-bar\"></span>\n\t\t\t\t\t\t\t\t\t\t<span className=\"icon-bar\"></span>\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"navbar-title\">{this.state.screenTitle}</div>\n\t\t\t\t\t\t\t{this.state.loggedInName ? \n\t\t\t\t\t\t\t<div className={\"navbar-inverse side-collapse\" + (this.state.menuVisible ? '' : ' in')}>\n\t\t\t\t\t\t\t\t<nav className=\"navbar-collapse\">\n\t\t\t\t\t\t\t\t\t<ul className=\"nav navbar-nav\">\n\t\t\t\t\t\t\t\t\t\t<li className=\"nav-home\">\n\t\t\t\t\t\t\t\t\t\t\t<Link className=\"nav-link\" to=\"/\"><img src={util.assetsUrl + \"img/morpheus-m-white.png\"} />HOME</Link>\n\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t{ config.get(option.UI_BUTTON_CALL_LIST) ? \n\t\t\t\t\t\t\t\t\t\t\t<li className=\"nav-item\">\n\t\t\t\t\t\t\t\t\t\t\t\t<Link className=\"nav-link\" to=\"/calls\"><i className=\"fa fa-list-ul\"></i>MY CALL LIST</Link>\n\t\t\t\t\t\t\t\t\t\t\t</li> : null }\n\t\t\t\t\t\t\t\t\t\t{ config.get(option.UI_BUTTON_CALL_LIST) ? \n\t\t\t\t\t\t\t\t\t\t\t<div className=\"mui-divider\"></div> : null }\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t<li className=\"nav-item\">\n\t\t\t\t\t\t\t\t\t\t\t<Link className=\"nav-link\" to=\"/sales\"><i className=\"fa fa-shopping-cart\"></i>MY SALES</Link>\n\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t<div className=\"mui-divider\"></div>\n\t\t\t\t\t\t\t\t\t\t<li className=\"nav-item\">\n\t\t\t\t\t\t\t\t\t\t\t<Link className=\"nav-link\" to=\"/info\"><i className=\"fa fa-info-circle\" style={{marginRight: '12px'}}></i>MY INFORMATION</Link>\n\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t<div className=\"mui-divider\"></div>\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t{ config.get(option.UI_BUTTON_LIBRARY) ?\n\t\t\t\t\t\t\t\t\t\t\t<li className=\"nav-item\">\n\t\t\t\t\t\t\t\t\t\t\t\t<Link className=\"nav-link\" to=\"/library\"><i className=\"fa fa-cloud\"></i>LIBRARY</Link>\n\t\t\t\t\t\t\t\t\t\t\t</li> : null }\n\t\t\t\t\t\t\t\t\t\t{ config.get(option.UI_BUTTON_LIBRARY) ?\t\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"mui-divider\"></div> : null }\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t<li className=\"nav-item\">\n\t\t\t\t\t\t\t\t\t\t\t<a href=\"#\" className=\"nav-link\" onClick={this.logout}><i className=\"fa fa-sign-out\"></i>LOGOUT</a>\n\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t<li className=\"nav-logo\">\n\t\t\t\t\t\t\t\t\t\t\t<img src={util.assetsUrl + \"img/morpheus-brand-pb.png\"} />\n\t\t\t\t\t\t\t\t\t\t\t<button type=\"button\" className=\"navbar-toggle pull-right\" onClick={this.toggleMenu}><i className=\"fa fa-chevron-left\"></i></button>\n\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t</nav>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t: null\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</header>\n\t\t\t\t\t: null\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t{this.state.redirectToLoginPage ? \n\t\t\t\t\t<Redirect push to=\"/login\" />\n\t\t\t\t\t: null\n\t\t\t\t}\n\t\t\t</div>\n\t\t);\n\t}\n});\n\nexport default withRouter(Header);","\"use strict\";\n\nimport React from 'react';\nimport {\n  Link\n} from 'react-router-dom';\n//import { WOW } from 'wowjs';\nvar CommonActions = require('../actions/commonActions');\nvar Status = require('../constants/actionStatuses');\nvar SalesEntities = require('../constants/salesEntities');\nvar Actions = require('../constants/actionTypes');\nvar ActionStatusStore = require('../stores/actionStatusStore');\nvar CustomerStore = require('../stores/customerStore');\nvar ProductStore = require('../stores/productStore');\nvar OrderStore = require('../stores/orderStore');\nvar CallStore = require('../stores/callStore');\nvar UserStore = require('../stores/userStore');\nvar ProgressModal = require('./common/progressModal');\nvar option = require('../constants/configOptions.js');\nvar config = require('../config.js');\nvar util = require('../util.js');\nvar toastr = require('toastr');\nvar _ = require('lodash');\n\nclass HomePage extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\t\n\t\tthis.state = {\n\t\t\twelcomeName: UserStore.getName(),\n\t\t\tisLoading: false,\n\t\t\tisRefreshProgressVisible: false,\t//Keep separate flag from loading (to allow for refresh progress window to remain open afterwards)\n\t\t\trefreshProgressPercentage: 0,\n\t\t\trefreshProgressDescription: ''\n\t\t};\n\t\t\n\t\t//Flag for last action (indeterminate length)\n\t\t//NB: This can't be a state property, because occasionally it's not set before the first store changes come through, resulting in display issues\n\t\t//(This could be resolved by using the function version of setState() to only fire the refresh operation once lastPendingAction is properly set, \n\t\t//but then we're delaying the operation slightly, and there's no real need for lastPendingAction to be a state property.) \n\t\tthis.lastPendingAction = null;\n\t\t\n\t\tthis.progressDescriptions = {};\n\t\tthis.progressDescriptions['default'] \t\t\t\t\t= \"Refreshing\";\n\t\tthis.progressDescriptions[SalesEntities.PAYMENT_TERM] \t= \"Refreshing payment terms\";\n\t\tthis.progressDescriptions[SalesEntities.TAX_CLASS] \t\t= \"Refreshing tax classes\";\n\t\tthis.progressDescriptions[SalesEntities.CARRIER] \t\t= \"Refreshing carriers\";\n\t\tthis.progressDescriptions[SalesEntities.CURRENCY] \t\t= \"Refreshing currencies\";\n\t\tthis.progressDescriptions[SalesEntities.PRODUCT] \t\t= \"Refreshing products\";\n\t\tthis.progressDescriptions[SalesEntities.CATEGORY] \t\t= \"Refreshing categories\";\n\t\tthis.progressDescriptions[SalesEntities.ORDER] \t\t\t= \"Refreshing orders\";\n\t\tthis.progressDescriptions[SalesEntities.CUSTOMER] \t\t= \"Refreshing customers\";\n\t\tthis.progressDescriptions[SalesEntities.PRICE_LIST] \t= \"Refreshing price lists\";\n\t\tthis.progressDescriptions[SalesEntities.PRODUCT_RULE] \t= \"Refreshing product rules\";\n\t\t\n\t\tthis.completionMessages = {};\n\t\t\n\t\tthis.completionMessages[Actions.ALL_REFRESH] = {};\n\t\tthis.completionMessages[Actions.ALL_REFRESH][Status.OK] = \"Sales and calls data refreshed\";\n\t\tthis.completionMessages[Actions.ALL_REFRESH][Status.ERROR] = \"Unable to refresh sales and calls data\";\n\t\tthis.completionMessages[Actions.ALL_REFRESH][Status.PARTIAL] = \"Unable to refresh all sales and calls data\";\n\t}\n\t\n\tcomponentWillMount(){\n\t\tthis.screenTitle = \"Welcome\" + (this.state.welcomeName ? \" \" + this.state.welcomeName : \"\");\n\t\tutil.setScreenTitle(this.screenTitle);\n\t}\n\t\n\tcomponentDidMount(){\n\t\tActionStatusStore.addChangeListener(this._onChange);\n\t\t\n\t\t/*\n\t\t//new WOW().init();\n\t\tconst wow = new WOW();\n  \t\twow.sync();\n  \t\t*/\n\t}\n\t\n\tcomponentWillUnmount() {\n\t\tActionStatusStore.removeChangeListener(this._onChange);\n\t}\n\t\n\t_onChange = () => {\n\t\t//Obtain refresh info\n\t\tlet refreshStatus = ActionStatusStore.getStatus(this.lastPendingAction);\n\t\tlet refreshEntityStatuses = ActionStatusStore.getEntityStatuses(this.lastPendingAction);\n\t\tlet refreshProgressPercentage = ActionStatusStore.getPercentageComplete(this.lastPendingAction);\n\t\t\n\t\t//A refresh is in progress\n\t\tif(refreshStatus == Status.PENDING){\n\t\t\tlet currentRefreshEntity = 'default';\n\t\t\tif(refreshEntityStatuses != null){\n\t\t\t\tfor(var entity in refreshEntityStatuses){\n\t\t\t\t\tif(refreshEntityStatuses[entity] == Status.PENDING){\n\t\t\t\t\t\tcurrentRefreshEntity = entity;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.setState({\n\t\t\t\tisLoading: true,\n\t\t\t\tisRefreshProgressVisible: true,\n\t\t\t\trefreshProgressPercentage: refreshProgressPercentage,\n\t\t\t\trefreshProgressDescription: this.progressDescriptions[currentRefreshEntity] + \" (\" + Math.round(refreshProgressPercentage) + \"%)\"\n\t\t\t});\n\t\t\n\t\t//A refresh has completed\t\n\t\t}else{\n\t\t\tthis.setState({\n\t\t\t\tisLoading: false,\n\t\t\t\tisRefreshProgressVisible: true,\n\t\t\t\trefreshProgressPercentage: refreshProgressPercentage,\n\t\t\t\trefreshProgressDescription: \"Complete (\" + Math.round(refreshProgressPercentage) + \"%)\"\n\t\t\t});\n\t\t\t\n\t\t\t//Keep the window open long enough to see completion message\n\t\t\tsetTimeout(this.closeRefreshProgressModal, 1000);\n\t\t\t\n\t\t\tif(this.lastPendingAction != null && this.completionMessages[this.lastPendingAction] != null){\n\t\t\t\tif(refreshStatus == Status.OK){\n\t\t\t\t\ttoastr.success(this.completionMessages[this.lastPendingAction][Status.OK]);\n\t\t\t\t}else if(refreshStatus == Status.ERROR){\n\t\t\t\t\ttoastr.error(this.completionMessages[this.lastPendingAction][Status.ERROR]);\n\t\t\t\t}else if(refreshStatus == Status.PARTIAL){\n\t\t\t\t\ttoastr.warning(this.completionMessages[this.lastPendingAction][Status.PARTIAL]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\t\n\t}\n\t\n\trefreshAll = (event) => {\n\t\tif(event != null){ //triggered by a link click\n\t\t\tevent.preventDefault();\n\t\t}\n\t\t\n\t\tif(!this.state.isLoading){\n\t\t\tthis.lastPendingAction = Actions.ALL_REFRESH;\n\t\t\t//Obtain the full list of customers we need to have in our list \n\t\t\t//(call customers plus any associated with current orders)\n\t\t\t//[Note we now also include any missing customers residing in just the customer store (requested via sales)]\n\t\t\tlet arrCustomerIDs = _.union(CustomerStore.getCustomerIDs(), CallStore.getCallCustomerIDs(), OrderStore.getOrderCustomerIDs()); \n\t\t\t\n\t\t\t//Access check is built in by default\n\t\t\t//CommonActions.doAfterAccessCheck('refreshAll', [ProductStore.getLastRefresh(), ProductStore.getRefreshRetryIDs(), OrderStore.getPastOrdersLastRefresh(), OrderStore.getPastOrdersRefreshRetryIDs(), arrCustomerIDs]);\n\t\t\tCommonActions.refreshAll(ProductStore.getLastRefresh(), ProductStore.getRefreshRetryIDs(), OrderStore.getPastOrdersLastRefresh(), OrderStore.getPastOrdersRefreshRetryIDs(), arrCustomerIDs);\n\t\t}\n\t}\n\t\n\tcloseRefreshProgressModal = () => {\n\t\tthis.setState({isRefreshProgressVisible: false});\n\t}\n\n\trender(){\n\t\tconst refreshLocation = { \n\t\t\tpathname: '/refresh', \n\t\t\tstate: { \n\t\t\t\tfrom: this.props.location,\n\t\t\t\tfromTitle: 'Home' //this.screenTitle \n\t\t\t} \n\t\t};\n\t\t\n\t\t/*\n\t\t\t\t\t<Link to=\"/info\" className=\"list-group-item\">\n\t\t\t\t\t\t<h4 className=\"list-group-item-heading\">My Info</h4>\n\t\t\t\t\t\t<p className=\"list-group-item-text\">View and update your information.</p>\n\t\t\t\t\t</Link>\n\t\t*/\n\t\t//var todaysDate = new Date(); //(see usage below, together with conversion of spaces to non-breaking spaces)\n\t\t\t//<div className=\"alert alert-info\" role=\"alert\"><span>{\"Welcome\" + (this.state.welcomeName ? \" \" + this.state.welcomeName : \"\") + \", you have been successfully logged in. Today's date is \"}</span><strong>{todaysDate.toDateString().replace(/ /g, \"\\u00a0\")}</strong><span>.</span></div>\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t{ (!config.get(option.FUNC_ONLINE_CUSTOMERS) || !config.get(option.FUNC_ONLINE_PRODUCTS)) ?\n\t\t\t\t\t<div className=\"btn-group btn-group-header-refresh\">\n\t\t\t\t\t\t<button className=\"btn btn-header-refresh dropdown-toggle\" disabled={this.state.isLoading} data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n\t\t\t\t\t\t\t<i className={\"fa fa-refresh fa-2x\" + (this.state.isLoading ? \" fa-spin\" : \"\")}></i>\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<ul className=\"dropdown-menu\">\n\t\t\t\t\t\t\t<li><a href=\"#\" onClick={this.refreshAll} className={(this.state.isLoading ? \" disabled\" : \"\")}>Refresh All</a></li>\n\t\t\t\t\t\t\t<li><Link to={refreshLocation} className={(this.state.isLoading ? \" disabled\" : \"\")}>More Options</Link></li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</div> : null }\n\t\t\t\t\n\t\t\t\t{ this.state.isRefreshProgressVisible ? \n\t\t\t\t\t<ProgressModal \n\t\t\t\t\t\tpercentage={this.state.refreshProgressPercentage}\n\t\t\t\t\t\tdescription={this.state.refreshProgressDescription}\n\t\t\t\t\t\ttitle=\"Refresh Progress\"\n\t\t\t\t\t\tisLoading={this.state.isLoading} \n\t\t\t\t\t/> : null }\n\t\t\t\t\t\n\t\t\t\t<ul className=\"home-menu\">\n\t\t\t\t\t{ config.get(option.UI_BUTTON_CALL_LIST) ? \n\t\t\t\t\t\t<li className=\"wow fadeInLeft\" data-wow-delay=\"0.2s\">\n\t\t\t\t\t\t\t<Link className=\"btn btn-outline-white btn-round-lg btn-lg\" to=\"/calls\">\n\t\t\t\t\t\t\t\t<h1>\n\t\t\t\t\t\t\t\t\t<i className=\"fa fa-list-ul\"></i>\n\t\t\t\t\t\t\t\t\t<strong>My Call List</strong>\n\t\t\t\t\t\t\t\t</h1>\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t</li> : null }\n\t\t\t\t\t<li className=\"wow fadeInLeft\" data-wow-delay=\"0.2s\">\n\t\t\t\t\t\t<Link className=\"btn btn-outline-white btn-round-lg btn-lg\" to=\"/sales\">\n\t\t\t\t\t\t\t<h1>\n\t\t\t\t\t\t\t\t<i className=\"fa fa-shopping-cart\"></i>\n\t\t\t\t\t\t\t\t<strong>My Sales</strong>\n\t\t\t\t\t\t\t</h1>\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li className=\"wow fadeInLeft\" data-wow-delay=\"0.2s\">\n\t\t\t\t\t\t<Link className=\"btn btn-outline-white btn-round-lg btn-lg\" to=\"/info\">\n\t\t\t\t\t\t\t<h1>\n\t\t\t\t\t\t\t\t<i className=\"fa fa-info-circle\"></i>\n\t\t\t\t\t\t\t\t<strong>My Information</strong>\n\t\t\t\t\t\t\t</h1>\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t</li>\n\t\t\t\t\t{ config.get(option.UI_BUTTON_LIBRARY) ?\n\t\t\t\t\t\t<li className=\"wow fadeInLeft\" data-wow-delay=\"0.2s\">\n\t\t\t\t\t\t\t<Link className=\"btn btn-outline-white btn-round-lg btn-lg\" to=\"/library\">\n\t\t\t\t\t\t\t\t<h1>\n\t\t\t\t\t\t\t\t\t<i className=\"fa fa-cloud\"></i>\n\t\t\t\t\t\t\t\t\t<strong>Library</strong>\n\t\t\t\t\t\t\t\t</h1>\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t</li> : null }\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default HomePage;","\"use strict\";\n\nimport React from 'react';\nvar util = require('../util.js');\n\nvar NotFoundPage = React.createClass({\n\tcomponentWillMount: function(){\n\t\tutil.setScreenTitle('Not Found');\n\t},\n\t\n\trender: function(){\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h1>Page Not Found</h1>\n\t\t\t\t<p>Please make a selection from the menu above.</p>\n\t\t\t</div>\n\t\t);\n\t}\n});\n\nexport default NotFoundPage;","\"use strict\";\n\nimport React from 'react';\nimport { Link, Redirect } from 'react-router-dom';\nvar UserActions = require('../../actions/userActions');\nvar Status = require('../../constants/actionStatuses');\nvar UserStore = require('../../stores/userStore');\nvar LoginForm = require('./loginForm');\nvar util = require('../../util.js');\nvar toastr = require('toastr');\n\nvar LoginPage = React.createClass({\n\tgetInitialState: function() {\n\t\treturn {\n\t\t\tinfo: {username: '', password: ''}, //login info\n\t\t\tisLoading: false,\n\t\t\tdifferentUserWillBeLoggedIn: false,\n\t\t\t//Marked true on successful login (ready for redirect back to referring page)\n\t\t\t//[In normal circumstances this will be false initially, but we check logged-in status \n\t\t\t//to enable a homepage redirect if we hit this page when already logged in] \n\t\t\tredirectToReferrer: util.isLoggedIn()\n\t\t};\n\t},\n\t\n\t//componentWillMount: function(){\n\t//\tutil.setScreenTitle('Login');\n\t//},\n\t\n\tcomponentDidMount: function(){\n\t\tUserStore.addChangeListener(this._onChange);\n\t},\n\t\n\tcomponentWillUnmount: function(){\n\t\tUserStore.removeChangeListener(this._onChange);\n\t},\n\t\n\t_onChange: function(){\n\t\tvar status = UserStore.getStatus();\n\t\t//User has logged in (user loaded) \n\t\tif(status == Status.OK){\n\t\t\t//this.setState({isLoading: false});\n\t\t\ttoastr.success('Welcome ' + UserStore.getName());\n\t\t\tthis.setState({redirectToReferrer: true});\n\t\t\n\t\t//User is logging in\n\t\t}else if(status == Status.PENDING){\n\t\t\tthis.setState({isLoading: true});\n\t\t\n\t\t//User was not able to be logged in\n\t\t}else if(status == Status.ERROR){\n\t\t\tthis.setState({isLoading: false});\n\t\t\ttoastr.error(UserStore.getLoginError());\n\t\t}\n\t},\n\t\n\tsetLoginInfo: function(event){\n\t\tvar field = event.target.name;\n\t\tvar value = event.target.value;\n\t\tthis.state.info[field] = value;\n\t\treturn this.setState({info: this.state.info});\n\t},\n\t\n\tloginFormIsValid: function(){\n\t\tvar formIsValid = true;\n\t\t\n\t\tif(!this.state.info.username.length || !this.state.info.password.length){\n\t\t\tformIsValid = false;\n\t\t}\n\t\t\n\t\treturn formIsValid;\n\t},\n\t\n\tloginUserHasChanged: function(){\n\t\tvar userHasChanged = false;\n\t\tvar lastUser = UserStore.getLastUser();\n\t\t\n\t\t//[We don't warn or clear user data in the case when there is no recorded last user (first fresh login), only when user has changed] \n\t\tif((lastUser != null) && (lastUser.username != this.state.info.username)){\n\t\t\tuserHasChanged = true;\n\t\t}\n\t\t\n\t\treturn userHasChanged;\n\t},\n\t\n\tlogin: function(event){\n\t\tevent.preventDefault();\n\t\t\n\t\tif(!this.state.isLoading){\n\t\t\t//Validate form\n\t\t\tif(!this.loginFormIsValid()){\n\t\t\t\ttoastr.error('Please complete both fields');\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t//Unless already in the warning state (in which a different user will be logged in), check for different user login and warn/set state if necessary\n\t\t\tif(!this.state.differentUserWillBeLoggedIn && this.loginUserHasChanged()){\n\t\t\t\ttoastr.warning('If you login as a different user, any existing user data will be deleted');\n\t\t\t\tthis.setState({differentUserWillBeLoggedIn: true});\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t//We're good to login (deleting user data if necessary)\n\t\t\tUserActions.login(this.state.info, this.state.differentUserWillBeLoggedIn);\n\t\t}\n\t},\n\t\n\t//Cancel the warning state (in which a different user will be logged in)\n\tcancelDifferentUserLogin: function(){\n\t\tif(!this.state.isLoading){\n\t\t\tthis.setState({differentUserWillBeLoggedIn: false});\n\t\t}\n\t},\n\n\trender: function(){\n\t\tif (this.state.redirectToReferrer) {\n\t\t\t//(if for some reason we weren't provided with a return location object, default to homepage)\n\t\t\tconst fromLocation = ((this.props.location.state && this.props.location.state.from) ? this.props.location.state.from : null) || { pathname: '/' };\n\t\t\treturn (\n\t\t\t\t<Redirect to={fromLocation} />\n\t\t\t);\n\t\t}\n\t\t\n\t\treturn (\n\t\t\t<div className=\"login-wrap\">\n\t\t\t\t<LoginForm info={this.state.info} onChange={this.setLoginInfo} onLogin={this.login} onCancel={this.cancelDifferentUserLogin} isLoading={this.state.isLoading} differentUserWillBeLoggedIn={this.state.differentUserWillBeLoggedIn} />\n\t\t\t</div>\n\t\t);\n\t}\n});\n\nexport default LoginPage;","\"use strict\";\n\nimport React from 'react';\nimport { Link, Redirect } from 'react-router-dom';\nimport Spinner from '../common/spinner';\nvar Actions = require('../../constants/actionTypes');\nvar Status = require('../../constants/actionStatuses');\nvar UserActions = require('../../actions/userActions');\nvar ActionStatusStore = require('../../stores/actionStatusStore');\nvar util = require('../../util.js');\nvar toastr = require('toastr');\n\nclass PasswordResetPage extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\t\n\t\tthis.state = {\n\t\t\temail: '',\t\t\t//email address associated with the user account\n\t\t\tdone: false,\t\t//flag for redirection to login page\n\t\t\tisLoading: false\t\t\n\t\t};\n\t}\n\t\n\t//componentWillMount() {\n\t\t//this.screenTitle = 'Password Reset';\n\t\t//util.setScreenTitle(this.screenTitle);\n\t//}\n\t\n\tcomponentDidMount() {\n\t\tActionStatusStore.addChangeListener(this._onChange);\n\t}\n\t\n\tcomponentWillUnmount() {\n\t\tActionStatusStore.removeChangeListener(this._onChange);\n\t}\n\t\n\t_onChange = () => {\n\t\tvar status = ActionStatusStore.getStatus(Actions.USER_PASSWORD_RESET_REQUEST);\n\t\t\n\t\t//Request has been submitted \n\t\tif(status == Status.OK){\n\t\t\t//this.setState({ done: true });\n\t\t\tthis.setState({ isLoading: false, done: true });\n\t\t\ttoastr.success('Password reset requested');\n\t\t\n\t\t//Request is being submitted\n\t\t}else if(status == Status.PENDING){\n\t\t\tthis.setState({ isLoading: true });\n\t\t\n\t\t//Request was not able to be submitted\n\t\t}else if(status == Status.ERROR){\n\t\t\tthis.setState({ isLoading: false });\n\t\t\ttoastr.error('Unable to request a password reset. Please check that your email is correct or contact your administrator.', null, { timeOut: 5000 });\n\t\t}\n\t}\n\t\n\tsetEmail = (event) => {\n\t\tthis.state.email = event.target.value;\n\t\treturn this.setState({email: this.state.email});\n\t}\n\t\n\tformIsValid = () => {\n\t\treturn (this.state.email.length);\n\t}\n\t\n\trequestPasswordReset = (event) => {\n\t\tevent.preventDefault();\n\t\t\n\t\tif(!this.state.isLoading){\n\t\t\t//Validate form\n\t\t\tif(!this.formIsValid()){\n\t\t\t\ttoastr.error('Please provide your email address');\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tUserActions.requestPasswordReset(this.state.email);\n\t\t}\n\t}\n\t\n\trender() {\n\t\tif (this.state.done) {\n\t\t\t//Transition back to the login screen\n\t\t\treturn (\n\t\t\t\t<Redirect push to=\"/login\" />\n\t\t\t);\n\t\t}\n\t\t\n\t\treturn (\n\t\t\t<div className=\"login-wrap\">\n\t\t\t\t<form className=\"login-form\">\n\t\t\t\t\t<div className=\"user-login-info\">\n\t\t\t\t\t\t<img className=\"login-img\" src={util.assetsUrl + \"img/morpheus-m.png\"} />\n\t\t\t\t\t\t<div className=\"login-instructions\">\n\t\t\t\t\t\t\tProvide your email to request a password reset\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"login-input\">\n\t\t\t\t\t\t\t<input type=\"email\" className=\"form-control\" name=\"username\" placeholder=\"Email\" value={this.state.email} onChange={this.setEmail} autoFocus={true} autoComplete=\"off\" disabled={this.state.isLoading} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"login-footer\">\n\t\t\t\t\t\t\t<div className=\"btn-group\" role=\"group\">\n\t\t\t\t\t\t\t\t<Link className=\"btn btn-default\" role=\"button\" to=\"/login\">Cancel</Link>\n\t\t\t\t\t\t\t\t<button type=\"submit\" className=\"btn btn-primary\" onClick={this.requestPasswordReset} disabled={this.state.isLoading}>Request Password Reset</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<Spinner isVisible={this.state.isLoading} />\n\t\t\t\t\t</div>\n\t\t\t\t\t<img className=\"login-img-footer\" src={util.assetsUrl + \"img/morpheus-brand-pb.png\"} />\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default PasswordResetPage;","\"use strict\";\n\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nvar util = require('../../util.js');\nvar CallStore = require('../../stores/callStore');\nvar ActionStatusStore = require('../../stores/actionStatusStore');\nvar AuditAnswerStore = require('../../stores/auditAnswerStore');\nvar CustomerStore = require('../../stores/customerStore');\nvar ProductStore = require('../../stores/productStore');\nvar OrderStore = require('../../stores/orderStore');\nvar CallActions = require('../../actions/callActions');\nvar CommonActions = require('../../actions/commonActions');\nvar SalesEntities = require('../../constants/salesEntities');\nvar Actions = require('../../constants/actionTypes');\nvar Status = require('../../constants/actionStatuses');\nvar AuditTypes = require('../../constants/auditTypes');\nvar SearchTypes = require('../../constants/searchTypes');\nvar CallList = require('./callList');\nvar CustomerRequestList = require('./customerRequestList');\nvar ProgressModal = require('../common/progressModal');\nvar option = require('../../constants/configOptions.js');\nvar config = require('../../config.js');\nvar toastr = require('toastr');\nvar _ = require('lodash');\n\nvar CallsPage = React.createClass({\n\tgetInitialState: function(){\n\t\treturn {\n\t\t\t//calls: [],\n\t\t\tcalls: CallStore.getAllCalls(),\n\t\t\tisLoading: false,\n\t\t\t//isLoadingToo: false, //Additional loading flag to prevent race condition\n\t\t\tisRefreshProgressVisible: false, //Keep separate to loading flag (to allow for refresh progress window to remain open afterwards)\n\t\t\trefreshProgressPercentage: 0,\n\t\t\trefreshProgressDescription: '',\n\t\t\tcustomerSearchTerm: '',\n\t\t\tcustomerSearchPage: 1,\n\t\t\tcustomerSearchPageSize: null,\n\t\t\tcustomerSearchTotal: null,\n\t\t\tcustomerSearchTotalPages: null,\n\t\t\tcustomerSearchResults: [],\n\t\t\tisCustomerSearchLoading: false,\n\t\t\tisCustomerRequestLoading: false,\n\t\t\tisCustomerRequestVisible: false,\n\t\t\tcustomerWasRequested: false,\n\t\t\tauditsToSubmit: false //whether or not we have any submissions ready to send back to server\n\t\t};\n\t},\n\tcomponentWillMount: function(){\n\t\t//Flag for last action (indeterminate length)\n\t\t//NB: This can't be a state property, because occasionally it's not set before the first store changes come through, resulting in display issues\n\t\t//(This could be resolved by using the function version of setState() to only fire the refresh operation once lastPendingAction is properly set, \n\t\t//but then we're delaying the operation slightly, and there's no real need for lastPendingAction to be a state property.) \n\t\tthis.lastPendingAction = null;\n\t\t\n\t\tthis.progressDescriptions = {};\n\t\tthis.progressDescriptions['default'] \t\t\t\t\t= \"Refreshing\";\n\t\tthis.progressDescriptions[SalesEntities.PAYMENT_TERM] \t= \"Refreshing payment terms\";\n\t\tthis.progressDescriptions[SalesEntities.TAX_CLASS] \t\t= \"Refreshing tax classes\";\n\t\tthis.progressDescriptions[SalesEntities.CARRIER] \t\t= \"Refreshing carriers\";\n\t\tthis.progressDescriptions[SalesEntities.CURRENCY] \t\t= \"Refreshing currencies\";\n\t\tthis.progressDescriptions[SalesEntities.PRODUCT] \t\t= \"Refreshing products\";\n\t\tthis.progressDescriptions[SalesEntities.CATEGORY] \t\t= \"Refreshing categories\";\n\t\tthis.progressDescriptions[SalesEntities.ORDER] \t\t\t= \"Refreshing orders\";\n\t\tthis.progressDescriptions[SalesEntities.CUSTOMER] \t\t= \"Refreshing customers\";\n\t\tthis.progressDescriptions[SalesEntities.PRICE_LIST] \t= \"Refreshing price lists\";\n\t\tthis.progressDescriptions[SalesEntities.PRODUCT_RULE] \t= \"Refreshing product rules\";\n\t\t\n\t\tthis.completionMessages = {};\n\t\t\n\t\tthis.completionMessages[Actions.CALLS_RELATED_REFRESH] = {};\n\t\tthis.completionMessages[Actions.CALLS_RELATED_REFRESH][Status.OK] = \"Call list and related data refreshed\";\n\t\tthis.completionMessages[Actions.CALLS_RELATED_REFRESH][Status.ERROR] = \"Unable to refresh call list and related data\";\n\t\tthis.completionMessages[Actions.CALLS_RELATED_REFRESH][Status.PARTIAL] = \"Unable to refresh all call list related data\";\n\t\t\n\t\tthis.completionMessages[Actions.ALL_REFRESH] = {};\n\t\tthis.completionMessages[Actions.ALL_REFRESH][Status.OK] = \"Sales and calls data refreshed\";\n\t\tthis.completionMessages[Actions.ALL_REFRESH][Status.ERROR] = \"Unable to refresh sales and calls data\";\n\t\tthis.completionMessages[Actions.ALL_REFRESH][Status.PARTIAL] = \"Unable to refresh all sales and calls data\";\n\t\t\n\t\tthis.screenTitle = 'My Call List';\n\t\tutil.setScreenTitle(this.screenTitle);\n\t\tutil.refreshGeolocation();\n\t},\n\tcomponentDidMount: function(){\n\t\tCallStore.addChangeListener(this._onChange);\n\t\tActionStatusStore.addChangeListener(this._onRefreshChange);\n\t\tAuditAnswerStore.addChangeListener(this._onAuditSubmitChange);\n\t\tCustomerStore.addChangeListener(this._onCustomerSearchChange);\n\t\t\n\t\t//Refresh the submissions indicator\n\t\tthis.refreshAuditSubmissionStatusIndicator();\n\t\t\n\t\t//Refresh the call list if it hasn't been refreshed yet today (or ever)\n\t\tif(util.isBeforeToday(CallStore.getLastRefresh())){\n\t\t\tthis.lastPendingAction = Actions.CALLS_RELATED_REFRESH;\n\t\t\t//Access check is now built in by default\n\t\t\t//CallActions.doAfterAccessCheck('refreshCallsAndRelatedData');\n\t\t\tCallActions.refreshCallsAndRelatedData();\n\t\t}\n\t},\n\t\n\tcomponentWillUnmount: function(){\n\t\tCallStore.removeChangeListener(this._onChange);\n\t\tActionStatusStore.removeChangeListener(this._onRefreshChange);\n\t\tAuditAnswerStore.removeChangeListener(this._onAuditSubmitChange);\n\t\tCustomerStore.removeChangeListener(this._onCustomerSearchChange);\n\t},\n\t\n\t_onChange: function(){\n\t\tlet status = CallStore.getStatus();\n\t\t/*\n\t\t//Call data has been refreshed, or audits have been submitted \n\t\tif(status == Status.OK){\n\t\t\tthis.setState({isLoading: false, calls: CallStore.getAllCalls()});\n\t\t\t//toastr.success(this.lastPendingAction == Actions.AUDITS_SUBMIT ? 'Audits submitted' : 'Call list refreshed');\n\t\t\tif(this.lastPendingAction == Actions.CALLS_RELATED_REFRESH){\n\t\t\t\ttoastr.success('Call list refreshed');\n\t\t\t}\n\t\t\n\t\t//Call data is being refreshed, or audits being submitted\n\t\t}else if(status == Status.PENDING){\n\t\t\tthis.setState({isLoading: true});\n\t\t\n\t\t//Call data was not able to be refreshed, or audits not able to be submitted\n\t\t}else if(status == Status.ERROR){\n\t\t\tthis.setState({isLoading: false});\n\t\t\t//toastr.error(this.lastPendingAction == Actions.AUDITS_SUBMIT ? 'Unable to submit audits' : 'Unable to refresh call list');\n\t\t\tif(this.lastPendingAction == Actions.CALLS_RELATED_REFRESH){\n\t\t\t\ttoastr.error('Unable to refresh call list');\n\t\t\t}\n\t\t\n\t\t//Audits partially submitted\n\t\t}else if(status == Status.PARTIAL){\n\t\t\tthis.setState({isLoading: false, calls: CallStore.getAllCalls()});\n\t\t\t//toastr.warning('Unable to submit all audits');\n\t\t}\n\t\t*/\n\t\t\n\t\t//Call data has been refreshed, or audits have been submitted (partially or fully)\n\t\tif(status == Status.OK || status == Status.PARTIAL){\n\t\t\tthis.setState({calls: CallStore.getAllCalls()});\n\t\t//Call data is being refreshed, or audits being submitted\n\t\t}else if(status == Status.PENDING){\n\t\t//Call data was not able to be refreshed, or audits not able to be submitted\n\t\t}else if(status == Status.ERROR){\n\t\t}\n\t},\n\t\n\t//Used for visual indication of the calls and other data refreshes\n\t_onRefreshChange: function(){\n\t\t//Obtain refresh info (main status for the entire refresh operation)\n\t\tlet refreshStatus = ActionStatusStore.getStatus(this.lastPendingAction);\n\t\tlet refreshEntityStatuses = ActionStatusStore.getEntityStatuses(this.lastPendingAction);\n\t\tlet refreshProgressPercentage = ActionStatusStore.getPercentageComplete(this.lastPendingAction);\n\t\t\n\t\t//A refresh is in progress\n\t\tif(refreshStatus == Status.PENDING){\n\t\t\tlet currentRefreshEntity = 'default';\n\t\t\tif(refreshEntityStatuses != null){\n\t\t\t\tfor(var entity in refreshEntityStatuses){\n\t\t\t\t\tif(refreshEntityStatuses[entity] == Status.PENDING){\n\t\t\t\t\t\tcurrentRefreshEntity = entity;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.setState({\n\t\t\t\tisLoading: true,\n\t\t\t\tisRefreshProgressVisible: true,\n\t\t\t\trefreshProgressPercentage: refreshProgressPercentage,\n\t\t\t\trefreshProgressDescription: this.progressDescriptions[currentRefreshEntity] + \" (\" + Math.round(refreshProgressPercentage) + \"%)\"\n\t\t\t});\n\t\t\t\n\t\t//A refresh has completed\t\n\t\t}else{\n\t\t\tthis.setState({\n\t\t\t\tisLoading: false,\n\t\t\t\tisRefreshProgressVisible: true,\n\t\t\t\trefreshProgressPercentage: refreshProgressPercentage,\n\t\t\t\trefreshProgressDescription: \"Complete (\" + Math.round(refreshProgressPercentage) + \"%)\"\n\t\t\t});\n\t\t\t\n\t\t\t//Keep the window open long enough to see completion message\n\t\t\tsetTimeout(this.closeRefreshProgressModal, 1000);\n\t\t\t\n\t\t\tif(this.lastPendingAction != null && this.completionMessages[this.lastPendingAction] != null){\n\t\t\t\tif(refreshStatus == Status.OK){\n\t\t\t\t\ttoastr.success(this.completionMessages[this.lastPendingAction][Status.OK]);\n\t\t\t\t}else if(refreshStatus == Status.ERROR){\n\t\t\t\t\ttoastr.error(this.completionMessages[this.lastPendingAction][Status.ERROR]);\n\t\t\t\t}else if(refreshStatus == Status.PARTIAL){\n\t\t\t\t\ttoastr.warning(this.completionMessages[this.lastPendingAction][Status.PARTIAL]);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t//OLD: NO LONGER APPLIES - main status is reflective of component statuses\n\t\t\t//Sales refresh operation completed entirely\n\t\t\t/*if(refreshStatus == Status.OK){\n\t\t\t\t//Within entityStatuses, customer refresh and price lists / product rules are all we're interested in\n\t\t\t\tlet entityStatuses = ActionStatusStore.getEntityStatuses(Actions.SALES_REFRESH);\n\t\t\t\tlet customersRefreshStatus = entityStatuses[SalesEntities.CUSTOMER];\n\t\t\t\tlet customersRefreshStatus2 = entityStatuses[SalesEntities.PRICE_LIST];\n\t\t\t\tlet customersRefreshStatus3 = entityStatuses[SalesEntities.PRODUCT_RULE];\n\t\t\t\t\n\t\t\t\tif(\tcustomersRefreshStatus == Status.OK &&\n\t\t\t\t\tcustomersRefreshStatus2 == Status.OK &&\n\t\t\t\t\tcustomersRefreshStatus3 == Status.OK){\n\t\t\t\t\ttoastr.success('Customer sales data refreshed');\n\t\t\t\t//(The additional sales data is only refreshed if the customers refresh succeeded in some way)\t\n\t\t\t\t}else if(customersRefreshStatus == Status.ERROR){\n\t\t\t\t\ttoastr.error('Unable to refresh customer sales data');\n\t\t\t\t}else{\n\t\t\t\t\ttoastr.warning('Unable to refresh all customer sales data');\n\t\t\t\t}\n\t\t\t}*/\n\t\t}\n\t},\n\t\n\t_onAuditSubmitChange: function(){\n\t\tlet status = AuditAnswerStore.getStatus();\n\t\tlet auditType = AuditAnswerStore.getStatusAuditType();\n\t\t//Audits have been submitted \n\t\tif(status == Status.OK){\n\t\t\ttoastr.success((auditType == AuditTypes.ADMIN ? 'Admin audits' : 'Audits') + ' submitted');\n\t\t\tthis.setState({isLoading: false});\n\t\t\t//Refresh the submissions indicator\n\t\t\tthis.refreshAuditSubmissionStatusIndicator();\n\t\t\n\t\t//Audits are being submitted\n\t\t}else if(status == Status.PENDING){\n\t\t\tthis.setState({isLoading: true});\n\t\t\n\t\t//Audits were not able to be submitted\n\t\t}else if(status == Status.ERROR){\n\t\t\ttoastr.error('Unable to submit ' + (auditType == AuditTypes.ADMIN ? 'admin audits' : 'audits'));\n\t\t\tthis.setState({isLoading: false});\n\t\t\n\t\t//Audits were partially submitted\n\t\t}else if(status == Status.PARTIAL){\n\t\t\ttoastr.warning('Unable to submit all ' + (auditType == AuditTypes.ADMIN ? 'admin audits' : 'audits'));\n\t\t\tthis.setState({isLoading: false});\n\t\t\t//Refresh the submissions indicator\n\t\t\tthis.refreshAuditSubmissionStatusIndicator();\n\t\t}\n\t},\n\t\n\t_onCustomerSearchChange: function(){\n\t\tvar status = CustomerStore.getStatus(Actions.CUSTOMERS_SEARCH_SERVER);\n\t\t//Also set state for any potential customer request underway\n\t\tvar blnCustomerRequestLoading = (CustomerStore.getStatus(Actions.CUSTOMER_REQUEST) == Status.PENDING);\n\t\t//Also set state when at least 1 sucessful customer request completed (flag for calls refresh)\n\t\tvar blnCustomerWasRequested = CustomerStore.wasRequestSuccessful();\n\t\t\n\t\t//Customer search data has been refreshed\n\t\tif(status == Status.OK){\n\t\t\tthis.setState({\n\t\t\t\tisCustomerRequestLoading: blnCustomerRequestLoading, \n\t\t\t\tcustomerWasRequested: blnCustomerWasRequested, \n\t\t\t\tisCustomerSearchLoading: false, \n\t\t\t\tcustomerSearchTerm: CustomerStore.getSearchTerm(SearchTypes.SERVER),\n\t\t\t\tcustomerSearchPage: CustomerStore.getSearchPage(SearchTypes.SERVER),\n\t\t\t\tcustomerSearchPageSize: CustomerStore.getSearchPageSize(SearchTypes.SERVER),\n\t\t\t\tcustomerSearchTotal: CustomerStore.getSearchTotal(SearchTypes.SERVER),\n\t\t\t\tcustomerSearchTotalPages: CustomerStore.getSearchTotalPages(SearchTypes.SERVER), \n\t\t\t\tcustomerSearchResults: CustomerStore.getSearchResults(SearchTypes.SERVER)\n\t\t\t});\n\t\t\t//toastr.success('Customer search results refreshed');\n\t\t\n\t\t//Customer search data is being refreshed\n\t\t}else if(status == Status.PENDING){\n\t\t\tthis.setState({\n\t\t\t\tisCustomerRequestLoading: blnCustomerRequestLoading, \n\t\t\t\tcustomerWasRequested: blnCustomerWasRequested, \n\t\t\t\tisCustomerSearchLoading: true, \n\t\t\t\tcustomerSearchTerm: CustomerStore.getSearchTerm(SearchTypes.SERVER),\n\t\t\t\tcustomerSearchPage: CustomerStore.getSearchPage(SearchTypes.SERVER)\n\t\t\t});\n\t\t\n\t\t//Customer search data was not able to be refreshed\n\t\t}else if(status == Status.ERROR){\n\t\t\tthis.setState({\n\t\t\t\tisCustomerRequestLoading: blnCustomerRequestLoading, \n\t\t\t\tcustomerWasRequested: blnCustomerWasRequested, \n\t\t\t\tisCustomerSearchLoading: false, \n\t\t\t\tcustomerSearchTerm: CustomerStore.getSearchTerm(SearchTypes.SERVER),\n\t\t\t\tcustomerSearchPage: CustomerStore.getSearchPage(SearchTypes.SERVER)\n\t\t\t});\n\t\t\t//toastr.error('Unable to refresh customer search results');\n\t\t}\n\t},\n\t\n\t/*componentDidMount: function(){\n\t\t//if(this.isMounted()) {\n\t\t\tthis.setState({isLoading: true});\n\t\t\t//AJAX\n\t\t\t//this.setState({isLoading: false, calls: [{id: 1, storeName: \"Healthy Bite Take Away\"}, {id: 2, storeName: \"Another Healthy Store\"}, {id: 3, storeName: \"Awesome Store\"}]});\n\t\t\t//this.setState({isLoading: false, calls: data.results.stores});\n\t\t\t\n\t\t//}\n\t},*/\n\t\n\trefreshCalls: function(event){\n\t\tif(event != null){ //triggered by a link click\n\t\t\tevent.preventDefault();\n\t\t}\n\t\t\n\t\tif(!this.state.isLoading){ //&& !this.state.isLoadingToo){\n\t\t\tthis.lastPendingAction = Actions.CALLS_RELATED_REFRESH;\n\t\t\t//Access check is now built in by default\n\t\t\t//CallActions.doAfterAccessCheck('refreshCallsAndRelatedData');\n\t\t\tCallActions.refreshCallsAndRelatedData();\n\t\t}\n\t},\n\trefreshAll: function(event){\n\t\tif(event != null){ //triggered by a link click\n\t\t\tevent.preventDefault();\n\t\t}\n\t\t\n\t\tif(!this.state.isLoading){ //&& !this.state.isLoadingToo){\n\t\t\tthis.lastPendingAction = Actions.ALL_REFRESH;\n\t\t\t//Obtain the full list of customers we need to have in our list \n\t\t\t//(call customers plus any associated with current orders)\n\t\t\t//[Note we now also include any missing customers residing in just the customer store (requested via sales)]\n\t\t\tlet arrCustomerIDs = _.union(CustomerStore.getCustomerIDs(), CallStore.getCallCustomerIDs(), OrderStore.getOrderCustomerIDs()); \n\t\t\t\n\t\t\t//Access check is built in by default\n\t\t\t//CommonActions.doAfterAccessCheck('refreshAll', [ProductStore.getLastRefresh(), ProductStore.getRefreshRetryIDs(), OrderStore.getPastOrdersLastRefresh(), OrderStore.getPastOrdersRefreshRetryIDs(), arrCustomerIDs]);\n\t\t\tCommonActions.refreshAll(ProductStore.getLastRefresh(), ProductStore.getRefreshRetryIDs(), OrderStore.getPastOrdersLastRefresh(), OrderStore.getPastOrdersRefreshRetryIDs(), arrCustomerIDs);\n\t\t}\n\t},\n\tshowCustomerRequestList: function(){\n\t\tif(!this.state.isLoading){ //&& !this.state.isLoadingToo){\n\t\t\t//Do an initial search without filters [Update: this is kicked off within the list component (after mounting)]\n\t\t\t//this.searchCustomers();\n\t\t\t//Display search popup (with cleared results) \n\t\t\tthis.setState({\n\t\t\t\tisCustomerRequestVisible: true, \n\t\t\t\tcustomerSearchTerm: '',\n\t\t\t\tcustomerSearchPage: 1, \n\t\t\t\tcustomerSearchTotalPages: null, \n\t\t\t\tcustomerSearchResults: []\n\t\t\t});\n\t\t}\n\t},\n\thideCustomerRequestList: function(){\n\t\tif(!this.state.isLoading){ //&& !this.state.isLoadingToo){\n\t\t\tif(this.state.customerWasRequested){ //call list needs refreshing on close\n\t\t\t\tthis.refreshCalls();\n\t\t\t}\n\t\t\tthis.setState({isCustomerRequestVisible: false, customerWasRequested: false});\n\t\t\tCustomerStore.resetRequestSuccessful();\n\t\t}\n\t},\n\tsearchCustomers: function(searchTerm, searchPage){\n\t\t//if(!this.state.isCustomerSearchLoading){\n\t\t\tthis.lastPendingAction = Actions.CUSTOMERS_SEARCH_SERVER;\n\t\t\tCallActions.searchCustomersOnServer(searchTerm, searchPage);\n\t\t//}\n\t},\n\trequestCustomer: function(customer){ //customerID\n\t\tif(!this.state.isCustomerSearchLoading){\n\t\t\tthis.lastPendingAction = Actions.CUSTOMER_REQUEST;\n\t\t\tCallActions.requestCustomer(customer);\n\t\t}\n\t},\n\tsubmitAudits: function(){\n\t\tif(!this.state.isLoading){ //&& !this.state.isLoadingToo){\n\t\t\tvar arrAuditSubmissions = AuditAnswerStore.getAuditSubmissions();\n\t\t\tvar arrAdminAuditSubmissions = AuditAnswerStore.getAuditSubmissions(true);\n\t\t\t\n\t\t\tif(!arrAuditSubmissions.length && !arrAdminAuditSubmissions.length){\n\t\t\t\t//toastr.warning('No audits to submit');\n\t\t\t\ttoastr.success('No audits to submit');\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.lastPendingAction = Actions.AUDITS_SUBMIT;\n\t\t\tCallActions.submitAuditsAndRelatedData(arrAuditSubmissions, arrAdminAuditSubmissions, CustomerStore.getValidCustomerVisits());\n\t\t\t//CallActions.submitAudits(arrAuditSubmissions, arrAdminAuditSubmissions);\n\t\t}\n\t},\n\trefreshAuditSubmissionStatusIndicator: function(){\n\t\tvar arrAuditSubmissions = AuditAnswerStore.getAuditSubmissions();\n\t\tvar arrAdminAuditSubmissions = AuditAnswerStore.getAuditSubmissions(true);\n\t\t\n\t\tthis.setState({\n\t\t\tauditsToSubmit: (arrAuditSubmissions.length > 0 || arrAdminAuditSubmissions.length > 0)\n\t\t});\n\t},\n\t\n\tcloseRefreshProgressModal: function(){\n\t\tthis.setState({isRefreshProgressVisible: false});\n\t},\n\t\n\trender: function(){\n\t//<h1>My Call List</h1>\n\t\tconst refreshLocation = { \n\t\t\tpathname: '/refresh', \n\t\t\tstate: { \n\t\t\t\tfrom: this.props.location,\n\t\t\t\tfromTitle: this.screenTitle \n\t\t\t} \n\t\t};\n\t\t\n\t\t\t\t/*<button className=\"btn btn-header-refresh\" onClick={this.refreshCalls} disabled={this.state.isLoading || this.state.isLoadingToo}>\n\t\t\t\t\t<i className={\"fa fa-refresh fa-2x\" + (this.state.isLoading || this.state.isLoadingToo ? \" fa-spin\" : \"\")}></i>\n\t\t\t\t</button>*/\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t{ config.get(option.FUNC_ONLINE_CUSTOMERS) ?\n\t\t\t\t\t<button className=\"btn btn-header-refresh\" onClick={this.refreshCalls} disabled={this.state.isLoading}>\n\t\t\t\t\t\t<i className={\"fa fa-refresh fa-2x\" + (this.state.isLoading ? \" fa-spin\" : \"\")}></i>\n\t\t\t\t\t</button> \n\t\t\t\t\t:\n\t\t\t\t\t<div className=\"btn-group btn-group-header-refresh\">\n\t\t\t\t\t\t<button className=\"btn btn-header-refresh dropdown-toggle\" disabled={this.state.isLoading} data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n\t\t\t\t\t\t\t<i className={\"fa fa-refresh fa-2x\" + (this.state.isLoading ? \" fa-spin\" : \"\")}></i>\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<ul className=\"dropdown-menu\">\n\t\t\t\t\t\t\t<li><a href=\"#\" onClick={this.refreshCalls} className={(this.state.isLoading ? \" disabled\" : \"\")}>Refresh Calls</a></li>\n\t\t\t\t\t\t\t<li><a href=\"#\" onClick={this.refreshAll} className={(this.state.isLoading ? \" disabled\" : \"\")}>Refresh All</a></li>\n\t\t\t\t\t\t\t<li><Link to={refreshLocation} className={(this.state.isLoading ? \" disabled\" : \"\")}>More Options</Link></li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</div> \n\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t<button className=\"btn btn-header-submit\" onClick={this.submitAudits} disabled={this.state.isLoading}>\n\t\t\t\t\t<i className=\"fa fa-upload fa-2x\"></i>{this.state.auditsToSubmit ? <i className=\"fa fa-circle icon-badge\"></i> : null}\n\t\t\t\t</button>\n\n\t\t\t\t<div className=\"btn-bar\" role=\"group\">\n\t\t\t\t\t<button className=\"btn btn-primary col-xs-12\" onClick={this.showCustomerRequestList} disabled={this.state.isLoading}><i className=\"fa fa-user-plus\"></i> Request Customer</button>\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t{ this.state.isRefreshProgressVisible ? \n\t\t\t\t\t<ProgressModal \n\t\t\t\t\t\tpercentage={this.state.refreshProgressPercentage}\n\t\t\t\t\t\tdescription={this.state.refreshProgressDescription}\n\t\t\t\t\t\ttitle=\"Refresh Progress\"\n\t\t\t\t\t\tisLoading={this.state.isLoading} \n\t\t\t\t\t/> : null }\n\t\t\t\t\n\t\t\t\t{ this.state.isCustomerRequestVisible ? \n\t\t\t\t\t<CustomerRequestList \n\t\t\t\t\t\tsearchTerm={this.state.customerSearchTerm}\n\t\t\t\t\t\tsearchPage={this.state.customerSearchPage}\n\t\t\t\t\t\tsearchPageSize={this.state.customerSearchPageSize}\n\t\t\t\t\t\tsearchTotal={this.state.customerSearchTotal}  \n\t\t\t\t\t\tsearchTotalPages={this.state.customerSearchTotalPages} \n\t\t\t\t\t\tsearchResults={this.state.customerSearchResults} \n\t\t\t\t\t\tonSearch={this.searchCustomers} \n\t\t\t\t\t\tonRequest={this.requestCustomer} \n\t\t\t\t\t\tonFinish={this.hideCustomerRequestList} \n\t\t\t\t\t\tisLoading={(this.state.isCustomerSearchLoading || this.state.isCustomerRequestLoading)} \n\t\t\t\t\t/> : null }\n\t\t\t\t\n\t\t\t\t<CallList calls={this.state.calls} isLoading={this.state.isLoading} />\n\t\t\t</div>\n\t\t);\n\t}\n});\n\nexport default CallsPage;","\"use strict\";\n\nimport React from 'react';\nimport { Link, Redirect } from 'react-router-dom';\nimport Spinner from '../common/spinner';\nvar CallStore = require('../../stores/callStore');\nvar CustomerStore = require('../../stores/customerStore');\nvar OrderStore = require('../../stores/orderStore');\nvar Actions = require('../../constants/actionTypes');\nvar Status = require('../../constants/actionStatuses');\nvar CallActions = require('../../actions/callActions');\nvar SalesActions = require('../../actions/salesActions');\n//var ActionStatusStore = require('../../stores/actionStatusStore');\n//var SalesEntities = require('../../constants/salesEntities');\nvar option = require('../../constants/configOptions.js');\nvar config = require('../../config.js');\nvar util = require('../../util.js');\nvar toastr = require('toastr');\n\nclass CustomerPage extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\t\n\t\tthis.state = {\n\t\t\t//customer: { 'name': ''},\n\t\t\tisCustomerVisited: false,\t\t\t//whether or not the customer has been visited/entered today (a visit log exists for today)\n\t\t\tisCallCustomer: false,\t\t\t\t//whether the customer has a call\n\t\t\torder: OrderStore.getOrder(),\t\t//fresh order object\n\t\t\torderWithCustomerCreated: false, \t//specific separate flag for when we're sure the order is ready to be transferred to\n\t\t\tcustomerCreationRedirection: false,\t//flag for our convenience URL redirection (new customer creation)\n\t\t\tcustomerExited: false,\t\t\t\t//flag for redirection to listing after customer is explicitly 'exited' via button\n\t\t\tisCustomerRefreshLoading: false\t\t//used when FUNC_ONLINE_CUSTOMERS config setting is on (which requires a customer refresh)\n\t\t};\n\t}\n\t\n\tcomponentWillMount() {\n\t\tthis.screenTitle = 'Customer';\n\t\t\n\t\t//Use WILL (rather than DID) mount, because then calling setState won't cause a re-render\n\t\t//(it's before rendering occurs)\n\t\tvar custID = this.props.match.params.id;  //from path 'calls/:id' or 'sales/customers/:id'\n\t\tif(custID){\n\t\t\t//Special case: convenient new customer creation redirection\n\t\t\tif(custID == 'new' && this.props.match.params.area == 'sales/customers'){\n\t\t\t\tthis.setState({customerCreationRedirection: true});\n\t\t\t\n\t\t\t//Regular operation\n\t\t\t}else{\n\t\t\t\tlet call = CallStore.getCallById(custID);\n\t\t\t\t\n\t\t\t\t//This customer has a call\n\t\t\t\tif(call != null){\n\t\t\t\t\tthis.setState({isCallCustomer: true});\n\t\t\t\t\t\n\t\t\t\t\tthis.screenTitle = call.store_name;\n\t\t\t\t\t\n\t\t\t\t}else{\n\t\t\t\t\tthis.setState({isCallCustomer: false});\n\t\t\t\t\t\n\t\t\t\t\tlet cust = CustomerStore.getCustomer(custID);\n\t\t\t\t\tif(cust != null){\n\t\t\t\t\t\tthis.screenTitle = cust.name;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.setState({isCustomerVisited: CustomerStore.isCustomerVisited(custID)});\n\t\t\t}\n\t\t}\n\t\tutil.setScreenTitle(this.screenTitle);\n\t}\n\t\n\tcomponentDidMount() {\n\t\tOrderStore.addChangeListener(this._onOrderChange);\n\t\tCustomerStore.addChangeListener(this._onCustomerRefreshChange);\n\t\t//ActionStatusStore.addChangeListener(this._onCustomerRefreshChange);\n\n\t\tvar custID = this.props.match.params.id;\n\t\t//In the 'online' case we refresh the customer data when we visit this page (if it doesn't exist yet or is old)\n\t\tif(custID != 'new' && config.get(option.FUNC_ONLINE_CUSTOMERS) && util.isBeforeToday(CustomerStore.getLastRefreshForCustomer(custID))){\n\t\t\t//Note that we don't need to use SalesActions.refreshCustomersAndSalesData([custID]), as the extra price list and product rule data is\n\t\t\t//only used in a LOCAL (offline) product search. In the 'online' case this is handled by the server during product searching.\n\t\t\tCallActions.doAfterAccessCheck('refreshCustomer', [custID]);\n\t\t\t//CallActions.refreshCustomer(custID);\n\t\t}\n\t}\n\t\n\tcomponentWillUnmount() {\n\t\tOrderStore.removeChangeListener(this._onOrderChange);\n\t\tCustomerStore.removeChangeListener(this._onCustomerRefreshChange);\n\t\t//ActionStatusStore.removeChangeListener(this._onCustomerRefreshChange);\n\t}\n\t\n\t_onOrderChange = () => {\n\t\tlet savedOrder = OrderStore.getOrder(this.state.order.id);\n\t\tif(savedOrder != null){\n\t\t\tthis.setState({\n\t\t\t\torder: savedOrder,\n\t\t\t\torderWithCustomerCreated: (savedOrder.customer_id != null && savedOrder.customer_id > 0) \n\t\t\t});\n\t\t}\n\t}\n\t\n\t//Only needed when FUNC_ONLINE_CUSTOMERS config setting is on\n\t_onCustomerRefreshChange = () => {\n\t\tlet refreshStatus = CustomerStore.getStatus(Actions.CUSTOMER_REFRESH);\n\t\t\n\t\t//Customer detail data has been refreshed (completely or partially)\n\t\t//[Currently, partial scenario can only happen when the fields data wasn't able to be refreshed]\n\t\tif(refreshStatus == Status.OK || refreshStatus == Status.PARTIAL){\n\t\t\ttoastr.success(refreshStatus == Status.OK ? 'Customer information refreshed' : 'Unable to refresh all customer information');\n\t\t\t\n\t\t\t//Update the screen info accordingly\n\t\t\tlet cust = CustomerStore.getCustomer(this.props.match.params.id);\n\t\t\tif(cust != null){\n\t\t\t\tthis.screenTitle = cust.name;\n\t\t\t\tutil.setScreenTitle(this.screenTitle);\n\t\t\t}\n\t\t\n\t\t//Customer detail data was not able to be refreshed\n\t\t}else if(refreshStatus == Status.ERROR){\n\t\t\ttoastr.error('Unable to refresh customer information');\n\t\t}\n\t\t\n\t\t/*\n\t\t//Note that we don't need to use SalesActions.refreshCustomersAndSalesData([custID]), as the extra price list and product rule data is\n\t\t//only used in a LOCAL (offline) product search. In the 'online' case this is handled by the server during product searching.\n\t\t\n\t\t//Main status for the entire refresh operation\n\t\tlet refreshStatus = ActionStatusStore.getStatus(Actions.CUSTOMERS_SALES_REFRESH);\n\t\t\n\t\t//Within entityStatuses, customer refresh and price lists / product rules are all we're interested in\n\t\tlet entityStatuses = ActionStatusStore.getEntityStatuses(Actions.SALES_REFRESH);\n\t\tlet customerRefreshStatus = entityStatuses != null ? entityStatuses[SalesEntities.CUSTOMER] : null;\n\n\t\t//Operation completed entirely\n\t\tif(refreshStatus != Status.PENDING){\n\t\t\t//The additional sales data is only refreshed if the customer refresh succeeded in some way\n\t\t\tif(customerRefreshStatus == Status.OK || customerRefreshStatus == Status.PARTIAL){\n\t\t\t\tlet customerRefreshStatus2 = entityStatuses[SalesEntities.PRICE_LIST];\n\t\t\t\tlet customerRefreshStatus3 = entityStatuses[SalesEntities.PRODUCT_RULE];\n\t\t\t\t\n\t\t\t\tif(customerRefreshStatus == Status.OK && customerRefreshStatus2 == Status.OK && customerRefreshStatus3 == Status.OK){\n\t\t\t\t\ttoastr.success('Customer and sales data refreshed');\n\t\t\t\t}else{\n\t\t\t\t\ttoastr.warning('Customer and sales data partially refreshed');\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//Update the screen info accordingly\n\t\t\t\tlet cust = CustomerStore.getCustomer(this.props.match.params.id);\n\t\t\t\tif(cust != null){\n\t\t\t\t\tthis.screenTitle = cust.name;\n\t\t\t\t\tutil.setScreenTitle(this.screenTitle);\n\t\t\t\t}\n\t\t\t}else if(customerRefreshStatus == Status.ERROR){\n\t\t\t\ttoastr.error('Customer could not be refreshed');\n\t\t\t}\n\t\t}\n\t\t*/\n\t\t\n\t\tthis.setState((prevState) => ({\n\t\t\t//Is a customer refresh underway? \n\t\t\tisCustomerRefreshLoading: (refreshStatus == Status.PENDING)\n\t\t}));\n\t}\n\t\n\tenterCustomer = () => {\n\t\tSalesActions.enterCustomer(this.props.match.params.id);\n\t\t//[A bit cheeky doing this here instead of emitting a change from the store, but this is the only time we need to \n\t\t//update display based on this status, and we know that the visit log will be created before this line is executed]\n\t\tthis.setState({isCustomerVisited: CustomerStore.isCustomerVisited(this.props.match.params.id)});\n\t}\n\t\n\texitCustomer = () => {\n\t\tSalesActions.exitCustomer(this.props.match.params.id);\n\t\tthis.setState({ customerExited: true });\n\t}\n\t\n\tcreateOrderWithCustomer = () => {\n\t\tlet salesCustomer = CustomerStore.getCustomer(this.props.match.params.id);\n\t\tif(salesCustomer != null){\n\t\t\tif(salesCustomer.is_approved_for_orders){\n\t\t\t\t//Update order details [Not recommended way to update but works for now in the absence of Redux]\n\t\t\t\tthis.state.order.customer_id = salesCustomer.id;\n\t\t\t\tthis.state.order.customer_name = salesCustomer.name;\n\t\t\t\t\n\t\t\t\t//Set expected date based on 'default_lead_time', if available\n\t\t\t\tthis.state.order.expected_date = (salesCustomer.default_lead_time != null) ? (util.getUnixTimeStartOfDay() + salesCustomer.default_lead_time * 86400): null;\n\t\t\t\t//Set customer-specific payment term, if available and we don't already have one saved\n\t\t\t\tthis.state.order.payment_terms_id = (this.state.order.payment_terms_id == null && salesCustomer.payment_term != null) ? salesCustomer.payment_term : this.state.order.payment_terms_id;\n\t\t\t\t\n\t\t\t\t//Set the customer-specific currency for the order, if the customer-specific currency exists,\n\t\t\t\t//otherwise use the default instance currency\n\t\t\t\tlet objCurrency = OrderStore.getCurrencyOrDefault(salesCustomer.default_currency_id);\n\t\t\t\tthis.state.order.currency_id = objCurrency.id;\n\t\t\t\tthis.state.order.currency_display_name = objCurrency.name;\n\t\t\t\tthis.state.order.currency_display_symbol = objCurrency.symbol;\n\t\t\t\t\n\t\t\t\t//Clear the billing and shipping addresses (blank selection - not strictly necessary here since fresh order, but for completeness and consistency with other similar screens of app)\n\t\t\t\tthis.state.order.billing_location_id = 0;\n\t\t\t\tthis.state.order.shipping_location_id = 0;\n\t\t\t\t\n\t\t\t\tSalesActions.saveOrder(this.state.order);\n\t\t\t}else{\n\t\t\t\ttoastr.warning('This customer is not approved to place orders');\n\t\t\t}\n\t\t}else{ //[In case there was a problem or partial success when refreshing sales data after calls data]\n\t\t\ttoastr.warning('This customer has missing sales data: please refresh your Calls or Sales');\n\t\t}\n\t}\n\t\n\trender() {\n\t\t//We're redirecting to the new customer creation page (for the sake of convenient URL)\n\t\tif (this.state.customerCreationRedirection) {\n\t\t\t//Transition to the new customer (detail) edit page\n\t\t\treturn (\n\t\t\t\t<Redirect push to={\"/sales/customers/new/editdetails\"} />\n\t\t\t);\n\t\t\t\n\t\t//An order has been created with this customer\n\t\t} else if (this.state.orderWithCustomerCreated) {\n\t\t\t//Transition to this order's page for further editing\n\t\t\treturn (\n\t\t\t\t<Redirect push to={\"/sales/orders/\" + this.state.order.id} />\n\t\t\t);\n\t\t\n\t\t//Customer has been explicitly 'exited' via button\t\n\t\t} else if (this.state.customerExited) {\n\t\t\t//Transition to the appropriate listing page\n\t\t\treturn (\n\t\t\t\t<Redirect push to={\"/\" + this.props.match.params.area} />\n\t\t\t);\n\t\t}\n\t\t\n\t\t//<h1 className=\"sub-button-heading\">{this.state.customer.name}</h1>\n\t\t\n\t\t\t\t\t//***<Link to={\"/calls/\" + this.props.match.params.id + \"/adminaudits\"} className=\"list-group-item\">\n\t\t\t\t\t\t//***<h4 className=\"list-group-item-heading\"><i className=\"fa fa-list-ul\"></i> Admin Audits/Feedback</h4>\n\t\t\t\t\t\t//***<p className=\"list-group-item-text\">View and perform admin audits associated with this customer.</p>\n\t\t\t\t\t//***</Link>\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div className=\"btn-bar\" role=\"group\">\n\t\t\t\t\t<Link className=\"btn btn-primary col-xs-6\" role=\"button\" to={\"/\" + this.props.match.params.area}>\n\t\t\t\t\t\t<i className=\"fa fa-arrow-left\"></i> Back to <strong>{ this.props.match.params.area == 'calls' ? 'My Call List' : 'Customers'}</strong>\n\t\t\t\t\t</Link>\n\t\t\t\t\t{ this.state.isCustomerVisited ?\n\t\t\t\t\t\t<button className=\"btn btn-primary col-xs-6\" onClick={this.exitCustomer} disabled={this.state.isCustomerRefreshLoading}><i className=\"fa fa-sign-out fa-rotate-180\"></i> <strong>Exit Customer</strong></button> :\n\t\t\t\t\t\t<button className=\"btn btn-primary col-xs-6\" onClick={this.enterCustomer} disabled={this.state.isCustomerRefreshLoading}><i className=\"fa fa-sign-in\"></i> Enter Customer</button>\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t<div className=\"list-group list-group-spaced\" style={{marginTop: '15px'}}>\n\t\t\t\t\t<Spinner isVisible={this.state.isCustomerRefreshLoading} />\n\t\t\t\t\t<Link to={\"/\" + this.props.match.params.area + \"/\" + this.props.match.params.id + \"/info\"} className={\"list-group-item\" + (this.state.isCustomerRefreshLoading ? \" disabled\" : \"\")}>\n\t\t\t\t\t\t<h4 className=\"list-group-item-heading\"><i className=\"fa fa-info-circle\"></i> Customer Information</h4>\n\t\t\t\t\t\t<p className=\"list-group-item-text\">View customer details.</p>\n\t\t\t\t\t</Link>\n\t\t\t\t\t\n\t\t\t\t\t{ this.state.isCallCustomer ?\n\t\t\t\t\t\t<Link to={\"/calls/\" + this.props.match.params.id + \"/audits\"} className={\"list-group-item\" + (this.state.isCustomerRefreshLoading ? \" disabled\" : \"\")}>\n\t\t\t\t\t\t\t<h4 className=\"list-group-item-heading\"><i className=\"fa fa-list-ul\"></i> Audits/Feedback</h4>\n\t\t\t\t\t\t\t<p className=\"list-group-item-text\">View and perform customer audits for this call.</p>\n\t\t\t\t\t\t</Link> : null }\n\t\t\t\t\t\n\t\t\t\t\t{ config.get(option.UI_BUTTON_CUSTOMER_FILES) ?\n\t\t\t\t\t\t<Link to={\"/\" + this.props.match.params.area + \"/\" + this.props.match.params.id + \"/files\"} className={\"list-group-item\" + (this.state.isCustomerRefreshLoading ? \" disabled\" : \"\")}>\n\t\t\t\t\t\t\t<h4 className=\"list-group-item-heading\"><i className=\"fa fa-folder-open\"></i> Files</h4>\n\t\t\t\t\t\t\t<p className=\"list-group-item-text\">View files for this customer.</p>\n\t\t\t\t\t\t</Link> : null }\t\n\t\t\t\t\t\n\t\t\t\t\t{ config.get(option.UI_BUTTON_CUSTOMER_COMMENTS) ?\n\t\t\t\t\t\t<Link to={\"/\" + this.props.match.params.area + \"/\" + this.props.match.params.id + \"/comments\"} className={\"list-group-item\" + (this.state.isCustomerRefreshLoading ? \" disabled\" : \"\")}>\n\t\t\t\t\t\t\t<h4 className=\"list-group-item-heading\"><i className=\"fa fa-comments\"></i> Comments</h4>\n\t\t\t\t\t\t\t<p className=\"list-group-item-text\">View and add comments for this customer.</p>\n\t\t\t\t\t\t</Link> : null }\n\t\t\t\t\t\t\n\t\t\t\t\t<button onClick={this.createOrderWithCustomer} className={\"list-group-item\" + (this.state.isCustomerRefreshLoading ? \" disabled\" : \"\")} disabled={this.state.isCustomerRefreshLoading}>\n\t\t\t\t\t\t<h4 className=\"list-group-item-heading\"><i className=\"fa fa-shopping-cart\"></i> New Order</h4>\n\t\t\t\t\t\t<p className=\"list-group-item-text\">Create a new order for this customer.</p>\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default CustomerPage;","\"use strict\";\n\nimport React from 'react';\nimport { Link, Redirect } from 'react-router-dom';\nvar CallActions = require('../../actions/callActions');\nvar Status = require('../../constants/actionStatuses');\nvar Actions = require('../../constants/actionTypes');\nvar CallStore = require('../../stores/callStore');\nvar CustomerStore = require('../../stores/customerStore');\nvar CustomerInfoPanelList = require('./customerInfoPanelList');\nvar util = require('../../util.js');\nvar toastr = require('toastr');\nvar _ = require('lodash');\n\n//This page has been enhanced to additionally handle display of a new customer\nvar CustomerInfoPage = React.createClass({\n\tgetInitialState: function() {\n\t\treturn {\n\t\t\tcustomer: { 'id': 0, 'name': ''},\n\t\t\tcustomerFields: [],\n\t\t\tisLoading: false,\n\t\t\teditsToSubmit: false, //whether or not we have any customer edits ready to send back to server\n\t\t\teditCancelled: false, //whether we are cancelling the whole (new customer) edit\n\t\t\tisNewCustomer: false  //whether or not this is a new customer (unsynced with server)\n\t\t};\n\t},\n\t\n\tcomponentWillMount: function(){\n\t\t//Use WILL (rather than DID) mount, because then calling setState won't cause a re-render\n\t\t//(it's before rendering occurs)\n\t\tthis.screenTitle = 'Customer Information';\n\t\tthis.newCustomerID = null;\n\t\tvar custID = this.props.match.params.id;  //from path '/calls/:id/info' or '/sales/customers/:id/info'\n\t\tif(custID){\n\t\t\tlet blnIsNewCustomer = (custID == 'new' || util.isLocalID(custID));\n\t\t\tlet cust = {};\n\t\t\t\n\t\t\tif(blnIsNewCustomer){\n\t\t\t\t//Obtain a representation of a customer record (in this case, created from any available new customer edit info)\n\t\t\t\tcust = CustomerStore.getEditedCustomer(custID);\n\t\t\t\tthis.screenTitle = 'New Customer';\n\t\t\t}else{\n\t\t\t\t//Obtain the customer record \n\t\t\t\t//(in the existing customer case, we use the official customer record rather than the local edits, but if this changes use getEditedCustomer() as above)\n\t\t\t\tcust = CustomerStore.getCustomer(custID);\n\t\t\t\tif(!cust){\n\t\t\t\t\tvar call = CallStore.getCallById(custID);\n\t\t\t\t\tif(!call){\n\t\t\t\t\t\tcall = { 'store_id': 0, 'store_name': ''};\n\t\t\t\t\t}\n\t\t\t\t\tcust = { 'id': call.store_id, 'name': call.store_name};\n\t\t\t\t}\n\t\t\t\tthis.screenTitle = cust.name ? cust.name : this.screenTitle;\n\t\t\t}\n\t\t\t\n\t\t\tthis.setState({\n\t\t\t\tcustomer: cust,\n\t\t\t\tisNewCustomer: blnIsNewCustomer\n\t\t\t});\n\t\t}\n\t\tutil.setScreenTitle(this.screenTitle);\n\t\tthis.setState({customerFields: CustomerStore.getFields()});\n\t},\n\t\n\tcomponentDidMount: function(){\n\t\t//The statuses we're monitoring\n\t\tthis.refreshStatus = Status.OK;\n\t\tthis.submitStatus = Status.OK;\n\t\t\n\t\tCustomerStore.addChangeListener(this._onChange);\n\t\t\n\t\t//Refresh the submissions indicator\n\t\tthis.refreshEditSubmissionStatusIndicator();\n\t\t\n\t\t//Only do customer refreshing for existing customers\n\t\tif(!this.state.isNewCustomer){\n\t\t\t//Refresh this customer's details if they haven't been refreshed yet today (or ever)\n\t\t\t//(Additionally, refresh the customer fields data if it is also old)\n\t\t\tvar blnCustomerRefreshNeeded = util.isBeforeToday(CustomerStore.getLastRefreshForCustomer(this.state.customer.id));\n\t\t\tvar blnFieldsRefreshNeeded = util.isBeforeToday(CustomerStore.getLastRefreshForFields());\n\t\t\tif(blnCustomerRefreshNeeded || blnFieldsRefreshNeeded){\n\t\t\t\t//CallActions.refreshCustomer(this.state.customer.id, blnFieldsRefreshNeeded);\n\t\t\t\tCallActions.doAfterAccessCheck('refreshCustomer', [this.state.customer.id, blnFieldsRefreshNeeded]);\n\t\t\t}\n\t\t}\n\t},\n\t\n\tcomponentWillUnmount: function(){\n\t\tCustomerStore.removeChangeListener(this._onChange);\n\t},\n\t\n\t_onChange: function(){\n\t\tlet refreshStatus = CustomerStore.getStatus(Actions.CUSTOMER_REFRESH);\n\t\tlet submitStatus = CustomerStore.getStatus(Actions.CUSTOMER_EDITS_SUBMIT);\n\n\t\t//There's a change in refresh status (only possible for existing customers, or after submission of edits for existing/new customers)\n\t\tif(this.refreshStatus != refreshStatus){\n\t\t\tthis.refreshStatus = refreshStatus;\n\t\t\t\n\t\t\t//Customer detail data has been refreshed (completely or partially)\n\t\t\t//[Currently, partial scenario can only happen when the fields data wasn't able to be refreshed]\n\t\t\tif(this.refreshStatus == Status.OK || this.refreshStatus == Status.PARTIAL){\n\t\t\t\t//If a new customer was created on server, we switch display to the new legitimate refreshed record, otherwise we refresh the existing record as per usual\n\t\t\t\tlet blnNewCustomerCreated = (this.newCustomerID != null && this.newCustomerID > 0); \n\t\t\t\tlet cust = CustomerStore.getCustomer(blnNewCustomerCreated ? this.newCustomerID : this.state.customer.id);\n\t\t\t\tthis.newCustomerID = null; //this ID can always be reset at this point\n\t\t\t\t\n\t\t\t\tthis.screenTitle = cust.name ? cust.name : 'Customer Information';\n\t\t\t\tutil.setScreenTitle(this.screenTitle);\n\t\t\t\t\n\t\t\t\tthis.setState({\n\t\t\t\t\tisLoading: false,\n\t\t\t\t\tisNewCustomer: false, \n\t\t\t\t\tcustomer: cust,\n\t\t\t\t\tcustomerFields: CustomerStore.getFields()\n\t\t\t\t});\n\t\t\t\ttoastr.success(this.refreshStatus == Status.OK ? 'Customer information refreshed' : 'Unable to refresh all customer information');\n\t\t\t\n\t\t\t//Customer detail data is being refreshed\n\t\t\t}else if(this.refreshStatus == Status.PENDING){\n\t\t\t\tthis.setState({isLoading: true});\n\t\t\t\n\t\t\t//Customer detail data was not able to be refreshed\n\t\t\t}else if(this.refreshStatus == Status.ERROR){\n\t\t\t\tthis.setState({\n\t\t\t\t\tisLoading: false\n\t\t\t\t});\n\t\t\t\ttoastr.error('Unable to refresh customer information');\n\t\t\t}\n\t\t}\n\t\t\n\t\t//There's a change in submit status\n\t\tif(this.submitStatus != submitStatus){\n\t\t\tthis.submitStatus = submitStatus;\n\t\t\t\n\t\t\t//Customer edit data has been submitted (completely or partially)\n\t\t\tif(this.submitStatus == Status.OK || this.submitStatus == Status.PARTIAL){\n\t\t\t\t//If a new customer was created on server, store the new record ID for switching after refresh\n\t\t\t\t//[Note that even in the partial success case, the customer record would still have been created on server]\n\t\t\t\tif(this.state.isNewCustomer){\n\t\t\t\t\tthis.newCustomerID = CustomerStore.getCustomerLastCreated();\n\t\t\t\t}\n\t\t\t\tthis.setState({ isLoading: false });\n\t\t\t\ttoastr.success(this.submitStatus == Status.OK ? 'Customer edits submitted' : 'Unable to submit all customer edits');\n\t\t\t\t//Refresh the submissions indicator\n\t\t\t\tthis.refreshEditSubmissionStatusIndicator();\n\t\t\t\n\t\t\t//Customer edit data is being submitted\n\t\t\t}else if(this.submitStatus == Status.PENDING){\n\t\t\t\tthis.setState({isLoading: true});\n\t\t\t\n\t\t\t//Customer edit data was not able to be submitted\n\t\t\t}else if(this.submitStatus == Status.ERROR){\n\t\t\t\tthis.setState({ isLoading: false });\n\t\t\t\ttoastr.error('Unable to submit customer edits');\n\t\t\t}\n\t\t}\n\t},\n\t\n\trefreshDetails: function(){\n\t\tif(!this.state.isLoading){\n\t\t\t//CallActions.refreshCustomer(this.state.customer.id, util.isBeforeToday(CustomerStore.getLastRefreshForFields()));\n\t\t\tCallActions.doAfterAccessCheck('refreshCustomer', [this.state.customer.id, util.isBeforeToday(CustomerStore.getLastRefreshForFields())]);\n\t\t}\n\t},\n\t\n\tsubmitEdits: function(){\n\t\tif(!this.state.isLoading){\n\t\t\tvar editSubmissions = CustomerStore.getCustomerEdits(this.state.customer.id);\n\t\t\t\n\t\t\t//[shouldn't be the case]\n\t\t\tif(_.isEmpty(editSubmissions)){\n\t\t\t\ttoastr.success('No customer edits to submit');\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\t//Do a quick validation check that we have company details in new customer creation case\n\t\t\t//[Only validation check needed here - everything else covered by individual edit screens]\n\t\t\tif(this.state.isNewCustomer && _.isEmpty(editSubmissions.details)){\n\t\t\t\ttoastr.error('Please provide a Company Name');\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tCallActions.submitCustomerEdits(this.state.customer.id, editSubmissions);\n\t\t\t//CallActions.doAfterAccessCheck('submitCustomerEdits', [this.state.customer.id, editSubmissions]);\n\t\t}\n\t},\n\t\n\t//Refresh the display indicator depending on whether we have edits to submit\n\trefreshEditSubmissionStatusIndicator: function(){\n\t\tvar editSubmissions = CustomerStore.getCustomerEdits(this.state.customer.id);\n\t\t\n\t\tthis.setState({\n\t\t\teditsToSubmit: (!_.isEmpty(editSubmissions))\n\t\t});\n\t},\n\t\n\t//Cancel the entire (new customer) edit process, removing any edits for this customer from storage\n\tcancelCustomerEdit: function(){\n\t\tCallActions.cancelCustomerEdit(this.state.customer.id);\n\t\tthis.setState({ editCancelled: true });\n\t},\n\n\trender: function(){\n\t\t//At the moment this signifies a cancel to the customer creation process\n\t\tif (this.state.editCancelled) {\n\t\t\t//Transition to customers list (no 'push' to nav stack)\n\t\t\treturn (\n\t\t\t\t<Redirect to={\"/\" + this.props.match.params.area} />\n\t\t\t);\n\t\t}\n\t\t\n\t\t//<br /><small>{this.state.customer.name}</small>\n\t\t\n\t\t//If we move to a situation where we have a listing of the customers being added/edited, \n\t\t//we can add (or change the cancel button below to) something similar to this, except link to the listing:\n\t\t//\t\t\t\t<Link className={\"btn btn-primary col-xs-12\" + (this.state.isLoading ? \" disabled\" : \"\")} role=\"button\" to={\"/\" + this.props.match.params.area}>\n\t\t//\t\t\t\t\t<i className=\"fa fa-arrow-left\"></i> Back\n\t\t//\t\t\t\t</Link>\n\t\t\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t{!this.state.isNewCustomer ? <button className=\"btn btn-header-refresh\" onClick={this.refreshDetails} disabled={this.state.isLoading}><i className={\"fa fa-refresh fa-2x\" + (this.state.isLoading ? \" fa-spin\" : \"\")}></i></button> : null}\n\t\t\t\t{this.state.editsToSubmit ? <button className={\"btn btn-header-submit\" + (this.state.isNewCustomer ? \" right-align\" : \"\")} onClick={this.submitEdits} disabled={this.state.isLoading}><i className=\"fa fa-upload fa-2x\"></i><i className=\"fa fa-circle icon-badge\"></i></button> : null}\n\t\t\t\t\n\t\t\t\t<div className=\"btn-bar\" role=\"group\">\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.state.isNewCustomer ?\n\t\t\t\t\t\t<button className=\"btn btn-primary col-xs-12\" onClick={this.cancelCustomerEdit}><i className=\"fa fa-close\"></i> Cancel</button>\n\t\t\t\t\t\t:\n\t\t\t\t\t\t<Link className={\"btn btn-primary col-xs-12\" + (this.state.isLoading ? \" disabled\" : \"\")} role=\"button\" to={\"/\" + this.props.match.params.area + \"/\" + this.state.customer.id}>\n\t\t\t\t\t\t\t<i className=\"fa fa-arrow-left\"></i> Back to <strong>Customer</strong>\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t<h1 className=\"sub-button-heading\">Customer Information</h1>\n\t\t\t\t<CustomerInfoPanelList customer={this.state.customer} customerFields={this.state.customerFields} customerEditBaseURL={\"/\" + this.props.match.params.area + \"/\" + this.state.customer.id} isLoading={this.state.isLoading} />\n\t\t\t</div>\n\t\t);\n\t}\n});\n\nexport default CustomerInfoPage;","\"use strict\";\n\nimport React from 'react';\nimport { Link, Redirect } from 'react-router-dom';\nvar CallActions = require('../../actions/callActions');\nvar Status = require('../../constants/actionStatuses');\nvar CustomerDetailsFormPanel = require('./customerDetailsFormPanel');\nvar CustomerStore = require('../../stores/customerStore');\nvar util = require('../../util.js');\nvar toastr = require('toastr');\n\nclass CustomerDetailsEditPage extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\t\n\t\tthis.screenTitle = 'Edit Customer Details';\n\t\t\n\t\tlet customer = { 'id': 0, 'name': ''};\n\t\tlet customerEdits = {};\n\t\tlet customerID = props.match.params.id;  //from path '/calls/:id/editdetails' or '/sales/customers/:id/editdetails'\n\t\tif(customerID){\n\t\t\t//New customer\n\t\t\tif(customerID == 'new' || util.isLocalID(customerID)){\n\t\t\t\tif(customerID == 'new'){\n\t\t\t\t\tcustomerID = CustomerStore.getNewID();\n\t\t\t\t}\n\t\t\t\t//[Could make use of CustomerStore.getEditedCustomer(), but this is all we need] \n\t\t\t\tcustomer = { 'id': customerID, 'name': 'New Customer'};\n\t\t\t\n\t\t\t//Existing customer\t\n\t\t\t}else{\n\t\t\t\tcustomer = CustomerStore.getCustomer(customerID) || { 'id': 0, 'name': ''};\n\t\t\t}\n\t\t\t\n\t\t\tcustomerEdits = CustomerStore.getCustomerDetailsEdits(customerID) || {};\n\t\t}\n\n\t\tthis.state = {\n\t\t\tcustomer: customer,\n\t\t\tcustomerEdits: customerEdits,\n\t\t\tcustomerFields: CustomerStore.getFields(),\n\t\t\teditCompleted: false //[whether we are done in some way (changes saved or edit cancelled)]\n\t\t\t//isLoading: false\n\t\t};\n\t}\n\t\n\tcomponentWillMount(){\n\t\tif(this.customerIsLoaded()){\n\t\t\tthis.screenTitle = this.state.customer.name;\n\t\t}\n\t\tutil.setScreenTitle(this.screenTitle);\n\t}\n\t\n\tcomponentDidMount() {\n\t\tCustomerStore.addChangeListener(this._onChange);\n\t}\n\t\n\tcomponentWillUnmount() {\n\t\tCustomerStore.removeChangeListener(this._onChange);\n\t}\n\t\n\t_onChange = () => {\n\t\tthis.setState({\n\t\t\t//isLoading: false, \n\t\t\t//customer: CustomerStore.getCustomer(this.state.customer.id), \n\t\t\tcustomerEdits: CustomerStore.getCustomerDetailsEdits(this.state.customer.id)\n\t\t});\n\t}\n\t\n\t//Whether there is a customer loaded\n\tcustomerIsLoaded = () => {\n\t\t//return (this.state.customer.id != null && this.state.customer.id > 0);\n\t\treturn (this.state.customer.id != null && (this.state.customer.id > 0 || util.isLocalID(this.state.customer.id)));\n\t}\n\t\n\t//Whether or not there are any problems with the edited data\n\tcustomerEditsAreValid = () => {\n\t\tif(this.state.customerEdits.name == null || this.state.customerEdits.name == ''){\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\treturn true;\n\t}\n\t\n\t//Update the edited details for this customer in storage\n\tsaveCustomerDetailsEdit = (customerEdits) => {\n\t\tCallActions.saveCustomerDetailsEdit(this.state.customer.id, customerEdits);\n\t}\n\t\n\t//Finish the edit process, reducing any edits for this customer down to only actual field changes (prep for server sync)\n\tcompleteCustomerDetailsEdit = () => {\n\t\tlet blnValid = this.customerEditsAreValid();\n\t\t\n\t\tif(blnValid){\n\t\t\tCallActions.completeCustomerDetailsEdit(this.state.customer.id, this.state.customerEdits);\n\t\t\tthis.setState({ editCompleted: true });\n\t\t}else{\n\t\t\ttoastr.error('Please provide a Company Name');\n\t\t}\n\t}\n\t\n\t//Cancel the edit process, removing any edits for this customer from storage\n\tcancelCustomerDetailsEdit = () => {\n\t\tCallActions.cancelCustomerDetailsEdit(this.state.customer.id);\n\t\tthis.setState({ editCompleted: true });\n\t}\n\t\n\trender() {\n\t\tif (this.state.editCompleted) {\n\t\t\t//Transition to customer info page once no longer editing\n\t\t\treturn (\n\t\t\t\t<Redirect push to={\"/\" + this.props.match.params.area + \"/\" + this.state.customer.id + \"/info\"} />\n\t\t\t);\n\t\t}\n\t\t\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div className=\"btn-bar\" role=\"group\">\n\t\t\t\t\t<button className=\"btn btn-primary col-xs-6\" onClick={this.cancelCustomerDetailsEdit}><i className=\"fa fa-close\"></i> Cancel</button>\n\t\t\t\t\t<button className=\"btn btn-primary col-xs-6\" onClick={this.completeCustomerDetailsEdit}><i className=\"fa fa-check\"></i> Done</button>\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t<h1 className=\"sub-button-heading\">Edit Customer Details</h1>\n\t\t\t\t\t\n\t\t\t\t<CustomerDetailsFormPanel \n\t\t\t\t\tcustomerEdits={this.state.customerEdits} \n\t\t\t\t\tcustomerFields={this.state.customerFields} \n\t\t\t\t\tonSave={this.saveCustomerDetailsEdit} \n\t\t\t\t\tonComplete={this.completeCustomerDetailsEdit} \n\t\t\t\t\tonCancel={this.cancelCustomerDetailsEdit} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default CustomerDetailsEditPage;","\"use strict\";\n\nimport React from 'react';\nimport { Link, Redirect } from 'react-router-dom';\nvar CallActions = require('../../actions/callActions');\nvar Status = require('../../constants/actionStatuses');\nvar CustomerLocationsFormPanel = require('./customerLocationsFormPanel');\nvar CustomerStore = require('../../stores/customerStore');\nvar util = require('../../util.js');\nvar toastr = require('toastr');\n\nclass CustomerLocationsEditPage extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\t\n\t\tthis.screenTitle = 'Edit Customer Locations';\n\t\t\n\t\tlet customer = { 'id': 0, 'name': ''};\n\t\tlet customerEdits = {};\n\t\tlet lastEditedLocationID = null;\n\t\tlet customerID = props.match.params.id;  //from path '/calls/:id/editlocations' or '/sales/customers/:id/editlocations'\n\t\tif(customerID){\n\t\t\t//New customer\n\t\t\tif(customerID == 'new' || util.isLocalID(customerID)){\n\t\t\t\tif(customerID == 'new'){\n\t\t\t\t\tcustomerID = CustomerStore.getNewID();\n\t\t\t\t}\n\t\t\t\t//[Could make use of CustomerStore.getEditedCustomer(), but this is all we need]\n\t\t\t\tcustomer = { 'id': customerID, 'name': 'New Customer'};\n\t\t\t\t\n\t\t\t//Existing customer\n\t\t\t} else {\n\t\t\t\tcustomer = CustomerStore.getCustomer(customerID) || { 'id': 0, 'name': ''};\n\t\t\t}\n\t\t\t\n\t\t\tcustomerEdits = CustomerStore.getCustomerLocationsEdits(customerID) || {};\n\t\t\tlastEditedLocationID = CustomerStore.getCustomerLocationLastEdited(customerID);\n\t\t}\n\t\t\n\t\tthis.state = {\n\t\t\tcustomer: customer,\n\t\t\tcustomerEdits: customerEdits,\n\t\t\tcustomerFields: CustomerStore.getLocationFields(),\n\t\t\teditCompleted: false, //[whether we are done in some way (changes saved or edit cancelled)]\n\t\t\tfocusLocationID: lastEditedLocationID //[whether we're editing/focussed on a particular location]\n\t\t\t//isLoading: false\n\t\t};\n\t}\n\t\n\tcomponentWillMount(){\n\t\tif(this.customerIsLoaded()){\n\t\t\tthis.screenTitle = this.state.customer.name;\n\t\t}\n\t\tutil.setScreenTitle(this.screenTitle);\n\t}\n\t\n\tcomponentDidMount() {\n\t\tCustomerStore.addChangeListener(this._onChange);\n\t}\n\t\n\tcomponentWillUnmount() {\n\t\tCustomerStore.removeChangeListener(this._onChange);\n\t}\n\t\n\t_onChange = () => {\n\t\tthis.setState({\n\t\t\t//isLoading: false, \n\t\t\t//customer: CustomerStore.getCustomer(this.state.customer.id), \n\t\t\tcustomerEdits: CustomerStore.getCustomerLocationsEdits(this.state.customer.id),\n\t\t\tfocusLocationID: CustomerStore.getCustomerLocationLastEdited(this.state.customer.id)\n\t\t});\n\t}\n\t\n\t//Whether there is a customer loaded\n\tcustomerIsLoaded = () => {\n\t\t//return (this.state.customer.id != null && this.state.customer.id > 0);\n\t\treturn (this.state.customer.id != null && (this.state.customer.id > 0 || util.isLocalID(this.state.customer.id)));\n\t}\n\t\n\t//Whether or not there are any problems with the edited data\n\tcustomerEditsAreValid = () => {\n\t\tfor(var locationID in this.state.customerEdits){\n\t\t\tif(\n\t\t\t\t(this.state.customerEdits[locationID]['description'] == null || this.state.customerEdits[locationID]['description'] == '') &&\n\t\t\t\t(this.state.customerEdits[locationID]['address_1'] == null || this.state.customerEdits[locationID]['address_1'] == '')\n\t\t\t){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn true;\n\t}\n\t\n\t//Update the edited locations for this customer in storage\n\taddCustomerLocation = () => {\n\t\tCallActions.addCustomerLocation(this.state.customer.id);\n\t}\n\t\n\t//Update the edited locations for this customer in storage\n\tsaveCustomerLocationsEdit = (customerEdits, lastEditedLocationID) => {\n\t\tCallActions.saveCustomerLocationsEdit(this.state.customer.id, customerEdits, lastEditedLocationID);\n\t}\n\t\n\t//Finish the edit process, reducing any edits for this customer down to only actual field changes (prep for server sync)\n\tcompleteCustomerLocationsEdit = () => {\n\t\tlet blnValid = this.customerEditsAreValid();\n\t\t\n\t\tif(blnValid){\n\t\t\tCallActions.completeCustomerLocationsEdit(this.state.customer.id, this.state.customerEdits);\n\t\t\tthis.setState({ editCompleted: true });\n\t\t}else{\n\t\t\ttoastr.error('Please provide at least Description or Address 1 for every location');\n\t\t}\n\t}\n\t\n\t//Cancel the edit process, removing any edits for this customer from storage\n\tcancelCustomerLocationsEdit = () => {\n\t\tCallActions.cancelCustomerLocationsEdit(this.state.customer.id);\n\t\tthis.setState({ editCompleted: true });\n\t}\n\t\n\trender() {\n\t\tif (this.state.editCompleted) {\n\t\t\t//Transition to customer info page once longer editing\n\t\t\treturn (\n\t\t\t\t<Redirect push to={\"/\" + this.props.match.params.area + \"/\" + this.state.customer.id + \"/info\"} />\n\t\t\t);\n\t\t}\n\t\t\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div className=\"btn-bar\" role=\"group\">\n\t\t\t\t\t<button className=\"btn btn-primary col-xs-4\" onClick={this.cancelCustomerLocationsEdit}><i className=\"fa fa-close\"></i> Cancel</button>\n\t\t\t\t\t<button className=\"btn btn-primary col-xs-4\" onClick={this.addCustomerLocation}><i className=\"fa fa-plus\"></i> Add Location</button>\n\t\t\t\t\t<button className=\"btn btn-primary col-xs-4\" onClick={this.completeCustomerLocationsEdit}><i className=\"fa fa-check\"></i> Done</button>\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t<h1 className=\"sub-button-heading\">Edit Customer Locations</h1>\n\t\t\t\t\t\n\t\t\t\t<CustomerLocationsFormPanel \n\t\t\t\t\tcustomerEdits={this.state.customerEdits} \n\t\t\t\t\tcustomerFields={this.state.customerFields} \n\t\t\t\t\tonSave={this.saveCustomerLocationsEdit} \n\t\t\t\t\tonComplete={this.completeCustomerLocationsEdit} \n\t\t\t\t\tonCancel={this.cancelCustomerLocationsEdit}\n\t\t\t\t\tfocusItemID={this.state.focusLocationID} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default CustomerLocationsEditPage;","\"use strict\";\n\nimport React from 'react';\nimport { Link, Redirect } from 'react-router-dom';\nvar CallActions = require('../../actions/callActions');\nvar Status = require('../../constants/actionStatuses');\nvar CustomerContactsFormPanel = require('./customerContactsFormPanel');\nvar CustomerStore = require('../../stores/customerStore');\nvar util = require('../../util.js');\nvar toastr = require('toastr');\n\nclass CustomerContactsEditPage extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\t\n\t\tthis.screenTitle = 'Edit Customer Contacts';\n\t\t\n\t\tlet customer = { 'id': 0, 'name': ''};\n\t\tlet customerEdits = {};\n\t\tlet lastEditedContactID = null;\n\t\tlet customerID = props.match.params.id;  //from path '/calls/:id/editcontacts' or '/sales/customers/:id/editcontacts'\n\t\tif(customerID){\n\t\t\t//New customer\n\t\t\tif(customerID == 'new' || util.isLocalID(customerID)){\n\t\t\t\tif(customerID == 'new'){\n\t\t\t\t\tcustomerID = CustomerStore.getNewID();\n\t\t\t\t}\n\t\t\t\t//[Could make use of CustomerStore.getEditedCustomer(), but this is all we need]\n\t\t\t\tcustomer = { 'id': customerID, 'name': 'New Customer'};\n\t\t\t\t\n\t\t\t//Existing customer\n\t\t\t} else {\n\t\t\t\tcustomer = CustomerStore.getCustomer(customerID) || { 'id': 0, 'name': ''};\n\t\t\t}\n\t\t\t\n\t\t\tcustomerEdits = CustomerStore.getCustomerContactsEdits(customerID) || {};\n\t\t\tlastEditedContactID = CustomerStore.getCustomerContactLastEdited(customerID);\n\t\t}\n\t\t\n\t\tthis.state = {\n\t\t\tcustomer: customer,\n\t\t\tcustomerEdits: customerEdits,\n\t\t\tcustomerFields: CustomerStore.getContactFields(),\n\t\t\teditCompleted: false, //[whether we are done in some way (changes saved or edit cancelled)]\n\t\t\tfocusContactID: lastEditedContactID //[whether we're editing/focussed on a particular contact]\n\t\t\t//isLoading: false\n\t\t};\n\t}\n\t\n\tcomponentWillMount(){\n\t\tif(this.customerIsLoaded()){\n\t\t\tthis.screenTitle = this.state.customer.name;\n\t\t}\n\t\tutil.setScreenTitle(this.screenTitle);\n\t}\n\t\n\tcomponentDidMount() {\n\t\tCustomerStore.addChangeListener(this._onChange);\n\t}\n\t\n\tcomponentWillUnmount() {\n\t\tCustomerStore.removeChangeListener(this._onChange);\n\t}\n\t\n\t_onChange = () => {\n\t\tthis.setState({\n\t\t\t//isLoading: false, \n\t\t\t//customer: CustomerStore.getCustomer(this.state.customer.id), \n\t\t\tcustomerEdits: CustomerStore.getCustomerContactsEdits(this.state.customer.id),\n\t\t\tfocusContactID: CustomerStore.getCustomerContactLastEdited(this.state.customer.id)\n\t\t});\n\t}\n\t\n\t//Whether there is a customer loaded\n\tcustomerIsLoaded = () => {\n\t\t//return (this.state.customer.id != null && this.state.customer.id > 0);\n\t\treturn (this.state.customer.id != null && (this.state.customer.id > 0 || util.isLocalID(this.state.customer.id)));\n\t}\n\t\n\t//Whether or not there are any problems with the edited data\n\tcustomerEditsAreValid = () => {\n\t\tfor(var contactID in this.state.customerEdits){\n\t\t\tif(this.state.customerEdits[contactID]['first_name'] == null || this.state.customerEdits[contactID]['first_name'] == ''){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn true;\n\t}\n\t\n\t//Update the edited contacts for this customer in storage\n\taddCustomerContact = () => {\n\t\tCallActions.addCustomerContact(this.state.customer.id);\n\t}\n\t\n\t//Update the edited contacts for this customer in storage\n\tsaveCustomerContactsEdit = (customerEdits, lastEditedContactID) => {\n\t\tCallActions.saveCustomerContactsEdit(this.state.customer.id, customerEdits, lastEditedContactID);\n\t}\n\t\n\t//Finish the edit process, reducing any edits for this customer down to only actual field changes (prep for server sync)\n\tcompleteCustomerContactsEdit = () => {\n\t\tlet blnValid = this.customerEditsAreValid();\n\t\t\n\t\tif(blnValid){\n\t\t\tCallActions.completeCustomerContactsEdit(this.state.customer.id, this.state.customerEdits);\n\t\t\tthis.setState({ editCompleted: true });\n\t\t}else{\n\t\t\ttoastr.error('Please provide at least First Name for every contact');\n\t\t}\n\t}\n\t\n\t//Cancel the edit process, removing any edits for this customer from storage\n\tcancelCustomerContactsEdit = () => {\n\t\tCallActions.cancelCustomerContactsEdit(this.state.customer.id);\n\t\tthis.setState({ editCompleted: true });\n\t}\n\t\n\trender() {\n\t\tif (this.state.editCompleted) {\n\t\t\t//Transition to customer info page once longer editing\n\t\t\treturn (\n\t\t\t\t<Redirect push to={\"/\" + this.props.match.params.area + \"/\" + this.state.customer.id + \"/info\"} />\n\t\t\t);\n\t\t}\n\t\t\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div className=\"btn-bar\" role=\"group\">\n\t\t\t\t\t<button className=\"btn btn-primary col-xs-4\" onClick={this.cancelCustomerContactsEdit}><i className=\"fa fa-close\"></i> Cancel</button>\n\t\t\t\t\t<button className=\"btn btn-primary col-xs-4\" onClick={this.addCustomerContact}><i className=\"fa fa-plus\"></i> Add Contact</button>\n\t\t\t\t\t<button className=\"btn btn-primary col-xs-4\" onClick={this.completeCustomerContactsEdit}><i className=\"fa fa-check\"></i> Done</button>\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t<h1 className=\"sub-button-heading\">Edit Customer Contacts</h1>\n\t\t\t\t\t\n\t\t\t\t<CustomerContactsFormPanel \n\t\t\t\t\tcustomerEdits={this.state.customerEdits} \n\t\t\t\t\tcustomerFields={this.state.customerFields} \n\t\t\t\t\tonSave={this.saveCustomerContactsEdit} \n\t\t\t\t\tonComplete={this.completeCustomerContactsEdit} \n\t\t\t\t\tonCancel={this.cancelCustomerContactsEdit}\n\t\t\t\t\tfocusItemID={this.state.focusContactID} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default CustomerContactsEditPage;","\"use strict\";\n\nimport React from 'react';\nimport { Link, Redirect } from 'react-router-dom';\nvar AuditActions = require('../../actions/auditActions');\nvar CallActions = require('../../actions/callActions');\nvar SalesActions = require('../../actions/salesActions');\nvar Status = require('../../constants/actionStatuses');\nvar AuditStore = require('../../stores/auditStore');\nvar AuditAnswerStore = require('../../stores/auditAnswerStore');\nvar CallStore = require('../../stores/callStore');\nvar AuditList = require('./auditList');\nvar util = require('../../util.js');\nvar toastr = require('toastr');\n\nvar AuditsPage = React.createClass({\n\tgetInitialState: function() {\n\t\treturn {\n\t\t\tcustomer: { 'store_name': '', 'store_id': 0},\n\t\t\taudits: [],\n\t\t\tanswers: { 'completed': false, 'submitted': false }, //'report_run': false\n\t\t\tisLoading: false,\n\t\t\t//Used as a flag to trigger any events needed when 'Complete & Exit' action successfully taken (i.e. after button clicked), e.g. transition back to calls page\n\t\t\tcallCompleted: false\n\t\t};\n\t},\n\t\n\tcomponentWillMount: function(){\n\t\tthis.screenTitle = 'Audits/Feedback';\n\t\t\n\t\t//Use WILL (rather than DID) mount, because then calling setState won't cause a re-render\n\t\t//(it's before rendering occurs)\n\t\tvar custID = this.props.match.params.id;  //from path 'calls/:id/audits'\n\t\tif(custID){\n\t\t\tvar cust = CallStore.getCallById(custID);\n\t\t\tthis.setState({customer: cust, audits: AuditStore.getAudits(cust.audits), answers: AuditAnswerStore.getAuditAnswersForCustomer(custID)});\n\t\t\tthis.screenTitle = cust != null ? cust.store_name : this.screenTitle;\n\t\t}\n\t\t\n\t\tutil.setScreenTitle(this.screenTitle);\n\t\tutil.refreshGeolocation();\n\t},\n\t\n\tcomponentDidMount: function(){\n\t\tAuditStore.addChangeListener(this._onChange); //_onAuditsChange\n\t\t//AuditAnswerStore.addChangeListener(this._onAnswersChange); //(practically not going to need to listen for AuditAnswerStore changes)\n\t\t\n\t\t//Refresh this customer's audit list if it hasn't been refreshed yet today (or ever)\n\t\tif(util.isBeforeToday(AuditStore.getLastRefreshForCustomer(this.state.customer.store_id))){\n\t\t\t//AuditActions.refreshAudits(this.state.customer.store_id, this.state.customer.audits);\n\t\t\tAuditActions.doAfterAccessCheck('refreshAudits', [this.state.customer.store_id, this.state.customer.audits]);\n\t\t}\n\t\t\n\t\t//Log the start of a call, if necessary (with old routing system, this was on 'will transition to' this page)\n\t\t//[The first time we arrive on this page, if the customer has not been visited/entered yet, we\n\t\t//enter now (record the entry in the audit answers and create the visit record)]\n\t\tSalesActions.enterCustomer(this.state.customer.store_id);\n\t},\n\t\n\tcomponentWillUnmount: function(){\n\t\tAuditStore.removeChangeListener(this._onChange); //_onAuditsChange\n\t\t//AuditAnswerStore.removeChangeListener(this._onAnswersChange); //(practically not going to need to listen for AuditAnswerStore changes)\n\t},\n\t\n\t//(_onAuditsChange)\n\t_onChange: function(){\n\t\tvar status = AuditStore.getStatus();\n\t\t//Audits data has been refreshed \n\t\tif(status == Status.OK){\n\t\t\tthis.setState({\n\t\t\t\tisLoading: false, \n\t\t\t\taudits: AuditStore.getAudits(this.state.customer.audits), \n\t\t\t\tanswers: AuditAnswerStore.getAuditAnswersForCustomer(this.state.customer.store_id)\n\t\t\t});\n\t\t\ttoastr.success('Audit list refreshed');\n\t\t\n\t\t//Audits data is being refreshed\n\t\t}else if(status == Status.PENDING){\n\t\t\tthis.setState({isLoading: true});\n\t\t\n\t\t//Audits data was not able to be refreshed\n\t\t}else if(status == Status.ERROR){\n\t\t\tthis.setState({\n\t\t\t\tisLoading: false, \n\t\t\t\taudits: AuditStore.getAudits(this.state.customer.audits), //probably unnecessary\n\t\t\t\tanswers: AuditAnswerStore.getAuditAnswersForCustomer(this.state.customer.store_id) //probably unnecessary\n\t\t\t});\n\t\t\ttoastr.error('Unable to refresh audit list');\n\t\t\n\t\t//Audits data was only partially refreshed\t\n\t\t}else if(status == Status.PARTIAL){\n\t\t\tthis.setState({\n\t\t\t\tisLoading: false, \n\t\t\t\taudits: AuditStore.getAudits(this.state.customer.audits), \n\t\t\t\tanswers: AuditAnswerStore.getAuditAnswersForCustomer(this.state.customer.store_id)\n\t\t\t});\n\t\t\ttoastr.warning('Unable to obtain all audits');\n\t\t}\n\t},\n\t//Not currently necessary\n\t/*_onAnswersChange: function(){\n\t\tthis.setState({answers: AuditAnswerStore.getAuditAnswersForCustomer(this.state.customer.store_id)});\n\t},*/\n\t\n\trender: function(){\n\t\tif (this.state.callCompleted) {\n\t\t\t//Transition to calls page on call completion\n\t\t\t//<Redirect push to=\"/calls\" />\n\t\t\t//Transition to customer page on call completion\n\t\t\treturn (\n\t\t\t\t<Redirect push to={\"/calls/\" + this.state.customer.store_id} />\n\t\t\t);\n\t\t}\n\t\t\n\t\t//<button className=\"btn btn-primary\" onClick={this.runCallReport}>Run Report</button>\n\t\t//<br /><small>{this.state.customer.store_name}</small>\n\t\t\t\t\n\t\t\t\t//***<Link className=\"btn btn-primary pull-right\" role=\"button\" to={\"/calls/\" + this.state.customer.store_id + \"/adminaudits\"}><i className=\"fa fa-list-ul\"></i> Admin Audits/Feedback</Link>\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<button className=\"btn btn-header-refresh\" onClick={this.refreshAudits} disabled={this.state.isLoading}><i className={\"fa fa-refresh fa-2x\" + (this.state.isLoading ? \" fa-spin\" : \"\")}></i></button>\n\t\t\t\t\n\t\t\t\t<div className=\"btn-bar\" role=\"group\">\n\t\t\t\t\t<Link className={\"btn btn-primary col-xs-6\" + (this.state.isLoading ? \" disabled\" : \"\")} role=\"button\" to={\"/calls/\" + this.state.customer.store_id}><i className=\"fa fa-arrow-left\"></i> Back to <strong>Customer</strong></Link>\n\t\t\t\t\t<button className=\"btn btn-primary col-xs-6\" onClick={this.completeCall} disabled={this.state.isLoading}><i className=\"fa fa-check\"></i> Complete</button>\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t<h1 className=\"sub-button-heading\">Audits/Feedback</h1>\n\t\t\t\t<AuditList customerId={this.state.customer.store_id} audits={this.state.audits} answers={this.state.answers} isLoading={this.state.isLoading} />\n\t\t\t</div>\n\t\t);\n\t},\n\t\n\trefreshAudits: function(){\n\t\tif(!this.state.isLoading){\n\t\t\t//AuditActions.refreshAudits(this.state.customer.store_id, this.state.customer.audits);\n\t\t\tAuditActions.doAfterAccessCheck('refreshAudits', [this.state.customer.store_id, this.state.customer.audits]);\n\t\t}\n\t},\n\t//Check whether all required audits have been completed (ready for running call report / completing call)\n\tcallIsValid: function(){\n\t\tvar callIsValid = true;\n\t\t\n\t\t//check completed status for compulsory audits\n\t\tfor (var i = 0, l = this.state.audits.length; i < l; i++) {\n\t\t\tif (this.state.audits[i].meta_data.is_compulsory &&\n\t\t\t\t(!this.state.answers[this.state.audits[i].id] || !this.state.answers[this.state.audits[i].id].completed)) {\n\t\t\t\tcallIsValid = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn callIsValid;\n\t},\n\t/*runCallReport: function(){\n\t\tif(!this.callIsValid()){\n\t\t\ttoastr.error('Please complete all compulsory audits');\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tconsole.log('RUN REPORT!');\n\t\t//Mark audit list as report run\n\t\t//this.state.answers.report_run = true;\n\t\t//this.setState({answers: this.state.answers}); //strictly necessary?\n\t\t//AuditActions.runCallReport(this.state.answers); //strictly necessary?\n\t},*/\n\tcompleteCall: function(){\n\t\tif(!this.state.isLoading){ //let's rather not allow this whilst refreshing audits\n\t\t\tif(!this.callIsValid()){\n\t\t\t\ttoastr.error('Please complete all compulsory audits');\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\t//Mark audit list / call as completed\n\t\t\t//Not necessary to manually update our audit answers completed state (and we're leaving this page anyway)\n\t\t\t//[We also mark the exit time for the customer (in addition to 'complete' flags), in case the user forgets to manually exit (so we still have pretty good data)]\n\t\t\tSalesActions.exitCustomer(this.state.customer.store_id, true); //CallActions.completeCall(this.state.customer.store_id); //ensure answerstore updated (Could also package in with AuditActions?)\n\t\t\t\n\t\t\tthis.setState({ callCompleted: true });\n\t\t}\n\t}\n});\n\nexport default AuditsPage;","\"use strict\";\n\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nvar AuditActions = require('../../actions/auditActions');\nvar CallActions = require('../../actions/callActions');\nvar Status = require('../../constants/actionStatuses');\nvar AuditStore = require('../../stores/auditStore');\nvar AuditAnswerStore = require('../../stores/auditAnswerStore');\nvar CallStore = require('../../stores/callStore');\nvar AdminAuditList = require('./adminAuditList');\nvar util = require('../../util.js');\nvar toastr = require('toastr');\n\nclass AdminAuditsPage extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\t\n\t\t//Audit IDs applicable to this customer [as per admin audit list (and customer restrictions)]\n\t\t//[Non-visual class field (not used in render, i.e. not this.state)]\n\t\tthis.auditIDs = [];\n\t\t\n\t\tthis.screenTitle = 'Admin Audits/Feedback';\n\t\t\n\t\tlet customer = { 'store_name': '', 'store_id': 0 };\n\t\tlet audits = [];\n\t\tlet answers = { 'completed': true, 'submitted': false };\n\t\t\n\t\tlet custID = props.match.params.id;  //from path 'calls/:id/adminaudits'\n\t\tif(custID){\n\t\t\tcustomer = CallStore.getCallById(custID) || customer;\n\t\t\tthis.auditIDs = AuditStore.getAdminAuditIDsForCustomer(custID);\n\t\t\taudits = AuditStore.getAudits(this.auditIDs, true, false);\n\t\t\tanswers = AuditAnswerStore.getAuditAnswersForCustomer(custID, true);\n\t\t\tthis.screenTitle = (customer != null && customer.store_name != '') ? customer.store_name : this.screenTitle;\n\t\t}\n\t\t\n\t\tthis.state = {\n\t\t\tcustomer: customer,\n\t\t\taudits: audits,\n\t\t\tanswers: answers,\n\t\t\tisLoading: false\n\t\t};\n\t}\n\t\n\tcomponentWillMount() {\n\t\tutil.setScreenTitle(this.screenTitle);\n\t\tutil.refreshGeolocation();\n\t}\n\t\n\tcomponentDidMount() {\n\t\tAuditStore.addChangeListener(this._onChange); //_onAuditsChange\n\t\t//AuditAnswerStore.addChangeListener(this._onAnswersChange); //(practically not going to need to listen for AuditAnswerStore changes)\n\t\t\n\t\t//Refresh this customer's admin audit list if it hasn't been refreshed yet today (or ever)\n\t\tif(util.isBeforeToday(AuditStore.getLastRefreshForCustomer(this.state.customer.store_id, true))){\n\t\t\t//AuditActions.refreshAudits(this.state.customer.store_id, this.auditIDs, true);\n\t\t\tAuditActions.doAfterAccessCheck('refreshAudits', [this.state.customer.store_id, this.auditIDs, true]);\n\t\t}\n\t}\n\t\n\tcomponentWillUnmount() {\n\t\tAuditStore.removeChangeListener(this._onChange); //_onAuditsChange\n\t\t//AuditAnswerStore.removeChangeListener(this._onAnswersChange); //(practically not going to need to listen for AuditAnswerStore changes)\n\t}\n\t\n\t//(_onAuditsChange)\n\t_onChange = () => {\n\t\tvar status = AuditStore.getStatus();\n\t\t//Audits data has been refreshed \n\t\tif(status == Status.OK){\n\t\t\tthis.setState({\n\t\t\t\tisLoading: false, \n\t\t\t\taudits: AuditStore.getAudits(this.auditIDs, true, false), \n\t\t\t\tanswers: AuditAnswerStore.getAuditAnswersForCustomer(this.state.customer.store_id, true)\n\t\t\t});\n\t\t\ttoastr.success('Audit list refreshed');\n\t\t\n\t\t//Audits data is being refreshed\n\t\t}else if(status == Status.PENDING){\n\t\t\tthis.setState({isLoading: true});\n\t\t\n\t\t//Audits data was not able to be refreshed\n\t\t}else if(status == Status.ERROR){\n\t\t\tthis.setState({\n\t\t\t\tisLoading: false, \n\t\t\t\taudits: AuditStore.getAudits(this.auditIDs, true, false), //probably unnecessary\n\t\t\t\tanswers: AuditAnswerStore.getAuditAnswersForCustomer(this.state.customer.store_id, true) //probably unnecessary\n\t\t\t});\n\t\t\ttoastr.error('Unable to refresh audit list');\n\t\t\n\t\t//Audits data was only partially refreshed\t\n\t\t}else if(status == Status.PARTIAL){\n\t\t\tthis.setState({\n\t\t\t\tisLoading: false, \n\t\t\t\taudits: AuditStore.getAudits(this.auditIDs, true, false), \n\t\t\t\tanswers: AuditAnswerStore.getAuditAnswersForCustomer(this.state.customer.store_id, true)\n\t\t\t});\n\t\t\ttoastr.warning('Unable to obtain all audits');\n\t\t}\n\t}\n\t//Not currently necessary\n\t/*_onAnswersChange(){\n\t\tthis.setState({answers: AuditAnswerStore.getAuditAnswersForCustomer(this.state.customer.store_id, true)});\n\t}*/\n\t\n\trefreshAudits = () => {\n\t\tif(!this.state.isLoading){\n\t\t\t//AuditActions.refreshAudits(this.state.customer.store_id, this.auditIDs, true);\n\t\t\tAuditActions.doAfterAccessCheck('refreshAudits', [this.state.customer.store_id, this.auditIDs, true]);\n\t\t}\n\t}\n\t\n\trender() {\n\t\t//<br /><small>{this.state.customer.store_name}</small>\n\t\t//<Link className={\"btn btn-primary pull-right\" + (this.state.isLoading ? \" disabled\" : \"\")} role=\"button\" to={\"/calls/\" + this.state.customer.store_id + \"/audits\"}><i className=\"fa fa-list-ul\"></i> Audits/Feedback</Link>\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<button className=\"btn btn-header-refresh\" onClick={this.refreshAudits} disabled={this.state.isLoading}><i className={\"fa fa-refresh fa-2x\" + (this.state.isLoading ? \" fa-spin\" : \"\")}></i></button>\n\t\t\t\t\n\t\t\t\t<div className=\"btn-bar\" role=\"group\">\n\t\t\t\t\t<Link className={\"btn btn-primary col-xs-6\" + (this.state.isLoading ? \" disabled\" : \"\")} role=\"button\" to={\"/calls/\" + this.state.customer.store_id}><i className=\"fa fa-arrow-left\"></i> Back to <strong>Customer</strong></Link>\n\t\t\t\t\t<Link className={\"btn btn-primary col-xs-6\" + (this.state.isLoading ? \" disabled\" : \"\")} role=\"button\" to={\"/calls/\" + this.state.customer.store_id + \"/audits\"}><i className=\"fa fa-list-ul\"></i> Audits/Feedback</Link>\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t<h1 className=\"sub-button-heading\">Admin Audits/Feedback</h1>\n\t\t\t\t<AdminAuditList customerId={this.state.customer.store_id} audits={this.state.audits} answers={this.state.answers} isLoading={this.state.isLoading} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default AdminAuditsPage;","\"use strict\";\n\nimport React from 'react';\nimport { Link, Redirect } from 'react-router-dom';\nvar AuditActions = require('../../actions/auditActions');\nvar Status = require('../../constants/actionStatuses');\nvar Types = require('../../constants/questionTypes');\nvar QActions = require('../../constants/questionAnswerActions');\nvar AuditStore = require('../../stores/auditStore');\nvar AuditAnswerStore = require('../../stores/auditAnswerStore');\nvar CallStore = require('../../stores/callStore');\nvar QuestionGroup = require('./questionGroup');\nvar SignatureGroup = require('./signatureGroup');\nvar _ = require('lodash');\nvar util = require('../../util.js');\nvar toastr = require('toastr');\n\nvar AuditPage = React.createClass({\n\tgetInitialState: function() {\n\t\treturn {\n\t\t\tcustomer: { 'store_name': ''},\n\t\t\taudit: {},\n\t\t\tanswer: { 'weight': 0, 'score': 0, 'completed': false },\n\t\t\t//Used as a flag to trigger any events needed when 'Complete' action successfully taken (i.e. after button clicked), e.g. transition back to audits page\n\t\t\tauditCompleted: false\n\t\t};\n\t},\n\t\n\tcomponentWillMount: function(){\n\t\tthis.blnAdmin = (this.props.match.path.indexOf('adminaudits') != -1);\n\t\tthis.adminAuditIndex = this.blnAdmin ? parseInt(this.props.match.params.aidx) : null;\n\t\t\n\t\tthis.screenTitle = 'Audit';\n\t\t\n\t\t//Use WILL (rather than DID) mount, because then calling setState won't cause a re-render\n\t\t//(it's before rendering occurs)\n\t\tvar custID = this.props.match.params.id;  //from path 'calls/:id/audits/:aid' or 'calls/:id/adminaudits/:aid/:aidx'\n\t\tif(custID){\n\t\t\tlet cust = CallStore.getCallById(custID);\n\t\t\tthis.setState({customer: cust});\n\t\t\tthis.screenTitle = cust != null ? cust.store_name : this.screenTitle;\n\t\t}\n\n\t\tvar auditID = this.props.match.params.aid;  //from path 'calls/:id/audits/:aid' or 'calls/:id/adminaudits/:aid/:aidx'\n\t\tif(auditID){\n\t\t\t//this.setState({audit: AuditStore.getAudit(auditID, this.blnAdmin), answer: AuditAnswerStore.getAuditAnswer(custID, auditID, this.blnAdmin, this.adminAuditIndex)});\n\t\t\tthis.state.audit = AuditStore.getAudit(auditID, this.blnAdmin);\n\t\t\tthis.state.answer = AuditAnswerStore.getAuditAnswer(custID, auditID, this.blnAdmin, this.adminAuditIndex);\n\t\t\tthis.refreshAnswerVisibilityAndScore();\n\t\t\tthis.setState({audit: this.state.audit, answer: this.state.answer}); \n\t\t}\n\t\t\n\t\tutil.setScreenTitle(this.screenTitle);\n\t\tutil.refreshGeolocation();\n\t},\n\t\n\tcomponentDidMount: function(){\n\t\tAuditStore.addChangeListener(this._onAuditChange); //(practically not going to need to listen for AuditStore changes)\n\t\tAuditAnswerStore.addChangeListener(this._onAnswerChange);\n\t},\n\t\n\tcomponentWillUnmount: function(){\n\t\tAuditStore.removeChangeListener(this._onAuditChange);\n\t\tAuditAnswerStore.removeChangeListener(this._onAnswerChange);\n\t},\n\t\n\t//(practically not going to end up needing to listen for AuditStore changes)\n\t_onAuditChange: function(){\n\t\tvar status = AuditStore.getStatus();\n\t\t//Audits data has been refreshed \n\t\tif(status == Status.OK){\n\t\t\tthis.setState({audit: AuditStore.getAudit(this.state.audit.id, this.blnAdmin)});\n\t\t\n\t\t//Audits data is being refreshed\n\t\t}else if(status == Status.PENDING){\n\n\t\t//Audits data was not able to be refreshed\n\t\t}else if(status == Status.ERROR){\n\t\t\n\t\t//Audits data was only partially refreshed\n\t\t}else if(status == Status.PARTIAL){\n\t\t\tthis.setState({audit: AuditStore.getAudit(this.state.audit.id, this.blnAdmin)});\n\t\t}\n\t},\n\t_onAnswerChange: function(){\n\t\tthis.setState({answer: AuditAnswerStore.getAuditAnswer(this.state.customer.store_id, this.state.audit.id, this.blnAdmin, this.adminAuditIndex)});\n\t},\n\t\n\t//Update the entire audit answer, receiving the question answer data that has changed\n\tsaveAnswer: function(questionAnswerData){\n\t\tif(this.signaturesArePresent()){\n\t\t\ttoastr.error('Remove signatures to make changes to this audit');\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tif(!this.state.answer[questionAnswerData.question_id]){\n\t\t\tthis.state.answer[questionAnswerData.question_id] = {};\n\t\t}\n\t\t//merge in (overwrite) whatever partial question answer we receive from form\n\t\t//(may as well retain the question ID in the question answer along with the actual data)\n\t\t_.assign(this.state.answer[questionAnswerData.question_id], questionAnswerData);\n\t\t//this.state.answer[questionAnswerData.question_id] = questionAnswerData; //{'yes_no': questionAnswerData.yes_no};\n\t\t\n\t\t//Seems unnecessary to call setState() here, rather just at the end (see refreshAnswerVisibilityAndScore())\n\t\t//this.setState({answer: this.state.answer});\n\t\t\n\t\tthis.refreshAnswerVisibilityAndScore();\n\t},\n\t\n\t//Refresh/update this audit's answers (questions) visibility, and the total score/weight for this audit (based on all questions)\n\trefreshAnswerVisibilityAndScore: function(){\n\t\tvar auditWeight = 0;\n\t\tvar auditScore = 0;\n\t\t\n\t\t//var arrParentStack = [];\n\t\tvar showDependent = false;\n\t\tvar showRemaining = true;\n\t\tvar showRemainingGroup = true;\n\t\t\n\t\tfor (var i = 0, l = this.state.audit.question_groups.length; i < l; i++) {\n\t\t\tshowRemainingGroup = true;\n\t\t\t\n\t\t\tfor (var j = 0, m = this.state.audit.question_groups[i].questions.length; j < m; j++) {\n\t\t\t\tvar question = this.state.audit.question_groups[i].questions[j];\n\t\t\t\t\n\t\t\t\tif(!this.state.answer[question.id]){\n\t\t\t\t\tthis.state.answer[question.id] = {\n\t\t\t\t\t\t'answered': false,\n\t\t\t\t\t\t'correct': false\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//Update visibility for this question\n\t\t\t\tif(showRemaining){\n\t\t\t\t\tif(showRemainingGroup){\n\t\t\t\t\t\tif(question.is_dependant){\n\t\t\t\t\t\t\tthis.state.answer[question.id].visible = showDependent;\n\t\t\t\t\t\t\n\t\t\t\t\t\t\t/*if(arrParentStack.length > 0){\n\t\t\t\t\t\t\t\tthis.state.answer[question.id].visible = arrParentStack.pop().showDependent;\n\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t//Shouldn't have a situation where a dependent question is before (without) a 'parent' question,\n\t\t\t\t\t\t\t\t//but let's ensure we turn off visibility in this case (makes more sense, as default is not to display dependent questions)\n\t\t\t\t\t\t\t\tthis.state.answer[question.id].visible = false;\n\t\t\t\t\t\t\t}*/\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\tthis.state.answer[question.id].visible = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}else{\n\t\t\t\t\t\tthis.state.answer[question.id].visible = (showDependent && question.is_dependant);\n\t\t\t\t\t}\n\t\t\t\t}else{\n\t\t\t\t\tthis.state.answer[question.id].visible = (showDependent && question.is_dependant);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//We only process visible questions\n\t\t\t\tif(this.state.answer[question.id].visible){\n\t\t\t\t\n\t\t\t\t\t//If this is a new 'parent' question\n\t\t\t\t\tif((question.correct_answer_action > 0) || (question.incorrect_answer_action > 0)){\n\t\t\t\t\t\t//var parentQuestion = {'id': question.id, 'showDependent': false});\n\t\t\t\t\t\tshowDependent = false;\n\t\t\t\t\t\t//Correctly answered\n\t\t\t\t\t\tif(this.state.answer[question.id].answered && this.state.answer[question.id].correct){\n\t\t\t\t\t\t\tif(question.correct_answer_action > 0){\n\t\t\t\t\t\t\t\tswitch(question.correct_answer_action){\n\t\t\t\t\t\t\t\t\tcase QActions.HIDE_REMAINING:\n\t\t\t\t\t\t\t\t\t\tshowRemaining = false;\n\t\t\t\t\t\t\t\t\t\tshowDependent = false;\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\tcase QActions.SHOW_DEPENDENT:\n\t\t\t\t\t\t\t\t\t\t//parentQuestion.showDependent = true;\n\t\t\t\t\t\t\t\t\t\tshowDependent = true;\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\tcase QActions.SHOW_DEPENDENT_HIDE_REMAINING_GROUP:\n\t\t\t\t\t\t\t\t\t\t//parentQuestion.showDependent = true;\n\t\t\t\t\t\t\t\t\t\tshowDependent = true;\n\t\t\t\t\t\t\t\t\t\tshowRemainingGroup = false;\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\tcase QActions.SHOW_DEPENDENT_HIDE_REMAINING:\n\t\t\t\t\t\t\t\t\t\t//parentQuestion.showDependent = true;\n\t\t\t\t\t\t\t\t\t\tshowDependent = true;\n\t\t\t\t\t\t\t\t\t\tshowRemaining = false;\n\t\t\t\t\t\t\t\t\t\tbreak;\t\t\t \n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t//Incorrect/unanswered\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\tif(question.incorrect_answer_action > 0){\n\t\t\t\t\t\t\t\tswitch(question.incorrect_answer_action){\n\t\t\t\t\t\t\t\t\tcase QActions.HIDE_REMAINING:\n\t\t\t\t\t\t\t\t\t\tshowRemaining = false;\n\t\t\t\t\t\t\t\t\t\tshowDependent = false;\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\tcase QActions.SHOW_DEPENDENT:\n\t\t\t\t\t\t\t\t\t\t//parentQuestion.showDependent = true;\n\t\t\t\t\t\t\t\t\t\tshowDependent = true;\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\tcase QActions.SHOW_DEPENDENT_HIDE_REMAINING_GROUP:\n\t\t\t\t\t\t\t\t\t\t//parentQuestion.showDependent = true;\n\t\t\t\t\t\t\t\t\t\tshowDependent = true;\n\t\t\t\t\t\t\t\t\t\tshowRemainingGroup = false;\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\tcase QActions.SHOW_DEPENDENT_HIDE_REMAINING:\n\t\t\t\t\t\t\t\t\t\t//parentQuestion.showDependent = true;\n\t\t\t\t\t\t\t\t\t\tshowDependent = true;\n\t\t\t\t\t\t\t\t\t\tshowRemaining = false;\n\t\t\t\t\t\t\t\t\t\tbreak;\t\t\t \n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//arrParentStack.push(parentQuestion);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t//Update total audit score/weight\n\t\t\t\t\tif(question.is_compulsory && question.weighting) {\n\t\t\t\t\t\tauditWeight += question.weighting;\n\t\t\t\t\t\tif(this.state.answer[question.id].answered && this.state.answer[question.id].correct) {\n\t\t\t\t\t\t\tauditScore += question.weighting;\n\t\t\t\t\t\t} \n\t\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//Not visible  \n\t\t\t\t}else{\n\t\t\t\t\t//However, if this is a new 'parent' question, let's also ensure any possible dependent questions are also not visible\n\t\t\t\t\t//[TODO: Compare this particular logic with iPad, but should be correct] \n\t\t\t\t\tif((question.correct_answer_action > 0) || (question.incorrect_answer_action > 0)){\n\t\t\t\t\t\tshowDependent = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.state.answer.weight = auditWeight;\n\t\tthis.state.answer.score = auditScore;\n\t\n\t\tthis.setState({answer: this.state.answer});\n\t\t//Save back to store\n\t\tAuditActions.saveAuditAnswer(this.state.answer, this.blnAdmin);\n\t},\n\t\n\t//Update the entire audit answer, receiving the question answer data that has changed\n\tsaveSignatures: function(signatureData){\n\t\tif(this.state.answer.signatures != null){\n\t\t\tthis.state.answer.signatures = [];\n\t\t}\n\t\t//merge in (overwrite) whatever individual signature data we receive from form\n\t\t//_.assign(this.state.answer.signatures[signatureData.idx], signatureData);\n\t\t//Update: just send entire signatures array (by reference)\n\t\tthis.state.answer.signatures = signatureData;\n\t\t\n\t\tthis.setState({answer: this.state.answer});\n\t\t//Save back to store\n\t\tAuditActions.saveAuditAnswer(this.state.answer, this.blnAdmin);\n\t},\n\t\n\tauditIsValid: function(){\n\t\tvar auditIsValid = true;\n\t\t\n\t\t//Check all compulsory questions answered\n\t\tfor (var i = 0, l = this.state.audit.question_groups.length; i < l; i++) {\n\t\t\tfor (var j = 0, m = this.state.audit.question_groups[i].questions.length; j < m; j++) {\n\t\t\t\tif (\n\t\t\t\t\tthis.state.audit.question_groups[i].questions[j].is_compulsory &&\n\t\t\t\t\t(!this.state.answer[this.state.audit.question_groups[i].questions[j].id] || \n\t\t\t\t\t(this.state.answer[this.state.audit.question_groups[i].questions[j].id].visible && !this.state.answer[this.state.audit.question_groups[i].questions[j].id].answered))\n\t\t\t\t\t) {\n\t\t\t\t\tauditIsValid = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(!auditIsValid){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\t//Check all signatures provided (if applicable and audit not already invalidated)\n\t\tif(auditIsValid && this.signaturesAreRequired()){\n\t\t\tfor (var k = 0, len = this.state.audit.meta_data.signatures.length; k < len; k++) {\n\t\t\t\tif(\tthis.state.answer.signatures == null || this.state.answer.signatures[k] == null || \n\t\t\t\t\tthis.state.answer.signatures[k].name == null || !this.state.answer.signatures[k].name.length ||\n\t\t\t\t\tthis.state.answer.signatures[k].file == null || !this.state.answer.signatures[k].file.length ){\n\t\t\t\t\tauditIsValid = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t//Mark whether audit is completed/valid (could do this in completeAudit()?)\n\t\tthis.state.answer.completed = auditIsValid;\n\t\tthis.setState({answer: this.state.answer}); //strictly necessary?\n\t\tAuditActions.saveAuditAnswer(this.state.answer, this.blnAdmin); //strictly necessary?\n\t\t\n\t\treturn auditIsValid;\n\t},\n\t\n\tcompleteAudit: function(){\n\t\tif(!this.auditIsValid()){\n\t\t\ttoastr.error('Please complete all compulsory questions' + (this.signaturesAreRequired() ? ' and signatures' : ''));\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tthis.setState({ auditCompleted: true });\n\t},\n\t\n\tsignaturesAreRequired: function(){\n\t\treturn (this.state.audit.meta_data != null && this.state.audit.meta_data.allow_signatures != null && this.state.audit.meta_data.allow_signatures && \n\t\t\t\tthis.state.audit.meta_data.signatures != null && this.state.audit.meta_data.signatures.length);\n\t},\n\t\n\t//Whether there is ANY signature data present\n\tsignaturesArePresent: function(){\n\t\tvar blnSignaturesPresent = false;\n\t\t\n\t\tif(this.state.answer.signatures != null && this.state.answer.signatures.length){\n\t\t\tfor (var k = 0, len = this.state.answer.signatures.length; k < len; k++) {\n\t\t\t\t//An array element may be null due to the way in which the signatures are saved (potentially out of order, via index)\n\t\t\t\tif(this.state.answer.signatures[k] != null){\n\t\t\t\t\t//We can streamline the logic test below, with the knowledge that a signature currently can't be saved in any way unless \n\t\t\t\t\t//there is both a name and file present, so we only need to test for one (name in this case):\n\t\t\t\t\t//[if this changes, this should be updated!] \n\t\t\t\t\t//if( (this.state.answer.signatures[k].name != null && this.state.answer.signatures[k].name.length) ||\n\t\t\t\t\t//\t(this.state.answer.signatures[k].file != null && this.state.answer.signatures[k].file.length) ||\n\t\t\t\t\t//\t(this.state.answer.signatures[k].comments != null && this.state.answer.signatures[k].comments.length) ){\n\t\t\t\t\tif(this.state.answer.signatures[k].name != null && this.state.answer.signatures[k].name.length){\t\n\t\t\t\t\t\tblnSignaturesPresent = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn blnSignaturesPresent;\n\t},\n\t\n\trender: function(){\n\t\tif (this.state.auditCompleted) {\n\t\t\t//Transition to audits page on audit completion\n\t\t\treturn (\n\t\t\t\t<Redirect push to={\"/calls/\" + this.state.customer.store_id + (this.blnAdmin ? \"/adminaudits\" : \"/audits\")} />\n\t\t\t);\n\t\t}\n\t\t\n\t\t//NB: MUST provide a value for savedSignatures below no matter what (by defaulting to [] if necessary as we've done), due to the way it's assigned within the SignatureGroup component\n\t\t//(otherwise causes issue where we're holding references to -and overwrite- other previous audits' signatures)\t\t\n\t\t\n\t\t/*var createGroup = function(group){\n\t\t\treturn (\n\t\t\t\t<QuestionGroup key={group.id} group={group} />\n\t\t\t);\n\t\t};*/\n\t\t//<br /><small>{this.state.customer.store_name}</small>\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div className=\"btn-bar\" role=\"group\">\n\t\t\t\t\t<Link className=\"btn btn-primary col-xs-12\" role=\"button\" to={\"/calls/\" + this.state.customer.store_id + (this.blnAdmin ? \"/adminaudits\" : \"/audits\")}><i className=\"fa fa-arrow-left\"></i> Back to <strong>{this.blnAdmin ? \"Admin Audits/Feedback\" : \"Audits/Feedback\"}</strong></Link>\n\t\t\t\t</div>\n\t\t\t\t<h1 className=\"sub-button-heading\" style={{marginBottom: 0}}>{this.state.audit.name}</h1>\n\t\t\t\t<div className=\"text-primary pull-right small\">* Compulsory</div>\n\t\t\t\t<div className=\"clear\"></div>\n\t\t\t\t<div>\n\t\t\t\t\t{this.state.audit.question_groups.map(function(group){ //this.state.audit.question_groups.map(createGroup, this)\n\t\t\t\t\t\t//For now we pass the entire audit answer (all question answers) to each group (i.e. not just those for the group, as we don't separate them out)\n\t\t\t\t\t\treturn <QuestionGroup key={group.id} group={group} auditAnswer={this.state.answer} onChange={this.saveAnswer} />;\n\t\t\t\t\t}, this)}\n\t\t\t\t</div>\n\t\t\t\t{\n\t\t\t\t\tthis.signaturesAreRequired() ?\n\t\t\t\t\t<SignatureGroup signatures={this.state.audit.meta_data.signatures} savedSignatures={this.state.answer.signatures != null ? this.state.answer.signatures : []} onChange={this.saveSignatures} /> : null\n\t\t\t\t}\n\t\t\t\t<div className=\"audit-footer\">\n\t\t\t\t\t<button className=\"btn btn-primary\" onClick={this.completeAudit}><i className=\"fa fa-check\"></i> Complete</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n});\n\nexport default AuditPage;","\"use strict\";\n\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nvar CallStore = require('../../stores/callStore');\nvar CustomerStore = require('../../stores/customerStore');\nvar LibraryStore = require('../../stores/libraryStore');\nvar LibraryActions = require('../../actions/libraryActions');\nvar Status = require('../../constants/actionStatuses');\nvar CategoryList = require('../library/categoryList');\nvar toastr = require('toastr');\nvar util = require('../../util.js');\n\nvar FilesPage = React.createClass({\n\tgetInitialState: function() {\n\t\treturn {\n\t\t\tcustomer: { 'id': 0, 'name': '' }, //Need customer ID\n\t\t\tcategoryTree: LibraryStore.getCategories(),\n\t\t\tcategoryTreeCounts: {}, //Need customer ID\n\t\t\tisLoading: false\n\t\t};\n\t},\n\t\n\tcomponentWillMount: function(){\n\t\tLibraryStore.addChangeListener(this._onChange);\n\t\t\n\t\tthis.screenTitle = 'Files';\n\n\t\t//Use WILL (rather than DID) mount, because then calling setState won't cause a re-render\n\t\t//(it's before rendering occurs)\n\t\tvar custID = this.props.match.params.id;  //from path 'calls/:id/files' or 'sales/customers/:id/files'\n\t\tif(custID){\n\t\t\tlet customer = CustomerStore.getCustomer(custID);\n\t\t\tif(customer == null){\n\t\t\t\tcustomer = { 'id': 0, 'name': '' };\n\t\t\t\tlet call = CallStore.getCallById(custID);\n\t\t\t\tif(call != null){\n\t\t\t\t\tcustomer.id = call.store_id;\n\t\t\t\t\tcustomer.name = call.store_name;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t//Set the customer and the category file counts for this customer (best to keep counts separate and obtain at page level for now)\n\t\t\tthis.setState({\n\t\t\t\tcustomer: customer, \n\t\t\t\tcategoryTreeCounts: LibraryStore.getCustomerCategoriesFileCounts(custID)\n\t\t\t});\n\t\t\tthis.screenTitle = customer.name.length ? customer.name : this.screenTitle;\n\t\t}\n\t\t\n\t\tutil.setScreenTitle(this.screenTitle);\n\t},\n\tcomponentDidMount: function(){\n\t\t//Refresh this customer's file library if it hasn't been refreshed yet today (or ever)\n\t\tif(util.isBeforeToday(LibraryStore.getLastRefreshForKey(this.state.customer.id))){\n\t\t\t//LibraryActions.refreshLibrary(this.state.customer.id);\n\t\t\tLibraryActions.doAfterAccessCheck('refreshLibrary', [this.state.customer.id]);\n\t\t}\n\t},\n\t\n\tcomponentWillUnmount: function(){\n\t\tLibraryStore.removeChangeListener(this._onChange);\n\t},\n\t\n\t_onChange: function(){\n\t\tvar status = LibraryStore.getStatus();\n\t\t//Library data has been refreshed \n\t\tif(status == Status.OK){\n\t\t\tthis.setState({isLoading: false, categoryTree: LibraryStore.getCategories(), categoryTreeCounts: LibraryStore.getCustomerCategoriesFileCounts(this.state.customer.id)});\n\t\t\ttoastr.success('Customer files refreshed');\n\t\t\n\t\t//Library data is being refreshed\n\t\t}else if(status == Status.PENDING){\n\t\t\tthis.setState({isLoading: true});\n\t\t\n\t\t//Library data was not able to be refreshed\n\t\t}else if(status == Status.ERROR){\n\t\t\tthis.setState({isLoading: false});\n\t\t\ttoastr.error('Unable to refresh customer files');\n\t\t\n\t\t//Library data partially refreshed\n\t\t}else if(status == Status.PARTIAL){\n\t\t\tthis.setState({isLoading: false, categoryTree: LibraryStore.getCategories(), categoryTreeCounts: LibraryStore.getCustomerCategoriesFileCounts(this.state.customer.id)});\n\t\t\ttoastr.warning('Unable to refresh all customer files');\n\t\t}\n\t},\n\t\n\trefreshLibrary: function(){\n\t\tif(!this.state.isLoading){\n\t\t\t//LibraryActions.refreshLibrary(this.state.customer.id);\n\t\t\tLibraryActions.doAfterAccessCheck('refreshLibrary', [this.state.customer.id]);\n\t\t}\n\t},\n\t\n\trender: function(){\n\t\t//<br /><small>{this.state.customer.name}</small>\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<button className=\"btn btn-header-refresh\" onClick={this.refreshLibrary} disabled={this.state.isLoading}><i className={\"fa fa-refresh fa-2x\" + (this.state.isLoading ? \" fa-spin\" : \"\")}></i></button>\n\t\t\t\t\n\t\t\t\t<div className=\"btn-bar\" role=\"group\">\n\t\t\t\t\t<Link className={\"btn btn-primary col-xs-12\" + (this.state.isLoading ? \" disabled\" : \"\")} role=\"button\" to={\"/\" + this.props.match.params.area + \"/\" + this.state.customer.id}><i className=\"fa fa-arrow-left\"></i> Back to <strong>Customer</strong></Link>\n\t\t\t\t</div> \n\t\t\t\t\n\t\t\t\t<h1 className=\"sub-button-heading\">Files</h1>\n\t\t\t\t<CategoryList categoryTree={this.state.categoryTree} categoryTreeCounts={this.state.categoryTreeCounts} assignmentKey={this.state.customer.id} filterTopCategoryId={util.customerLibraryCategoryID} isLoading={this.state.isLoading} />\n\t\t\t</div>\n\t\t);\n\t}\n});\n\nexport default FilesPage;","\"use strict\";\n\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nvar CallActions = require('../../actions/callActions');\nvar Status = require('../../constants/actionStatuses');\nvar Actions = require('../../constants/actionTypes');\nvar CallStore = require('../../stores/callStore');\nvar CustomerStore = require('../../stores/customerStore');\nvar ActionStatusStore = require('../../stores/actionStatusStore');\nvar CommentForm = require('./commentForm');\nvar CommentList = require('./commentList');\nvar util = require('../../util.js');\nvar toastr = require('toastr');\n\nvar CommentsPage = React.createClass({\n\tgetInitialState: function() {\n\t\treturn {\n\t\t\tcustomer: { 'id': 0, 'name': ''},\n\t\t\tcomments: [],\n\t\t\tnewComment: '',\n\t\t\tisLoading: false,\n\t\t\tisSubmitting: false, //form submission loading\n\t\t\tisFormVisible: false,\n\t\t\tisFormValid: false\n\t\t};\n\t},\n\t\n\tcomponentWillMount: function(){\n\t\tthis.screenTitle = 'Comments';\n\t\t\n\t\t//Use WILL (rather than DID) mount, because then calling setState won't cause a re-render\n\t\t//(it's before rendering occurs)\n\t\tvar custID = this.props.match.params.id;  //from path '/calls/:id/comments' or '/sales/customers/:id/comments'\n\t\tif(custID){\n\t\t\tvar customer = CustomerStore.getCustomer(custID);\n\t\t\tif(customer == null){\n\t\t\t\tcustomer = { 'id': 0, 'name': '', 'comments': [] };\n\t\t\t\tvar call = CallStore.getCallById(custID);\n\t\t\t\tif(call != null){\n\t\t\t\t\tcustomer.id = call.store_id;\n\t\t\t\t\tcustomer.name = call.store_name;\n\t\t\t\t}\n\t\t\t}\n\t\t\tvar { comments } = customer || { comments: [] };\n\t\t\tthis.setState({\n\t\t\t\tcustomer: customer, \n\t\t\t\tcomments: comments || []\n\t\t\t});\n\t\t\tthis.screenTitle = customer.name.length ? customer.name : this.screenTitle;\n\t\t}\n\t\t\n\t\tutil.setScreenTitle(this.screenTitle);\n\t},\n\t\n\tcomponentDidMount: function(){\n\t\tCustomerStore.addChangeListener(this._onChange);\n\t\tActionStatusStore.addChangeListener(this._onSubmissionChange);\n\t\t\n\t\t//Refresh this customer's comment list (and other details) if it hasn't been refreshed yet today (or ever)\n\t\tif(util.isBeforeToday(CustomerStore.getLastRefreshForCustomer(this.state.customer.id))){\n\t\t\t//CallActions.refreshCustomer(this.state.customer.id);\n\t\t\tCallActions.doAfterAccessCheck('refreshCustomer', [this.state.customer.id]);\n\t\t}\n\t},\n\t\n\tcomponentWillUnmount: function(){\n\t\tCustomerStore.removeChangeListener(this._onChange);\n\t\tActionStatusStore.removeChangeListener(this._onSubmissionChange);\n\t},\n\t\n\t_onChange: function(){\n\t\tvar status = CustomerStore.getStatus();\n\t\t//Customer detail (comments) data has been refreshed \n\t\tif(status == Status.OK){\n\t\t\tvar { comments } = CustomerStore.getCustomer(this.state.customer.id) || { comments: [] };\n\t\t\tthis.setState({\n\t\t\t\tisLoading: false, \n\t\t\t\tcomments: comments || []\n\t\t\t});\n\t\t\ttoastr.success('Comments refreshed');\n\t\t\n\t\t//Customer detail (comments) data is being refreshed\n\t\t}else if(status == Status.PENDING){\n\t\t\tthis.setState({isLoading: true});\n\t\t\n\t\t//Customer detail (comments) data was not able to be refreshed\n\t\t}else if(status == Status.ERROR){\n\t\t\t//var { comments } = CustomerStore.getCustomer(this.state.customer.id) || { comments: [] };\n\t\t\tthis.setState({\n\t\t\t\tisLoading: false\n\t\t\t\t//comments: comments || [] //probably unnecessary\n\t\t\t});\n\t\t\ttoastr.error('Unable to refresh comments');\n\t\t}\n\t},\n\t\n\t_onSubmissionChange: function(){\n\t\tvar status = ActionStatusStore.getStatus(Actions.CUSTOMER_ADD_COMMENT);\n\t\t//Customer comment has been added \n\t\tif(status == Status.OK){\n\t\t\tthis.setState({ isSubmitting: false, isFormVisible: false, isFormValid: false, newComment: '' });\n\t\t\ttoastr.success('Comment added');\n\t\t\n\t\t//Customer comment is being added\n\t\t}else if(status == Status.PENDING){\n\t\t\tthis.setState({ isSubmitting: true });\n\t\t\n\t\t//Customer comment was not able to be added\n\t\t}else if(status == Status.ERROR){\n\t\t\tthis.setState({ isSubmitting: false });\n\t\t\ttoastr.error('Unable to add comment');\n\t\t}\n\t},\n\t\n\trefreshComments: function(){\n\t\tif(!this.state.isLoading && !this.state.isSubmitting){\n\t\t\t//CallActions.refreshCustomer(this.state.customer.id);\n\t\t\tCallActions.doAfterAccessCheck('refreshCustomer', [this.state.customer.id]);\n\t\t}\n\t},\n\t\n\topenCommentForm: function(){\n\t\tthis.setState({isFormVisible: true});\n\t},\n\t\n\tcloseCommentForm: function(event){\n\t\tevent.preventDefault();\n\t\tthis.setState({isFormVisible: false});\n\t},\n\t\n\tsetNewCommentInfo: function(event){\n\t\tthis.state.newComment = event.target.value;\n\t\treturn this.setState({newComment: this.state.newComment, isFormValid: this.commentFormIsValid()});\n\t},\n\t\n\tcommentFormIsValid: function(){\n\t\tvar formIsValid = true;\n\t\t\n\t\tif(!this.state.newComment.length){\n\t\t\tformIsValid = false;\n\t\t}\n\t\t\n\t\treturn formIsValid;\n\t},\n\t\n\taddComment: function(event){\n\t\tevent.preventDefault();\n\t\t\n\t\tif(!this.state.isLoading && !this.state.isSubmitting){\n\t\t\t//Validate form (extra safeguard)\n\t\t\tif(!this.commentFormIsValid()){\n\t\t\t\ttoastr.error('Comment may not be blank');\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\t//We're good to submit this comment\n\t\t\tCallActions.addCustomerComment(this.state.customer.id, this.state.newComment);\n\t\t}\n\t},\n\t\n\trender: function(){\n\t\t//<br /><small>{this.state.customer.name}</small>\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<button className=\"btn btn-header-refresh\" onClick={this.refreshComments} disabled={this.state.isLoading || this.state.isSubmitting}><i className={\"fa fa-refresh fa-2x\" + (this.state.isLoading ? \" fa-spin\" : \"\")}></i></button>\n\t\t\t\t\n\t\t\t\t<div className=\"btn-bar\" role=\"group\">\n\t\t\t\t\t<Link className={\"btn btn-primary col-xs-6\" + (this.state.isLoading ? \" disabled\" : \"\")} role=\"button\" to={\"/\" + this.props.match.params.area + \"/\" + this.state.customer.id}><i className=\"fa fa-arrow-left\"></i> Back to <strong>Customer</strong></Link>\n\t\t\t\t\t<button className=\"btn btn-primary col-xs-6\" onClick={this.openCommentForm} disabled={this.state.isLoading || this.state.isSubmitting}><i className=\"fa fa-plus\"></i> Add Comment</button>\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t<h1 className=\"sub-button-heading\">Comments</h1>\n\t\t\t\t<CommentForm comment={this.state.newComment} onChange={this.setNewCommentInfo} onSave={this.addComment} onCancel={this.closeCommentForm} isLoading={this.state.isSubmitting} isVisible={this.state.isFormVisible && !this.state.isLoading} isValid={this.state.isFormValid} />\n\t\t\t\t<CommentList comments={this.state.comments} isLoading={this.state.isLoading} />\n\t\t\t</div>\n\t\t);\n\t}\n});\n\nexport default CommentsPage;","\"use strict\";\n\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nvar SalesActions = require('../../actions/salesActions');\nvar CommonActions = require('../../actions/commonActions');\nvar Status = require('../../constants/actionStatuses');\nvar SalesEntities = require('../../constants/salesEntities');\nvar Actions = require('../../constants/actionTypes');\nvar ActionStatusStore = require('../../stores/actionStatusStore');\nvar CustomerStore = require('../../stores/customerStore');\nvar ProductStore = require('../../stores/productStore');\nvar OrderStore = require('../../stores/orderStore');\nvar CallStore = require('../../stores/callStore');\nvar ProgressModal = require('../common/progressModal');\nvar option = require('../../constants/configOptions.js');\nvar config = require('../../config.js');\nvar util = require('../../util.js');\nvar toastr = require('toastr');\nvar _ = require('lodash');\n\nclass SalesPage extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\t\n\t\tthis.state = {\n\t\t\tisLoading: false,\n\t\t\tisRefreshProgressVisible: false,\t//Keep separate flag from loading (to allow for refresh progress window to remain open afterwards)\n\t\t\trefreshProgressPercentage: 0,\n\t\t\trefreshProgressDescription: '',\n\t\t\tsalesMessage: ''\n\t\t};\n\t\t\n\t\t//Flag for last action (indeterminate length)\n\t\t//NB: This can't be a state property, because occasionally it's not set before the first store changes come through, resulting in display issues\n\t\t//(This could be resolved by using the function version of setState() to only fire the refresh operation once lastPendingAction is properly set, \n\t\t//but then we're delaying the operation slightly, and there's no real need for lastPendingAction to be a state property.) \n\t\tthis.lastPendingAction = null;\n\t\t\n\t\tthis.progressDescriptions = {};\n\t\tthis.progressDescriptions['default'] \t\t\t\t\t= \"Refreshing\";\n\t\tthis.progressDescriptions[SalesEntities.PAYMENT_TERM] \t= \"Refreshing payment terms\";\n\t\tthis.progressDescriptions[SalesEntities.TAX_CLASS] \t\t= \"Refreshing tax classes\";\n\t\tthis.progressDescriptions[SalesEntities.CARRIER] \t\t= \"Refreshing carriers\";\n\t\tthis.progressDescriptions[SalesEntities.CURRENCY] \t\t= \"Refreshing currencies\";\n\t\tthis.progressDescriptions[SalesEntities.PRODUCT] \t\t= \"Refreshing products\";\n\t\tthis.progressDescriptions[SalesEntities.CATEGORY] \t\t= \"Refreshing categories\";\n\t\tthis.progressDescriptions[SalesEntities.ORDER] \t\t\t= \"Refreshing orders\";\n\t\tthis.progressDescriptions[SalesEntities.CUSTOMER] \t\t= \"Refreshing customers\";\n\t\tthis.progressDescriptions[SalesEntities.PRICE_LIST] \t= \"Refreshing price lists\";\n\t\tthis.progressDescriptions[SalesEntities.PRODUCT_RULE] \t= \"Refreshing product rules\";\n\t\t\n\t\tthis.completionMessages = {};\n\t\t\n\t\tthis.completionMessages[Actions.SALES_REFRESH] = {};\n\t\tthis.completionMessages[Actions.SALES_REFRESH][Status.OK] = \"Sales data refreshed\";\n\t\tthis.completionMessages[Actions.SALES_REFRESH][Status.ERROR] = \"Unable to refresh sales data\";\n\t\tthis.completionMessages[Actions.SALES_REFRESH][Status.PARTIAL] = \"Unable to refresh all sales data\";\n\t\t\n\t\tthis.completionMessages[Actions.ONLINE_SALES_REFRESH] = {};\n\t\tthis.completionMessages[Actions.ONLINE_SALES_REFRESH][Status.OK] = \"Sales data refreshed\";\n\t\tthis.completionMessages[Actions.ONLINE_SALES_REFRESH][Status.ERROR] = \"Unable to refresh sales data\";\n\t\tthis.completionMessages[Actions.ONLINE_SALES_REFRESH][Status.PARTIAL] = \"Unable to refresh all sales data\";\n\t\t\n\t\tthis.completionMessages[Actions.ALL_REFRESH] = {};\n\t\tthis.completionMessages[Actions.ALL_REFRESH][Status.OK] = \"Sales and calls data refreshed\";\n\t\tthis.completionMessages[Actions.ALL_REFRESH][Status.ERROR] = \"Unable to refresh sales and calls data\";\n\t\tthis.completionMessages[Actions.ALL_REFRESH][Status.PARTIAL] = \"Unable to refresh all sales and calls data\";\n\t}\n\t\n\tcomponentWillMount(){\n\t\tthis.screenTitle = 'My Sales';\n\t\tutil.setScreenTitle(this.screenTitle);\n\t}\n\t\n\tcomponentDidMount() {\n\t\tActionStatusStore.addChangeListener(this._onChange);\n\t\t\n\t\t//We're in an 'online' configuration, where we auto-refresh just the minimal information\n\t\tif(config.get(option.FUNC_ONLINE_CUSTOMERS) && config.get(option.FUNC_ONLINE_PRODUCTS)){\n\t\t\t\n\t\t\t//We now only auto-refresh every day in this 'online' scenario (or also every full page refresh)\n\t\t\tif(util.isBeforeToday(ActionStatusStore.getLastTimestampForSuccessfulAction(Actions.ONLINE_SALES_REFRESH))){\n\t\t\t\tthis.refreshSalesDataForOnline();\n\t\t\t}\n\t\t\t\n\t\t}else{\n\t\t\tthis.setState({\n\t\t\t\tsalesMessage: this.refreshSalesMessage()\n\t\t\t});\n\t\t}\n\t}\n\t\n\tcomponentWillUnmount() {\n\t\tActionStatusStore.removeChangeListener(this._onChange);\n\t}\n\t\n\t_onChange = () => {\n\t\t//Obtain refresh info\n\t\tlet refreshStatus = ActionStatusStore.getStatus(this.lastPendingAction);\n\t\tlet refreshEntityStatuses = ActionStatusStore.getEntityStatuses(this.lastPendingAction);\n\t\tlet refreshProgressPercentage = ActionStatusStore.getPercentageComplete(this.lastPendingAction);\n\t\t\n\t\t//A refresh is in progress\n\t\tif(refreshStatus == Status.PENDING){\n\t\t\tlet currentRefreshEntity = 'default';\n\t\t\tif(refreshEntityStatuses != null){\n\t\t\t\tfor(var entity in refreshEntityStatuses){\n\t\t\t\t\tif(refreshEntityStatuses[entity] == Status.PENDING){\n\t\t\t\t\t\tcurrentRefreshEntity = entity;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.setState({\n\t\t\t\tisLoading: true,\n\t\t\t\tisRefreshProgressVisible: true,\n\t\t\t\trefreshProgressPercentage: refreshProgressPercentage,\n\t\t\t\trefreshProgressDescription: this.progressDescriptions[currentRefreshEntity] + \" (\" + Math.round(refreshProgressPercentage) + \"%)\"\n\t\t\t});\n\t\t\n\t\t//A refresh has completed\t\n\t\t}else{\n\t\t\t/*let blnAllSuccessful = true;\n\t\t\tlet blnAllUnsuccessful = true;\n\t\t\tfor(var entity in refreshEntityStatuses){\n\t\t\t\tif(refreshEntityStatuses[entity] == Status.OK){\n\t\t\t\t\tblnAllUnsuccessful = false;\n\t\t\t\t} else if(refreshEntityStatuses[entity] == Status.ERROR){\n\t\t\t\t\tblnAllSuccessful = false;\n\t\t\t\t} else{\n\t\t\t\t\tblnAllUnsuccessful = false;\n\t\t\t\t\tblnAllSuccessful = false;\n\t\t\t\t}\n\t\t\t}*/\n\t\t\t\n\t\t\tthis.setState({\n\t\t\t\tisLoading: false,\n\t\t\t\tisRefreshProgressVisible: true,\n\t\t\t\trefreshProgressPercentage: refreshProgressPercentage,\n\t\t\t\trefreshProgressDescription: \"Complete (\" + Math.round(refreshProgressPercentage) + \"%)\",\n\t\t\t\tsalesMessage: this.refreshSalesMessage()\n\t\t\t});\n\t\t\t\n\t\t\t//Keep the window open long enough to see completion message\n\t\t\tsetTimeout(this.closeRefreshProgressModal, 1000);\n\t\t\t\n\t\t\t/*if(blnAllSuccessful){\n\t\t\t\ttoastr.success(\"Sales data refreshed\");\n\t\t\t}else if(blnAllUnsuccessful){\n\t\t\t\ttoastr.error(\"Unable to refresh sales data\");\n\t\t\t}else{\n\t\t\t\ttoastr.warning('Unable to refresh all sales data');\n\t\t\t}*/\n\t\t\t\n\t\t\tif(this.lastPendingAction != null && this.completionMessages[this.lastPendingAction] != null){\n\t\t\t\tif(refreshStatus == Status.OK){\n\t\t\t\t\ttoastr.success(this.completionMessages[this.lastPendingAction][Status.OK]);\n\t\t\t\t}else if(refreshStatus == Status.ERROR){\n\t\t\t\t\ttoastr.error(this.completionMessages[this.lastPendingAction][Status.ERROR]);\n\t\t\t\t}else if(refreshStatus == Status.PARTIAL){\n\t\t\t\t\ttoastr.warning(this.completionMessages[this.lastPendingAction][Status.PARTIAL]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\t\n\t}\n\t\n\trefreshSalesMessage = () => {\n\t\tlet salesMessage = '';\n\t\t\n\t\t//(We don't display this message when in 'online' mode)\n\t\tif(!config.get(option.FUNC_ONLINE_CUSTOMERS) || !config.get(option.FUNC_ONLINE_PRODUCTS)){\n\t\t\tlet blnHaveCustomers = (CustomerStore.getActiveCustomersCount() > 0);\n\t\t\tlet blnHaveProducts = (ProductStore.getActiveProductsCount() > 0);\n\t\t\t\n\t\t\tif(!blnHaveCustomers || !blnHaveProducts){\n\t\t\t\tlet noCustNoProd = \"\";\n\t\t\t\tif(!blnHaveCustomers && !blnHaveProducts){\n\t\t\t\t\tnoCustNoProd = \"no customers or products\";\n\t\t\t\t}else if(!blnHaveCustomers){\n\t\t\t\t\tnoCustNoProd = \"no customers\";\n\t\t\t\t}else{\n\t\t\t\t\tnoCustNoProd = \"no products\";\n\t\t\t\t}\n\t\t\t\tsalesMessage = \"You have \" + noCustNoProd + \" at the moment.\\n Please refresh your sales data using the button above.\";\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn salesMessage;\n\t}\n\t\n\trefreshSalesData = (event) => {\n\t\tif(event != null){ //triggered by a link click\n\t\t\tevent.preventDefault();\n\t\t}\n\t\t\n\t\tif(!this.state.isLoading){\n\t\t\tthis.lastPendingAction = Actions.SALES_REFRESH;\n\t\t\t//Obtain the full list of customers we need to have in our list \n\t\t\t//(call customers plus any associated with current orders)\n\t\t\t//[Note we now also include any missing customers residing in just the customer store (requested via sales)]\n\t\t\tlet arrCustomerIDs = _.union(CustomerStore.getCustomerIDs(), CallStore.getCallCustomerIDs(), OrderStore.getOrderCustomerIDs()); \n\t\t\t\n\t\t\t//Access check is built in by default\n\t\t\t//SalesActions.doAfterAccessCheck('refreshSalesData', [ProductStore.getLastRefresh(), ProductStore.getRefreshRetryIDs(), OrderStore.getPastOrdersLastRefresh(), OrderStore.getPastOrdersRefreshRetryIDs(), arrCustomerIDs]);\n\t\t\tSalesActions.refreshSalesData(ProductStore.getLastRefresh(), ProductStore.getRefreshRetryIDs(), OrderStore.getPastOrdersLastRefresh(), OrderStore.getPastOrdersRefreshRetryIDs(), arrCustomerIDs);\n\t\t}\n\t}\n\t\n\trefreshSalesDataForOnline = () => {\n\t\t//if(!this.state.isLoading){\n\t\t\tthis.lastPendingAction = Actions.ONLINE_SALES_REFRESH;\n\n\t\t\t//Access check is built in by default\n\t\t\tSalesActions.refreshSalesDataForOnline();\t\t\t\n\t\t//}\n\t}\n\t\n\trefreshAll = (event) => {\n\t\tif(event != null){ //triggered by a link click\n\t\t\tevent.preventDefault();\n\t\t}\n\t\t\n\t\tif(!this.state.isLoading){\n\t\t\tthis.lastPendingAction = Actions.ALL_REFRESH;\n\t\t\t//Obtain the full list of customers we need to have in our list \n\t\t\t//(call customers plus any associated with current orders)\n\t\t\t//[Note we now also include any missing customers residing in just the customer store (requested via sales)]\n\t\t\tlet arrCustomerIDs = _.union(CustomerStore.getCustomerIDs(), CallStore.getCallCustomerIDs(), OrderStore.getOrderCustomerIDs()); \n\t\t\t\n\t\t\t//Access check is built in by default\n\t\t\t//CommonActions.doAfterAccessCheck('refreshAll', [ProductStore.getLastRefresh(), ProductStore.getRefreshRetryIDs(), OrderStore.getPastOrdersLastRefresh(), OrderStore.getPastOrdersRefreshRetryIDs(), arrCustomerIDs]);\n\t\t\tCommonActions.refreshAll(ProductStore.getLastRefresh(), ProductStore.getRefreshRetryIDs(), OrderStore.getPastOrdersLastRefresh(), OrderStore.getPastOrdersRefreshRetryIDs(), arrCustomerIDs);\n\t\t}\n\t}\n\t\n\tcloseRefreshProgressModal = () => {\n\t\tthis.setState({isRefreshProgressVisible: false});\n\t}\n\t\n\trender() {\n\t\t//<h1>My Sales</h1>\n\t\t//Refresh Sales Data\n\t\t\n\t\tconst refreshLocation = { \n\t\t\tpathname: '/refresh', \n\t\t\tstate: { \n\t\t\t\tfrom: this.props.location,\n\t\t\t\tfromTitle: this.screenTitle \n\t\t\t} \n\t\t};\n\t\t\n\t\t\t\t/*<button className=\"btn btn-header-refresh\" onClick={this.refreshSalesData} disabled={this.state.isLoading}>\n\t\t\t\t\t<i className={\"fa fa-refresh fa-2x\" + (this.state.isLoading ? \" fa-spin\" : \"\")}></i>\n\t\t\t\t</button>*/\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t{ (config.get(option.FUNC_ONLINE_CUSTOMERS) && config.get(option.FUNC_ONLINE_PRODUCTS)) ?\n\t\t\t\t\t<button className=\"btn btn-header-refresh\" onClick={this.refreshSalesDataForOnline} disabled={this.state.isLoading}>\n\t\t\t\t\t\t<i className={\"fa fa-refresh fa-2x\" + (this.state.isLoading ? \" fa-spin\" : \"\")}></i>\n\t\t\t\t\t</button>\n\t\t\t\t\t: \n\t\t\t\t\t<div className=\"btn-group btn-group-header-refresh\">\n\t\t\t\t\t\t<button className=\"btn btn-header-refresh dropdown-toggle\" disabled={this.state.isLoading} data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n\t\t\t\t\t\t\t<i className={\"fa fa-refresh fa-2x\" + (this.state.isLoading ? \" fa-spin\" : \"\")}></i>\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<ul className=\"dropdown-menu\">\n\t\t\t\t\t\t\t<li><a href=\"#\" onClick={this.refreshSalesData} className={(this.state.isLoading ? \" disabled\" : \"\")}>Refresh Sales</a></li>\n\t\t\t\t\t\t\t<li><a href=\"#\" onClick={this.refreshAll} className={(this.state.isLoading ? \" disabled\" : \"\")}>Refresh All</a></li>\n\t\t\t\t\t\t\t<li><Link to={refreshLocation} className={(this.state.isLoading ? \" disabled\" : \"\")}>More Options</Link></li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</div> \n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t{ this.state.salesMessage.length ? \n\t\t\t\t\t<div className=\"alert alert-info\" role=\"alert\"><span style={{whiteSpace: 'pre-line'}}>{this.state.salesMessage}</span></div> : null }\n\t\t\t\t\n\t\t\t\t{ this.state.isRefreshProgressVisible ? \n\t\t\t\t\t<ProgressModal \n\t\t\t\t\t\tpercentage={this.state.refreshProgressPercentage}\n\t\t\t\t\t\tdescription={this.state.refreshProgressDescription}\n\t\t\t\t\t\ttitle=\"Refresh Progress\"\n\t\t\t\t\t\tisLoading={this.state.isLoading} \n\t\t\t\t\t/> : null }\n\t\t\t\t\n\t\t\t\t<div className=\"list-group list-group-spaced mor-list\" style={{marginTop: 0}}>\n\t\t\t\t\t<Link to=\"/sales/orders\" className=\"list-group-item\">\n\t\t\t\t\t\t<h4 className=\"list-group-item-heading\"><i className=\"fa fa-shopping-cart\"></i> My Orders</h4>\n\t\t\t\t\t\t<p className=\"list-group-item-text\">Create and submit your orders.</p>\n\t\t\t\t\t</Link>\n\t\t\t\t\t<Link to=\"/sales/products\" className=\"list-group-item\">\n\t\t\t\t\t\t<h4 className=\"list-group-item-heading\"><i className=\"fa fa-list-ul\"></i> Products</h4>\n\t\t\t\t\t\t<p className=\"list-group-item-text\">View products.</p>\n\t\t\t\t\t</Link>\n\t\t\t\t\t{ config.get(option.UI_BUTTON_CUSTOMERS) ? \n\t\t\t\t\t\t<Link to=\"/sales/customers\" className=\"list-group-item\">\n\t\t\t\t\t\t\t<h4 className=\"list-group-item-heading\"><i className=\"fa fa-users\"></i> Customers</h4>\n\t\t\t\t\t\t\t<p className=\"list-group-item-text\">View customers.</p>\n\t\t\t\t\t\t</Link> : null }\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default SalesPage;","\"use strict\";\n\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nvar SalesActions = require('../../actions/salesActions');\nvar Status = require('../../constants/actionStatuses');\nvar CustomerStore = require('../../stores/customerStore');\nvar OrderStore = require('../../stores/orderStore');\nvar OrderList = require('./orderList');\nvar util = require('../../util.js');\nvar toastr = require('toastr');\nvar option = require('../../constants/configOptions.js');\nvar config = require('../../config.js');\n\nclass OrdersPage extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\t\n\t\tthis.state = {\n\t\t\torders: OrderStore.getOrders(),\n\t\t\tisLoading: false,\n\t\t\tordersToSubmit: false //whether or not we have any orders ready to send back to server\n\t\t};\n\t}\n\t\n\tcomponentWillMount(){\n\t\tutil.setScreenTitle(\"My Orders\");\n\t}\n\t\n\tcomponentDidMount() {\n\t\tOrderStore.addChangeListener(this._onChange);\n\t\t\n\t\t//Refresh the submissions indicator\n\t\tthis.refreshOrderSubmissionStatusIndicator();\n\t\t\n\t\t//If we have a directive to make a submission(s) on arrival (OrderPage: place-and-submit operation), do so!\n\t\tlet { state: locationState } = this.props.location;\n\t\tif(locationState && locationState.submitOrders && locationState.submitOrders.length){\n\t\t\tthis.submitOrders(locationState.submitOrders);\n\t\t}\n\t}\n\t\n\tcomponentWillUnmount() {\n\t\tOrderStore.removeChangeListener(this._onChange);\n\t}\n\t\n\t_onChange = () => {\n\t\tlet status = OrderStore.getStatus();\n\t\t//Orders have been submitted \n\t\tif(status == Status.OK){\n\t\t\ttoastr.success('Order' + (this.blnMultipleSubmissions ? 's' : '') + ' submitted');\n\t\t\tthis.setState({\n\t\t\t\tisLoading: false, \n\t\t\t\torders: OrderStore.getOrders() \n\t\t\t});\n\t\t\t//Refresh the submissions indicator\n\t\t\tthis.refreshOrderSubmissionStatusIndicator();\n\t\t\n\t\t//Orders are being submitted\n\t\t}else if(status == Status.PENDING){\n\t\t\tthis.setState({isLoading: true});\n\t\t\n\t\t//Orders were not able to be submitted\n\t\t}else if(status == Status.ERROR){\n\t\t\ttoastr.error('Unable to submit order' + (this.blnMultipleSubmissions ? 's' : ''));\n\t\t\tthis.setState({\n\t\t\t\tisLoading: false, \n\t\t\t\torders: OrderStore.getOrders() //probably unnecessary\n\t\t\t});\n\t\t\n\t\t//Orders were partially submitted\t\n\t\t}else if(status == Status.PARTIAL){\n\t\t\ttoastr.warning('Unable to submit all orders');\n\t\t\tthis.setState({\n\t\t\t\tisLoading: false, \n\t\t\t\torders: OrderStore.getOrders() \n\t\t\t});\n\t\t\t//Refresh the submissions indicator\n\t\t\tthis.refreshOrderSubmissionStatusIndicator();\n\t\t}\n\t}\n\t\n\tsubmitOrders = (specificOrderIDs = []) => {\t\n\t\tif(!this.state.isLoading){\n\t\t\t//Sanitise event inputs and get orders for submission (either specific or all eligible) \n\t\t\tif(!Array.isArray(specificOrderIDs)) { specificOrderIDs = [] };\n\t\t\tvar arrOrderSubmissions = OrderStore.getOrderSubmissions(specificOrderIDs);\n\t\t\t\n\t\t\tif(!arrOrderSubmissions.length){\n\t\t\t\ttoastr.success('No orders to submit');\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tthis.blnMultipleSubmissions = (arrOrderSubmissions.length > 1);\n\t\t\t\n\t\t\tSalesActions.submitOrdersAndRelatedData(arrOrderSubmissions, CustomerStore.getValidCustomerVisits());\n\t\t\t//SalesActions.submitOrders(arrOrderSubmissions);\t//SalesActions.doAfterAccessCheck('submitOrders', [arrOrderSubmissions]);\n\t\t}\n\t}\n\t\n\trefreshOrderSubmissionStatusIndicator = () => {\n\t\tvar arrOrderSubmissions = OrderStore.getOrderSubmissions();\n\t\t\n\t\tthis.setState({\n\t\t\tordersToSubmit: (arrOrderSubmissions.length > 0)\n\t\t});\n\t}\n\t\n\trender() {\n\t\t//<Link className=\"btn btn-primary\" role=\"button\" to=\"/sales\"><i className=\"fa fa-arrow-left\"></i> Back to <strong>My Sales</strong></Link>\n\t\t//<h1>My Orders</h1>\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<button className=\"btn btn-header-submit\" style={{right: '8px'}} onClick={this.submitOrders} disabled={this.state.isLoading}><i className=\"fa fa-upload fa-2x\"></i>{this.state.ordersToSubmit ? <i className=\"fa fa-circle icon-badge\"></i> : null}</button>\n\t\t\t\t\n\t\t\t\t<div className=\"btn-bar\" role=\"group\">\n\t\t\t\t\t<Link className={\"btn btn-primary col-xs-4\" + (this.state.isLoading ? \" disabled\" : \"\")} role=\"button\" to=\"/sales\"><i className=\"fa fa-arrow-left\"></i> Back</Link>\n\t\t\t\t\t<Link className={\"btn btn-primary col-xs-4\" + (this.state.isLoading ? \" disabled\" : \"\")} role=\"button\" to=\"/sales/orders/past\"><i className=\"fa fa-history\"></i> Past Orders</Link>\n\t\t\t\t\t<Link className={\"btn btn-primary col-xs-4\" + (this.state.isLoading ? \" disabled\" : \"\")} role=\"button\" to={\"/sales/orders/new\"}><i className=\"fa fa-plus\"></i> New Order</Link>\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t{ !this.state.isLoading && config.activeProfile == option.PROFILE_B2B && this.state.ordersToSubmit && \n\t\t\t\t<div className=\"alert alert-info\" style={{margin: '15px 0 10px'}} role=\"alert\">\n\t\t\t\t\t<button className=\"btn btn-primary pull-right\" style={{marginLeft: '1.25rem'}} onClick={this.submitOrders} disabled={this.state.isLoading}><i className=\"fa fa-upload\"></i></button>\n\t\t\t\t\t<span style={{whiteSpace: 'pre-line'}}>{\"You have unsubmitted placed orders.\\n Please check your connection and submit them.\\n\"}</span>\n\t\t\t\t</div> }\n\t\t\t\t\n\t\t\t\t<OrderList orders={this.state.orders} isLoading={this.state.isLoading} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default OrdersPage;","\"use strict\";\n\nimport React from 'react';\nimport { Link, Redirect } from 'react-router-dom';\nvar Actions = require('../../constants/actionTypes');\nvar SalesActions = require('../../actions/salesActions');\nvar CallActions = require('../../actions/callActions'); //(for customer search, customer details)\nvar Status = require('../../constants/actionStatuses');\nvar OrderStatuses = require('../../constants/orderStatuses');\nvar OrderStore = require('../../stores/orderStore');\nvar OrderForm = require('./orderForm');\nvar OrderInfoForm = require('./orderInfoForm');\nvar CustomerStore = require('../../stores/customerStore');\nvar CustomerSelectList = require('./customerSelectList');\nvar ProductStore = require('../../stores/productStore');\nvar ProductSelectList = require('./productSelectList');\nvar SearchFilters = require('../../constants/searchFilters');\nvar SearchTypes = require('../../constants/searchTypes');\nvar PromptModal = require('../common/promptModal');\nvar option = require('../../constants/configOptions.js');\nvar config = require('../../config.js');\nvar util = require('../../util.js');\nvar toastr = require('toastr');\n\nclass OrderPage extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\t\n\t\tthis.screenTitle = 'Order';\n\t\tthis.orderCancelConfirmDescription = 'Are you sure you want to cancel this order?';\n\t\t\n\t\tthis.selectedRefreshedCustomerID = null;\n\t\t\n\t\tlet order = {};\n\t\tlet orderID = props.match.params.oid;  //from path 'sales/orders/:oid'\n\t\tif(orderID){\n\t\t\t//Obtain fresh or existing order\n\t\t\torder = OrderStore.getOrder((orderID == 'new') ? null : orderID);\n\t\t}\n\t\t\n\t\tthis.state = {\n\t\t\torder: order,\n\t\t\tpaymentTerms: OrderStore.getPaymentTerms(),\n\t\t\ttaxClasses: OrderStore.getTaxClasses(),\n\t\t\tcarriers: OrderStore.getCarriers(),\n\t\t\tcustomerLocations: [],\n\t\t\torderResolved: false, \t//[signifies order completed or cancelled]\n\t\t\torderSubmit: false,\t\t//[signifies order should also be submitted after placement]\n\t\t\tcustomerSearchTerm: '',\n\t\t\tcustomerSearchPage: 1,\n\t\t\tcustomerSearchPageSize: null,\n\t\t\tcustomerSearchTotal: null,\n\t\t\tcustomerSearchTotalPages: null,\n\t\t\tcustomerSearchResults: [],\n\t\t\tisCustomerSearchLoading: false,\n\t\t\tisCustomerSelectionLoading: false,\n\t\t\tisCustomerSelectionVisible: false,\n\t\t\tproductSearchTerm: '',\n\t\t\tproductSearchPage: 1,\n\t\t\tproductSearchPageSize: null,\n\t\t\tproductSearchFilters: null,\n\t\t\tproductSearchTotal: null,\n\t\t\tproductSearchTotalPages: null,\n\t\t\tproductSearchResults: [],\n\t\t\tisProductSearchLoading: false,\n\t\t\tisProductSelectionLoading: false,\n\t\t\tisProductSelectionVisible: false,\n\t\t\tisOrderCancelConfirmationVisible: false,\n\t\t\tcategories: ProductStore.getCategoryTree()\n\t\t};\n\t}\n\t\n\tcomponentWillMount(){\n\t\tif(this.orderHasCustomer()){\n\t\t\tthis.screenTitle = this.state.order.customer_name;\n\t\t}\n\t\tutil.setScreenTitle(this.screenTitle);\n\t}\n\t\n\tcomponentDidMount() {\n\t\tOrderStore.addChangeListener(this._onChange);\n\t\tCustomerStore.addChangeListener(this._onCustomerSearchOrSelectChange);\n\t\t//CustomerStore.addChangeListener(this._onCustomerDetailChange);\n\t\tProductStore.addChangeListener(this._onProductSearchChange);\n\t\t//ProductStore.addChangeListener(this._onProductDetailChange);\n\t\t\n\t\t//Special case: B2B (auto-selected customer) for new order ('sales/orders/new')\n\t\tif(config.get(option.FUNC_CUSTOMER_AUTOSELECTION) && this.props.match.params.oid == 'new'){\n\t\t\t//We auto-select the known B2B customer for the order\n\t\t\t//[We don't check the B2B customer 'is_approved_for_orders' flag although it is available (since \n\t\t\t//the B2B customer is pre-loaded by sales page refresh) via: CustomerStore.getCustomer(util.getB2BCustomerID())]\n\t\t\tthis.selectCustomer({ \n\t\t\t\tid: util.getB2BCustomerID(),\n\t\t\t\tis_approved_for_orders: 1 \n\t\t\t});\n\t\t}else{\n\t\t\tthis.initialiseCustomerLocations();\n\t\t\tthis.initialiseCustomerEntry();\n\t\t\tthis.checkCompulsorySelections();\n\t\t}\n\t}\n\t\n\tcomponentWillUnmount() {\n\t\tOrderStore.removeChangeListener(this._onChange);\n\t\tCustomerStore.removeChangeListener(this._onCustomerSearchOrSelectChange);\n\t\t//CustomerStore.removeChangeListener(this._onCustomerDetailChange);\n\t\tProductStore.removeChangeListener(this._onProductSearchChange);\n\t\t//ProductStore.removeChangeListener(this._onProductDetailChange);\n\t}\n\t\n\t_onChange = () => {\n\t\tthis.setState({ order: OrderStore.getOrder(this.state.order.id) });\n\t\t\n\t\t//[We exclude the B2B (auto-selected customer) case here, as it doesn't require waiting for the customer server selection (refresh)]\n\t\tif(config.get(option.FUNC_ONLINE_CUSTOMERS) && !config.get(option.FUNC_CUSTOMER_AUTOSELECTION)){\n\t\t\t//Since checkCompulsorySelections() can trigger a dispatch in the 'online' case, we queue it up for after\n\t\t\t//the relevant completed action dispatches\n\t\t\t//Could set this up wherever we trigger a relevant action (e.g. in selectCustomer()), \n\t\t\t//but just-in-time here works just fine for our needs \n\t\t\tutil.setPostCompletedActionDispatchCallback(Actions.CUSTOMER_REFRESH, this, 'checkCompulsorySelections');\n\t\t\tutil.setPostCompletedActionDispatchCallback(Actions.ORDER_SAVE, this, 'checkCompulsorySelections');\n\t\t}else{\n\t\t\t//Luckily the order save dispatch seems to finish before the product select modal appears (product search dispatch)\n\t\t\tthis.checkCompulsorySelections();\n\t\t}\n\t}\n\t\n//===================\t\n\n\t_onCustomerSearchOrSelectChange = () => {\n\t\t//Customer searching can be remote or local, depending on the FUNC_ONLINE_CUSTOMERS config setting\n\t\tlet searchStatus = CustomerStore.getStatus(config.get(option.FUNC_ONLINE_CUSTOMERS) ? Actions.CUSTOMERS_SEARCH_SERVER : Actions.CUSTOMERS_SEARCH_LOCAL);\n\t\tlet searchType = config.get(option.FUNC_ONLINE_CUSTOMERS) ? SearchTypes.SERVER : SearchTypes.LOCAL;\n\t\t\n\t\t//Customer search data has been refreshed\n\t\tif(searchStatus == Status.OK){\n\t\t\tthis.setState({\n\t\t\t\tisCustomerSearchLoading: false, \n\t\t\t\tcustomerSearchTerm: CustomerStore.getSearchTerm(searchType),\n\t\t\t\tcustomerSearchPage: CustomerStore.getSearchPage(searchType),\n\t\t\t\tcustomerSearchPageSize: CustomerStore.getSearchPageSize(searchType),\n\t\t\t\tcustomerSearchTotal: CustomerStore.getSearchTotal(searchType),\n\t\t\t\tcustomerSearchTotalPages: CustomerStore.getSearchTotalPages(searchType), \n\t\t\t\tcustomerSearchResults: CustomerStore.getSearchResults(searchType)\n\t\t\t});\n\t\t\t//toastr.success('Customer search results refreshed');\n\t\t\n\t\t//Customer search data is being refreshed\n\t\t}else if(searchStatus == Status.PENDING){\n\t\t\tthis.setState({\n\t\t\t\tisCustomerSearchLoading: true, \n\t\t\t\tcustomerSearchTerm: CustomerStore.getSearchTerm(searchType),\n\t\t\t\tcustomerSearchPage: CustomerStore.getSearchPage(searchType)\n\t\t\t});\n\t\t\n\t\t//Customer search data was not able to be refreshed\n\t\t}else if(searchStatus == Status.ERROR){\n\t\t\tthis.setState({\n\t\t\t\tisCustomerSearchLoading: false, \n\t\t\t\tcustomerSearchTerm: CustomerStore.getSearchTerm(searchType),\n\t\t\t\tcustomerSearchPage: CustomerStore.getSearchPage(searchType)\n\t\t\t});\n\t\t\t//toastr.error('Unable to refresh customer search results');\n\t\t}\n\t\t\n\t\t//We're server selecting (refreshing) a customer\n\t\t//[Note that the whole customer server select (customer refresh and order saving) could be wrapped into a composite action queue and then \n\t\t//we could track the status of the entire action rather than just this piece!]\n\t\tif(this.selectedRefreshedCustomerID != null){\n\t\t\tlet refreshStatus = CustomerStore.getStatus(); //[CUSTOMER_REFRESH status is currently the default status in CustomerStore]\n\t\t\t\n\t\t\t//Customer detail data has been refreshed (including partial status for completeness)\n\t\t\tif(refreshStatus == Status.OK || refreshStatus == Status.PARTIAL){\n\t\t\t\tlet existingCustomer = CustomerStore.getCustomer(this.selectedRefreshedCustomerID);\n\t\t\t\t\t\n\t\t\t\t//Safeguard (customer details in store)\n\t\t\t\tif(existingCustomer != null){\n\t\t\t\t\t//[This is not used as creates a dispatch while dispatching. Instead, we've ensured that orderStore has been updated accordingly via dispatch callback.]\n\t\t\t\t\t//[Update: this could also now be achieved using util.setPostCompletedActionDispatchCallback()]\n\t\t\t\t\t//this.loadCustomerOrderDetails(CustomerStore.getCustomer(this.selectedRefreshedCustomerID)); //this.state.order.customer_id\n\t\t\t\t\tthis.setState({ customerLocations: (existingCustomer.locations != null ? existingCustomer.locations : []) });\n\t\t\t\t\tthis.screenTitle = existingCustomer.name;\n\t\t\t\t\tutil.setScreenTitle(this.screenTitle);\n\t\t\t\t\tthis.hideCustomerSelectionList(false);\n\t\t\t\t\ttoastr.success('Customer details loaded');\n\t\t\t\t}\n\t\t\t\n\t\t\t//Customer detail data was not able to be refreshed\n\t\t\t}else if(refreshStatus == Status.ERROR){\n\t\t\t\ttoastr.error('Unable to load customer details');\n\t\t\t}\n\t\t\t\n\t\t\tif(refreshStatus != Status.PENDING){\n\t\t\t\tthis.selectedRefreshedCustomerID = null; //reset this ID/flag once completed\n\t\t\t}\n\t\t\t\n\t\t\tthis.setState({ isCustomerSelectionLoading: (refreshStatus == Status.PENDING) });\n\t\t}\n\t}\n\t\n\tshowCustomerSelectionList = () => {\n\t\t//Do an initial search without filters [Update: this is kicked off within the list component (after mounting)]\n\t\t//this.searchCustomers();\n\t\t//Display search popup (with cleared results) \n\t\tthis.setState({\n\t\t\tisCustomerSelectionVisible: true, \n\t\t\tcustomerSearchTerm: '',\n\t\t\tcustomerSearchPage: 1, \n\t\t\tcustomerSearchTotalPages: null, \n\t\t\tcustomerSearchResults: []\n\t\t});\n\t}\n\t\n\t//[blnCheckCustomerSelected may not be strictly necessary (could potentially ALWAYS perform the check), but there to prevent potential race condition]\n\thideCustomerSelectionList = (blnCheckCustomerSelected) => {\n\t\tblnCheckCustomerSelected = blnCheckCustomerSelected == null ? true : blnCheckCustomerSelected; //default to running the check\n\t\t\n\t\tthis.setState({isCustomerSelectionVisible: false});\n\t\t\n\t\tif(blnCheckCustomerSelected && !this.orderHasCustomer()){\n\t\t\tthis.cancelOrder();\n\t\t}\n\t}\n\t\n\tsearchCustomers = (searchTerm, searchPage) => {\n\t\t//if(!this.state.isCustomerSearchLoading){\n\t\t\tSalesActions.searchCustomers(searchTerm, searchPage, 5);\n\t\t//}\n\t}\n\t\n\tselectCustomer = (customer) => { //customerID\n\t\tif(!this.state.isCustomerSearchLoading){\n\t\t\tif(customer.is_approved_for_orders == 1){\n\t\t\t\t//For now, if the FUNC_ONLINE_CUSTOMERS config setting is on, let's ALWAYS refresh the \n\t\t\t\t//customer details from server (not just if we don't have them in store), \n\t\t\t\t//followed by the loading/saving of the customer against this order\n\t\t\t\t//Update: In the B2B (auto-selected customer) case, the B2B customer is pre-loaded by sales page refresh and available in \n\t\t\t\t//the customerStore, so we don't need to server select (refresh) the customer here\n\t\t\t\tif(config.get(option.FUNC_ONLINE_CUSTOMERS) && !config.get(option.FUNC_CUSTOMER_AUTOSELECTION)){\n\t\t\t\t\t//this.state.order.customer_id = customer.id;\n\t\t\t\t\tthis.selectedRefreshedCustomerID = customer.id;\n\t\t\t\t\tCallActions.refreshCustomer(customer.id, false, [this.state.order.id]);\n\t\t\t\t\t//[See _onCustomerSearchOrSelectChange() for the follow-up screen title setting, customer select list closing, and success message]\n\t\t\t\t\t//[Note that the whole customer server select (customer refresh and order saving) could be wrapped into a composite action queue and then \n\t\t\t\t\t//we could track the status of the entire action!]\n\t\t\t\t\n\t\t\t\t//'Offline' and B2B case\t\n\t\t\t\t}else{\n\t\t\t\t\tlet existingCustomer = CustomerStore.getCustomer(customer.id);\n\t\t\t\t\t\n\t\t\t\t\t//We already have customer details in store\n\t\t\t\t\tif(existingCustomer != null){\n\t\t\t\t\t\t//if(existingCustomer.is_approved_for_orders){\n\t\t\t\t\t\t\tthis.loadCustomerOrderDetails(existingCustomer);\n\t\t\t\t\t\t\tthis.hideCustomerSelectionList(false);\n\t\t\n\t\t\t\t\t\t\ttoastr.success('Customer details loaded');\n\t\t\t\t\t\t//}else{\n\t\t\t\t\t\t//\ttoastr.warning('This customer is not approved to place orders');\n\t\t\t\t\t\t//}\n\t\t\t\t\t//We need to retrieve customer details from server\t\n\t\t\t\t\t}/*else{\n\t\t\t\t\t\t//this.state.order.customer_id = customer.id;\n\t\t\t\t\t\tthis.selectedRefreshedCustomerID = customer.id;\n\t\t\t\t\t\tCallActions.refreshCustomer(customer.id, false, [this.state.order.id]);\n\t\t\t\t\t}*/\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//Log the start of a customer visit, if the customer has not been visited/entered yet (in case the user forgot)\n\t\t\t\tSalesActions.enterCustomer(customer.id);\n\t\t\t\t\n\t\t\t}else{\n\t\t\t\ttoastr.warning('This customer is not approved to place orders');\n\t\t\t}\n\t\t}\n\t}\n\t\n\t//Save the order with any relevant customer details to hand\n\t//[Note that this could be converted into a stand-alone convenience action, e.g. saveOrderCustomer(), that has the same effect in the OrderStore\n\t//as CallActions.refreshCustomer() (with supplied order ID) has] \n\tloadCustomerOrderDetails = (customer) => {\n\t\t//Update order details [Not recommended way to update but works for now in the absence of Redux]\n\t\tthis.state.order.customer_id = customer.id;\n\t\tthis.state.order.customer_name = customer.name;\n\t\t\n\t\t//Set expected date based on 'default_lead_time', if available\n\t\tthis.state.order.expected_date = (customer.default_lead_time != null) ? (util.getUnixTimeStartOfDay() + customer.default_lead_time * 86400): null;\n\t\t//Set customer-specific payment term, if available and we don't already have one saved\n\t\tthis.state.order.payment_terms_id = (this.state.order.payment_terms_id == null && customer.payment_term != null) ? customer.payment_term : this.state.order.payment_terms_id;\n\t\t\n\t\t//Set the customer-specific currency for the order, if the customer-specific currency exists,\n\t\t//otherwise use the default instance currency (an important potential reset during a customer change)\n\t\tlet objCurrency = OrderStore.getCurrencyOrDefault(customer.default_currency_id);\n\t\tthis.state.order.currency_id = objCurrency.id;\n\t\tthis.state.order.currency_display_name = objCurrency.name;\n\t\tthis.state.order.currency_display_symbol = objCurrency.symbol;\n\t\t\n\t\t//Clear the billing and shipping addresses (blank selection, removing any old inapplicable data)\n\t\tthis.state.order.billing_location_id = 0;\n\t\tthis.state.order.shipping_location_id = 0;\n\t\t\n\t\tSalesActions.saveOrder(this.state.order);\n\t\t\n\t\tthis.setState({ customerLocations: (customer.locations != null ? customer.locations : []) });\n\n\t\tthis.screenTitle = customer.name;\n\t\tutil.setScreenTitle(this.screenTitle);\n\t}\n\t\n\t//Load customer locations, if applicable, if any (used on screen load)\n\tinitialiseCustomerLocations = () => {\n\t\tif(this.orderHasCustomer()){\n\t\t\tlet existingCustomer = CustomerStore.getCustomer(this.state.order.customer_id);\n\t\t\tif(existingCustomer != null){\n\t\t\t\tthis.setState({ customerLocations: (existingCustomer.locations != null ? existingCustomer.locations : []) });\n\t\t\t}\n\t\t}\n\t}\n\t\n\t//Log the start of a customer visit, if applicable, and if the customer has not been visited/entered yet (in case the user forgot)\n\tinitialiseCustomerEntry = () => {\n\t\tif(this.orderHasCustomer()){\n\t\t\tSalesActions.enterCustomer(this.state.order.customer_id);\n\t\t}\n\t}\n\t\n//===================\n\n\t_onProductSearchChange = () => {\n\t\t//Product searching can be remote or local, depending on the FUNC_ONLINE_PRODUCTS config setting\n\t\tlet status = ProductStore.getStatus(config.get(option.FUNC_ONLINE_PRODUCTS) ? Actions.PRODUCTS_SEARCH_SERVER : Actions.PRODUCTS_SEARCH_LOCAL);\n\t\tlet searchType = config.get(option.FUNC_ONLINE_PRODUCTS) ? SearchTypes.SERVER : SearchTypes.LOCAL;\n\t\t\n\t\t//Product search data has been refreshed\n\t\tif(status == Status.OK){\n\t\t\tthis.setState({\n\t\t\t\tisProductSearchLoading: false, \n\t\t\t\tproductSearchTerm: ProductStore.getSearchTerm(searchType), \n\t\t\t\tproductSearchPage: ProductStore.getSearchPage(searchType),\n\t\t\t\tproductSearchPageSize: ProductStore.getSearchPageSize(searchType),\n\t\t\t\tproductSearchFilters: ProductStore.getSearchFilters(searchType),\n\t\t\t\tproductSearchTotal: ProductStore.getSearchTotal(searchType),\n\t\t\t\tproductSearchTotalPages: ProductStore.getSearchTotalPages(searchType), \n\t\t\t\tproductSearchResults: ProductStore.getSearchResults(searchType)\n\t\t\t});\n\t\t\t//toastr.success('Product search results refreshed');\n\t\t\n\t\t//Product search data is being refreshed\n\t\t}else if(status == Status.PENDING){\n\t\t\tthis.setState({\n\t\t\t\tisProductSearchLoading: true, \n\t\t\t\tproductSearchTerm: ProductStore.getSearchTerm(searchType), \n\t\t\t\tproductSearchPage: ProductStore.getSearchPage(searchType),\n\t\t\t\tproductSearchFilters: ProductStore.getSearchFilters(searchType)\n\t\t\t});\n\t\t\n\t\t//Product search data was not able to be refreshed\n\t\t}else if(status == Status.ERROR){\n\t\t\tthis.setState({\n\t\t\t\tisProductSearchLoading: false, \n\t\t\t\tproductSearchTerm: ProductStore.getSearchTerm(searchType), \n\t\t\t\tproductSearchPage: ProductStore.getSearchPage(searchType),\n\t\t\t\tproductSearchFilters: ProductStore.getSearchFilters(searchType)\n\t\t\t});\n\t\t\t//toastr.error('Unable to refresh product search results');\n\t\t}\n\t}\n\t\n\t/*_onProductDetailChange = () => {\n\t\tvar status = ProductStore.getStatus();\n\t\t//Product detail data has been refreshed\n\t\tif(status == Status.OK){\n\t\t\t//[This is not used as creates a dispatch while dispatching. Instead, we've ensured that orderStore has been updated accordingly via dispatch callback.]\n\t\t\t//this.addOrderItem(ProductStore.getProduct(this.state.order.product_id));\n\t\t\tthis.setState({ isProductSelectionLoading: false });\n\t\t\tthis.hideProductSelectionList();\n\t\t\ttoastr.success([existingProduct].name + ' added to order'); //toastr.success('Product details loaded');\n\t\t\n\t\t//Product detail data is being refreshed\n\t\t}else if(status == Status.PENDING){\n\t\t\tthis.setState({ isProductSelectionLoading: true });\n\t\t\n\t\t//Product detail data was not able to be refreshed\n\t\t}else if(status == Status.ERROR){\n\t\t\tthis.setState({ isProductSelectionLoading: false });\n\t\t\ttoastr.error('Unable to add product to order'); //toastr.error('Unable to load product details');\n\t\t}\n\t}*/\n\t\n\tshowProductSelectionList = () => {\n\t\t//Do an initial search [Update: this is kicked off within the list component (after mounting)]\n\t\t//this.searchProducts();\n\t\t\n\t\t//[Currently, we preserve previous category filter state]\n\t\tlet productSearchFilters = this.state.productSearchFilters;\n\t\tif(this.orderHasCustomer()){\n\t\t\tlet orderCustomer = CustomerStore.getCustomer(this.state.order.customer_id);\n\t\t\tproductSearchFilters = productSearchFilters || {};\n\t\t\t//We no longer display recent products when available, and instead default to showing all\n\t\t\t//productSearchFilters.customerProducts = (orderCustomer != null && orderCustomer.products != null && orderCustomer.products.length > 0) ? SearchFilters.RECENT : SearchFilters.ALL;\n\t\t\tproductSearchFilters.customerProducts = SearchFilters.ALL;\n\t\t}\n\t\t\n\t\t//Display search popup (with cleared results) \n\t\tthis.setState({\n\t\t\tisProductSelectionVisible: true, \n\t\t\tproductSearchTerm: '', \n\t\t\tproductSearchPage: 1,\n\t\t\tproductSearchFilters: productSearchFilters, \n\t\t\tproductSearchTotalPages: null, \n\t\t\tproductSearchResults: []\n\t\t});\n\t}\n\t\n\thideProductSelectionList = () => {\n\t\tthis.setState({isProductSelectionVisible: false});\n\t}\n\t\n\tsearchProducts = (searchTerm, searchPage, searchFilters) => {\n\t\t//if(!this.state.isProductSearchLoading){\n\t\t\t//[Although customer ID may be null, in practice it will be present (as we force a customer selection when arriving on this screen)]\n\t\t\t//[Note: if we implement an auto product search after customer selection, we may need to add an explicit override customer ID parameter\n\t\t\t//(see ProductsPage->searchProducts())]\n\t\t\tSalesActions.searchProducts(searchTerm, searchPage, null, searchFilters, this.state.order.customer_id);\n\t\t//}\n\t}\n\t\n\tselectProducts = (products) => { //productID\n\t\tif(!this.state.isProductSearchLoading){\n\t\t\t/*let existingProduct = ProductStore.getProduct(product.id);\n\t\t\t\n\t\t\t//We already have product details in store\n\t\t\tif(existingProduct != null){\n\t\t\t\tthis.addOrderItem(existingProduct);\n\t\t\t\tthis.hideProductSelectionList();\n\t\t\t\ttoastr.success(existingProduct.name + ' added to order'); //toastr.success('Product details loaded');\n\t\t\t//We need to retrieve product details from server\t\n\t\t\t}else{\n\t\t\t\t//this.state.order.product_id = product.id;\n\t\t\t\tSalesActions.refreshProductDetails(product.id, [this.state.order.id]);\n\t\t\t}\n\t\t\t*/\n\t\t\tlet blnAtLeastOneProductAdded = false;\n\t\t\t\n\t\t\tfor (var productID in products) {\n\t\t\t\tif(products[productID] != null){\n\t\t\t\t\tthis.addOrderItem(products[productID]);\n\t\t\t\t\tblnAtLeastOneProductAdded = true;\n\t\t\t\t\ttoastr.success(products[productID].name + ' added to order'); //toastr.success('Product details loaded');\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif(blnAtLeastOneProductAdded){\n\t\t\t\tSalesActions.saveOrder(this.state.order);\n\t\t\t\t//toastr.success('Products added to order'); //toastr.success('Product details loaded');\t\t\t\n\t\t\t}\n\n\t\t\tthis.hideProductSelectionList();\n\t\t}\n\t}\n\t\n\t//Save the order with the new product order item details\n\t//[Note that this could be converted into a stand-alone convenience action, e.g. saveOrderItemProduct(), that has the same effect in the OrderStore\n\t//that SalesActions.refreshProductDetails() (with supplied order ID) has]\n\taddOrderItem = (product) => {\n\t\tlet formattedCurrency = {\n\t\t\t'value': 0,\n\t\t\t'displayValue': '0.00'\n\t\t};\n\t\tif(product.calc_price != null){\n\t\t\tformattedCurrency = util.formatCurrency(product.calc_price);\n\t\t}\n\t\t\n\t\tthis.state.order.items.push({\n\t\t\t//'uom_id': null //[optional]\n\t\t\n\t\t\t'product_id': product.id,\n\t\t\t'sku': product.sku, \n\t\t\t'name': product.name, \n\t\t\t'quantity': product.quantity,\n\t\t\t'quantity_display': product.quantity, //better than product.quantity_display when copying into order\n\t\t\t'quantity_min': product.quantity_min,\n\t\t\t'quantity_max': product.quantity_max,\n\t\t\t'quantity_mom': product.quantity_mom,\n\t\t\t'is_taxable': product.is_taxable,\n\t\t\t'tax_class_id': product.tax_class_id,\n\t\t\t'price': formattedCurrency.value,\n\t\t\t'price_orig': formattedCurrency.value, \n\t\t\t'price_display': formattedCurrency.displayValue,\n\t\t\t\n\t\t\t//These values are calculated by OrderStore calculations (including line item tax calculations)\n\t\t\t'total': formattedCurrency.value, \n\t\t\t'total_display': formattedCurrency.displayValue\n\t\t});\n\t\t\n\t\t//SalesActions.saveOrder(this.state.order);\n\t}\n\n//===================\t\n\t\n\t//Whether there is a customer selected for this order\n\torderHasCustomer = () => {\n\t\treturn (this.state.order.customer_id != null && this.state.order.customer_id > 0);\n\t}\n\t\n\t//Perform a check for any fields that are required to be selected, in the order that they should be selected,\n\t//and display appropriate form controls if necessary\n\tcheckCompulsorySelections = () => {\n\t\t//If the order has no customer, customer selection is required\n\t\tif(!this.orderHasCustomer()){\n\t\t\tthis.showCustomerSelectionList();\n\t\t//At this point the order is created, and we display product selection if the order items have never been edited\t\n\t\t}else if(this.state.order.itemsEdited != null && !this.state.order.itemsEdited){\n\t\t\tthis.showProductSelectionList();\n\t\t}\n\t}\n\t\n\torderIsValid = () => {\n\t\t//Check we have a customer for this order\n\t\tif(!this.orderHasCustomer()){\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\t//Check we have a carrier, tax class, etc. (not necessary as these don't offer empty selection and are pre-setup in any case)\n\t\t\n\t\t//Check we have at least one line item\n\t\tif(this.state.order.items.length){\n\t\t\tlet j;\n\t\t\tfor(j = 0; j < this.state.order.items.length; j++) {\n\t\t\t\tif(this.state.order.items[j] != null){\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn false;\n\t}\n\t\n\t//Update the order\n\tsaveOrder = (order) => {\n\t\tSalesActions.saveOrder(order);\n\t}\n\t\n\tplaceOrder = (blnSubmit = false) => {\n\t\tlet blnValid = this.orderIsValid();\n\t\t\n\t\t//Update order status [Not recommended way to update but works for now in the absence of Redux]\n\t\tthis.state.order.status = blnValid ? OrderStatuses.PLACED : OrderStatuses.INCOMPLETE;\n\t\tSalesActions.saveOrder(this.state.order);\n\t\t\n\t\tif(blnValid){\n\t\t\t//Log a customer exit [in case the user forgets to manually exit later (so we still have pretty good data)]\n\t\t\tSalesActions.exitCustomer(this.state.order.customer_id);\n\t\t\tthis.setState({ \n\t\t\t\torderResolved: true,\n\t\t\t\torderSubmit: (blnSubmit === true) //[=== equality check to avoid false positive from click event]\n\t\t\t});\n\t\t}else{\n\t\t\ttoastr.error('Please complete all necessary fields');\n\t\t}\n\t}\n\t\n\tplaceAndSubmitOrder = () => {\n\t\tthis.placeOrder(true);\n\t}\n\t\n\tcancelOrder = () => {\n\t\t//We don't just change the order status, we delete the order from our cache\n\t\tSalesActions.cancelOrder(this.state.order.id);\n\t\tthis.setState({ orderResolved: true });\n\t}\n\t\n\tshowOrderCancelConfirmationPrompt = () => {\n\t\tthis.setState({ isOrderCancelConfirmationVisible: true });\n\t}\n\t\n\thideOrderCancelConfirmationPrompt = () => {\n\t\tthis.setState({ isOrderCancelConfirmationVisible: false });\n\t}\n\t\n\trender() {\n\t\tif (this.state.orderResolved) {\n\t\t\t//Transition to orders page on order placement\n\t\t\treturn (\n\t\t\t\t<Redirect push to={{\n\t\t\t\t\tpathname: \"/sales/orders\",\n\t\t\t\t\tstate: { submitOrders: this.state.orderSubmit ? [this.state.order.id] : null }\n\t\t\t\t}} />\n\t\t\t);\n\t\t}\n\t\t\n\t\tlet blnHaveCustomer = (this.state.order.customer_id != null);\n\t\t \n\t\treturn (\n\t\t\t//<br />{ blnHaveCustomer ? <small>{this.state.order.customer_name}</small> : null }\n\t\t\t<div>\n\t\t\t\t<div className=\"btn-bar\" role=\"group\">\n\t\t\t\t\t<Link className={\"btn btn-primary col-xs-\" + (config.get(option.UI_BUTTON_CHANGE_CUSTOMER) ? \"3\" : \"6\")} role=\"button\" to={\"/sales/orders\"}><i className=\"fa fa-arrow-left\"></i> Close</Link>\n\t\t\t\t\t{ config.get(option.UI_BUTTON_CHANGE_CUSTOMER) ? \n\t\t\t\t\t\t<button className=\"btn btn-primary col-xs-5\" onClick={this.showCustomerSelectionList}><i className=\"fa fa-user\"></i> { blnHaveCustomer ? 'Change' : 'Select' } Customer</button> : null }\n\t\t\t\t\t<button className={\"btn btn-primary col-xs-\" + (config.get(option.UI_BUTTON_CHANGE_CUSTOMER) ? \"4\" : \"6\")} onClick={this.showProductSelectionList}><i className=\"fa fa-plus\"></i> Add Item</button>\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t<h1 className=\"sub-button-heading\">Order</h1>\n\t\t\t\t\t\n\t\t\t\t{ this.state.isCustomerSelectionVisible ? \n\t\t\t\t\t<CustomerSelectList \n\t\t\t\t\t\tsearchTerm={this.state.customerSearchTerm}\n\t\t\t\t\t\tsearchPage={this.state.customerSearchPage}\n\t\t\t\t\t\tsearchPageSize={this.state.customerSearchPageSize}\n\t\t\t\t\t\tsearchTotal={this.state.customerSearchTotal} \n\t\t\t\t\t\tsearchTotalPages={this.state.customerSearchTotalPages} \n\t\t\t\t\t\tsearchResults={this.state.customerSearchResults} \n\t\t\t\t\t\tonSearch={this.searchCustomers} \n\t\t\t\t\t\tonSelect={this.selectCustomer} \n\t\t\t\t\t\tonFinish={this.hideCustomerSelectionList} \n\t\t\t\t\t\tisLoading={(this.state.isCustomerSearchLoading || this.state.isCustomerSelectionLoading)} \n\t\t\t\t\t/> : null }\n\t\t\t\t\t\n\t\t\t\t{ this.state.isProductSelectionVisible ? \n\t\t\t\t\t<ProductSelectList\n\t\t\t\t\t\tsubTitle={ blnHaveCustomer ? this.state.order.customer_name : null } \n\t\t\t\t\t\tcurrencySymbol={this.state.order.currency_display_symbol}\n\t\t\t\t\t\tsearchTerm={this.state.productSearchTerm} \n\t\t\t\t\t\tsearchPage={this.state.productSearchPage}\n\t\t\t\t\t\tsearchPageSize={this.state.productSearchPageSize}\n\t\t\t\t\t\tsearchFilters={this.state.productSearchFilters}\n\t\t\t\t\t\tcustomerSearchFiltersActive={blnHaveCustomer}\n\t\t\t\t\t\tsearchTotal={this.state.productSearchTotal} \n\t\t\t\t\t\tsearchTotalPages={this.state.productSearchTotalPages} \n\t\t\t\t\t\tsearchResults={this.state.productSearchResults}\n\t\t\t\t\t\tcategories={this.state.categories} \n\t\t\t\t\t\tonSearch={this.searchProducts} \n\t\t\t\t\t\tonFinish={this.selectProducts} \n\t\t\t\t\t\tisLoading={(this.state.isProductSearchLoading || this.state.isProductSelectionLoading)} \n\t\t\t\t\t/> : null }\n\t\t\t\t\n\t\t\t\t{ this.state.isOrderCancelConfirmationVisible ? \n\t\t\t\t\t<PromptModal\n\t\t\t\t\t\tdescription={this.orderCancelConfirmDescription} \n\t\t\t\t\t\tonYes={this.cancelOrder} \n\t\t\t\t\t\tonNo={this.hideOrderCancelConfirmationPrompt} \n\t\t\t\t\t/> : null }\t\n\t\t\t\t\n\t\t\t\t<OrderInfoForm order={this.state.order} paymentTerms={this.state.paymentTerms} taxClasses={this.state.taxClasses} carriers={this.state.carriers} customerLocations={this.state.customerLocations} onSave={this.saveOrder} />\t\n\t\t\t\t<OrderForm order={this.state.order} onSave={this.saveOrder} onPlace={this.placeOrder} onPlaceAndSubmit={this.placeAndSubmitOrder} onCancel={this.showOrderCancelConfirmationPrompt} editablePricing={config.get(option.FUNC_EDIT_ORDER_PRICING)}/>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default OrderPage;","\"use strict\";\n\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nvar SalesActions = require('../../actions/salesActions');\nvar Status = require('../../constants/actionStatuses');\nvar Actions = require('../../constants/actionTypes');\nvar ActionStatusStore = require('../../stores/actionStatusStore');\nvar OrderStore = require('../../stores/orderStore');\nvar OrderList = require('./pastOrderList');\nvar option = require('../../constants/configOptions.js');\nvar config = require('../../config.js');\nvar util = require('../../util.js');\nvar toastr = require('toastr');\n\nclass PastOrdersPage extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\t\n\t\tthis.state = {\n\t\t\torders: OrderStore.getPastOrders(),\n\t\t\tisLoading: false\n\t\t};\n\t}\n\t\n\tcomponentWillMount(){\n\t\tutil.setScreenTitle(\"My Past Orders\");\n\t}\n\t\n\tcomponentDidMount() {\n\t\tActionStatusStore.addChangeListener(this._onChange);\n\t\t\n\t\t//For now, let's only auto-refresh for 'online' case ('offline' case much less likely to not have this data already)\n\t\tif(config.get(option.FUNC_ONLINE_CUSTOMERS)){\n\t\t\t//Refresh this customer's file library if it hasn't been refreshed yet today (or ever)\n\t\t\tif(util.isBeforeToday(OrderStore.getPastOrdersLastRefresh())){\n\t\t\t\t//User access check built in to composite action\n\t\t\t\t//SalesActions.doAfterAccessCheck('refreshPastOrdersAndAssociatedCustomers', [OrderStore.getPastOrdersLastRefresh(), OrderStore.getPastOrdersRefreshRetryIDs()]);\n\t\t\t\tSalesActions.refreshPastOrdersAndAssociatedCustomers(OrderStore.getPastOrdersLastRefresh(), OrderStore.getPastOrdersRefreshRetryIDs());\n\t\t\t}\n\t\t}\n\t}\n\t\n\tcomponentWillUnmount() {\n\t\tActionStatusStore.removeChangeListener(this._onChange);\n\t}\n\t\n\t_onChange = () => {\n\t\t//Obtain refresh info\n\t\tlet refreshStatus = ActionStatusStore.getStatus(Actions.PAST_ORDERS_CUSTOMERS_REFRESH);\n\t\t//let refreshEntityStatuses = ActionStatusStore.getEntityStatuses(Actions.PAST_ORDERS_CUSTOMERS_REFRESH);\n\t\t//let refreshProgressPercentage = ActionStatusStore.getPercentageComplete(Actions.PAST_ORDERS_CUSTOMERS_REFRESH);\n\t\t\n\t\t//The refresh is in progress\n\t\tif(refreshStatus == Status.PENDING){\n\t\t\tthis.setState({\n\t\t\t\tisLoading: true\n\t\t\t});\n\t\t\n\t\t//The refresh has completed\t\n\t\t}else{\n\t\t\tthis.setState({\n\t\t\t\tisLoading: false,\n\t\t\t\torders: OrderStore.getPastOrders()\n\t\t\t});\n\t\t\t\n\t\t\tif(refreshStatus == Status.OK){\n\t\t\t\ttoastr.success('Past orders refreshed');\n\t\t\t}else if(refreshStatus == Status.ERROR){\n\t\t\t\ttoastr.error('Unable to refresh past orders');\n\t\t\t}else if(refreshStatus == Status.PARTIAL){\n\t\t\t\ttoastr.warning('Unable to refresh all past orders');\n\t\t\t}\n\t\t}\n\t}\n\t\n\trefreshPastOrders = () => {\n\t\tif(!this.state.isLoading){\n\t\t\t//User access check built in to composite action\n\t\t\t//SalesActions.doAfterAccessCheck('refreshPastOrdersAndAssociatedCustomers', [OrderStore.getPastOrdersLastRefresh(), OrderStore.getPastOrdersRefreshRetryIDs()]);\n\t\t\tSalesActions.refreshPastOrdersAndAssociatedCustomers(OrderStore.getPastOrdersLastRefresh(), OrderStore.getPastOrdersRefreshRetryIDs());\n\t\t}\n\t}\n\t\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<button className=\"btn btn-header-refresh\" onClick={this.refreshPastOrders} disabled={this.state.isLoading}><i className={\"fa fa-refresh fa-2x\" + (this.state.isLoading ? \" fa-spin\" : \"\")}></i></button>\n\t\t\t\t\n\t\t\t\t<div className=\"btn-bar\" role=\"group\">\n\t\t\t\t\t<Link className={\"btn btn-primary col-xs-6\" + (this.state.isLoading ? \" disabled\" : \"\")} role=\"button\" to=\"/sales/orders\"><i className=\"fa fa-arrow-left\"></i> Back to <strong>My Orders</strong></Link>\n\t\t\t\t\t<Link className={\"btn btn-primary col-xs-6\" + (this.state.isLoading ? \" disabled\" : \"\")} role=\"button\" to={\"/sales/orders/new\"}><i className=\"fa fa-plus\"></i> New Order</Link>\n\t\t\t\t</div>\n\t\t\t\t<OrderList orders={this.state.orders} isLoading={this.state.isLoading} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default PastOrdersPage;","\"use strict\";\n\nimport React from 'react';\nimport { Link, Redirect } from 'react-router-dom';\n//var Actions = require('../../constants/actionTypes');\n//var Status = require('../../constants/actionStatuses');\nvar SalesActions = require('../../actions/salesActions');\nvar OrderStore = require('../../stores/orderStore');\nvar CustomerStore = require('../../stores/customerStore');\n//var ProductStore = require('../../stores/productStore');\nvar PastOrderInfo = require('./pastOrderInfo');\nvar PastOrderItems = require('./pastOrderItems');\n//var option = require('../../constants/configOptions.js');\n//var config = require('../../config.js');\nvar util = require('../../util.js');\nvar _ = require('lodash');\n//var toastr = require('toastr');\n\nclass PastOrderPage extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\t\n\t\tthis.screenTitle = 'Past Order';\n\t\t\n\t\tlet order = {};\n\t\tlet customer = {};\n\t\tlet orderID = props.match.params.oid;  //from path 'sales/orders/past/:oid'\n\t\tif(orderID){\n\t\t\torder = OrderStore.getPastOrder(orderID);\n\t\t\tcustomer = CustomerStore.getCustomer(order.customer_id);\n\t\t\tthis.screenTitle = customer.name;\n\t\t}\n\t\t\t\n\t\tthis.state = {\n\t\t\torder: order,\n\t\t\tcustomer: customer,\n\t\t\torderIsCloned: false,\n\t\t\tclonedOrder: OrderStore.getOrder(null) //fresh order for cloning (perhaps not necessary to be in state?)\n\t\t};\n\t}\n\t\n\tcomponentWillMount(){\n\t\t//this.screenTitle = this.state.order.customer_name;\n\t\tutil.setScreenTitle(this.screenTitle);\n\t}\n\t\n\tcomponentDidMount() {\n\t\t//OrderStore.addChangeListener(this._onChange);\n\t}\n\t\n\tcomponentWillUnmount() {\n\t\t//OrderStore.removeChangeListener(this._onChange);\n\t}\n\t\n\t_onChange = () => {\n\t\t//this.setState({ order: OrderStore.getPastOrder(this.state.order.id) });\n\t}\n\t\n\tcloneOrder = () => {\n\t\t//Transfer customer details (should be up to date, as any necessary past order customers are refreshed\n\t\t//during past orders refresh in both 'online' and 'offline' cases)\n\t\t//---------------------------\n\t\t\n\t\t//Set customer details [Not recommended way to update but works for now in the absence of Redux]\n\t\tthis.state.clonedOrder.customer_id = this.state.customer.id;\n\t\tthis.state.clonedOrder.customer_name = this.state.customer.name;\n\t\t\n\t\t//Set expected date based on 'default_lead_time', if available\n\t\tthis.state.clonedOrder.expected_date = (this.state.customer.default_lead_time != null) ? (util.getUnixTimeStartOfDay() + this.state.customer.default_lead_time * 86400): null;\n\t\t//Set customer-specific payment term, if available and we don't already have one on the original past order\n\t\tthis.state.clonedOrder.payment_terms_id = (this.state.order.payment_term_id == null && this.state.customer.payment_term != null) ? this.state.customer.payment_term : parseInt(this.state.order.payment_term_id);\n\t\t\n\t\tthis.state.clonedOrder.billing_location_id = parseInt(this.state.order.billing_location_id);\n\t\tthis.state.clonedOrder.shipping_location_id = parseInt(this.state.order.shipping_location_id);\n\t\t\n\t\tthis.state.clonedOrder.carrier_id = parseInt(this.state.order.carrier_id);\n\t\tthis.state.clonedOrder.tax_class_id = parseInt(this.state.order.tax_class_id);\n\t\t\n\t\t//For now, let's opt for obtaining the best currency locally, rather than using all the original order currency data?\n\t\t//this.state.clonedOrder.currency_id = this.state.order.currency.id;\n\t\t//this.state.clonedOrder.currency_display_name = this.state.order.currency.name;\n\t\t//this.state.clonedOrder.currency_display_symbol = this.state.order.currency.symbol;\n\t\tlet objCurrency = OrderStore.getCurrency(this.state.order.currency.id);\n\t\tif(objCurrency == null){\n\t\t\tobjCurrency = OrderStore.getCurrencyOrDefault(this.state.customer.default_currency_id);\n\t\t}\n\t\tthis.state.clonedOrder.currency_id = objCurrency.id;\n\t\tthis.state.clonedOrder.currency_display_name = objCurrency.name;\n\t\tthis.state.clonedOrder.currency_display_symbol = objCurrency.symbol;\n\n\t\t//Set adjustment and shipping \n\t\t//(subtotal, tax and total will be calculated by OrderStore, so not strictly necessary to setup here)\n\t\tlet formattedAdjustment = util.formatCurrency(this.state.order.adjustment_amount);\n\t\tlet formattedShipping = util.formatCurrency(this.state.order.shipping_amount);\n\t\t//let formattedSubTotal = util.formatCurrency(this.state.order.subtotal);\n\t\t//let formattedTax = util.formatCurrency(this.state.order.tax);\n\t\t//let formattedTotal = util.formatCurrency(this.state.order.total);\n\t\tthis.state.clonedOrder.adjustment \t\t\t= formattedAdjustment.value;\n\t\tthis.state.clonedOrder.adjustment_display\t= formattedAdjustment.displayValue;\n\t\tthis.state.clonedOrder.shipping \t\t\t= formattedShipping.value;\n\t\tthis.state.clonedOrder.shipping_display \t= formattedShipping.displayValue;\n\t\t//this.state.clonedOrder.subtotal \t\t\t= formattedSubTotal.value;\n\t\t//this.state.clonedOrder.subtotal_display\t= formattedSubTotal.displayValue;\n\t\t//this.state.clonedOrder.tax\t\t \t\t= formattedTax.value;\n\t\t//this.state.clonedOrder.tax_display \t\t= formattedTax.displayValue;\n\t\t//this.state.clonedOrder.total\t \t\t\t= formattedTotal.value;\n\t\t//this.state.clonedOrder.total_display\t\t= formattedTotal.displayValue;\n\t\t\n\t\t//Not too important for our purposes, but may as well set this\n\t\tthis.state.clonedOrder.itemsEdited = true;\n\t\t\t\t\n\t\t//Transfer product item details\n\t\t//---------------------------\n\t\tif(_.keys(this.state.order.items).length){\n\t\t\tfor (var key in this.state.order.items){\n\t\t\t\tlet item = this.state.order.items[key];\n\n\t\t\t\tlet formattedLineItemPrice = (item.price != null ? util.formatCurrency(item.price) : util.formatCurrencyNumber(item.discount_price));\t\t\t\t\n\t\t\t\tlet formattedLineItemTotal = util.formatCurrencyNumber(item.total);\n\t\t\t\t\n\t\t\t\tthis.state.clonedOrder.items.push({\n\t\t\t\t\t//'uom_id': null //[optional]\n\t\t\t\t\t'product_id': item.product_id,\n\t\t\t\t\t'sku': item.SKU, \n\t\t\t\t\t'name': item.name, \n\t\t\t\t\t'quantity': parseFloat(item.qty),\n\t\t\t\t\t'quantity_display': parseFloat(item.qty),\n\t\t\t\t\t'quantity_min': parseFloat(item.min_order_qty),\n\t\t\t\t\t'quantity_max': parseFloat(item.max_order_qty),\n\t\t\t\t\t'quantity_mom': parseInt(item.multiples_of_min),\n\t\t\t\t\t'is_taxable': (item.is_taxable > 0),\n\t\t\t\t\t'tax_class_id': item.tax_class_id, //parseInt() not necessary?\n\t\t\t\t\t'price': formattedLineItemPrice.value,\n\t\t\t\t\t'price_orig': formattedLineItemPrice.value, \n\t\t\t\t\t'price_display': formattedLineItemPrice.displayValue,\n\t\t\t\t\t\n\t\t\t\t\t//These values will be re-calculated by OrderStore (including line item tax calculations)\n\t\t\t\t\t//so not strictly necessary\n\t\t\t\t\t'total': formattedLineItemTotal.value, \n\t\t\t\t\t'total_display': formattedLineItemTotal.displayValue\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\t\n\t\tSalesActions.saveOrder(this.state.clonedOrder);\n\t\tthis.setState({ orderIsCloned: true });\n\t}\n\t\n\trender() {\n\t\tif (this.state.orderIsCloned) {\n\t\t\t//Transition to order page on order clone\n\t\t\treturn (\n\t\t\t\t<Redirect push to={\"/sales/orders/\" + this.state.clonedOrder.id} />\n\t\t\t);\n\t\t}\n\t\t\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div className=\"btn-bar\" role=\"group\">\n\t\t\t\t\t<Link className=\"btn btn-primary col-xs-6\" role=\"button\" to=\"/sales/orders/past\"><i className=\"fa fa-arrow-left\"></i> Back to <strong>My Past Orders</strong></Link>\n\t\t\t\t\t<button className=\"btn btn-primary col-xs-6\" onClick={this.cloneOrder}><i className=\"fa fa-clone\"></i> Clone Order</button>\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t<h1 className=\"sub-button-heading\">Past Order</h1>\n\t\t\t\t\n\t\t\t\t<PastOrderInfo order={this.state.order} />\n\t\t\t\t<PastOrderItems order={this.state.order} onClone={this.cloneOrder} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default PastOrderPage;","\"use strict\";\n\nimport React from 'react';\nimport { Link, Redirect } from 'react-router-dom';\nvar Actions = require('../../constants/actionTypes');\nvar SalesActions = require('../../actions/salesActions');\nvar CallActions = require('../../actions/callActions'); //(for customer search, customer details)\nvar Status = require('../../constants/actionStatuses');\nvar SearchTypes = require('../../constants/searchTypes');\nvar SearchFilters = require('../../constants/searchFilters');\nvar ProductStore = require('../../stores/productStore');\nvar CustomerStore = require('../../stores/customerStore');\nvar OrderStore = require('../../stores/orderStore');\nvar ProductList = require('./productList');\nvar CustomerSelectList = require('./customerSelectList');\nvar option = require('../../constants/configOptions.js');\nvar config = require('../../config.js');\nvar util = require('../../util.js');\nvar toastr = require('toastr');\n\nclass ProductsPage extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\t\n\t\tthis.selectedRefreshedCustomerID = null;\n\t\t\n\t\t//Current system default currency symbol\n\t\tthis.defaultCurrencySymbol = util.getCompanyCurrency().symbol;\n\t\t//Actual currency symbol to be used (system default, or a currency change due to an order customer, or based on B2B customer (which won't change))\n\t\tthis.currencySymbol = this.defaultCurrencySymbol;\n\t\t//If B2B auto-selected customer, update the currency symbol if applicable\n\t\tif(config.get(option.FUNC_CUSTOMER_AUTOSELECTION)){\n\t\t\tlet b2bCustomer = CustomerStore.getCustomer(util.getB2BCustomerID());\n\t\t\tif(b2bCustomer != null){\n\t\t\t\tthis.currencySymbol = OrderStore.getCurrencyOrDefault(b2bCustomer.default_currency_id).symbol; \n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.state = {\n\t\t\tproducts: [],\n\t\t\tsearchTerm: '',\n\t\t\tsearchPage: 1,\n\t\t\tsearchPageSize: null,\n\t\t\tsearchFilters: null,\n\t\t\tsearchTotal: null,\n\t\t\tsearchTotalPages: null,\n\t\t\tisProductSearchLoading: false,\n\t\t\tcategories: ProductStore.getCategoryTree(),\n\t\t\t\n\t\t\tcustomerSearchResults: [],\n\t\t\tcustomerSearchTerm: '',\n\t\t\tcustomerSearchPage: 1,\n\t\t\tcustomerSearchPageSize: null,\n\t\t\tcustomerSearchTotal: null,\n\t\t\tcustomerSearchTotalPages: null,\n\t\t\tisCustomerSearchLoading: false,\n\t\t\tisCustomerSelectionLoading: false,\n\t\t\tisCustomerSelectionVisible: false,\n\t\t\t\n\t\t\torderWithCustomerCreated: false, \t//specific separate flag for once we're sure the order has been saved with selected customer\n\t\t\torder: OrderStore.getOrder(),\t\t//fresh order object\n\t\t\tselectedProducts: {}\n\t\t};\n\t}\n\t\n\tcomponentWillMount(){\n\t\tutil.setScreenTitle(\"Products\");\n\t}\n\t\n\tcomponentDidMount() {\n\t\tProductStore.addChangeListener(this._onChange);\n\t\tCustomerStore.addChangeListener(this._onCustomerSearchOrSelectChange);\n\t\tOrderStore.addChangeListener(this._onOrderChange);\n\t\t\n\t\t//Do an initial search\n\t\t//[either with B2B auto-selected customer or basic general search]\n\t\t/*\n\t\t//NOTE: We no longer need to worry about this here, as it's handled more completely/robustly within searchProducts()\n\t\tif(config.get(option.FUNC_CUSTOMER_AUTOSELECTION)){\n\t\t\t//Let's also helpfully automatically filter for recent products if this customer has any\n\t\t\t//Update: We no longer display recent products when this customer has them, and instead default to showing all\n\t\t\tlet searchFilters = this.state.searchFilters || {};\n\t\t\t//searchFilters.customerProducts = (selectedCustomer.products != null && selectedCustomer.products.length > 0) ? SearchFilters.RECENT : SearchFilters.ALL;\n\t\t\tsearchFilters.customerProducts = SearchFilters.ALL;\n\t\t\tthis.searchProducts(this.state.searchTerm, 1, searchFilters, util.getB2BCustomerID());\n\t\t\t\n\t\t}else{\n\t\t\tthis.searchProducts();\n\t\t}\n\t\t*/\n\t\tthis.searchProducts();\n\t}\n\t\n\tcomponentWillUnmount() {\n\t\tProductStore.removeChangeListener(this._onChange);\n\t\tCustomerStore.removeChangeListener(this._onCustomerSearchOrSelectChange);\n\t\tOrderStore.removeChangeListener(this._onOrderChange);\n\t}\n\t\n\t_onChange = () => {\n\t\t//Product searching can be remote or local, depending on the FUNC_ONLINE_PRODUCTS config setting\n\t\tlet status = ProductStore.getStatus(config.get(option.FUNC_ONLINE_PRODUCTS) ? Actions.PRODUCTS_SEARCH_SERVER : Actions.PRODUCTS_SEARCH_LOCAL);\n\t\tlet searchType = config.get(option.FUNC_ONLINE_PRODUCTS) ? SearchTypes.SERVER : SearchTypes.LOCAL;\n\t\t\n\t\t//Product search data has been refreshed\n\t\tif(status == Status.OK){\n\t\t\tthis.setState({\n\t\t\t\tisProductSearchLoading: false, \n\t\t\t\tsearchTerm: ProductStore.getSearchTerm(searchType), \n\t\t\t\tsearchPage: ProductStore.getSearchPage(searchType),\n\t\t\t\tsearchPageSize: ProductStore.getSearchPageSize(searchType),\n\t\t\t\tsearchFilters: ProductStore.getSearchFilters(searchType),\n\t\t\t\tsearchTotal: ProductStore.getSearchTotal(searchType),\n\t\t\t\tsearchTotalPages: ProductStore.getSearchTotalPages(searchType), \n\t\t\t\tproducts: ProductStore.getSearchResults(searchType)\n\t\t\t});\n\t\t\t//toastr.success('Product search results refreshed');\n\t\t\n\t\t//Product search data is being refreshed\n\t\t}else if(status == Status.PENDING){\n\t\t\tthis.setState({\n\t\t\t\tisProductSearchLoading: true, \n\t\t\t\tsearchTerm: ProductStore.getSearchTerm(searchType), \n\t\t\t\tsearchPage: ProductStore.getSearchPage(searchType),\n\t\t\t\tsearchFilters: ProductStore.getSearchFilters(searchType)\n\t\t\t});\n\t\t\n\t\t//Product search data was not able to be refreshed\n\t\t}else if(status == Status.ERROR){\n\t\t\tthis.setState({\n\t\t\t\tisProductSearchLoading: false, \n\t\t\t\tsearchTerm: ProductStore.getSearchTerm(searchType), \n\t\t\t\tsearchPage: ProductStore.getSearchPage(searchType),\n\t\t\t\tsearchFilters: ProductStore.getSearchFilters(searchType)\n\t\t\t});\n\t\t\t//toastr.error('Unable to refresh product search results');\n\t\t}\n\t}\n\t\n\t_onCustomerSearchOrSelectChange = () => {\n\t\t//Customer searching can be remote or local, depending on the FUNC_ONLINE_CUSTOMERS config setting\n\t\tlet searchStatus = CustomerStore.getStatus(config.get(option.FUNC_ONLINE_CUSTOMERS) ? Actions.CUSTOMERS_SEARCH_SERVER : Actions.CUSTOMERS_SEARCH_LOCAL);\n\t\tlet searchType = config.get(option.FUNC_ONLINE_CUSTOMERS) ? SearchTypes.SERVER : SearchTypes.LOCAL;\n\t\t\t\n\t\t//Customer search data has been refreshed\n\t\tif(searchStatus == Status.OK){\n\t\t\tthis.setState({\n\t\t\t\tisCustomerSearchLoading: false, \n\t\t\t\tcustomerSearchTerm: CustomerStore.getSearchTerm(searchType),\n\t\t\t\tcustomerSearchPage: CustomerStore.getSearchPage(searchType),\n\t\t\t\tcustomerSearchPageSize: CustomerStore.getSearchPageSize(searchType),\n\t\t\t\tcustomerSearchTotal: CustomerStore.getSearchTotal(searchType),\n\t\t\t\tcustomerSearchTotalPages: CustomerStore.getSearchTotalPages(searchType), \n\t\t\t\tcustomerSearchResults: CustomerStore.getSearchResults(searchType)\n\t\t\t});\n\t\t\t//toastr.success('Customer search results refreshed');\n\t\t\n\t\t//Customer search data is being refreshed\n\t\t}else if(searchStatus == Status.PENDING){\n\t\t\tthis.setState({\n\t\t\t\tisCustomerSearchLoading: true, \n\t\t\t\tcustomerSearchTerm: CustomerStore.getSearchTerm(searchType),\n\t\t\t\tcustomerSearchPage: CustomerStore.getSearchPage(searchType)\n\t\t\t});\n\t\t\n\t\t//Customer search data was not able to be refreshed\n\t\t}else if(searchStatus == Status.ERROR){\n\t\t\tthis.setState({\n\t\t\t\tisCustomerSearchLoading: false, \n\t\t\t\tcustomerSearchTerm: CustomerStore.getSearchTerm(searchType),\n\t\t\t\tcustomerSearchPage: CustomerStore.getSearchPage(searchType)\n\t\t\t});\n\t\t\t//toastr.error('Unable to refresh customer search results');\n\t\t}\n\t\t\n\t\t//We're server selecting (refreshing) a customer\n\t\t//[Note that the whole customer server select (customer refresh and order saving) could be wrapped into a composite action queue and then \n\t\t//we could track the status of the entire action rather than just this piece!]\n\t\tif(this.selectedRefreshedCustomerID != null){\n\t\t\tlet refreshStatus = CustomerStore.getStatus(); //[CUSTOMER_REFRESH status is currently the default status in CustomerStore]\n\t\t\t\n\t\t\t//Customer detail data has been refreshed (including partial status for completeness)\n\t\t\tif(refreshStatus == Status.OK || refreshStatus == Status.PARTIAL){\n\t\t\t\tlet selectedCustomer = CustomerStore.getCustomer(this.selectedRefreshedCustomerID);\n\t\t\t\t\t\n\t\t\t\t//Safeguard (customer details in store)\n\t\t\t\tif(selectedCustomer != null){\n\t\t\t\t\t//Check whether there's a change in terms of customer (customer added/changed)\n\t\t\t\t\t//Additionally, in the auto-selected customer case (B2B), we don't need to search again as the product list is already geared for this customer\n\t\t\t\t\t//[Note: this is now more for completeness, as we don't server select (refresh) the customer in the B2B case (they are pre-loaded), so we shouldn't currently get here] \n\t\t\t\t\tlet blnNewProductSearchNeeded = ((this.state.order.customer_id != selectedCustomer.id) && !config.get(option.FUNC_CUSTOMER_AUTOSELECTION));\n\n\t\t\t\t\t//[We don't save the customer-related order details here as it creates a dispatch while dispatching. Instead, we've ensured that orderStore has been updated accordingly via dispatch callback.]\n\t\t\t\t\t//[Update: this could also now be achieved using util.setPostCompletedActionDispatchCallback()]\n\t\t\t\t\t\n\t\t\t\t\tthis.hideCustomerSelectionList();\n\t\t\t\t\t//toastr.success('Customer details loaded');\n\t\t\t\t\t\n\t\t\t\t\tif(blnNewProductSearchNeeded){\n\t\t\t\t\t\t//Update the currency symbol to be used in listings, in case there was a customer currency change\n\t\t\t\t\t\tthis.currencySymbol = OrderStore.getCurrencyOrDefault(selectedCustomer.default_currency_id).symbol;\n\t\t\t\t\t\t\n\t\t\t\t\t\t//Re-search, if necessary (update products and prices for current customer)\n\t\t\t\t\t\t//[Although relying on the default searchProducts() usage of this.state.order.customer_id should work fine, \n\t\t\t\t\t\t//we explicitly specify the new customer ID, to avoid any race conditions]\n\t\t\t\t\t\t\n\t\t\t\t\t\t//Let's also helpfully automatically filter for recent products if this customer has any\n\t\t\t\t\t\t//Update: We no longer display recent products when this customer has them, and instead default to showing all\n\t\t\t\t\t\tlet searchFilters = this.state.searchFilters || {};\n\t\t\t\t\t\t//searchFilters.customerProducts = (selectedCustomer.products != null && selectedCustomer.products.length > 0) ? SearchFilters.RECENT : SearchFilters.ALL;\n\t\t\t\t\t\tsearchFilters.customerProducts = SearchFilters.ALL;\n\t\t\t\t\t\t\n\t\t\t\t\t\t//Since searchProducts() would trigger a dispatch here (while dispatching), we queue it up for after\n\t\t\t\t\t\t//the relevant completed action dispatches\n\t\t\t\t\t\t//Could set this up wherever we trigger a relevant action (e.g. in selectCustomerForOrder()), \n\t\t\t\t\t\t//but just-in-time here works just fine for our needs \n\t\t\t\t\t\tutil.setPostCompletedActionDispatchCallback(Actions.CUSTOMER_REFRESH, this, 'searchProducts', [this.state.searchTerm, 1, searchFilters, selectedCustomer.id]);\n\t\t\t\t\t\t//this.searchProducts(this.state.searchTerm, 1, searchFilters, selectedCustomer.id); //this.searchProducts(this.state.searchTerm, 1, this.state.searchFilters, selectedCustomer.id);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\n\t\t\t//Customer detail data was not able to be refreshed\n\t\t\t}else if(refreshStatus == Status.ERROR){\n\t\t\t\ttoastr.error('Unable to load customer details');\n\t\t\t}\n\t\t\t\n\t\t\tif(refreshStatus != Status.PENDING){\n\t\t\t\tthis.selectedRefreshedCustomerID = null; //reset this ID/flag once completed\n\t\t\t}\n\t\t\tthis.setState({ isCustomerSelectionLoading: (refreshStatus == Status.PENDING) });\n\t\t}\n\t}\n\t\n\t_onOrderChange = () => {\n\t\t//Get the new changed (saved) order\n\t\tlet savedOrder = OrderStore.getOrder(this.state.order.id);\n\t\t//If we've cancelled (deleted) the order\n\t\tif(savedOrder == null){\n\t\t\tsavedOrder = OrderStore.getOrder(); //fresh order object\n\t\t}\n\t\t\n\t\tthis.setState({\n\t\t\torder: savedOrder,\n\t\t\torderWithCustomerCreated: (savedOrder.customer_id != null && savedOrder.customer_id > 0) \n\t\t});\n\t}\n\t\n\tsearchProducts = (searchTerm, searchPage, searchFilters, customerID) => {\n\t\t//if(!this.state.isProductSearchLoading){\n\t\t\t//Customer ID param is optional, and there for enforcing a particular ID or enforcing no ID (null) \n\t\t\t//If not supplied, we use the default situation of current order customer - which may be null (in the case of no order customer loaded)\n\t\t\t//Update: in B2B auto-selected customer case, we always default to B2B customer (whether order created or not)\n\t\t\tcustomerID = ( customerID !== undefined ? customerID : (config.get(option.FUNC_CUSTOMER_AUTOSELECTION) ? util.getB2BCustomerID() : this.state.order.customer_id) );\n\t\t\tSalesActions.searchProducts(searchTerm, searchPage, null, searchFilters, customerID);\n\t\t//}\n\t}\n\t\n\tchangeProductQuantityForOrder = (product) => {\n\t\tthis.setState(function(prevState, props) {\n\t\t\t//This product is considered 'selected'\n\t\t\tif(product.quantity > 0){\n\t\t\t\tif(prevState.selectedProducts[product.id] == null){\n\t\t\t\t\ttoastr.success(product.name + ' added to order');\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tprevState.selectedProducts[product.id] = product;\n\t\t\t\t\n\t\t\t//This product is considered 'unselected'\n\t\t\t}else{\n\t\t\t\tif(prevState.selectedProducts[product.id] != null){\n\t\t\t\t\ttoastr.success(product.name + ' removed from order');\n\t\t\t\t\tprevState.selectedProducts[product.id] = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t//Update the saved order items\n\t\t\t//[This may need to be reworked if necessary, possibly using componentDidUpdate() to fire the order save after state change]\n\t\t\t//----------\n\t\t\tprevState.order.items = [];\n\t\t\t\n\t\t\tfor (var productID in prevState.selectedProducts) {\n\t\t\t\tlet product = prevState.selectedProducts[productID];\n\t\t\t\tif(product != null){\n\t\t\t\t\tlet formattedCurrency = {\n\t\t\t\t\t\t'value': 0,\n\t\t\t\t\t\t'displayValue': '0.00'\n\t\t\t\t\t};\n\t\t\t\t\tif(product.calc_price != null){\n\t\t\t\t\t\tformattedCurrency = util.formatCurrency(product.calc_price);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tthis.state.order.items.push({\n\t\t\t\t\t\t//'uom_id': null //[optional]\n\t\t\t\t\t\n\t\t\t\t\t\t'product_id': product.id,\n\t\t\t\t\t\t'sku': product.sku, \n\t\t\t\t\t\t'name': product.name, \n\t\t\t\t\t\t'quantity': product.quantity,\n\t\t\t\t\t\t'quantity_display': product.quantity, //better than product.quantity_display when copying into order\n\t\t\t\t\t\t'quantity_min': product.quantity_min,\n\t\t\t\t\t\t'quantity_max': product.quantity_max,\n\t\t\t\t\t\t'quantity_mom': product.quantity_mom,\n\t\t\t\t\t\t'is_taxable': product.is_taxable,\n\t\t\t\t\t\t'tax_class_id': product.tax_class_id,\n\t\t\t\t\t\t'price': formattedCurrency.value,\n\t\t\t\t\t\t'price_orig': formattedCurrency.value, \n\t\t\t\t\t\t'price_display': formattedCurrency.displayValue,\n\t\t\t\t\t\t\n\t\t\t\t\t\t//These values are calculated by OrderStore calculations (including line item tax calculations)\n\t\t\t\t\t\t'total': formattedCurrency.value, \n\t\t\t\t\t\t'total_display': formattedCurrency.displayValue\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tSalesActions.saveOrder(this.state.order);\n\t\t\t//----------\n\t\t\t\n\t\t\treturn {\n\t\t\t\tselectedProducts: prevState.selectedProducts,\n\t\t\t\torder: prevState.order\n\t\t\t};\n\t\t});\n\t}\n\t\n\t//Convenience function that covers the regular and B2B (auto-selected customer) case\n\tcreateNewOrder = () => {\n\t\tif(config.get(option.FUNC_CUSTOMER_AUTOSELECTION)){\n\t\t\t//We auto-select the known B2B customer for the order\n\t\t\t//[We don't check the B2B customer 'is_approved_for_orders' flag as we don't strictly have that info here yet (no call to customer/list has happened)]\n\t\t\tthis.selectCustomerForOrder({ \n\t\t\t\tid: util.getB2BCustomerID(),\n\t\t\t\tis_approved_for_orders: 1 \n\t\t\t});\n\t\t}else{\n\t\t\tthis.showCustomerSelectionList();\n\t\t}\n\t}\n\t\n\tshowCustomerSelectionList = () => {\n\t\t//Do an initial search without filters [Update: this is kicked off within the list component (after mounting)]\n\t\t//this.searchCustomers();\n\t\t//Display search popup (with cleared results) \n\t\tthis.setState({\n\t\t\tisCustomerSelectionVisible: true, \n\t\t\tcustomerSearchTerm: '',\n\t\t\tcustomerSearchPage: 1, \n\t\t\tcustomerSearchTotalPages: null, \n\t\t\tcustomerSearchResults: []\n\t\t});\n\t}\n\t\n\thideCustomerSelectionList = () => {\n\t\tthis.setState({isCustomerSelectionVisible: false});\n\t}\n\t\n\tsearchCustomers = (searchTerm, searchPage) => {\n\t\t//if(!this.state.isCustomerSearchLoading){\n\t\t\tSalesActions.searchCustomers(searchTerm, searchPage, 5);\n\t\t//}\n\t}\n\n\t//[This is very similar to OrderPage::selectCustomer()]\n\tselectCustomerForOrder = (customer) => {\n\t\tif(!this.state.isCustomerSearchLoading){\n\t\t\tif(customer.is_approved_for_orders == 1){\n\t\t\t\t//For now, if the FUNC_ONLINE_CUSTOMERS config setting is on, let's ALWAYS refresh the \n\t\t\t\t//customer details from server (not just if we don't have them in store), \n\t\t\t\t//followed by the loading/saving of the customer against the order\n\t\t\t\t//Update: In the B2B (auto-selected customer) case, the B2B customer is pre-loaded by sales page refresh and available in \n\t\t\t\t//the customerStore, so we don't need to server select (refresh) the customer here\n\t\t\t\tif(config.get(option.FUNC_ONLINE_CUSTOMERS) && !config.get(option.FUNC_CUSTOMER_AUTOSELECTION)){\n\t\t\t\t\tthis.selectedRefreshedCustomerID = customer.id;\n\t\t\t\t\tCallActions.refreshCustomer(customer.id, false, [this.state.order.id]);\n\t\t\t\t\t//[See _onCustomerSearchOrSelectChange() for the follow-up customer select list closing, and product re-searching]\n\t\t\t\t\t//[Note that the whole customer server select (customer refresh and order saving) could be wrapped into a composite action queue and then \n\t\t\t\t\t//we could track the status of the entire action!]\n\t\t\t\t\t\n\t\t\t\t//'Offline' and B2B case\t\n\t\t\t\t}else{\n\t\t\t\t\tlet selectedCustomer = CustomerStore.getCustomer(customer.id);\n\t\t\t\t\tif(selectedCustomer != null){\n\t\t\t\t\t\t//Check whether there's a change in terms of customer (customer added/changed)\n\t\t\t\t\t\t//Additionally, in the auto-selected customer case (B2B), we don't need to search again as the product list is already geared for this customer \n\t\t\t\t\t\tlet blnNewProductSearchNeeded = ((this.state.order.customer_id != selectedCustomer.id) && !config.get(option.FUNC_CUSTOMER_AUTOSELECTION));\n\t\t\t\t\t\t\n\t\t\t\t\t\t//Update order details [Not recommended way to update but works for now in the absence of Redux]\n\t\t\t\t\t\tthis.state.order.customer_id = selectedCustomer.id;\n\t\t\t\t\t\tthis.state.order.customer_name = selectedCustomer.name;\n\t\t\t\t\t\t\n\t\t\t\t\t\t//Set expected date based on 'default_lead_time', if available\n\t\t\t\t\t\tthis.state.order.expected_date = (selectedCustomer.default_lead_time != null) ? (util.getUnixTimeStartOfDay() + selectedCustomer.default_lead_time * 86400): null;\n\t\t\t\t\t\t//Set customer-specific payment term, if available and we don't already have one saved\n\t\t\t\t\t\tthis.state.order.payment_terms_id = (this.state.order.payment_terms_id == null && selectedCustomer.payment_term != null) ? selectedCustomer.payment_term : this.state.order.payment_terms_id;\n\t\t\t\t\t\t\n\t\t\t\t\t\t//Set the customer-specific currency for the order, if the customer-specific currency exists,\n\t\t\t\t\t\t//otherwise use the default instance currency\n\t\t\t\t\t\tlet objCurrency = OrderStore.getCurrencyOrDefault(selectedCustomer.default_currency_id);\n\t\t\t\t\t\tthis.state.order.currency_id = objCurrency.id;\n\t\t\t\t\t\tthis.state.order.currency_display_name = objCurrency.name;\n\t\t\t\t\t\tthis.state.order.currency_display_symbol = objCurrency.symbol;\n\t\t\t\t\t\t\n\t\t\t\t\t\t//Clear the billing and shipping addresses (blank selection - not strictly necessary here since fresh order, but for completeness and consistency with other similar screens of app)\n\t\t\t\t\t\tthis.state.order.billing_location_id = 0;\n\t\t\t\t\t\tthis.state.order.shipping_location_id = 0;\n\t\t\t\t\t\t\n\t\t\t\t\t\tSalesActions.saveOrder(this.state.order);\n\t\t\t\t\t\tthis.hideCustomerSelectionList();\n\t\t\t\t\t\t//toastr.success('Customer details loaded');\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(blnNewProductSearchNeeded){\n\t\t\t\t\t\t\t//Update the currency symbol to be used in listings, in case there was a customer currency change\n\t\t\t\t\t\t\tthis.currencySymbol = objCurrency.symbol;\n\t\t\t\t\t\t\n\t\t\t\t\t\t\t//Re-search, if necessary (update products and prices for current customer)\n\t\t\t\t\t\t\t//[Unfortunately we need to 'chain' this action here]\n\t\t\t\t\t\t\t//[Although relying on the default searchProducts() usage of this.state.order.customer_id should work fine, \n\t\t\t\t\t\t\t//we explicitly specify the new customer ID, to avoid any race conditions]\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t//Let's also helpfully automatically filter for recent products if this customer has any\n\t\t\t\t\t\t\t//Update: We no longer display recent products when this customer has them, and instead default to showing all\n\t\t\t\t\t\t\tlet searchFilters = this.state.searchFilters || {};\n\t\t\t\t\t\t\t//searchFilters.customerProducts = (selectedCustomer.products != null && selectedCustomer.products.length > 0) ? SearchFilters.RECENT : SearchFilters.ALL;\n\t\t\t\t\t\t\tsearchFilters.customerProducts = SearchFilters.ALL;\n\t\t\t\t\t\t\tthis.searchProducts(this.state.searchTerm, 1, searchFilters, selectedCustomer.id);\n\t\t\t\t\t\t\t//this.searchProducts(this.state.searchTerm, 1, this.state.searchFilters, selectedCustomer.id);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\t\n\t\t\t}else{\n\t\t\t\ttoastr.warning('This customer is not approved to place orders');\n\t\t\t}\n\t\t}\n\t}\n\t\n\tcancelOrder = () => {\n\t\tSalesActions.cancelOrder(this.state.order.id);\n\t\t\n\t\t//In the auto-selected customer case (B2B), we don't need to search again as the product list is already geared for this customer\n\t\tif(!config.get(option.FUNC_CUSTOMER_AUTOSELECTION)){\n\t\t\t//The cancelled order causes the customer to be removed, so we need to reset the currency symbol to be used in listings, in case there was a previous customer currency change\n\t\t\tthis.currencySymbol = this.defaultCurrencySymbol;\n\t\t\t\t\t\t\n\t\t\t//The cancelled order causes the customer to be removed, so we need to re-search (update products and prices for no customer filtering)\n\t\t\t//[Unfortunately we need to 'chain' this action here]\n\t\t\t//[We need to explicitly specify no customer ID, to prevent the default searchProducts() usage of this.state.order.customer_id \n\t\t\t//(which is still a value at time of calling otherwise)]\n\t\t\tlet searchFilters = this.state.searchFilters;\n\t\t\tif(searchFilters != null && searchFilters.customerProducts != null){\n\t\t\t\tsearchFilters.customerProducts = SearchFilters.ALL; //[if this is present, ensure that it's set to ALL for completeness]\n\t\t\t}\n\t\t\tthis.searchProducts(this.state.searchTerm, 1, searchFilters, null);\t\t\n\t\t}\n\t}\n\t\n\trender() {\n\t\t//<Link className=\"btn btn-primary\" role=\"button\" to=\"/sales\"><i className=\"fa fa-arrow-left\"></i> Back to <strong>My Sales</strong></Link>\n\t\t//<h1>Products<br />\n\t\t//\t{ this.state.orderWithCustomerCreated ? <small>{this.state.order.customer_name}</small> : null }\n\t\t//</h1>\n\t\t\n\t\t//If we do B2B customer server selection again (on new order creation), show the user:\n\t\t//<ProductList isLoading={this.state.isProductSearchLoading || this.state.isCustomerSelectionLoading}\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t{\n\t\t\t\t\tthis.state.orderWithCustomerCreated ?\n\t\t\t\t\t<div className=\"btn-bar\" role=\"group\">\n\t\t\t\t\t\t<Link className={\"btn btn-primary col-xs-3\" + (this.state.isProductSearchLoading ? \" disabled\" : \"\")} role=\"button\" to=\"/sales\"><i className=\"fa fa-arrow-left\"></i> Back</Link>\n\t\t\t\t\t\t<Link className={\"btn btn-primary col-xs-5\" + (this.state.isProductSearchLoading ? \" disabled\" : \"\")} role=\"button\" to={\"/sales/orders/\" + this.state.order.id}><i className=\"fa fa-shopping-cart\"></i> Proceed to Order</Link>\n\t\t\t\t\t\t<button className=\"btn btn-primary col-xs-4\" onClick={this.cancelOrder} disabled={this.state.isProductSearchLoading}><i className=\"fa fa-close\"></i> Cancel Order</button>\n\t\t\t\t\t</div>\n\t\t\t\t\t:\n\t\t\t\t\t<div className=\"btn-bar\" role=\"group\">\n\t\t\t\t\t\t<Link className={\"btn btn-primary col-xs-6\" + (this.state.isProductSearchLoading ? \" disabled\" : \"\")} role=\"button\" to=\"/sales\"><i className=\"fa fa-arrow-left\"></i> Back to <strong>My Sales</strong></Link>\n\t\t\t\t\t\t<button className=\"btn btn-primary col-xs-6\" onClick={this.createNewOrder} disabled={this.state.isProductSearchLoading}><i className=\"fa fa-plus\"></i> New Order</button>\n\t\t\t\t\t</div>\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t{ this.state.orderWithCustomerCreated ? <h1 className=\"sub-button-heading\">{this.state.order.customer_name}</h1> : null }\n\t\t\t\t\n\t\t\t\t{ this.state.isCustomerSelectionVisible ? \n\t\t\t\t\t<CustomerSelectList \n\t\t\t\t\t\tsearchTerm={this.state.customerSearchTerm}\n\t\t\t\t\t\tsearchPage={this.state.customerSearchPage}\n\t\t\t\t\t\tsearchPageSize={this.state.customerSearchPageSize}\n\t\t\t\t\t\tsearchTotal={this.state.customerSearchTotal}  \n\t\t\t\t\t\tsearchTotalPages={this.state.customerSearchTotalPages} \n\t\t\t\t\t\tsearchResults={this.state.customerSearchResults} \n\t\t\t\t\t\tonSearch={this.searchCustomers} \n\t\t\t\t\t\tonSelect={this.selectCustomerForOrder} \n\t\t\t\t\t\tonFinish={this.hideCustomerSelectionList} \n\t\t\t\t\t\tisLoading={this.state.isCustomerSearchLoading || this.state.isCustomerSelectionLoading} \n\t\t\t\t\t/> : null }\n\t\t\t\t\n\t\t\t\t<ProductList \n\t\t\t\t\tcurrencySymbol={this.currencySymbol}\n\t\t\t\t\tproducts={this.state.products}\n\t\t\t\t\tselectedProducts={this.state.selectedProducts}\n\t\t\t\t\tsearchTerm={this.state.searchTerm} \n\t\t\t\t\tsearchPage={this.state.searchPage}\n\t\t\t\t\tsearchPageSize={this.state.searchPageSize}\n\t\t\t\t\tsearchFilters={this.state.searchFilters}\n\t\t\t\t\tcustomerSearchFiltersActive={this.state.orderWithCustomerCreated || config.get(option.FUNC_CUSTOMER_AUTOSELECTION)}\n\t\t\t\t\tsearchTotal={this.state.searchTotal} \n\t\t\t\t\tsearchTotalPages={this.state.searchTotalPages}\n\t\t\t\t\tcategories={this.state.categories} \n\t\t\t\t\tonSearch={this.searchProducts}\n\t\t\t\t\tonProductQuantityChange={this.changeProductQuantityForOrder} \n\t\t\t\t\tisLoading={this.state.isProductSearchLoading}\n\t\t\t\t\tisProductSelectionAvailable={this.state.orderWithCustomerCreated} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default ProductsPage;","\"use strict\";\n\nimport React from 'react';\nimport { Link, Redirect } from 'react-router-dom';\nvar SalesActions = require('../../actions/salesActions');\nvar Status = require('../../constants/actionStatuses');\nvar SalesEntities = require('../../constants/salesEntities');\nvar SearchTypes = require('../../constants/searchTypes');\nvar Actions = require('../../constants/actionTypes');\nvar ActionStatusStore = require('../../stores/actionStatusStore');\nvar CustomerStore = require('../../stores/customerStore');\nvar OrderStore = require('../../stores/orderStore');\nvar CustomerList = require('./customerList');\nvar CustomerRequestList = require('../calls/customerRequestList');\nvar option = require('../../constants/configOptions.js');\nvar config = require('../../config.js');\nvar util = require('../../util.js');\nvar toastr = require('toastr');\n\nclass CustomersPage extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\t\n\t\tthis.state = {\n\t\t\tcustomers: [],\n\t\t\tsearchTerm: '',\n\t\t\tsearchPage: 1,\n\t\t\tsearchPageSize: null,\n\t\t\tsearchTotal: null,\n\t\t\tsearchTotalPages: null,\n\t\t\tisCustomerSearchLoading: false,\n\t\t\t\n\t\t\tcustomerRequestSearchTerm: '',\n\t\t\tcustomerRequestSearchPage: 1,\n\t\t\tcustomerRequestSearchPageSize: null,\n\t\t\tcustomerRequestSearchTotal: null,\n\t\t\tcustomerRequestSearchTotalPages: null,\n\t\t\tcustomerRequestSearchResults: [],\n\t\t\tisCustomerRequestSearchLoading: false,\n\t\t\tisCustomerRequestLoading: false,\n\t\t\tisCustomerRequestVisible: false,\n\t\t\tcustomerWasRequested: false,\n\t\t\t\n\t\t\torderWithCustomerCreated: false, \t//specific separate flag for when we're sure the order is ready to be transferred to\n\t\t\torder: OrderStore.getOrder()\t\t//fresh order object\n\t\t};\n\t}\n\t\n\tcomponentWillMount(){\n\t\tutil.setScreenTitle(\"Customers\");\n\t}\n\t\n\tcomponentDidMount() {\n\t\tCustomerStore.addChangeListener(this._onChange);\n\t\tActionStatusStore.addChangeListener(this._onCustomerRequestStatusChange);\n\t\tOrderStore.addChangeListener(this._onOrderChange);\n\t\t//Do an initial search\n\t\tthis.searchCustomers();\n\t}\n\t\n\tcomponentWillUnmount() {\n\t\tCustomerStore.removeChangeListener(this._onChange);\n\t\tActionStatusStore.removeChangeListener(this._onCustomerRequestStatusChange);\n\t\tOrderStore.removeChangeListener(this._onOrderChange);\n\t}\n\t\n\t_onChange = () => {\n\t\t//We check whether the customer request modal is visible as a quick test to avoid unnecessary state updates since we're only dealing with one or the other list at a time.  \n\t\t//(We can't monitor just changes in the two search statuses themselves to achieve this, since with local searching, e.g. we go from OK to OK, even though change has happened!)\n\t\tif(this.state.isCustomerRequestVisible){\n\t\t\t//Customer requests always use a remote customer search. Customer requests only happen when FUNC_ONLINE_CUSTOMERS config setting is off (i.e. offline customers) \n\t\t\tlet serverSearchStatus = CustomerStore.getStatus(Actions.CUSTOMERS_SEARCH_SERVER);\n\t\t\t\n\t\t\t//Customer request search data has been refreshed\n\t\t\tif(serverSearchStatus == Status.OK){\n\t\t\t\tthis.setState({\n\t\t\t\t\tisCustomerRequestSearchLoading: false, \n\t\t\t\t\tcustomerRequestSearchTerm: CustomerStore.getSearchTerm(SearchTypes.SERVER),\n\t\t\t\t\tcustomerRequestSearchPage: CustomerStore.getSearchPage(SearchTypes.SERVER),\n\t\t\t\t\tcustomerRequestSearchPageSize: CustomerStore.getSearchPageSize(SearchTypes.SERVER),\n\t\t\t\t\tcustomerRequestSearchTotal: CustomerStore.getSearchTotal(SearchTypes.SERVER),\n\t\t\t\t\tcustomerRequestSearchTotalPages: CustomerStore.getSearchTotalPages(SearchTypes.SERVER), \n\t\t\t\t\tcustomerRequestSearchResults: CustomerStore.getSearchResults(SearchTypes.SERVER)\n\t\t\t\t});\n\t\t\t\n\t\t\t//Customer request search data is being refreshed\n\t\t\t}else if(serverSearchStatus == Status.PENDING){\n\t\t\t\tthis.setState({\n\t\t\t\t\tisCustomerRequestSearchLoading: true, \n\t\t\t\t\tcustomerRequestSearchTerm: CustomerStore.getSearchTerm(SearchTypes.SERVER),\n\t\t\t\t\tcustomerRequestSearchPage: CustomerStore.getSearchPage(SearchTypes.SERVER)\n\t\t\t\t});\n\t\t\t\n\t\t\t//Customer request search data was not able to be refreshed\n\t\t\t}else if(serverSearchStatus == Status.ERROR){\n\t\t\t\tthis.setState({\n\t\t\t\t\tisCustomerRequestSearchLoading: false, \n\t\t\t\t\tcustomerRequestSearchTerm: CustomerStore.getSearchTerm(SearchTypes.SERVER),\n\t\t\t\t\tcustomerRequestSearchPage: CustomerStore.getSearchPage(SearchTypes.SERVER)\n\t\t\t\t});\n\t\t\t}\n\t\t}else{\n\t\t\t//Regular customer searching can be remote or local, depending on the FUNC_ONLINE_CUSTOMERS config setting\n\t\t\tlet searchStatus = CustomerStore.getStatus(config.get(option.FUNC_ONLINE_CUSTOMERS) ? Actions.CUSTOMERS_SEARCH_SERVER : Actions.CUSTOMERS_SEARCH_LOCAL);\n\t\t\tlet searchType = config.get(option.FUNC_ONLINE_CUSTOMERS) ? SearchTypes.SERVER : SearchTypes.LOCAL;\n\t\t\t\n\t\t\t//Customer search data has been refreshed\n\t\t\tif(searchStatus == Status.OK){\n\t\t\t\tthis.setState({\n\t\t\t\t\tisCustomerSearchLoading: false, \n\t\t\t\t\tsearchTerm: CustomerStore.getSearchTerm(searchType), \n\t\t\t\t\tsearchPage: CustomerStore.getSearchPage(searchType),\n\t\t\t\t\tsearchPageSize: CustomerStore.getSearchPageSize(searchType),\n\t\t\t\t\tsearchTotal: CustomerStore.getSearchTotal(searchType),\n\t\t\t\t\tsearchTotalPages: CustomerStore.getSearchTotalPages(searchType), \n\t\t\t\t\tcustomers: CustomerStore.getSearchResults(searchType)\n\t\t\t\t});\n\t\t\t\t//toastr.success('Customer search results refreshed');\n\t\t\t\n\t\t\t//Customer search data is being refreshed\n\t\t\t}else if(searchStatus == Status.PENDING){\n\t\t\t\tthis.setState({\n\t\t\t\t\tisCustomerSearchLoading: true, \n\t\t\t\t\tsearchTerm: CustomerStore.getSearchTerm(searchType), \n\t\t\t\t\tsearchPage: CustomerStore.getSearchPage(searchType)\n\t\t\t\t});\n\t\t\t\n\t\t\t//Customer search data was not able to be refreshed\n\t\t\t}else if(searchStatus == Status.ERROR){\n\t\t\t\tthis.setState({\n\t\t\t\t\tisCustomerSearchLoading: false, \n\t\t\t\t\tsearchTerm: CustomerStore.getSearchTerm(searchType), \n\t\t\t\t\tsearchPage: CustomerStore.getSearchPage(searchType)\n\t\t\t\t});\n\t\t\t\t//toastr.error('Unable to refresh customer search results');\n\t\t\t}\n\t\t}\n\t}\n\t\n\t//Only needed when FUNC_ONLINE_CUSTOMERS config setting is off (i.e. offline customers)\n\t_onCustomerRequestStatusChange = () => {\n\t\t//Main status for the entire 'request' operation\n\t\tlet requestStatus = ActionStatusStore.getStatus(Actions.CUSTOMERS_SALES_REFRESH);\n\t\t\n\t\t//Within entityStatuses, customer refresh ('request') and price lists / product rules are all we're interested in\n\t\tlet entityStatuses = ActionStatusStore.getEntityStatuses(Actions.SALES_REFRESH);\n\t\tlet customerRequestStatus = entityStatuses != null ? entityStatuses[SalesEntities.CUSTOMER] : null;\n\n\t\t//Operation completed entirely\n\t\tif(requestStatus != Status.PENDING){\n\t\t\tif(customerRequestStatus == Status.OK){\n\t\t\t\ttoastr.success('Customer added');\n\t\t\t}else if(customerRequestStatus == Status.PARTIAL){\n\t\t\t\ttoastr.warning('Customer partially added');\n\t\t\t}else if(customerRequestStatus == Status.ERROR){\n\t\t\t\ttoastr.error('Customer could not be added');\n\t\t\t}\n\t\t\t\n\t\t\t//The additional sales data is only refreshed if the customer refresh succeeded in some way\n\t\t\tif(customerRequestStatus == Status.OK || customerRequestStatus == Status.PARTIAL){\n\t\t\t\tlet customerRequestStatus2 = entityStatuses[SalesEntities.PRICE_LIST];\n\t\t\t\tlet customerRequestStatus3 = entityStatuses[SalesEntities.PRODUCT_RULE];\n\t\t\t\t\n\t\t\t\tif(customerRequestStatus2 == Status.OK && customerRequestStatus3 == Status.OK){\n\t\t\t\t\ttoastr.success('Customer sales data refreshed');\n\t\t\t\t}else if(customerRequestStatus2 == Status.ERROR && customerRequestStatus3 == Status.ERROR){\n\t\t\t\t\t//toastr.error('Customer sales data could not be refreshed');\n\t\t\t\t}else{\n\t\t\t\t\ttoastr.warning('Customer sales data partially refreshed');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.setState((prevState) => ({\n\t\t\t//Is a customer 'request' underway? \n\t\t\t//isCustomerRequestLoading: (customerRequestStatus == Status.PENDING || customerRequestStatus2 == Status.PENDING || customerRequestStatus3 == Status.PENDING),\n\t\t\tisCustomerRequestLoading: (requestStatus == Status.PENDING),\n\t\t\t//Was at least 1 successful customer 'request' completed? (flag for main list refresh) \n\t\t\tcustomerWasRequested: (prevState.customerWasRequested || customerRequestStatus == Status.OK || customerRequestStatus == Status.PARTIAL)\n\t\t}));\n\t}\n\t\n\t_onOrderChange = () => {\n\t\tlet savedOrder = OrderStore.getOrder(this.state.order.id);\n\t\tthis.setState({\n\t\t\torder: savedOrder,\n\t\t\torderWithCustomerCreated: (savedOrder.customer_id != null && savedOrder.customer_id > 0) \n\t\t});\n\t}\n\t\n\tsearchCustomers = (searchTerm, searchPage) => {\n\t\t//if(!this.state.isCustomerSearchLoading){\n\t\t\t//This will be a local or server search, depending on the FUNC_ONLINE_CUSTOMERS config setting\n\t\t\tSalesActions.searchCustomers(searchTerm, searchPage);\n\t\t//}\n\t}\n\t\n\tshowCustomerRequestList = () => {\n\t\tif(!this.state.isCustomerSearchLoading){\n\t\t\t//Do an initial customer request search without filters [Update: this is kicked off within the modal list component (after mounting)]\n\t\t\t//this.searchCustomersOnServer();\n\t\t\t//Display search popup (with cleared results) \n\t\t\tthis.setState({\n\t\t\t\tisCustomerRequestVisible: true, \n\t\t\t\tcustomerRequestSearchTerm: '',\n\t\t\t\tcustomerRequestSearchPage: 1, \n\t\t\t\tcustomerRequestSearchTotalPages: null, \n\t\t\t\tcustomerRequestSearchResults: []\n\t\t\t});\n\t\t}\n\t}\n\thideCustomerRequestList = () => {\n\t\tif(!this.state.isCustomerSearchLoading){\n\t\t\tlet blnRefreshCustomersOnClose = this.state.customerWasRequested; //whether main customer list needs refreshing on close\n\n\t\t\tthis.setState((prevState) => ({\n\t\t\t\tisCustomerRequestVisible: false, customerWasRequested: false\n\t\t\t}), () => {\n\t\t\t\tif(blnRefreshCustomersOnClose){\n\t\t\t\t\tthis.searchCustomers(this.state.searchTerm, this.state.searchPage);\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\t//Have to use the structure above (instead of one below) to ensure we only fire the search after isCustomerRequestVisible state-change back to false\n\t\t\t//This is so that _onChange() can continue to use isCustomerRequestVisible the way it does in its update logic\n\t\t\t\n\t\t\t//if(this.state.customerWasRequested){ //main customer list needs refreshing on close\n\t\t\t//\tthis.searchCustomers(this.state.searchTerm, this.state.searchPage);\n\t\t\t//}\n\t\t\t//this.setState({isCustomerRequestVisible: false, customerWasRequested: false});\n\t\t}\n\t}\n\tsearchCustomersOnServer = (searchTerm, searchPage) => {\n\t\t//if(!this.state.isCustomerRequestSearchLoading){\n\t\t\tSalesActions.searchCustomersRemotely(searchTerm, searchPage);\n\t\t//}\n\t}\n\trequestCustomer = (customer) => { //customerID\n\t\tif(!this.state.isCustomerRequestSearchLoading){\n\t\t\t//A customer 'request' in this context, is a refreshing of our customer detail (and related sales data) for this customer\n\t\t\t//Note: Another potential option is using CallActions.refreshCustomer(), but this refreshes what we need\n\t\t\t//Note: we can potentially change the flow to refresh (potentially) multiple requested customers all at once\n\t\t\tSalesActions.refreshCustomersAndSalesData([customer.id]);\n\t\t}\n\t}\n\t\n\t//[This is very similar to OrderPage::selectCustomer()]\n\t/*selectCustomerForOrder = (customer) => {\n\t\tif(!this.state.isCustomerSearchLoading){\n\t\t\tlet selectedCustomer = CustomerStore.getCustomer(customer.id);\n\t\t\tif(selectedCustomer != null){\n\t\t\t\tif(selectedCustomer.is_approved_for_orders){\n\t\t\t\t\t//Update order details [Not recommended way to update but works for now in the absence of Redux]\n\t\t\t\t\tthis.state.order.customer_id = selectedCustomer.id;\n\t\t\t\t\tthis.state.order.customer_name = selectedCustomer.name;\n\t\t\t\t\t\n\t\t\t\t\t//Set expected date based on 'default_lead_time', if available\n\t\t\t\t\tthis.state.order.expected_date = (selectedCustomer.default_lead_time != null) ? (util.getUnixTimeStartOfDay() + selectedCustomer.default_lead_time * 86400): null;\n\t\t\t\t\t//Set customer-specific payment term, if available and we don't already have one saved\n\t\t\t\t\tthis.state.order.payment_terms_id = (this.state.order.payment_terms_id == null && selectedCustomer.payment_term != null) ? selectedCustomer.payment_term : this.state.order.payment_terms_id;\n\t\t\t\t\t\n\t\t\t\t\t//Set the customer-specific currency for the order, if the customer-specific currency exists,\n\t\t\t\t\t//otherwise use the default instance currency\n\t\t\t\t\tlet objCurrency = OrderStore.getCurrencyOrDefault(selectedCustomer.default_currency_id);\n\t\t\t\t\tthis.state.order.currency_id = objCurrency.id;\n\t\t\t\t\tthis.state.order.currency_display_name = objCurrency.name;\n\t\t\t\t\tthis.state.order.currency_display_symbol = objCurrency.symbol;\n\t\t\t\t\t\n\t\t\t\t\t//Clear the billing and shipping addresses (blank selection - not strictly necessary here since fresh order, but for completeness and consistency with other similar screens of app)\n\t\t\t\t\tthis.state.order.billing_location_id = 0;\n\t\t\t\t\tthis.state.order.shipping_location_id = 0;\n\t\t\t\t\t\n\t\t\t\t\tSalesActions.saveOrder(this.state.order);\n\t\t\t\t\t//toastr.success('Customer details loaded');\n\t\t\t\t}else{\n\t\t\t\t\ttoastr.warning('This customer is not approved to place orders');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}*/\n\t\n\trender() {\n\t\t//An order has been created with a selected customer\n\t\tif (this.state.orderWithCustomerCreated) {\n\t\t\t//Transition to this order's page for further editing\n\t\t\treturn (\n\t\t\t\t<Redirect push to={\"/sales/orders/\" + this.state.order.id} />\n\t\t\t);\n\t\t}\n\t\t\n\t\treturn (\n\t\t\t//<h1>Customers</h1>\n\t\t\t<div>\n\t\t\t\t{ config.get(option.FUNC_ONLINE_CUSTOMERS) ?\n\t\t\t\t<div className=\"btn-bar\" role=\"group\">\n\t\t\t\t\t<Link className={\"btn btn-primary col-xs-6\" + (this.state.isCustomerSearchLoading ? \" disabled\" : \"\")} role=\"button\" to=\"/sales\"><i className=\"fa fa-arrow-left\"></i> <span>Back to <strong>My Sales</strong></span></Link>\n\t\t\t\t\t<Link className={\"btn btn-primary col-xs-6\" + (this.state.isCustomerSearchLoading ? \" disabled\" : \"\")} role=\"button\" to=\"/sales/customers/new\"><i className=\"fa fa-user-plus\"></i> <span>Add Customer</span></Link>\n\t\t\t\t</div> \n\t\t\t\t:\n\t\t\t\t<div className=\"btn-bar\" role=\"group\">\n\t\t\t\t\t<Link className={\"btn btn-primary col-xs-4\" + (this.state.isCustomerSearchLoading ? \" disabled\" : \"\")} role=\"button\" to=\"/sales\"><i className=\"fa fa-arrow-left\"></i> <span style={{fontSize: '10px'}}>Back to <strong>My Sales</strong></span></Link>\n\t\t\t\t\t<button className=\"btn btn-primary col-xs-4\" onClick={this.showCustomerRequestList} disabled={this.state.isCustomerSearchLoading}><i className=\"fa fa-user-plus\"></i> <span style={{fontSize: '10px'}}>Request Customer</span></button>\n\t\t\t\t\t<Link className={\"btn btn-primary col-xs-4\" + (this.state.isCustomerSearchLoading ? \" disabled\" : \"\")} role=\"button\" to=\"/sales/customers/new\"><i className=\"fa fa-user-plus\"></i> <span style={{fontSize: '10px'}}>Add Customer</span></Link>\n\t\t\t\t</div>\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t{ this.state.isCustomerRequestVisible ? \n\t\t\t\t\t<CustomerRequestList \n\t\t\t\t\t\tsearchTerm={this.state.customerRequestSearchTerm}\n\t\t\t\t\t\tsearchPage={this.state.customerRequestSearchPage}\n\t\t\t\t\t\tsearchPageSize={this.state.customerRequestSearchPageSize}\n\t\t\t\t\t\tsearchTotal={this.state.customerRequestSearchTotal}  \n\t\t\t\t\t\tsearchTotalPages={this.state.customerRequestSearchTotalPages} \n\t\t\t\t\t\tsearchResults={this.state.customerRequestSearchResults} \n\t\t\t\t\t\tonSearch={this.searchCustomersOnServer} \n\t\t\t\t\t\tonRequest={this.requestCustomer} \n\t\t\t\t\t\tonFinish={this.hideCustomerRequestList} \n\t\t\t\t\t\tisLoading={(this.state.isCustomerRequestSearchLoading || this.state.isCustomerRequestLoading)} \n\t\t\t\t\t/> : null }\n\t\t\t\t\n\t\t\t\t<CustomerList \n\t\t\t\t\tcustomers={this.state.customers}\n\t\t\t\t\tsearchTerm={this.state.searchTerm} \n\t\t\t\t\tsearchPage={this.state.searchPage}\n\t\t\t\t\tsearchPageSize={this.state.searchPageSize}\n\t\t\t\t\tsearchTotal={this.state.searchTotal}  \n\t\t\t\t\tsearchTotalPages={this.state.searchTotalPages} \n\t\t\t\t\tonSearch={this.searchCustomers}\n\t\t\t\t\t//onSelect={this.selectCustomerForOrder} \n\t\t\t\t\tisLoading={this.state.isCustomerSearchLoading} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default CustomersPage;","\"use strict\";\n\nimport React from 'react';\n\nvar LibraryStore = require('../../stores/libraryStore');\nvar LibraryActions = require('../../actions/libraryActions');\nvar Status = require('../../constants/actionStatuses');\nvar CategoryList = require('./categoryList');\nvar toastr = require('toastr');\nvar util = require('../../util.js');\n\nvar LibraryPage = React.createClass({\n\tgetInitialState: function(){\n\t\treturn {\n\t\t\tcategoryTree: \t\tLibraryStore.getCategories(),\n\t\t\tcategoryTreeCounts:\tLibraryStore.getGlobalCategoriesFileCounts(), //best to keep this separate and do it at page level for now\n\t\t\tisLoading: false\n\t\t};\n\t},\n\t\n\tcomponentWillMount: function(){\n\t\tutil.setScreenTitle(\"Library\");\n\t},\n\t\n\tcomponentDidMount: function(){\n\t\tLibraryStore.addChangeListener(this._onChange);\n\t\t//Refresh the 'global' file library if it hasn't been refreshed yet today (or ever)\n\t\tif(util.isBeforeToday(LibraryStore.getLastRefreshForKey('global'))){\n\t\t\t//LibraryActions.refreshLibrary();\n\t\t\tLibraryActions.doAfterAccessCheck('refreshLibrary');\n\t\t}\n\t},\n\tcomponentWillUnmount: function(){\n\t\tLibraryStore.removeChangeListener(this._onChange);\n\t},\n\t\n\t_onChange: function(){\n\t\tvar status = LibraryStore.getStatus();\n\t\t//Library data has been refreshed \n\t\tif(status == Status.OK){\n\t\t\tthis.setState({isLoading: false, categoryTree: LibraryStore.getCategories(), categoryTreeCounts: LibraryStore.getGlobalCategoriesFileCounts()});\n\t\t\ttoastr.success('File library refreshed');\n\t\t\n\t\t//Library data is being refreshed\n\t\t}else if(status == Status.PENDING){\n\t\t\tthis.setState({isLoading: true});\n\t\t\n\t\t//Library data was not able to be refreshed\n\t\t}else if(status == Status.ERROR){\n\t\t\tthis.setState({isLoading: false});\n\t\t\ttoastr.error('Unable to refresh file library');\n\t\t\n\t\t//Library data partially refreshed\n\t\t}else if(status == Status.PARTIAL){\n\t\t\tthis.setState({isLoading: false, categoryTree: LibraryStore.getCategories(), categoryTreeCounts: LibraryStore.getGlobalCategoriesFileCounts()});\n\t\t\ttoastr.warning('Unable to refresh all files in library');\n\t\t}\n\t},\n\t\n\trefreshLibrary: function(){\n\t\tif(!this.state.isLoading){\n\t\t\t//LibraryActions.refreshLibrary();\n\t\t\tLibraryActions.doAfterAccessCheck('refreshLibrary');\n\t\t}\n\t},\n\t\n\trender: function(){\n\t\t//<h1>Library</h1>\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<button className=\"btn btn-header-refresh\" onClick={this.refreshLibrary} disabled={this.state.isLoading}><i className={\"fa fa-refresh fa-2x\" + (this.state.isLoading ? \" fa-spin\" : \"\")}></i></button>\n\n\t\t\t\t<div style={{marginTop: '-5px'}}>\n\t\t\t\t\t<CategoryList categoryTree={this.state.categoryTree} categoryTreeCounts={this.state.categoryTreeCounts} assignmentKey=\"global\" filterTopCategoryId={util.globalLibraryCategoryID} isLoading={this.state.isLoading} />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n});\n\nexport default LibraryPage;","\"use strict\";\n\nimport React from 'react';\nvar UserActions = require('../../actions/userActions');\nvar CommonActions = require('../../actions/commonActions');\nvar Actions = require('../../constants/actionTypes');\nvar Status = require('../../constants/actionStatuses');\nvar UserStore = require('../../stores/userStore');\nvar CallStore = require('../../stores/callStore');\t\t\t\t\t//[for app data submission]\nvar AuditStore = require('../../stores/auditStore');\t\t\t\t//[for app data submission]\nvar AuditAnswerStore = require('../../stores/auditAnswerStore');\t//[for app data submission]\nvar CustomerStore = require('../../stores/customerStore');\t\t\t//[for app data submission]\nvar ProductStore = require('../../stores/productStore');\t\t\t//[for app data submission]\nvar OrderStore = require('../../stores/orderStore');\t\t\t\t//[for app data submission]\nvar LibraryStore = require('../../stores/libraryStore');\t\t\t//[for app data submission]\nvar ActionStatusStore = require('../../stores/actionStatusStore');\nvar UserInfoList = require('./userInfoList');\n//var UserForm = require('./userForm');\nvar AppInfoList = require('./appInfoList');\nvar util = require('../../util.js');\nvar toastr = require('toastr');\n\nvar InfoPage = React.createClass({\n\tgetInitialState: function() {\n\t\treturn {\n\t\t\tuser: UserStore.getUser(), //user info\n\t\t\tuserFields: UserStore.getFields(), //[],\n\t\t\tisLoading: false,\n\t\t\tisAppDataSubmissionLoading: false\n\t\t};\n\t},\n\t\n\tcomponentWillMount: function(){\n\t\tutil.setScreenTitle(\"My Information\");\n\t},\n\t\n\tcomponentDidMount: function(){\n\t\tUserStore.addChangeListener(this._onChange);\n\t\tActionStatusStore.addChangeListener(this._onAppDataSubmissionChange);\n\t\t//Refresh the user info if it hasn't been refreshed yet today (or ever)\n\t\t/*if(util.isBeforeToday(UserStore.getLastRefresh())){\n\t\t\tUserActions.refreshUser();\n\t\t}*/\n\t\t//Refresh the user fields (and user) data if it hasn't been refreshed yet today (or ever)\n\t\tif(util.isBeforeToday(UserStore.getLastRefreshForFields())){\n\t\t\tUserActions.refreshUser(true);\n\t\t}\n\t},\n\t\n\tcomponentWillUnmount: function(){\n\t\tUserStore.removeChangeListener(this._onChange);\n\t\tActionStatusStore.removeChangeListener(this._onAppDataSubmissionChange);\n\t},\n\t\n\t_onChange: function(){\n\t\tif(UserStore.hasUser()){ //Prevent this view listening to changes (and displaying success message) if logged out due to insufficient permissions\n\t\t\tvar status = UserStore.getStatus();\n\t\t\t//User data has been successfully refreshed or saved\n\t\t\tif(status == Status.OK){\n\t\t\t\tthis.setState({\n\t\t\t\t\tisLoading: false, \n\t\t\t\t\tuser: UserStore.getUser(),\n\t\t\t\t\tuserFields: UserStore.getFields()\n\t\t\t\t});\n\t\t\t\ttoastr.success('User information refreshed'); //'User information saved'\n\t\t\t\n\t\t\t//User data is being refreshed or saved\n\t\t\t}else if(status == Status.PENDING){\n\t\t\t\tthis.setState({isLoading: true});\n\t\t\t\n\t\t\t//User data was not able to be refreshed or saved\n\t\t\t}else if(status == Status.ERROR){\n\t\t\t\tthis.setState({isLoading: false});\n\t\t\t\ttoastr.error('Unable to refresh user information'); //'Unable to save user information' //toastr.error(UserStore.getSaveError());\n\t\t\t\n\t\t\t//User data was only partially refreshed\n\t\t\t//[Currently, this can only happen when the fields data wasn't able to be refreshed]\n\t\t\t}else if(status == Status.PARTIAL){\n\t\t\t\tthis.setState({\n\t\t\t\t\tisLoading: false, \n\t\t\t\t\tuser: UserStore.getUser(),\n\t\t\t\t\tuserFields: UserStore.getFields()\n\t\t\t\t});\n\t\t\t\ttoastr.warning('Unable to refresh all user information');\n\t\t\t}\n\t\t}\n\t},\n\t\n\t_onAppDataSubmissionChange: function() {\n\t\tvar status = ActionStatusStore.getStatus(Actions.APP_DATA_SUBMIT);\n\t\t\n\t\t//App data has been submitted \n\t\tif(status == Status.OK){\n\t\t\tthis.setState({ isAppDataSubmissionLoading: false });\n\t\t\ttoastr.success('App data submitted');\n\t\t\n\t\t//App data is being submitted\n\t\t}else if(status == Status.PENDING){\n\t\t\tthis.setState({ isAppDataSubmissionLoading: true });\n\t\t\n\t\t//App data was not able to be submitted\n\t\t}else if(status == Status.ERROR){\n\t\t\tthis.setState({ isAppDataSubmissionLoading: false });\n\t\t\ttoastr.error('Unable to submit app data. Please contact your administrator.', null, { timeOut: 5000 });\n\t\t}\n\t},\n\t\n\trefreshUserInfo: function(){\n\t\tif(!this.state.isLoading && !this.state.isAppDataSubmissionLoading){\n\t\t\t//this.setState({lastPendingAction: pendingActions.USER_REFRESH});\n\t\t\tUserActions.refreshUser(util.isBeforeToday(UserStore.getLastRefreshForFields()));\n\t\t}\n\t},\n\t\n\t/*setUserInfo: function(event){\n\t\tvar field = event.target.name;\n\t\tvar value = event.target.value;\n\t\tthis.state.user[field] = value;\n\t\treturn this.setState({user: this.state.user});\n\t},\n\t\n\tuserFormIsValid: function(){\n\t\tvar formIsValid = true;\n\t\t\n\t\tif(!this.state.user.username.length || !this.state.user.password.length){\n\t\t\tformIsValid = false;\n\t\t}\n\t\t\n\t\treturn formIsValid;\n\t},\n\t\n\tsaveUserInfo: function(event){\n\t\tevent.preventDefault();\n\t\t\n\t\tif(!this.state.isLoading){\n\t\t\tif(!this.userFormIsValid()){\n\t\t\t\ttoastr.error('Please complete both fields');\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\t//this.setState({lastPendingAction: pendingActions.USER_SAVE});\n\t\t\tUserActions.saveUser(this.state.user);\n\t\t}\n\t},*/\n\t\n\tsubmitAppData: function(){\n\t\tif(!this.state.isLoading && !this.state.isAppDataSubmissionLoading){\n\t\t\t//Submit valid JSON exported store data, base 64 encoded, and additionally string replaced to encode all '+' as '%2B' (will be URL-decoded back again on server)\n\t\t\tCommonActions.submitAppData(util.base64Encode('{' + \n\t\t\t\t'\"userStore\":' \t\t\t+ UserStore.exportData() + \",\" +\n\t\t\t\t'\"callStore\":' \t\t\t+ CallStore.exportData() + \",\" +\n\t\t\t\t'\"auditStore\":' \t\t+ AuditStore.exportData() + \",\" +\n\t\t\t\t'\"auditAnswerStore\":' \t+ AuditAnswerStore.exportData() + \",\" +\n\t\t\t\t'\"customerStore\":' \t\t+ CustomerStore.exportData() + \",\" +\n\t\t\t\t'\"productStore\":' \t\t+ ProductStore.exportData() + \",\" +\n\t\t\t\t'\"orderStore\":' \t\t+ OrderStore.exportData() + \",\" +\n\t\t\t\t'\"libraryStore\":' \t\t+ LibraryStore.exportData() +\n\t\t\t'}').replace(/\\+/g, \"%2B\"));\t\t\t\n\t\t}\n\t},\n\n\trender: function(){\n\t\t\t\t//<h1>My Information</h1>\n\t\t\t\t/*<div className=\"btn-group\" role=\"group\">\n\t\t\t\t\t<button className=\"btn btn-primary\" onClick={this.refreshUserInfo} disabled={this.state.isLoading}>Refresh</button>\n\t\t\t\t\t<button className=\"btn btn-primary\" onClick={this.saveUserInfo} disabled={this.state.isLoading}>Save</button>\n\t\t\t\t</div>*/\n\t\t\t\t/*<button className=\"btn btn-primary\" onClick={this.refreshUserInfo} disabled={this.state.isLoading}>Refresh</button>\n\t\t\t\t<UserForm user={this.state.user} isLoading={this.state.isLoading} onChange={this.setUserInfo} onSave={this.saveUserInfo} />*/\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<button className=\"btn btn-header-refresh\" onClick={this.refreshUserInfo} disabled={this.state.isLoading || this.state.isAppDataSubmissionLoading}>\n\t\t\t\t\t<i className={\"fa fa-refresh fa-2x\" + (this.state.isLoading ? \" fa-spin\" : \"\")}></i>\n\t\t\t\t</button>\n\t\t\t\t\n\t\t\t\t<div style={{marginTop: '-5px'}}>\n\t\t\t\t\t<UserInfoList user={this.state.user} userFields={this.state.userFields} isLoading={this.state.isLoading} />\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t<AppInfoList onSubmitAppData={this.submitAppData} isLoading={this.state.isAppDataSubmissionLoading} />\n\t\t\t</div>\n\t\t);\n\t}\n});\n\nexport default InfoPage;","\"use strict\";\n\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nvar SalesActions = require('../actions/salesActions');\nvar CallActions = require('../actions/callActions');\nvar CommonActions = require('../actions/commonActions');\nvar Status = require('../constants/actionStatuses');\nvar SalesEntities = require('../constants/salesEntities');\nvar Actions = require('../constants/actionTypes');\nvar ActionStatusStore = require('../stores/actionStatusStore');\nvar CustomerStore = require('../stores/customerStore');\nvar ProductStore = require('../stores/productStore');\nvar OrderStore = require('../stores/orderStore');\nvar CallStore = require('../stores/callStore');\nvar ProgressModal = require('./common/progressModal');\nvar util = require('../util.js');\nvar toastr = require('toastr');\nvar _ = require('lodash');\n\nclass RefreshPage extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\t\n\t\tthis.state = {\n\t\t\tisLoading: false,\n\t\t\tisRefreshProgressVisible: false,\t//Keep separate flag from loading (to allow for refresh progress window to remain open afterwards)\n\t\t\trefreshProgressPercentage: 0,\n\t\t\trefreshProgressDescription: ''\n\t\t};\n\t\t\n\t\t//Flag for last action (indeterminate length)\n\t\t//NB: This can't be a state property, because occasionally it's not set before the first store changes come through, resulting in display issues\n\t\t//(This could be resolved by using the function version of setState() to only fire the refresh operation once lastPendingAction is properly set, \n\t\t//but then we're delaying the operation slightly, and there's no real need for lastPendingAction to be a state property.) \n\t\tthis.lastPendingAction = null;\n\t\t\n\t\tthis.progressDescriptions = {};\n\t\tthis.progressDescriptions['default'] \t\t\t\t\t= \"Refreshing\";\n\t\tthis.progressDescriptions[SalesEntities.PAYMENT_TERM] \t= \"Refreshing payment terms\";\n\t\tthis.progressDescriptions[SalesEntities.TAX_CLASS] \t\t= \"Refreshing tax classes\";\n\t\tthis.progressDescriptions[SalesEntities.CARRIER] \t\t= \"Refreshing carriers\";\n\t\tthis.progressDescriptions[SalesEntities.CURRENCY] \t\t= \"Refreshing currencies\";\n\t\tthis.progressDescriptions[SalesEntities.PRODUCT] \t\t= \"Refreshing products\";\n\t\tthis.progressDescriptions[SalesEntities.CATEGORY] \t\t= \"Refreshing categories\";\n\t\tthis.progressDescriptions[SalesEntities.ORDER] \t\t\t= \"Refreshing orders\";\n\t\tthis.progressDescriptions[SalesEntities.CUSTOMER] \t\t= \"Refreshing customers\";\n\t\tthis.progressDescriptions[SalesEntities.PRICE_LIST] \t= \"Refreshing price lists\";\n\t\tthis.progressDescriptions[SalesEntities.PRODUCT_RULE] \t= \"Refreshing product rules\";\n\t\t\n\t\tthis.completionMessages = {};\n\t\t\n\t\tthis.completionMessages[Actions.CALLS_RELATED_REFRESH] = {};\n\t\tthis.completionMessages[Actions.CALLS_RELATED_REFRESH][Status.OK] = \"Call list and related data refreshed\";\n\t\tthis.completionMessages[Actions.CALLS_RELATED_REFRESH][Status.ERROR] = \"Unable to refresh call list and related data\";\n\t\tthis.completionMessages[Actions.CALLS_RELATED_REFRESH][Status.PARTIAL] = \"Unable to refresh all call list related data\";\n\t\t\n\t\tthis.completionMessages[Actions.SALES_REFRESH] = {};\n\t\tthis.completionMessages[Actions.SALES_REFRESH][Status.OK] = \"Sales data refreshed\";\n\t\tthis.completionMessages[Actions.SALES_REFRESH][Status.ERROR] = \"Unable to refresh sales data\";\n\t\tthis.completionMessages[Actions.SALES_REFRESH][Status.PARTIAL] = \"Unable to refresh all sales data\";\n\t\t\n\t\tthis.completionMessages[Actions.ALL_REFRESH] = {};\n\t\tthis.completionMessages[Actions.ALL_REFRESH][Status.OK] = \"Sales and calls data refreshed\";\n\t\tthis.completionMessages[Actions.ALL_REFRESH][Status.ERROR] = \"Unable to refresh sales and calls data\";\n\t\tthis.completionMessages[Actions.ALL_REFRESH][Status.PARTIAL] = \"Unable to refresh all sales and calls data\";\n\t}\n\t\n\tcomponentWillMount(){\n\t\tutil.setScreenTitle(\"Refresh\");\n\t}\n\t\n\tcomponentDidMount() {\n\t\tActionStatusStore.addChangeListener(this._onChange);\n\t}\n\t\n\tcomponentWillUnmount() {\n\t\tActionStatusStore.removeChangeListener(this._onChange);\n\t}\n\t\n\t_onChange = () => {\n\t\t//Obtain refresh info\n\t\tlet refreshStatus = ActionStatusStore.getStatus(this.lastPendingAction);\n\t\tlet refreshEntityStatuses = ActionStatusStore.getEntityStatuses(this.lastPendingAction);\n\t\tlet refreshProgressPercentage = ActionStatusStore.getPercentageComplete(this.lastPendingAction);\n\t\t\n\t\t//The refresh is in progress\n\t\tif(refreshStatus == Status.PENDING){\n\t\t\tlet currentRefreshEntity = 'default';\n\t\t\tif(refreshEntityStatuses != null){\n\t\t\t\tfor(var entity in refreshEntityStatuses){\n\t\t\t\t\tif(refreshEntityStatuses[entity] == Status.PENDING){\n\t\t\t\t\t\tcurrentRefreshEntity = entity;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.setState({\n\t\t\t\tisLoading: true,\n\t\t\t\tisRefreshProgressVisible: true,\n\t\t\t\trefreshProgressPercentage: refreshProgressPercentage,\n\t\t\t\trefreshProgressDescription: this.progressDescriptions[currentRefreshEntity] + \" (\" + Math.round(refreshProgressPercentage) + \"%)\"\n\t\t\t});\n\t\t\n\t\t//The refresh has completed\t\n\t\t}else{\n\t\t\tthis.setState({\n\t\t\t\tisLoading: false,\n\t\t\t\tisRefreshProgressVisible: true,\n\t\t\t\trefreshProgressPercentage: refreshProgressPercentage,\n\t\t\t\trefreshProgressDescription: \"Complete (\" + Math.round(refreshProgressPercentage) + \"%)\"\n\t\t\t});\n\t\t\t\n\t\t\t//Keep the window open long enough to see completion message\n\t\t\tsetTimeout(this.closeRefreshProgressModal, 1000);\n\t\t\t\n\t\t\tif(this.lastPendingAction != null && this.completionMessages[this.lastPendingAction] != null){\n\t\t\t\tif(refreshStatus == Status.OK){\n\t\t\t\t\ttoastr.success(this.completionMessages[this.lastPendingAction][Status.OK]);\n\t\t\t\t}else if(refreshStatus == Status.ERROR){\n\t\t\t\t\ttoastr.error(this.completionMessages[this.lastPendingAction][Status.ERROR]);\n\t\t\t\t}else if(refreshStatus == Status.PARTIAL){\n\t\t\t\t\ttoastr.warning(this.completionMessages[this.lastPendingAction][Status.PARTIAL]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\trefreshCalls = () => {\n\t\tif(!this.state.isLoading){\n\t\t\tthis.lastPendingAction = Actions.CALLS_RELATED_REFRESH;\n\t\t\t//Access check is now built in by default\t\t\t\n\t\t\t//CallActions.doAfterAccessCheck('refreshCallsAndRelatedData');\n\t\t\tCallActions.refreshCallsAndRelatedData();\n\t\t}\n\t}\n\t\n\trefreshSalesData = () => {\n\t\tif(!this.state.isLoading){\n\t\t\tthis.lastPendingAction = Actions.SALES_REFRESH;\n\t\t\t//Obtain the full list of customers we need to have in our list \n\t\t\t//(call customers plus any associated with current orders)\n\t\t\t//[Note we now also include any missing customers residing in just the customer store (requested via sales)]\n\t\t\tlet arrCustomerIDs = _.union(CustomerStore.getCustomerIDs(), CallStore.getCallCustomerIDs(), OrderStore.getOrderCustomerIDs()); \n\t\t\t\n\t\t\t//Access check is built in by default\n\t\t\t//SalesActions.doAfterAccessCheck('refreshSalesData', [ProductStore.getLastRefresh(), ProductStore.getRefreshRetryIDs(), OrderStore.getPastOrdersLastRefresh(), OrderStore.getPastOrdersRefreshRetryIDs(), arrCustomerIDs]);\n\t\t\tSalesActions.refreshSalesData(ProductStore.getLastRefresh(), ProductStore.getRefreshRetryIDs(), OrderStore.getPastOrdersLastRefresh(), OrderStore.getPastOrdersRefreshRetryIDs(), arrCustomerIDs);\n\t\t}\n\t}\n\t\n\trefreshAll = () => {\n\t\tif(!this.state.isLoading){\n\t\t\tthis.lastPendingAction = Actions.ALL_REFRESH;\n\t\t\t//Obtain the full list of customers we need to have in our list \n\t\t\t//(call customers plus any associated with current orders)\n\t\t\t//[Note we now also include any missing customers residing in just the customer store (requested via sales)]\n\t\t\tlet arrCustomerIDs = _.union(CustomerStore.getCustomerIDs(), CallStore.getCallCustomerIDs(), OrderStore.getOrderCustomerIDs()); \n\t\t\t\n\t\t\t//Access check is built in by default\n\t\t\t//CommonActions.doAfterAccessCheck('refreshAll', [ProductStore.getLastRefresh(), ProductStore.getRefreshRetryIDs(), OrderStore.getPastOrdersLastRefresh(), OrderStore.getPastOrdersRefreshRetryIDs(), arrCustomerIDs]);\n\t\t\tCommonActions.refreshAll(ProductStore.getLastRefresh(), ProductStore.getRefreshRetryIDs(), OrderStore.getPastOrdersLastRefresh(), OrderStore.getPastOrdersRefreshRetryIDs(), arrCustomerIDs);\n\t\t}\n\t}\n\t\n\tcloseRefreshProgressModal = () => {\n\t\tthis.setState({isRefreshProgressVisible: false});\n\t}\n\t\n\trender() {\n\t\t//<h1>Refresh</h1>\n\t\t\n\t\tconst fromLocation = (this.props.location.state && this.props.location.state.from) ? this.props.location.state.from : null;\n\t\tlet blnBackButtonAvailable = (fromLocation != null);\n\t\t\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t{ blnBackButtonAvailable ?\n\t\t\t\t\t<div className=\"btn-bar\" role=\"group\">\n\t\t\t\t\t\t<Link className=\"btn btn-primary col-xs-12\" role=\"button\" to={fromLocation}>\n\t\t\t\t\t\t\t<i className=\"fa fa-arrow-left\"></i> Back to <strong>{ this.props.location.state.fromTitle }</strong>\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t</div> : null }\n\t\t\t\t\n\t\t\t\t{ this.state.isRefreshProgressVisible ? \n\t\t\t\t\t<ProgressModal \n\t\t\t\t\t\tpercentage={this.state.refreshProgressPercentage}\n\t\t\t\t\t\tdescription={this.state.refreshProgressDescription}\n\t\t\t\t\t\ttitle=\"Refresh Progress\"\n\t\t\t\t\t\tisLoading={this.state.isLoading} \n\t\t\t\t\t/> : null }\n\t\t\t\t\n\t\t\t\t<div className=\"list-group list-group-spaced\" style={{marginTop: (blnBackButtonAvailable ? '15px' : 0)}}>\n\t\t\t\t\t<button onClick={this.refreshAll} className=\"list-group-item\" disabled={this.state.isLoading}>\n\t\t\t\t\t\t<h4 className=\"list-group-item-heading\"><i className={\"fa fa-refresh\" + ((this.state.isLoading && this.lastPendingAction == Actions.ALL_REFRESH) ? \" fa-spin\" : \"\")}></i> Refresh All</h4>\n\t\t\t\t\t\t<p className=\"list-group-item-text\">Refresh data for performing calls and placing orders.</p>\n\t\t\t\t\t</button>\n\t\t\t\t\t<button onClick={this.refreshCalls} className=\"list-group-item\" disabled={this.state.isLoading}>\n\t\t\t\t\t\t<h4 className=\"list-group-item-heading\"><i className={\"fa fa-refresh\" + ((this.state.isLoading && this.lastPendingAction == Actions.CALLS_RELATED_REFRESH) ? \" fa-spin\" : \"\")}></i> Refresh Calls</h4>\n\t\t\t\t\t\t<p className=\"list-group-item-text\">Refresh data for performing calls, including customer data.</p>\n\t\t\t\t\t</button>\n\t\t\t\t\t<button onClick={this.refreshSalesData} className=\"list-group-item\" disabled={this.state.isLoading}>\n\t\t\t\t\t\t<h4 className=\"list-group-item-heading\"><i className={\"fa fa-refresh\" + ((this.state.isLoading && this.lastPendingAction == Actions.SALES_REFRESH) ? \" fa-spin\" : \"\")}></i> Refresh Sales Data</h4>\n\t\t\t\t\t\t<p className=\"list-group-item-text\">Refresh data for placing orders, including products/pricing.</p>\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default RefreshPage;","/*eslint-disable strict */ //Disabling check because we can't run strict mode due to need for global vars (jQuery) //\"use strict\";\n\nimport React from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Redirect,\n  Link,\n  Switch\n} from 'react-router-dom';\nimport Header from './common/header';\nimport HomePage from './homePage';\nimport NotFoundPage from './notFoundPage';\nimport LoginPage from './login/loginPage';\nimport PasswordResetPage from './login/passwordResetPage';\nimport CallsPage from './calls/callsPage';\nimport CustomerPage from './calls/customerPage';\nimport CustomerInfoPage from './calls/customerInfoPage';\nimport CustomerDetailsEditPage from './calls/customerDetailsEditPage';\nimport CustomerLocationsEditPage from './calls/customerLocationsEditPage';\nimport CustomerContactsEditPage from './calls/customerContactsEditPage';\nimport AuditsPage from './calls/auditsPage';\nimport AdminAuditsPage from './calls/adminAuditsPage';\nimport AuditPage from './calls/auditPage';\nimport FilesPage from './calls/filesPage';\nimport CommentsPage from './calls/commentsPage';\nimport SalesPage from './sales/salesPage';\nimport OrdersPage from './sales/ordersPage';\nimport OrderPage from './sales/orderPage';\nimport PastOrdersPage from './sales/pastOrdersPage';\nimport PastOrderPage from './sales/pastOrderPage';\nimport ProductsPage from './sales/productsPage';\nimport CustomersPage from './sales/customersPage';\nimport LibraryPage from './library/libraryPage';\nimport UserInfoPage from './user/userInfoPage';\nimport RefreshPage from './refreshPage';\n\nimport storage from '../stores/persistentStorage';\nstorage.init();\n\n\n/*storage.ready().then(() => {\n\tconsole.log('cordovaSQLiteDriver: ', storage.driver() == 'cordovaSQLiteDriver');\n\tconsole.log('localforage.INDEXEDDB: ', storage.driver() == storage.INDEXEDDB);\n\tconsole.log('localforage.WEBSQL: ', storage.driver() == storage.WEBSQL);\n\tconsole.log('localforage.LOCALSTORAGE: ', storage.driver() == storage.LOCALSTORAGE);\n}).catch((e) => {\n\tconsole.log(e);\n});*/\n\n//$ = jQuery = require('jquery');\nvar $ = require(\"jquery\");\nvar jQuery = $;\nwindow.$ = window.jQuery = $;\n\nrequire('bootstrap'); \n//Individually doesn't seem to work:\n//var pathToBootstrapJS = '../../node_modules/bootstrap/js/';\n//require(pathToBootstrapJS + 'transition.js');\n//require(pathToBootstrapJS + 'collapse.js');\n\n//$('.navbar').collapse();\n\n//Include the library needed for downsizing images before save (audit question photo inputs)\nrequire('../lib/canvasResize/jquery.exif');\nrequire('../lib/canvasResize/jquery.canvasResize');\n\nvar util = require('../util.js');\nutil.initApp(); //Do this here for now\n\n//A regular Route, that first checks whether user is authenticated and redirects to login if not\n//Current location object is also sent to redirect page (via login page props location state (user-defined)) for redirecting back\n//(See also React Router docs)\nconst PrivateRoute = ({ component, ...rest }) => (\n  <Route {...rest} render={props => (\n    util.isLoggedIn() ? (\n      React.createElement(component, props)\n    ) : (\n      <Redirect to={{\n        pathname: '/login',\n        state: { from: props.location }\n      }}/>\n    )\n  )}/>\n);\n\n//var Header = require('./common/header');\n\n\n//Login is the only public page currently\n//Default anything else (invalid paths) to Not Found\n//(Even though it's the \"not found\" page, redirect to login page if not logged in)\nconst App = () => (\n  <Router basename={window.location.pathname.split('mobile-sales')[0] + 'mobile-sales'}>\n    <div>\n      <Header/>\n      <div className=\"container-fluid\">\n\t      <Switch>\n\t      \t<Route path=\"/login\" exact component={LoginPage}/>\n\t      \t<Route path=\"/login/passwordreset\" component={PasswordResetPage}/>\n\t        <PrivateRoute path=\"/\" exact component={HomePage}/>\n\t        <PrivateRoute path=\"/calls\" exact component={CallsPage}/>\n\t        \t<PrivateRoute path=\"/:area(calls|sales/customers)/:id\" exact component={CustomerPage} />\n\t        \t\t<PrivateRoute path=\"/:area(calls|sales/customers)/:id/info\" component={CustomerInfoPage} />\n\t        \t\t<PrivateRoute path=\"/:area(calls|sales/customers)/:id/editdetails\" component={CustomerDetailsEditPage} />\n\t        \t\t<PrivateRoute path=\"/:area(calls|sales/customers)/:id/editlocations\" component={CustomerLocationsEditPage} />\n\t        \t\t<PrivateRoute path=\"/:area(calls|sales/customers)/:id/editcontacts\" component={CustomerContactsEditPage} />\n\t\t\t\t\t<PrivateRoute path=\"/:area(calls|sales/customers)/:id/files\" component={FilesPage} />\n\t\t\t\t\t<PrivateRoute path=\"/:area(calls|sales/customers)/:id/comments\" component={CommentsPage} />\n\t\t        \t<PrivateRoute path=\"/calls/:id/audits\" exact component={AuditsPage} />\n\t\t        \t\t<PrivateRoute path=\"/calls/:id/audits/:aid\" component={AuditPage} />\n\t\t        \t<PrivateRoute path=\"/calls/:id/adminaudits\" exact component={AdminAuditsPage} />\n\t\t\t\t\t\t<PrivateRoute path=\"/calls/:id/adminaudits/:aid/:aidx\" component={AuditPage} />\n\t\t\t<PrivateRoute path=\"/sales\" exact component={SalesPage}/>\n\t\t\t\t<PrivateRoute path=\"/sales/orders\" exact component={OrdersPage}/>\n\t\t\t\t\t<PrivateRoute path=\"/sales/orders/past\" exact component={PastOrdersPage}/>\n\t\t\t\t\t\t<PrivateRoute path=\"/sales/orders/past/:oid\" component={PastOrderPage}/>\n\t\t\t\t\t<PrivateRoute path=\"/sales/orders/:oid\" component={OrderPage}/>\n\t\t\t\t<PrivateRoute path=\"/sales/products\" exact component={ProductsPage}/>\n\t\t\t\t<PrivateRoute path=\"/sales/customers\" exact component={CustomersPage}/>\t\t\t\n\t        <PrivateRoute path=\"/library\" component={LibraryPage} />\n\t        <PrivateRoute path=\"/info\" component={UserInfoPage}/>\n\t        <PrivateRoute path=\"/refresh\" component={RefreshPage}/>\n\t        <PrivateRoute component={NotFoundPage}/>\n\t      </Switch>\n      </div>\n    </div>\n  </Router>\n);\n\n/*var App = React.createClass({\n\trender: function(){\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Header/>\n\t\t\t\t<div className=\"container-fluid\">\n\t\t\t\t\t<RouteHandler/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n});*/\n\nexport default App;","\"use strict\";\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport Splash from './components/splash';\r\nimport App from './components/app';\r\n\r\nvar util = require('./util.js');\r\nvar InitActions = require('./actions/initialisationActions');\r\n\r\nlet preloadImages = [util.assetsUrl + \"img/background.jpg\"];\r\nReactDOM.render(<Splash preloadImages={preloadImages} />, document.getElementById('app'));\r\n\r\nInitActions.initApp().catch(() => {\r\n\t//Let's silently catch any promise rejections (although we're not currently rejecting, so this won't be called)\r\n}).then(() => {\r\n\tdocument.getElementById('appbg').classList.remove(\"apploading\"); \r\n\tReactDOM.render(<App />, document.getElementById('app'));\r\n});\r\n"],"sourceRoot":""}